/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.140.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// CardStatusReasonCode The reason for the card status  Code | Description --- | --- NEW | Card activated REQ | Requested by you INA | Dormant UNK | Invalid shipping address NEG | Negative account balance REV | Account under review SUS | Suspicious activity OUT | Activity outside program parameters FRD | Confirmed fraud MAT | Matched with an OFAC list LOS | Card reported lost CLO | Card was cloned COM | Account or card was compromised TMP | Awaiting customer confirmation PRC | Initiated by Processor ISS | Initiated by Issuer EXP | Card expired KYC | Failed KYC INF | Information was validated ACT | Account activity was validated AUX | Initiated by a third party PIN | PIN try limit reached STO | Card reported stolen ADD | Address issue NAM | Name issue SSN | SSN issue DOB | DOB issue EML | Email issue PHO | Phone issue FUL | Account/fulfillment mismatch OTH | Other
type CardStatusReasonCode string

// List of card_status_reason_code
const (
	CARDSTATUSREASONCODE_ACT CardStatusReasonCode = "ACT"
	CARDSTATUSREASONCODE_ADD CardStatusReasonCode = "ADD"
	CARDSTATUSREASONCODE_AUX CardStatusReasonCode = "AUX"
	CARDSTATUSREASONCODE_CLO CardStatusReasonCode = "CLO"
	CARDSTATUSREASONCODE_COM CardStatusReasonCode = "COM"
	CARDSTATUSREASONCODE_DOB CardStatusReasonCode = "DOB"
	CARDSTATUSREASONCODE_EML CardStatusReasonCode = "EML"
	CARDSTATUSREASONCODE_EXP CardStatusReasonCode = "EXP"
	CARDSTATUSREASONCODE_FRD CardStatusReasonCode = "FRD"
	CARDSTATUSREASONCODE_FUL CardStatusReasonCode = "FUL"
	CARDSTATUSREASONCODE_INA CardStatusReasonCode = "INA"
	CARDSTATUSREASONCODE_INF CardStatusReasonCode = "INF"
	CARDSTATUSREASONCODE_ISS CardStatusReasonCode = "ISS"
	CARDSTATUSREASONCODE_KYC CardStatusReasonCode = "KYC"
	CARDSTATUSREASONCODE_LOS CardStatusReasonCode = "LOS"
	CARDSTATUSREASONCODE_MAT CardStatusReasonCode = "MAT"
	CARDSTATUSREASONCODE_NAM CardStatusReasonCode = "NAM"
	CARDSTATUSREASONCODE_NEG CardStatusReasonCode = "NEG"
	CARDSTATUSREASONCODE_NEW CardStatusReasonCode = "NEW"
	CARDSTATUSREASONCODE_OTH CardStatusReasonCode = "OTH"
	CARDSTATUSREASONCODE_OUT CardStatusReasonCode = "OUT"
	CARDSTATUSREASONCODE_PHO CardStatusReasonCode = "PHO"
	CARDSTATUSREASONCODE_PIN CardStatusReasonCode = "PIN"
	CARDSTATUSREASONCODE_PRC CardStatusReasonCode = "PRC"
	CARDSTATUSREASONCODE_REQ CardStatusReasonCode = "REQ"
	CARDSTATUSREASONCODE_REV CardStatusReasonCode = "REV"
	CARDSTATUSREASONCODE_SSN CardStatusReasonCode = "SSN"
	CARDSTATUSREASONCODE_STO CardStatusReasonCode = "STO"
	CARDSTATUSREASONCODE_SUS CardStatusReasonCode = "SUS"
	CARDSTATUSREASONCODE_TMP CardStatusReasonCode = "TMP"
	CARDSTATUSREASONCODE_UNK CardStatusReasonCode = "UNK"
)

// All allowed values of CardStatusReasonCode enum
var AllowedCardStatusReasonCodeEnumValues = []CardStatusReasonCode{
	"ACT",
	"ADD",
	"AUX",
	"CLO",
	"COM",
	"DOB",
	"EML",
	"EXP",
	"FRD",
	"FUL",
	"INA",
	"INF",
	"ISS",
	"KYC",
	"LOS",
	"MAT",
	"NAM",
	"NEG",
	"NEW",
	"OTH",
	"OUT",
	"PHO",
	"PIN",
	"PRC",
	"REQ",
	"REV",
	"SSN",
	"STO",
	"SUS",
	"TMP",
	"UNK",
}

func (v *CardStatusReasonCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CardStatusReasonCode(value)
	for _, existing := range AllowedCardStatusReasonCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CardStatusReasonCode", value)
}

// NewCardStatusReasonCodeFromValue returns a pointer to a valid CardStatusReasonCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCardStatusReasonCodeFromValue(v string) (*CardStatusReasonCode, error) {
	ev := CardStatusReasonCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CardStatusReasonCode: valid values are %v", v, AllowedCardStatusReasonCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CardStatusReasonCode) IsValid() bool {
	for _, existing := range AllowedCardStatusReasonCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to card_status_reason_code value
func (v CardStatusReasonCode) Ptr() *CardStatusReasonCode {
	return &v
}

type NullableCardStatusReasonCode struct {
	value *CardStatusReasonCode
	isSet bool
}

func (v NullableCardStatusReasonCode) Get() *CardStatusReasonCode {
	return v.value
}

func (v *NullableCardStatusReasonCode) Set(val *CardStatusReasonCode) {
	v.value = val
	v.isSet = true
}

func (v NullableCardStatusReasonCode) IsSet() bool {
	return v.isSet
}

func (v *NullableCardStatusReasonCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCardStatusReasonCode(val *CardStatusReasonCode) *NullableCardStatusReasonCode {
	return &NullableCardStatusReasonCode{value: val, isSet: true}
}

func (v NullableCardStatusReasonCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCardStatusReasonCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
