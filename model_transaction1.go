/*
Synctera API

<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.32.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// Transaction1 - struct for Transaction1
type Transaction1 struct {
	AchTransaction *AchTransaction
	CardTransaction *CardTransaction
	CheckTransaction *CheckTransaction
	ExternalCardTransaction *ExternalCardTransaction
	InternalTransferTransaction *InternalTransferTransaction
	WireTransaction *WireTransaction
}

// AchTransactionAsTransaction1 is a convenience function that returns AchTransaction wrapped in Transaction1
func AchTransactionAsTransaction1(v *AchTransaction) Transaction1 {
	return Transaction1{
		AchTransaction: v,
	}
}

// CardTransactionAsTransaction1 is a convenience function that returns CardTransaction wrapped in Transaction1
func CardTransactionAsTransaction1(v *CardTransaction) Transaction1 {
	return Transaction1{
		CardTransaction: v,
	}
}

// CheckTransactionAsTransaction1 is a convenience function that returns CheckTransaction wrapped in Transaction1
func CheckTransactionAsTransaction1(v *CheckTransaction) Transaction1 {
	return Transaction1{
		CheckTransaction: v,
	}
}

// ExternalCardTransactionAsTransaction1 is a convenience function that returns ExternalCardTransaction wrapped in Transaction1
func ExternalCardTransactionAsTransaction1(v *ExternalCardTransaction) Transaction1 {
	return Transaction1{
		ExternalCardTransaction: v,
	}
}

// InternalTransferTransactionAsTransaction1 is a convenience function that returns InternalTransferTransaction wrapped in Transaction1
func InternalTransferTransactionAsTransaction1(v *InternalTransferTransaction) Transaction1 {
	return Transaction1{
		InternalTransferTransaction: v,
	}
}

// WireTransactionAsTransaction1 is a convenience function that returns WireTransaction wrapped in Transaction1
func WireTransactionAsTransaction1(v *WireTransaction) Transaction1 {
	return Transaction1{
		WireTransaction: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *Transaction1) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("Failed to unmarshal JSON into map for the discriminator lookup.")
	}

	// check if the discriminator value is 'ACH'
	if jsonDict["type"] == "ACH" {
		// try to unmarshal JSON data into AchTransaction
		err = json.Unmarshal(data, &dst.AchTransaction)
		if err == nil {
			return nil // data stored in dst.AchTransaction, return on the first match
		} else {
			dst.AchTransaction = nil
			return fmt.Errorf("Failed to unmarshal Transaction1 as AchTransaction: %s", err.Error())
		}
	}

	// check if the discriminator value is 'CARD'
	if jsonDict["type"] == "CARD" {
		// try to unmarshal JSON data into CardTransaction
		err = json.Unmarshal(data, &dst.CardTransaction)
		if err == nil {
			return nil // data stored in dst.CardTransaction, return on the first match
		} else {
			dst.CardTransaction = nil
			return fmt.Errorf("Failed to unmarshal Transaction1 as CardTransaction: %s", err.Error())
		}
	}

	// check if the discriminator value is 'CHECK'
	if jsonDict["type"] == "CHECK" {
		// try to unmarshal JSON data into CheckTransaction
		err = json.Unmarshal(data, &dst.CheckTransaction)
		if err == nil {
			return nil // data stored in dst.CheckTransaction, return on the first match
		} else {
			dst.CheckTransaction = nil
			return fmt.Errorf("Failed to unmarshal Transaction1 as CheckTransaction: %s", err.Error())
		}
	}

	// check if the discriminator value is 'EXTERNAL_CARD'
	if jsonDict["type"] == "EXTERNAL_CARD" {
		// try to unmarshal JSON data into ExternalCardTransaction
		err = json.Unmarshal(data, &dst.ExternalCardTransaction)
		if err == nil {
			return nil // data stored in dst.ExternalCardTransaction, return on the first match
		} else {
			dst.ExternalCardTransaction = nil
			return fmt.Errorf("Failed to unmarshal Transaction1 as ExternalCardTransaction: %s", err.Error())
		}
	}

	// check if the discriminator value is 'INTERNAL_TRANSFER'
	if jsonDict["type"] == "INTERNAL_TRANSFER" {
		// try to unmarshal JSON data into InternalTransferTransaction
		err = json.Unmarshal(data, &dst.InternalTransferTransaction)
		if err == nil {
			return nil // data stored in dst.InternalTransferTransaction, return on the first match
		} else {
			dst.InternalTransferTransaction = nil
			return fmt.Errorf("Failed to unmarshal Transaction1 as InternalTransferTransaction: %s", err.Error())
		}
	}

	// check if the discriminator value is 'WIRE'
	if jsonDict["type"] == "WIRE" {
		// try to unmarshal JSON data into WireTransaction
		err = json.Unmarshal(data, &dst.WireTransaction)
		if err == nil {
			return nil // data stored in dst.WireTransaction, return on the first match
		} else {
			dst.WireTransaction = nil
			return fmt.Errorf("Failed to unmarshal Transaction1 as WireTransaction: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ach_transaction'
	if jsonDict["type"] == "ach_transaction" {
		// try to unmarshal JSON data into AchTransaction
		err = json.Unmarshal(data, &dst.AchTransaction)
		if err == nil {
			return nil // data stored in dst.AchTransaction, return on the first match
		} else {
			dst.AchTransaction = nil
			return fmt.Errorf("Failed to unmarshal Transaction1 as AchTransaction: %s", err.Error())
		}
	}

	// check if the discriminator value is 'card_transaction'
	if jsonDict["type"] == "card_transaction" {
		// try to unmarshal JSON data into CardTransaction
		err = json.Unmarshal(data, &dst.CardTransaction)
		if err == nil {
			return nil // data stored in dst.CardTransaction, return on the first match
		} else {
			dst.CardTransaction = nil
			return fmt.Errorf("Failed to unmarshal Transaction1 as CardTransaction: %s", err.Error())
		}
	}

	// check if the discriminator value is 'check_transaction'
	if jsonDict["type"] == "check_transaction" {
		// try to unmarshal JSON data into CheckTransaction
		err = json.Unmarshal(data, &dst.CheckTransaction)
		if err == nil {
			return nil // data stored in dst.CheckTransaction, return on the first match
		} else {
			dst.CheckTransaction = nil
			return fmt.Errorf("Failed to unmarshal Transaction1 as CheckTransaction: %s", err.Error())
		}
	}

	// check if the discriminator value is 'external_card_transaction'
	if jsonDict["type"] == "external_card_transaction" {
		// try to unmarshal JSON data into ExternalCardTransaction
		err = json.Unmarshal(data, &dst.ExternalCardTransaction)
		if err == nil {
			return nil // data stored in dst.ExternalCardTransaction, return on the first match
		} else {
			dst.ExternalCardTransaction = nil
			return fmt.Errorf("Failed to unmarshal Transaction1 as ExternalCardTransaction: %s", err.Error())
		}
	}

	// check if the discriminator value is 'internal_transfer_transaction'
	if jsonDict["type"] == "internal_transfer_transaction" {
		// try to unmarshal JSON data into InternalTransferTransaction
		err = json.Unmarshal(data, &dst.InternalTransferTransaction)
		if err == nil {
			return nil // data stored in dst.InternalTransferTransaction, return on the first match
		} else {
			dst.InternalTransferTransaction = nil
			return fmt.Errorf("Failed to unmarshal Transaction1 as InternalTransferTransaction: %s", err.Error())
		}
	}

	// check if the discriminator value is 'wire_transaction'
	if jsonDict["type"] == "wire_transaction" {
		// try to unmarshal JSON data into WireTransaction
		err = json.Unmarshal(data, &dst.WireTransaction)
		if err == nil {
			return nil // data stored in dst.WireTransaction, return on the first match
		} else {
			dst.WireTransaction = nil
			return fmt.Errorf("Failed to unmarshal Transaction1 as WireTransaction: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Transaction1) MarshalJSON() ([]byte, error) {
	if src.AchTransaction != nil {
		return json.Marshal(&src.AchTransaction)
	}

	if src.CardTransaction != nil {
		return json.Marshal(&src.CardTransaction)
	}

	if src.CheckTransaction != nil {
		return json.Marshal(&src.CheckTransaction)
	}

	if src.ExternalCardTransaction != nil {
		return json.Marshal(&src.ExternalCardTransaction)
	}

	if src.InternalTransferTransaction != nil {
		return json.Marshal(&src.InternalTransferTransaction)
	}

	if src.WireTransaction != nil {
		return json.Marshal(&src.WireTransaction)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Transaction1) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AchTransaction != nil {
		return obj.AchTransaction
	}

	if obj.CardTransaction != nil {
		return obj.CardTransaction
	}

	if obj.CheckTransaction != nil {
		return obj.CheckTransaction
	}

	if obj.ExternalCardTransaction != nil {
		return obj.ExternalCardTransaction
	}

	if obj.InternalTransferTransaction != nil {
		return obj.InternalTransferTransaction
	}

	if obj.WireTransaction != nil {
		return obj.WireTransaction
	}

	// all schemas are nil
	return nil
}

type NullableTransaction1 struct {
	value *Transaction1
	isSet bool
}

func (v NullableTransaction1) Get() *Transaction1 {
	return v.value
}

func (v *NullableTransaction1) Set(val *Transaction1) {
	v.value = val
	v.isSet = true
}

func (v NullableTransaction1) IsSet() bool {
	return v.isSet
}

func (v *NullableTransaction1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransaction1(val *Transaction1) *NullableTransaction1 {
	return &NullableTransaction1{value: val, isSet: true}
}

func (v NullableTransaction1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransaction1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


