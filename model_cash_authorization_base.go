/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.140.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CashAuthorizationBase type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CashAuthorizationBase{}

// CashAuthorizationBase struct for CashAuthorizationBase
type CashAuthorizationBase struct {
	// Transfer amount in cents
	Amount            int64                 `json:"amount"`
	AuthorizationType CashAuthorizationType `json:"authorization_type"`
	// The UUID of the Synctera account resource that is the destination of the transfer.
	DestinationAccountId string `json:"destination_account_id"`
	// The date the cash order was placed with cash distribution provider
	OrderDate string `json:"order_date"`
}

type _CashAuthorizationBase CashAuthorizationBase

// NewCashAuthorizationBase instantiates a new CashAuthorizationBase object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCashAuthorizationBase(amount int64, authorizationType CashAuthorizationType, destinationAccountId string, orderDate string) *CashAuthorizationBase {
	this := CashAuthorizationBase{}
	this.Amount = amount
	this.AuthorizationType = authorizationType
	this.DestinationAccountId = destinationAccountId
	this.OrderDate = orderDate
	return &this
}

// NewCashAuthorizationBaseWithDefaults instantiates a new CashAuthorizationBase object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCashAuthorizationBaseWithDefaults() *CashAuthorizationBase {
	this := CashAuthorizationBase{}
	return &this
}

// GetAmount returns the Amount field value
func (o *CashAuthorizationBase) GetAmount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *CashAuthorizationBase) GetAmountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *CashAuthorizationBase) SetAmount(v int64) {
	o.Amount = v
}

// GetAuthorizationType returns the AuthorizationType field value
func (o *CashAuthorizationBase) GetAuthorizationType() CashAuthorizationType {
	if o == nil {
		var ret CashAuthorizationType
		return ret
	}

	return o.AuthorizationType
}

// GetAuthorizationTypeOk returns a tuple with the AuthorizationType field value
// and a boolean to check if the value has been set.
func (o *CashAuthorizationBase) GetAuthorizationTypeOk() (*CashAuthorizationType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuthorizationType, true
}

// SetAuthorizationType sets field value
func (o *CashAuthorizationBase) SetAuthorizationType(v CashAuthorizationType) {
	o.AuthorizationType = v
}

// GetDestinationAccountId returns the DestinationAccountId field value
func (o *CashAuthorizationBase) GetDestinationAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DestinationAccountId
}

// GetDestinationAccountIdOk returns a tuple with the DestinationAccountId field value
// and a boolean to check if the value has been set.
func (o *CashAuthorizationBase) GetDestinationAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DestinationAccountId, true
}

// SetDestinationAccountId sets field value
func (o *CashAuthorizationBase) SetDestinationAccountId(v string) {
	o.DestinationAccountId = v
}

// GetOrderDate returns the OrderDate field value
func (o *CashAuthorizationBase) GetOrderDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrderDate
}

// GetOrderDateOk returns a tuple with the OrderDate field value
// and a boolean to check if the value has been set.
func (o *CashAuthorizationBase) GetOrderDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrderDate, true
}

// SetOrderDate sets field value
func (o *CashAuthorizationBase) SetOrderDate(v string) {
	o.OrderDate = v
}

func (o CashAuthorizationBase) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CashAuthorizationBase) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["amount"] = o.Amount
	toSerialize["authorization_type"] = o.AuthorizationType
	toSerialize["destination_account_id"] = o.DestinationAccountId
	toSerialize["order_date"] = o.OrderDate
	return toSerialize, nil
}

func (o *CashAuthorizationBase) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"amount",
		"authorization_type",
		"destination_account_id",
		"order_date",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCashAuthorizationBase := _CashAuthorizationBase{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCashAuthorizationBase)

	if err != nil {
		return err
	}

	*o = CashAuthorizationBase(varCashAuthorizationBase)

	return err
}

type NullableCashAuthorizationBase struct {
	value *CashAuthorizationBase
	isSet bool
}

func (v NullableCashAuthorizationBase) Get() *CashAuthorizationBase {
	return v.value
}

func (v *NullableCashAuthorizationBase) Set(val *CashAuthorizationBase) {
	v.value = val
	v.isSet = true
}

func (v NullableCashAuthorizationBase) IsSet() bool {
	return v.isSet
}

func (v *NullableCashAuthorizationBase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCashAuthorizationBase(val *CashAuthorizationBase) *NullableCashAuthorizationBase {
	return &NullableCashAuthorizationBase{value: val, isSet: true}
}

func (v NullableCashAuthorizationBase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCashAuthorizationBase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
