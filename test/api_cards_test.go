/*
Synctera API

Testing CardsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"testing"

	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_synctera_client_CardsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test CardsAPIService ActivateCard", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.CardsAPI.ActivateCard(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CardsAPIService CreateCardImage", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.CardsAPI.CreateCardImage(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CardsAPIService CreateGateway", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.CardsAPI.CreateGateway(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CardsAPIService GetCard", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var cardId string

		resp, httpRes, err := apiClient.CardsAPI.GetCard(context.Background(), cardId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CardsAPIService GetCardBarcode", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var cardId string

		resp, httpRes, err := apiClient.CardsAPI.GetCardBarcode(context.Background(), cardId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CardsAPIService GetCardImageData", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var cardImageId string

		resp, httpRes, err := apiClient.CardsAPI.GetCardImageData(context.Background(), cardImageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CardsAPIService GetCardImageDetails", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var cardImageId string

		resp, httpRes, err := apiClient.CardsAPI.GetCardImageDetails(context.Background(), cardImageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CardsAPIService GetCardWidgetURL", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.CardsAPI.GetCardWidgetURL(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CardsAPIService GetClientAccessToken", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var cardId string

		resp, httpRes, err := apiClient.CardsAPI.GetClientAccessToken(context.Background(), cardId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CardsAPIService GetClientSingleUseToken", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.CardsAPI.GetClientSingleUseToken(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CardsAPIService GetGateway", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var gatewayId string

		resp, httpRes, err := apiClient.CardsAPI.GetGateway(context.Background(), gatewayId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CardsAPIService IssueCard", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.CardsAPI.IssueCard(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CardsAPIService ListCardImageDetails", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.CardsAPI.ListCardImageDetails(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CardsAPIService ListCardProducts", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.CardsAPI.ListCardProducts(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CardsAPIService ListCards", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.CardsAPI.ListCards(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CardsAPIService ListChanges", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var cardId string

		resp, httpRes, err := apiClient.CardsAPI.ListChanges(context.Background(), cardId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CardsAPIService ListGateways", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.CardsAPI.ListGateways(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CardsAPIService UpdateCard", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var cardId string

		resp, httpRes, err := apiClient.CardsAPI.UpdateCard(context.Background(), cardId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CardsAPIService UpdateCardImageDetails", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var cardImageId string

		resp, httpRes, err := apiClient.CardsAPI.UpdateCardImageDetails(context.Background(), cardImageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CardsAPIService UpdateGateway", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var gatewayId string

		resp, httpRes, err := apiClient.CardsAPI.UpdateGateway(context.Background(), gatewayId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CardsAPIService UploadCardImageData", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var cardImageId string

		resp, httpRes, err := apiClient.CardsAPI.UploadCardImageData(context.Background(), cardImageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
