/*
Synctera API

Testing ExternalCardsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_ExternalCardsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ExternalCardsAPIService Authenticate3DS", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ExternalCardsAPI.Authenticate3DS(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExternalCardsAPIService CreateExternalCardFromToken", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ExternalCardsAPI.CreateExternalCardFromToken(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExternalCardsAPIService CreateExternalCardTransfer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ExternalCardsAPI.CreateExternalCardTransfer(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExternalCardsAPIService CreateExternalCardTransferReversal", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var transferId string

		resp, httpRes, err := apiClient.ExternalCardsAPI.CreateExternalCardTransferReversal(context.Background(), transferId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExternalCardsAPIService DeleteExternalCard", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var externalCardId string

		resp, httpRes, err := apiClient.ExternalCardsAPI.DeleteExternalCard(context.Background(), externalCardId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExternalCardsAPIService GetExternalCard", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var externalCardId string

		resp, httpRes, err := apiClient.ExternalCardsAPI.GetExternalCard(context.Background(), externalCardId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExternalCardsAPIService GetExternalCardTransfer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var transferId string

		resp, httpRes, err := apiClient.ExternalCardsAPI.GetExternalCardTransfer(context.Background(), transferId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExternalCardsAPIService Initialize3DS", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ExternalCardsAPI.Initialize3DS(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExternalCardsAPIService ListExternalCardTransfers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ExternalCardsAPI.ListExternalCardTransfers(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExternalCardsAPIService ListExternalCards", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ExternalCardsAPI.ListExternalCards(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExternalCardsAPIService Lookup3DS", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ExternalCardsAPI.Lookup3DS(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExternalCardsAPIService UpdateExternalCard", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var externalCardId string

		resp, httpRes, err := apiClient.ExternalCardsAPI.UpdateExternalCard(context.Background(), externalCardId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
