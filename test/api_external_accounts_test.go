/*
Synctera API

Testing ExternalAccountsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_ExternalAccountsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ExternalAccountsAPIService AddExternalAccounts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ExternalAccountsAPI.AddExternalAccounts(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExternalAccountsAPIService AddVendorExternalAccounts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ExternalAccountsAPI.AddVendorExternalAccounts(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExternalAccountsAPIService CreateAccessToken", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ExternalAccountsAPI.CreateAccessToken(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExternalAccountsAPIService CreateVerificationLinkToken", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ExternalAccountsAPI.CreateVerificationLinkToken(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExternalAccountsAPIService DeleteExternalAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var externalAccountId string

		resp, httpRes, err := apiClient.ExternalAccountsAPI.DeleteExternalAccount(context.Background(), externalAccountId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExternalAccountsAPIService ExternalAccountRefreshTransactions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var externalAccountId string

		resp, httpRes, err := apiClient.ExternalAccountsAPI.ExternalAccountRefreshTransactions(context.Background(), externalAccountId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExternalAccountsAPIService GetExternalAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var externalAccountId string

		resp, httpRes, err := apiClient.ExternalAccountsAPI.GetExternalAccount(context.Background(), externalAccountId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExternalAccountsAPIService GetExternalAccountBalance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var externalAccountId string

		resp, httpRes, err := apiClient.ExternalAccountsAPI.GetExternalAccountBalance(context.Background(), externalAccountId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExternalAccountsAPIService GetExternalAccountTransactions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var externalAccountId string

		resp, httpRes, err := apiClient.ExternalAccountsAPI.GetExternalAccountTransactions(context.Background(), externalAccountId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExternalAccountsAPIService ListExternalAccounts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ExternalAccountsAPI.ListExternalAccounts(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExternalAccountsAPIService SyncVendorExternalAccounts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ExternalAccountsAPI.SyncVendorExternalAccounts(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExternalAccountsAPIService UpdateExternalAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var externalAccountId string

		resp, httpRes, err := apiClient.ExternalAccountsAPI.UpdateExternalAccount(context.Background(), externalAccountId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
