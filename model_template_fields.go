/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.140.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// TemplateFields - struct for TemplateFields
type TemplateFields struct {
	TemplateFieldsChargeSecured   *TemplateFieldsChargeSecured
	TemplateFieldsChargeUnsecured *TemplateFieldsChargeUnsecured
	TemplateFieldsDepository      *TemplateFieldsDepository
	TemplateFieldsGeneralLedger   *TemplateFieldsGeneralLedger
	TemplateFieldsLineOfCredit    *TemplateFieldsLineOfCredit
}

// TemplateFieldsChargeSecuredAsTemplateFields is a convenience function that returns TemplateFieldsChargeSecured wrapped in TemplateFields
func TemplateFieldsChargeSecuredAsTemplateFields(v *TemplateFieldsChargeSecured) TemplateFields {
	return TemplateFields{
		TemplateFieldsChargeSecured: v,
	}
}

// TemplateFieldsChargeUnsecuredAsTemplateFields is a convenience function that returns TemplateFieldsChargeUnsecured wrapped in TemplateFields
func TemplateFieldsChargeUnsecuredAsTemplateFields(v *TemplateFieldsChargeUnsecured) TemplateFields {
	return TemplateFields{
		TemplateFieldsChargeUnsecured: v,
	}
}

// TemplateFieldsDepositoryAsTemplateFields is a convenience function that returns TemplateFieldsDepository wrapped in TemplateFields
func TemplateFieldsDepositoryAsTemplateFields(v *TemplateFieldsDepository) TemplateFields {
	return TemplateFields{
		TemplateFieldsDepository: v,
	}
}

// TemplateFieldsGeneralLedgerAsTemplateFields is a convenience function that returns TemplateFieldsGeneralLedger wrapped in TemplateFields
func TemplateFieldsGeneralLedgerAsTemplateFields(v *TemplateFieldsGeneralLedger) TemplateFields {
	return TemplateFields{
		TemplateFieldsGeneralLedger: v,
	}
}

// TemplateFieldsLineOfCreditAsTemplateFields is a convenience function that returns TemplateFieldsLineOfCredit wrapped in TemplateFields
func TemplateFieldsLineOfCreditAsTemplateFields(v *TemplateFieldsLineOfCredit) TemplateFields {
	return TemplateFields{
		TemplateFieldsLineOfCredit: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *TemplateFields) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'CHARGE_SECURED'
	if jsonDict["account_type"] == "CHARGE_SECURED" {
		// try to unmarshal JSON data into TemplateFieldsChargeSecured
		err = json.Unmarshal(data, &dst.TemplateFieldsChargeSecured)
		if err == nil {
			return nil // data stored in dst.TemplateFieldsChargeSecured, return on the first match
		} else {
			dst.TemplateFieldsChargeSecured = nil
			return fmt.Errorf("failed to unmarshal TemplateFields as TemplateFieldsChargeSecured: %s", err.Error())
		}
	}

	// check if the discriminator value is 'CHARGE_UNSECURED'
	if jsonDict["account_type"] == "CHARGE_UNSECURED" {
		// try to unmarshal JSON data into TemplateFieldsChargeUnsecured
		err = json.Unmarshal(data, &dst.TemplateFieldsChargeUnsecured)
		if err == nil {
			return nil // data stored in dst.TemplateFieldsChargeUnsecured, return on the first match
		} else {
			dst.TemplateFieldsChargeUnsecured = nil
			return fmt.Errorf("failed to unmarshal TemplateFields as TemplateFieldsChargeUnsecured: %s", err.Error())
		}
	}

	// check if the discriminator value is 'CHECKING'
	if jsonDict["account_type"] == "CHECKING" {
		// try to unmarshal JSON data into TemplateFieldsDepository
		err = json.Unmarshal(data, &dst.TemplateFieldsDepository)
		if err == nil {
			return nil // data stored in dst.TemplateFieldsDepository, return on the first match
		} else {
			dst.TemplateFieldsDepository = nil
			return fmt.Errorf("failed to unmarshal TemplateFields as TemplateFieldsDepository: %s", err.Error())
		}
	}

	// check if the discriminator value is 'GENERAL_LEDGER'
	if jsonDict["account_type"] == "GENERAL_LEDGER" {
		// try to unmarshal JSON data into TemplateFieldsGeneralLedger
		err = json.Unmarshal(data, &dst.TemplateFieldsGeneralLedger)
		if err == nil {
			return nil // data stored in dst.TemplateFieldsGeneralLedger, return on the first match
		} else {
			dst.TemplateFieldsGeneralLedger = nil
			return fmt.Errorf("failed to unmarshal TemplateFields as TemplateFieldsGeneralLedger: %s", err.Error())
		}
	}

	// check if the discriminator value is 'LINE_OF_CREDIT'
	if jsonDict["account_type"] == "LINE_OF_CREDIT" {
		// try to unmarshal JSON data into TemplateFieldsLineOfCredit
		err = json.Unmarshal(data, &dst.TemplateFieldsLineOfCredit)
		if err == nil {
			return nil // data stored in dst.TemplateFieldsLineOfCredit, return on the first match
		} else {
			dst.TemplateFieldsLineOfCredit = nil
			return fmt.Errorf("failed to unmarshal TemplateFields as TemplateFieldsLineOfCredit: %s", err.Error())
		}
	}

	// check if the discriminator value is 'SAVING'
	if jsonDict["account_type"] == "SAVING" {
		// try to unmarshal JSON data into TemplateFieldsDepository
		err = json.Unmarshal(data, &dst.TemplateFieldsDepository)
		if err == nil {
			return nil // data stored in dst.TemplateFieldsDepository, return on the first match
		} else {
			dst.TemplateFieldsDepository = nil
			return fmt.Errorf("failed to unmarshal TemplateFields as TemplateFieldsDepository: %s", err.Error())
		}
	}

	// check if the discriminator value is 'template_fields_charge_secured'
	if jsonDict["account_type"] == "template_fields_charge_secured" {
		// try to unmarshal JSON data into TemplateFieldsChargeSecured
		err = json.Unmarshal(data, &dst.TemplateFieldsChargeSecured)
		if err == nil {
			return nil // data stored in dst.TemplateFieldsChargeSecured, return on the first match
		} else {
			dst.TemplateFieldsChargeSecured = nil
			return fmt.Errorf("failed to unmarshal TemplateFields as TemplateFieldsChargeSecured: %s", err.Error())
		}
	}

	// check if the discriminator value is 'template_fields_charge_unsecured'
	if jsonDict["account_type"] == "template_fields_charge_unsecured" {
		// try to unmarshal JSON data into TemplateFieldsChargeUnsecured
		err = json.Unmarshal(data, &dst.TemplateFieldsChargeUnsecured)
		if err == nil {
			return nil // data stored in dst.TemplateFieldsChargeUnsecured, return on the first match
		} else {
			dst.TemplateFieldsChargeUnsecured = nil
			return fmt.Errorf("failed to unmarshal TemplateFields as TemplateFieldsChargeUnsecured: %s", err.Error())
		}
	}

	// check if the discriminator value is 'template_fields_depository'
	if jsonDict["account_type"] == "template_fields_depository" {
		// try to unmarshal JSON data into TemplateFieldsDepository
		err = json.Unmarshal(data, &dst.TemplateFieldsDepository)
		if err == nil {
			return nil // data stored in dst.TemplateFieldsDepository, return on the first match
		} else {
			dst.TemplateFieldsDepository = nil
			return fmt.Errorf("failed to unmarshal TemplateFields as TemplateFieldsDepository: %s", err.Error())
		}
	}

	// check if the discriminator value is 'template_fields_general_ledger'
	if jsonDict["account_type"] == "template_fields_general_ledger" {
		// try to unmarshal JSON data into TemplateFieldsGeneralLedger
		err = json.Unmarshal(data, &dst.TemplateFieldsGeneralLedger)
		if err == nil {
			return nil // data stored in dst.TemplateFieldsGeneralLedger, return on the first match
		} else {
			dst.TemplateFieldsGeneralLedger = nil
			return fmt.Errorf("failed to unmarshal TemplateFields as TemplateFieldsGeneralLedger: %s", err.Error())
		}
	}

	// check if the discriminator value is 'template_fields_line_of_credit'
	if jsonDict["account_type"] == "template_fields_line_of_credit" {
		// try to unmarshal JSON data into TemplateFieldsLineOfCredit
		err = json.Unmarshal(data, &dst.TemplateFieldsLineOfCredit)
		if err == nil {
			return nil // data stored in dst.TemplateFieldsLineOfCredit, return on the first match
		} else {
			dst.TemplateFieldsLineOfCredit = nil
			return fmt.Errorf("failed to unmarshal TemplateFields as TemplateFieldsLineOfCredit: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src TemplateFields) MarshalJSON() ([]byte, error) {
	if src.TemplateFieldsChargeSecured != nil {
		return json.Marshal(&src.TemplateFieldsChargeSecured)
	}

	if src.TemplateFieldsChargeUnsecured != nil {
		return json.Marshal(&src.TemplateFieldsChargeUnsecured)
	}

	if src.TemplateFieldsDepository != nil {
		return json.Marshal(&src.TemplateFieldsDepository)
	}

	if src.TemplateFieldsGeneralLedger != nil {
		return json.Marshal(&src.TemplateFieldsGeneralLedger)
	}

	if src.TemplateFieldsLineOfCredit != nil {
		return json.Marshal(&src.TemplateFieldsLineOfCredit)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *TemplateFields) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.TemplateFieldsChargeSecured != nil {
		return obj.TemplateFieldsChargeSecured
	}

	if obj.TemplateFieldsChargeUnsecured != nil {
		return obj.TemplateFieldsChargeUnsecured
	}

	if obj.TemplateFieldsDepository != nil {
		return obj.TemplateFieldsDepository
	}

	if obj.TemplateFieldsGeneralLedger != nil {
		return obj.TemplateFieldsGeneralLedger
	}

	if obj.TemplateFieldsLineOfCredit != nil {
		return obj.TemplateFieldsLineOfCredit
	}

	// all schemas are nil
	return nil
}

type NullableTemplateFields struct {
	value *TemplateFields
	isSet bool
}

func (v NullableTemplateFields) Get() *TemplateFields {
	return v.value
}

func (v *NullableTemplateFields) Set(val *TemplateFields) {
	v.value = val
	v.isSet = true
}

func (v NullableTemplateFields) IsSet() bool {
	return v.isSet
}

func (v *NullableTemplateFields) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTemplateFields(val *TemplateFields) *NullableTemplateFields {
	return &NullableTemplateFields{value: val, isSet: true}
}

func (v NullableTemplateFields) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTemplateFields) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
