/*
Synctera API

<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.69.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ThreeDsPolicy EMV 3-D Secure policy.  Policy      | Description ----------- | ----------- UNSUPPORTED | Transactions from merchants that require advanced authentication challenges will fail EXEMPT      | Transactions will be exempted from advanced authentication 
type ThreeDsPolicy string

// List of three_ds_policy
const (
	THREEDSPOLICY_EXEMPT ThreeDsPolicy = "EXEMPT"
	THREEDSPOLICY_UNSUPPORTED ThreeDsPolicy = "UNSUPPORTED"
)

// All allowed values of ThreeDsPolicy enum
var AllowedThreeDsPolicyEnumValues = []ThreeDsPolicy{
	"EXEMPT",
	"UNSUPPORTED",
}

func (v *ThreeDsPolicy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ThreeDsPolicy(value)
	for _, existing := range AllowedThreeDsPolicyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ThreeDsPolicy", value)
}

// NewThreeDsPolicyFromValue returns a pointer to a valid ThreeDsPolicy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewThreeDsPolicyFromValue(v string) (*ThreeDsPolicy, error) {
	ev := ThreeDsPolicy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ThreeDsPolicy: valid values are %v", v, AllowedThreeDsPolicyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ThreeDsPolicy) IsValid() bool {
	for _, existing := range AllowedThreeDsPolicyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to three_ds_policy value
func (v ThreeDsPolicy) Ptr() *ThreeDsPolicy {
	return &v
}

type NullableThreeDsPolicy struct {
	value *ThreeDsPolicy
	isSet bool
}

func (v NullableThreeDsPolicy) Get() *ThreeDsPolicy {
	return v.value
}

func (v *NullableThreeDsPolicy) Set(val *ThreeDsPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableThreeDsPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableThreeDsPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableThreeDsPolicy(val *ThreeDsPolicy) *NullableThreeDsPolicy {
	return &NullableThreeDsPolicy{value: val, isSet: true}
}

func (v NullableThreeDsPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableThreeDsPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

