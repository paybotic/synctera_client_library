/*
Synctera API

<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p> 

API version: 0.17.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// PaymentInstruction - struct for PaymentInstruction
type PaymentInstruction struct {
	AchInstruction *AchInstruction
	InternalTransferInstruction *InternalTransferInstruction
}

// AchInstructionAsPaymentInstruction is a convenience function that returns AchInstruction wrapped in PaymentInstruction
func AchInstructionAsPaymentInstruction(v *AchInstruction) PaymentInstruction {
	return PaymentInstruction{
		AchInstruction: v,
	}
}

// InternalTransferInstructionAsPaymentInstruction is a convenience function that returns InternalTransferInstruction wrapped in PaymentInstruction
func InternalTransferInstructionAsPaymentInstruction(v *InternalTransferInstruction) PaymentInstruction {
	return PaymentInstruction{
		InternalTransferInstruction: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *PaymentInstruction) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AchInstruction
	err = newStrictDecoder(data).Decode(&dst.AchInstruction)
	if err == nil {
		jsonAchInstruction, _ := json.Marshal(dst.AchInstruction)
		if string(jsonAchInstruction) == "{}" { // empty struct
			dst.AchInstruction = nil
		} else {
			match++
		}
	} else {
		dst.AchInstruction = nil
	}

	// try to unmarshal data into InternalTransferInstruction
	err = newStrictDecoder(data).Decode(&dst.InternalTransferInstruction)
	if err == nil {
		jsonInternalTransferInstruction, _ := json.Marshal(dst.InternalTransferInstruction)
		if string(jsonInternalTransferInstruction) == "{}" { // empty struct
			dst.InternalTransferInstruction = nil
		} else {
			match++
		}
	} else {
		dst.InternalTransferInstruction = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AchInstruction = nil
		dst.InternalTransferInstruction = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(PaymentInstruction)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(PaymentInstruction)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src PaymentInstruction) MarshalJSON() ([]byte, error) {
	if src.AchInstruction != nil {
		return json.Marshal(&src.AchInstruction)
	}

	if src.InternalTransferInstruction != nil {
		return json.Marshal(&src.InternalTransferInstruction)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *PaymentInstruction) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AchInstruction != nil {
		return obj.AchInstruction
	}

	if obj.InternalTransferInstruction != nil {
		return obj.InternalTransferInstruction
	}

	// all schemas are nil
	return nil
}

type NullablePaymentInstruction struct {
	value *PaymentInstruction
	isSet bool
}

func (v NullablePaymentInstruction) Get() *PaymentInstruction {
	return v.value
}

func (v *NullablePaymentInstruction) Set(val *PaymentInstruction) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentInstruction) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentInstruction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentInstruction(val *PaymentInstruction) *NullablePaymentInstruction {
	return &NullablePaymentInstruction{value: val, isSet: true}
}

func (v NullablePaymentInstruction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentInstruction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


