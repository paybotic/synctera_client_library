/*
Synctera API

<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.32.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CardTransactionDataCurrencyConversion Currency conversion details
type CardTransactionDataCurrencyConversion struct {
	// The currency conversion rate used
	ConversionRate *float32 `json:"conversion_rate,omitempty"`
	// The original transaction amount before conversion
	OriginalAmount *int32 `json:"original_amount,omitempty"`
	// The original currency code
	OriginalCurrencyCode *string `json:"original_currency_code,omitempty"`
}

// NewCardTransactionDataCurrencyConversion instantiates a new CardTransactionDataCurrencyConversion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCardTransactionDataCurrencyConversion() *CardTransactionDataCurrencyConversion {
	this := CardTransactionDataCurrencyConversion{}
	return &this
}

// NewCardTransactionDataCurrencyConversionWithDefaults instantiates a new CardTransactionDataCurrencyConversion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCardTransactionDataCurrencyConversionWithDefaults() *CardTransactionDataCurrencyConversion {
	this := CardTransactionDataCurrencyConversion{}
	return &this
}

// GetConversionRate returns the ConversionRate field value if set, zero value otherwise.
func (o *CardTransactionDataCurrencyConversion) GetConversionRate() float32 {
	if o == nil || o.ConversionRate == nil {
		var ret float32
		return ret
	}
	return *o.ConversionRate
}

// GetConversionRateOk returns a tuple with the ConversionRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardTransactionDataCurrencyConversion) GetConversionRateOk() (*float32, bool) {
	if o == nil || o.ConversionRate == nil {
		return nil, false
	}
	return o.ConversionRate, true
}

// HasConversionRate returns a boolean if a field has been set.
func (o *CardTransactionDataCurrencyConversion) HasConversionRate() bool {
	if o != nil && o.ConversionRate != nil {
		return true
	}

	return false
}

// SetConversionRate gets a reference to the given float32 and assigns it to the ConversionRate field.
func (o *CardTransactionDataCurrencyConversion) SetConversionRate(v float32) {
	o.ConversionRate = &v
}

// GetOriginalAmount returns the OriginalAmount field value if set, zero value otherwise.
func (o *CardTransactionDataCurrencyConversion) GetOriginalAmount() int32 {
	if o == nil || o.OriginalAmount == nil {
		var ret int32
		return ret
	}
	return *o.OriginalAmount
}

// GetOriginalAmountOk returns a tuple with the OriginalAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardTransactionDataCurrencyConversion) GetOriginalAmountOk() (*int32, bool) {
	if o == nil || o.OriginalAmount == nil {
		return nil, false
	}
	return o.OriginalAmount, true
}

// HasOriginalAmount returns a boolean if a field has been set.
func (o *CardTransactionDataCurrencyConversion) HasOriginalAmount() bool {
	if o != nil && o.OriginalAmount != nil {
		return true
	}

	return false
}

// SetOriginalAmount gets a reference to the given int32 and assigns it to the OriginalAmount field.
func (o *CardTransactionDataCurrencyConversion) SetOriginalAmount(v int32) {
	o.OriginalAmount = &v
}

// GetOriginalCurrencyCode returns the OriginalCurrencyCode field value if set, zero value otherwise.
func (o *CardTransactionDataCurrencyConversion) GetOriginalCurrencyCode() string {
	if o == nil || o.OriginalCurrencyCode == nil {
		var ret string
		return ret
	}
	return *o.OriginalCurrencyCode
}

// GetOriginalCurrencyCodeOk returns a tuple with the OriginalCurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardTransactionDataCurrencyConversion) GetOriginalCurrencyCodeOk() (*string, bool) {
	if o == nil || o.OriginalCurrencyCode == nil {
		return nil, false
	}
	return o.OriginalCurrencyCode, true
}

// HasOriginalCurrencyCode returns a boolean if a field has been set.
func (o *CardTransactionDataCurrencyConversion) HasOriginalCurrencyCode() bool {
	if o != nil && o.OriginalCurrencyCode != nil {
		return true
	}

	return false
}

// SetOriginalCurrencyCode gets a reference to the given string and assigns it to the OriginalCurrencyCode field.
func (o *CardTransactionDataCurrencyConversion) SetOriginalCurrencyCode(v string) {
	o.OriginalCurrencyCode = &v
}

func (o CardTransactionDataCurrencyConversion) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ConversionRate != nil {
		toSerialize["conversion_rate"] = o.ConversionRate
	}
	if o.OriginalAmount != nil {
		toSerialize["original_amount"] = o.OriginalAmount
	}
	if o.OriginalCurrencyCode != nil {
		toSerialize["original_currency_code"] = o.OriginalCurrencyCode
	}
	return json.Marshal(toSerialize)
}

type NullableCardTransactionDataCurrencyConversion struct {
	value *CardTransactionDataCurrencyConversion
	isSet bool
}

func (v NullableCardTransactionDataCurrencyConversion) Get() *CardTransactionDataCurrencyConversion {
	return v.value
}

func (v *NullableCardTransactionDataCurrencyConversion) Set(val *CardTransactionDataCurrencyConversion) {
	v.value = val
	v.isSet = true
}

func (v NullableCardTransactionDataCurrencyConversion) IsSet() bool {
	return v.isSet
}

func (v *NullableCardTransactionDataCurrencyConversion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCardTransactionDataCurrencyConversion(val *CardTransactionDataCurrencyConversion) *NullableCardTransactionDataCurrencyConversion {
	return &NullableCardTransactionDataCurrencyConversion{value: val, isSet: true}
}

func (v NullableCardTransactionDataCurrencyConversion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCardTransactionDataCurrencyConversion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
