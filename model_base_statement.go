/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.140.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the BaseStatement type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BaseStatement{}

// BaseStatement struct for BaseStatement
type BaseStatement struct {
	// The unique identifier of the account the statement belongs to
	AccountId *string `json:"account_id,omitempty"`
	// The limit date when the due amount indicated on the statement should be paid
	DueDate *string `json:"due_date,omitempty"`
	// The date indicating the ending of the time interval covered by the statement
	EndDate *string `json:"end_date,omitempty"`
	// statement ID
	Id *string `json:"id,omitempty"`
	// The date when the statement has been issued
	IssueDate *string `json:"issue_date,omitempty"`
	// The date indicating the beginning of the time interval covered by the statement
	StartDate        *string         `json:"start_date,omitempty"`
	AccountSummary   *AccountSummary `json:"account_summary,omitempty"`
	AuthorizedSigner []Person        `json:"authorized_signer,omitempty"`
	// The account balance at the end of the statement period, in ISO 4217 minor currency units.
	ClosingBalance         *int64                  `json:"closing_balance,omitempty"`
	CustomerServiceDetails *CustomerServiceDetails `json:"customer_service_details,omitempty"`
	Disclosure             *string                 `json:"disclosure,omitempty"`
	JointAccountHolders    []Person                `json:"joint_account_holders,omitempty"`
	// The account balance at the start of the statement period, in ISO 4217 minor currency units.
	OpeningBalance               *int64     `json:"opening_balance,omitempty"`
	PrimaryAccountHolderBusiness *Business1 `json:"primary_account_holder_business,omitempty"`
	PrimaryAccountHolderPersonal *Person    `json:"primary_account_holder_personal,omitempty"`
	// This attribute is deprecated and will be removed in a future API version. Use `GET /v0/statements/{statement_id}/transactions` instead.
	// Deprecated
	Transactions []Transaction `json:"transactions,omitempty"`
	// Only appears in `statement.created` webhook payloads. Indicates that the `transactions` attribute was emptied due to webhook size constraints. If this attribute returns `true`, you may use  `GET /v0/statements/{statement_id}/transactions` to retrieve the full list.
	TransactionsOmitted *bool `json:"transactions_omitted,omitempty"`
}

// NewBaseStatement instantiates a new BaseStatement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseStatement() *BaseStatement {
	this := BaseStatement{}
	return &this
}

// NewBaseStatementWithDefaults instantiates a new BaseStatement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseStatementWithDefaults() *BaseStatement {
	this := BaseStatement{}
	return &this
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *BaseStatement) GetAccountId() string {
	if o == nil || IsNil(o.AccountId) {
		var ret string
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseStatement) GetAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.AccountId) {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *BaseStatement) HasAccountId() bool {
	if o != nil && !IsNil(o.AccountId) {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given string and assigns it to the AccountId field.
func (o *BaseStatement) SetAccountId(v string) {
	o.AccountId = &v
}

// GetDueDate returns the DueDate field value if set, zero value otherwise.
func (o *BaseStatement) GetDueDate() string {
	if o == nil || IsNil(o.DueDate) {
		var ret string
		return ret
	}
	return *o.DueDate
}

// GetDueDateOk returns a tuple with the DueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseStatement) GetDueDateOk() (*string, bool) {
	if o == nil || IsNil(o.DueDate) {
		return nil, false
	}
	return o.DueDate, true
}

// HasDueDate returns a boolean if a field has been set.
func (o *BaseStatement) HasDueDate() bool {
	if o != nil && !IsNil(o.DueDate) {
		return true
	}

	return false
}

// SetDueDate gets a reference to the given string and assigns it to the DueDate field.
func (o *BaseStatement) SetDueDate(v string) {
	o.DueDate = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *BaseStatement) GetEndDate() string {
	if o == nil || IsNil(o.EndDate) {
		var ret string
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseStatement) GetEndDateOk() (*string, bool) {
	if o == nil || IsNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *BaseStatement) HasEndDate() bool {
	if o != nil && !IsNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given string and assigns it to the EndDate field.
func (o *BaseStatement) SetEndDate(v string) {
	o.EndDate = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *BaseStatement) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseStatement) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *BaseStatement) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *BaseStatement) SetId(v string) {
	o.Id = &v
}

// GetIssueDate returns the IssueDate field value if set, zero value otherwise.
func (o *BaseStatement) GetIssueDate() string {
	if o == nil || IsNil(o.IssueDate) {
		var ret string
		return ret
	}
	return *o.IssueDate
}

// GetIssueDateOk returns a tuple with the IssueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseStatement) GetIssueDateOk() (*string, bool) {
	if o == nil || IsNil(o.IssueDate) {
		return nil, false
	}
	return o.IssueDate, true
}

// HasIssueDate returns a boolean if a field has been set.
func (o *BaseStatement) HasIssueDate() bool {
	if o != nil && !IsNil(o.IssueDate) {
		return true
	}

	return false
}

// SetIssueDate gets a reference to the given string and assigns it to the IssueDate field.
func (o *BaseStatement) SetIssueDate(v string) {
	o.IssueDate = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *BaseStatement) GetStartDate() string {
	if o == nil || IsNil(o.StartDate) {
		var ret string
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseStatement) GetStartDateOk() (*string, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *BaseStatement) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given string and assigns it to the StartDate field.
func (o *BaseStatement) SetStartDate(v string) {
	o.StartDate = &v
}

// GetAccountSummary returns the AccountSummary field value if set, zero value otherwise.
func (o *BaseStatement) GetAccountSummary() AccountSummary {
	if o == nil || IsNil(o.AccountSummary) {
		var ret AccountSummary
		return ret
	}
	return *o.AccountSummary
}

// GetAccountSummaryOk returns a tuple with the AccountSummary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseStatement) GetAccountSummaryOk() (*AccountSummary, bool) {
	if o == nil || IsNil(o.AccountSummary) {
		return nil, false
	}
	return o.AccountSummary, true
}

// HasAccountSummary returns a boolean if a field has been set.
func (o *BaseStatement) HasAccountSummary() bool {
	if o != nil && !IsNil(o.AccountSummary) {
		return true
	}

	return false
}

// SetAccountSummary gets a reference to the given AccountSummary and assigns it to the AccountSummary field.
func (o *BaseStatement) SetAccountSummary(v AccountSummary) {
	o.AccountSummary = &v
}

// GetAuthorizedSigner returns the AuthorizedSigner field value if set, zero value otherwise.
func (o *BaseStatement) GetAuthorizedSigner() []Person {
	if o == nil || IsNil(o.AuthorizedSigner) {
		var ret []Person
		return ret
	}
	return o.AuthorizedSigner
}

// GetAuthorizedSignerOk returns a tuple with the AuthorizedSigner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseStatement) GetAuthorizedSignerOk() ([]Person, bool) {
	if o == nil || IsNil(o.AuthorizedSigner) {
		return nil, false
	}
	return o.AuthorizedSigner, true
}

// HasAuthorizedSigner returns a boolean if a field has been set.
func (o *BaseStatement) HasAuthorizedSigner() bool {
	if o != nil && !IsNil(o.AuthorizedSigner) {
		return true
	}

	return false
}

// SetAuthorizedSigner gets a reference to the given []Person and assigns it to the AuthorizedSigner field.
func (o *BaseStatement) SetAuthorizedSigner(v []Person) {
	o.AuthorizedSigner = v
}

// GetClosingBalance returns the ClosingBalance field value if set, zero value otherwise.
func (o *BaseStatement) GetClosingBalance() int64 {
	if o == nil || IsNil(o.ClosingBalance) {
		var ret int64
		return ret
	}
	return *o.ClosingBalance
}

// GetClosingBalanceOk returns a tuple with the ClosingBalance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseStatement) GetClosingBalanceOk() (*int64, bool) {
	if o == nil || IsNil(o.ClosingBalance) {
		return nil, false
	}
	return o.ClosingBalance, true
}

// HasClosingBalance returns a boolean if a field has been set.
func (o *BaseStatement) HasClosingBalance() bool {
	if o != nil && !IsNil(o.ClosingBalance) {
		return true
	}

	return false
}

// SetClosingBalance gets a reference to the given int64 and assigns it to the ClosingBalance field.
func (o *BaseStatement) SetClosingBalance(v int64) {
	o.ClosingBalance = &v
}

// GetCustomerServiceDetails returns the CustomerServiceDetails field value if set, zero value otherwise.
func (o *BaseStatement) GetCustomerServiceDetails() CustomerServiceDetails {
	if o == nil || IsNil(o.CustomerServiceDetails) {
		var ret CustomerServiceDetails
		return ret
	}
	return *o.CustomerServiceDetails
}

// GetCustomerServiceDetailsOk returns a tuple with the CustomerServiceDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseStatement) GetCustomerServiceDetailsOk() (*CustomerServiceDetails, bool) {
	if o == nil || IsNil(o.CustomerServiceDetails) {
		return nil, false
	}
	return o.CustomerServiceDetails, true
}

// HasCustomerServiceDetails returns a boolean if a field has been set.
func (o *BaseStatement) HasCustomerServiceDetails() bool {
	if o != nil && !IsNil(o.CustomerServiceDetails) {
		return true
	}

	return false
}

// SetCustomerServiceDetails gets a reference to the given CustomerServiceDetails and assigns it to the CustomerServiceDetails field.
func (o *BaseStatement) SetCustomerServiceDetails(v CustomerServiceDetails) {
	o.CustomerServiceDetails = &v
}

// GetDisclosure returns the Disclosure field value if set, zero value otherwise.
func (o *BaseStatement) GetDisclosure() string {
	if o == nil || IsNil(o.Disclosure) {
		var ret string
		return ret
	}
	return *o.Disclosure
}

// GetDisclosureOk returns a tuple with the Disclosure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseStatement) GetDisclosureOk() (*string, bool) {
	if o == nil || IsNil(o.Disclosure) {
		return nil, false
	}
	return o.Disclosure, true
}

// HasDisclosure returns a boolean if a field has been set.
func (o *BaseStatement) HasDisclosure() bool {
	if o != nil && !IsNil(o.Disclosure) {
		return true
	}

	return false
}

// SetDisclosure gets a reference to the given string and assigns it to the Disclosure field.
func (o *BaseStatement) SetDisclosure(v string) {
	o.Disclosure = &v
}

// GetJointAccountHolders returns the JointAccountHolders field value if set, zero value otherwise.
func (o *BaseStatement) GetJointAccountHolders() []Person {
	if o == nil || IsNil(o.JointAccountHolders) {
		var ret []Person
		return ret
	}
	return o.JointAccountHolders
}

// GetJointAccountHoldersOk returns a tuple with the JointAccountHolders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseStatement) GetJointAccountHoldersOk() ([]Person, bool) {
	if o == nil || IsNil(o.JointAccountHolders) {
		return nil, false
	}
	return o.JointAccountHolders, true
}

// HasJointAccountHolders returns a boolean if a field has been set.
func (o *BaseStatement) HasJointAccountHolders() bool {
	if o != nil && !IsNil(o.JointAccountHolders) {
		return true
	}

	return false
}

// SetJointAccountHolders gets a reference to the given []Person and assigns it to the JointAccountHolders field.
func (o *BaseStatement) SetJointAccountHolders(v []Person) {
	o.JointAccountHolders = v
}

// GetOpeningBalance returns the OpeningBalance field value if set, zero value otherwise.
func (o *BaseStatement) GetOpeningBalance() int64 {
	if o == nil || IsNil(o.OpeningBalance) {
		var ret int64
		return ret
	}
	return *o.OpeningBalance
}

// GetOpeningBalanceOk returns a tuple with the OpeningBalance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseStatement) GetOpeningBalanceOk() (*int64, bool) {
	if o == nil || IsNil(o.OpeningBalance) {
		return nil, false
	}
	return o.OpeningBalance, true
}

// HasOpeningBalance returns a boolean if a field has been set.
func (o *BaseStatement) HasOpeningBalance() bool {
	if o != nil && !IsNil(o.OpeningBalance) {
		return true
	}

	return false
}

// SetOpeningBalance gets a reference to the given int64 and assigns it to the OpeningBalance field.
func (o *BaseStatement) SetOpeningBalance(v int64) {
	o.OpeningBalance = &v
}

// GetPrimaryAccountHolderBusiness returns the PrimaryAccountHolderBusiness field value if set, zero value otherwise.
func (o *BaseStatement) GetPrimaryAccountHolderBusiness() Business1 {
	if o == nil || IsNil(o.PrimaryAccountHolderBusiness) {
		var ret Business1
		return ret
	}
	return *o.PrimaryAccountHolderBusiness
}

// GetPrimaryAccountHolderBusinessOk returns a tuple with the PrimaryAccountHolderBusiness field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseStatement) GetPrimaryAccountHolderBusinessOk() (*Business1, bool) {
	if o == nil || IsNil(o.PrimaryAccountHolderBusiness) {
		return nil, false
	}
	return o.PrimaryAccountHolderBusiness, true
}

// HasPrimaryAccountHolderBusiness returns a boolean if a field has been set.
func (o *BaseStatement) HasPrimaryAccountHolderBusiness() bool {
	if o != nil && !IsNil(o.PrimaryAccountHolderBusiness) {
		return true
	}

	return false
}

// SetPrimaryAccountHolderBusiness gets a reference to the given Business1 and assigns it to the PrimaryAccountHolderBusiness field.
func (o *BaseStatement) SetPrimaryAccountHolderBusiness(v Business1) {
	o.PrimaryAccountHolderBusiness = &v
}

// GetPrimaryAccountHolderPersonal returns the PrimaryAccountHolderPersonal field value if set, zero value otherwise.
func (o *BaseStatement) GetPrimaryAccountHolderPersonal() Person {
	if o == nil || IsNil(o.PrimaryAccountHolderPersonal) {
		var ret Person
		return ret
	}
	return *o.PrimaryAccountHolderPersonal
}

// GetPrimaryAccountHolderPersonalOk returns a tuple with the PrimaryAccountHolderPersonal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseStatement) GetPrimaryAccountHolderPersonalOk() (*Person, bool) {
	if o == nil || IsNil(o.PrimaryAccountHolderPersonal) {
		return nil, false
	}
	return o.PrimaryAccountHolderPersonal, true
}

// HasPrimaryAccountHolderPersonal returns a boolean if a field has been set.
func (o *BaseStatement) HasPrimaryAccountHolderPersonal() bool {
	if o != nil && !IsNil(o.PrimaryAccountHolderPersonal) {
		return true
	}

	return false
}

// SetPrimaryAccountHolderPersonal gets a reference to the given Person and assigns it to the PrimaryAccountHolderPersonal field.
func (o *BaseStatement) SetPrimaryAccountHolderPersonal(v Person) {
	o.PrimaryAccountHolderPersonal = &v
}

// GetTransactions returns the Transactions field value if set, zero value otherwise.
// Deprecated
func (o *BaseStatement) GetTransactions() []Transaction {
	if o == nil || IsNil(o.Transactions) {
		var ret []Transaction
		return ret
	}
	return o.Transactions
}

// GetTransactionsOk returns a tuple with the Transactions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *BaseStatement) GetTransactionsOk() ([]Transaction, bool) {
	if o == nil || IsNil(o.Transactions) {
		return nil, false
	}
	return o.Transactions, true
}

// HasTransactions returns a boolean if a field has been set.
func (o *BaseStatement) HasTransactions() bool {
	if o != nil && !IsNil(o.Transactions) {
		return true
	}

	return false
}

// SetTransactions gets a reference to the given []Transaction and assigns it to the Transactions field.
// Deprecated
func (o *BaseStatement) SetTransactions(v []Transaction) {
	o.Transactions = v
}

// GetTransactionsOmitted returns the TransactionsOmitted field value if set, zero value otherwise.
func (o *BaseStatement) GetTransactionsOmitted() bool {
	if o == nil || IsNil(o.TransactionsOmitted) {
		var ret bool
		return ret
	}
	return *o.TransactionsOmitted
}

// GetTransactionsOmittedOk returns a tuple with the TransactionsOmitted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseStatement) GetTransactionsOmittedOk() (*bool, bool) {
	if o == nil || IsNil(o.TransactionsOmitted) {
		return nil, false
	}
	return o.TransactionsOmitted, true
}

// HasTransactionsOmitted returns a boolean if a field has been set.
func (o *BaseStatement) HasTransactionsOmitted() bool {
	if o != nil && !IsNil(o.TransactionsOmitted) {
		return true
	}

	return false
}

// SetTransactionsOmitted gets a reference to the given bool and assigns it to the TransactionsOmitted field.
func (o *BaseStatement) SetTransactionsOmitted(v bool) {
	o.TransactionsOmitted = &v
}

func (o BaseStatement) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BaseStatement) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccountId) {
		toSerialize["account_id"] = o.AccountId
	}
	if !IsNil(o.DueDate) {
		toSerialize["due_date"] = o.DueDate
	}
	if !IsNil(o.EndDate) {
		toSerialize["end_date"] = o.EndDate
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IssueDate) {
		toSerialize["issue_date"] = o.IssueDate
	}
	if !IsNil(o.StartDate) {
		toSerialize["start_date"] = o.StartDate
	}
	if !IsNil(o.AccountSummary) {
		toSerialize["account_summary"] = o.AccountSummary
	}
	if !IsNil(o.AuthorizedSigner) {
		toSerialize["authorized_signer"] = o.AuthorizedSigner
	}
	if !IsNil(o.ClosingBalance) {
		toSerialize["closing_balance"] = o.ClosingBalance
	}
	if !IsNil(o.CustomerServiceDetails) {
		toSerialize["customer_service_details"] = o.CustomerServiceDetails
	}
	if !IsNil(o.Disclosure) {
		toSerialize["disclosure"] = o.Disclosure
	}
	if !IsNil(o.JointAccountHolders) {
		toSerialize["joint_account_holders"] = o.JointAccountHolders
	}
	if !IsNil(o.OpeningBalance) {
		toSerialize["opening_balance"] = o.OpeningBalance
	}
	if !IsNil(o.PrimaryAccountHolderBusiness) {
		toSerialize["primary_account_holder_business"] = o.PrimaryAccountHolderBusiness
	}
	if !IsNil(o.PrimaryAccountHolderPersonal) {
		toSerialize["primary_account_holder_personal"] = o.PrimaryAccountHolderPersonal
	}
	if !IsNil(o.Transactions) {
		toSerialize["transactions"] = o.Transactions
	}
	if !IsNil(o.TransactionsOmitted) {
		toSerialize["transactions_omitted"] = o.TransactionsOmitted
	}
	return toSerialize, nil
}

type NullableBaseStatement struct {
	value *BaseStatement
	isSet bool
}

func (v NullableBaseStatement) Get() *BaseStatement {
	return v.value
}

func (v *NullableBaseStatement) Set(val *BaseStatement) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseStatement) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseStatement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseStatement(val *BaseStatement) *NullableBaseStatement {
	return &NullableBaseStatement{value: val, isSet: true}
}

func (v NullableBaseStatement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseStatement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
