/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.140.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// Lookup3dsRequest - struct for Lookup3dsRequest
type Lookup3dsRequest struct {
	Lookup3dsRequestBrowser *Lookup3dsRequestBrowser
	Lookup3dsRequestSdk     *Lookup3dsRequestSdk
}

// Lookup3dsRequestBrowserAsLookup3dsRequest is a convenience function that returns Lookup3dsRequestBrowser wrapped in Lookup3dsRequest
func Lookup3dsRequestBrowserAsLookup3dsRequest(v *Lookup3dsRequestBrowser) Lookup3dsRequest {
	return Lookup3dsRequest{
		Lookup3dsRequestBrowser: v,
	}
}

// Lookup3dsRequestSdkAsLookup3dsRequest is a convenience function that returns Lookup3dsRequestSdk wrapped in Lookup3dsRequest
func Lookup3dsRequestSdkAsLookup3dsRequest(v *Lookup3dsRequestSdk) Lookup3dsRequest {
	return Lookup3dsRequest{
		Lookup3dsRequestSdk: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *Lookup3dsRequest) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'BROWSER'
	if jsonDict["device_channel"] == "BROWSER" {
		// try to unmarshal JSON data into Lookup3dsRequestBrowser
		err = json.Unmarshal(data, &dst.Lookup3dsRequestBrowser)
		if err == nil {
			return nil // data stored in dst.Lookup3dsRequestBrowser, return on the first match
		} else {
			dst.Lookup3dsRequestBrowser = nil
			return fmt.Errorf("failed to unmarshal Lookup3dsRequest as Lookup3dsRequestBrowser: %s", err.Error())
		}
	}

	// check if the discriminator value is 'SDK'
	if jsonDict["device_channel"] == "SDK" {
		// try to unmarshal JSON data into Lookup3dsRequestSdk
		err = json.Unmarshal(data, &dst.Lookup3dsRequestSdk)
		if err == nil {
			return nil // data stored in dst.Lookup3dsRequestSdk, return on the first match
		} else {
			dst.Lookup3dsRequestSdk = nil
			return fmt.Errorf("failed to unmarshal Lookup3dsRequest as Lookup3dsRequestSdk: %s", err.Error())
		}
	}

	// check if the discriminator value is 'lookup_3ds_request_browser'
	if jsonDict["device_channel"] == "lookup_3ds_request_browser" {
		// try to unmarshal JSON data into Lookup3dsRequestBrowser
		err = json.Unmarshal(data, &dst.Lookup3dsRequestBrowser)
		if err == nil {
			return nil // data stored in dst.Lookup3dsRequestBrowser, return on the first match
		} else {
			dst.Lookup3dsRequestBrowser = nil
			return fmt.Errorf("failed to unmarshal Lookup3dsRequest as Lookup3dsRequestBrowser: %s", err.Error())
		}
	}

	// check if the discriminator value is 'lookup_3ds_request_sdk'
	if jsonDict["device_channel"] == "lookup_3ds_request_sdk" {
		// try to unmarshal JSON data into Lookup3dsRequestSdk
		err = json.Unmarshal(data, &dst.Lookup3dsRequestSdk)
		if err == nil {
			return nil // data stored in dst.Lookup3dsRequestSdk, return on the first match
		} else {
			dst.Lookup3dsRequestSdk = nil
			return fmt.Errorf("failed to unmarshal Lookup3dsRequest as Lookup3dsRequestSdk: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Lookup3dsRequest) MarshalJSON() ([]byte, error) {
	if src.Lookup3dsRequestBrowser != nil {
		return json.Marshal(&src.Lookup3dsRequestBrowser)
	}

	if src.Lookup3dsRequestSdk != nil {
		return json.Marshal(&src.Lookup3dsRequestSdk)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Lookup3dsRequest) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.Lookup3dsRequestBrowser != nil {
		return obj.Lookup3dsRequestBrowser
	}

	if obj.Lookup3dsRequestSdk != nil {
		return obj.Lookup3dsRequestSdk
	}

	// all schemas are nil
	return nil
}

type NullableLookup3dsRequest struct {
	value *Lookup3dsRequest
	isSet bool
}

func (v NullableLookup3dsRequest) Get() *Lookup3dsRequest {
	return v.value
}

func (v *NullableLookup3dsRequest) Set(val *Lookup3dsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableLookup3dsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableLookup3dsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLookup3dsRequest(val *Lookup3dsRequest) *NullableLookup3dsRequest {
	return &NullableLookup3dsRequest{value: val, isSet: true}
}

func (v NullableLookup3dsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLookup3dsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
