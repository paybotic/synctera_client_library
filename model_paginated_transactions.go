/*
Synctera API

<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.32.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PaginatedTransactions struct for PaginatedTransactions
type PaginatedTransactions struct {
	// If returned, use the value of `next_page_token` in the `page_token` query parameter to query for the next page of results. This will be `null` if there are no more pages.
	NextPageToken NullableString `json:"next_page_token"`
	// List of transactions
	Transactions []Transaction1 `json:"transactions"`
}

// NewPaginatedTransactions instantiates a new PaginatedTransactions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaginatedTransactions(nextPageToken NullableString, transactions []Transaction1) *PaginatedTransactions {
	this := PaginatedTransactions{}
	this.NextPageToken = nextPageToken
	this.Transactions = transactions
	return &this
}

// NewPaginatedTransactionsWithDefaults instantiates a new PaginatedTransactions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaginatedTransactionsWithDefaults() *PaginatedTransactions {
	this := PaginatedTransactions{}
	return &this
}

// GetNextPageToken returns the NextPageToken field value
// If the value is explicit nil, the zero value for string will be returned
func (o *PaginatedTransactions) GetNextPageToken() string {
	if o == nil || o.NextPageToken.Get() == nil {
		var ret string
		return ret
	}

	return *o.NextPageToken.Get()
}

// GetNextPageTokenOk returns a tuple with the NextPageToken field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PaginatedTransactions) GetNextPageTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NextPageToken.Get(), o.NextPageToken.IsSet()
}

// SetNextPageToken sets field value
func (o *PaginatedTransactions) SetNextPageToken(v string) {
	o.NextPageToken.Set(&v)
}

// GetTransactions returns the Transactions field value
func (o *PaginatedTransactions) GetTransactions() []Transaction1 {
	if o == nil {
		var ret []Transaction1
		return ret
	}

	return o.Transactions
}

// GetTransactionsOk returns a tuple with the Transactions field value
// and a boolean to check if the value has been set.
func (o *PaginatedTransactions) GetTransactionsOk() ([]Transaction1, bool) {
	if o == nil {
		return nil, false
	}
	return o.Transactions, true
}

// SetTransactions sets field value
func (o *PaginatedTransactions) SetTransactions(v []Transaction1) {
	o.Transactions = v
}

func (o PaginatedTransactions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["next_page_token"] = o.NextPageToken.Get()
	}
	if true {
		toSerialize["transactions"] = o.Transactions
	}
	return json.Marshal(toSerialize)
}

type NullablePaginatedTransactions struct {
	value *PaginatedTransactions
	isSet bool
}

func (v NullablePaginatedTransactions) Get() *PaginatedTransactions {
	return v.value
}

func (v *NullablePaginatedTransactions) Set(val *PaginatedTransactions) {
	v.value = val
	v.isSet = true
}

func (v NullablePaginatedTransactions) IsSet() bool {
	return v.isSet
}

func (v *NullablePaginatedTransactions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaginatedTransactions(val *PaginatedTransactions) *NullablePaginatedTransactions {
	return &NullablePaginatedTransactions{value: val, isSet: true}
}

func (v NullablePaginatedTransactions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaginatedTransactions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
