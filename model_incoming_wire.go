/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.140.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the IncomingWire type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IncomingWire{}

// IncomingWire struct for IncomingWire
type IncomingWire struct {
	// The internal account uuid representing the recipient of the wire.
	AccountId *string `json:"account_id,omitempty"`
	// Transfer amount in cents ($100 would be 10000)
	Amount int32 `json:"amount"`
	// Information from the sending bank to the receiving bank.
	BankMessage  *string   `json:"bank_message,omitempty"`
	CreationTime time.Time `json:"creation_time"`
	// 3-character currency code
	Currency *string `json:"currency,omitempty"`
	// The customer UUID representing the person initiating the Wire transfer
	CustomerId *string `json:"customer_id,omitempty"`
	// Description of the reason the transfer was declined
	DeclineReason *string `json:"decline_reason,omitempty"`
	// The effective date of the transaction once it gets posted
	EffectiveDate *string `json:"effective_date,omitempty"`
	// wire ID
	Id string `json:"id"`
	// The input message accountability data consists of a 8 character cycle date (CCYYMMDD) an 8 character source and a 6 character sequence number.
	InputMessageAccountabilityData *string `json:"input_message_accountability_data,omitempty"`
	// Indicates if the wire is a return of an outgoing wire
	IsReturn bool `json:"is_return"`
	// The network used to process the wire
	Network *string `json:"network,omitempty"`
	// The account number representing the sender account. If the incoming wire is a return, it refers to the sender of the initial wire not the sender of the return.
	OriginatingAccountNumber *string `json:"originating_account_number,omitempty"`
	Receiver                 Party   `json:"receiver"`
	// The internal Synctera account uuid representing the recipient of the wire.
	ReceivingAccountId *string `json:"receiving_account_id,omitempty"`
	// The account number representing the recipient account. If the incoming wire is a return, it refers to the recipient of the initial wire not the destination of the return.
	ReceivingAccountNumber string `json:"receiving_account_number"`
	// Information from the originator to the beneficiary (recipient).
	RecipientMessage *string      `json:"recipient_message,omitempty"`
	ReturnData       *ReturnData1 `json:"return_data,omitempty"`
	// The reason we are returning this wire.
	ReturnReason *string `json:"return_reason,omitempty"`
	Sender       Party   `json:"sender"`
	// Sender's id associated with fedwire transfer
	SenderReferenceId string `json:"sender_reference_id"`
	// The settlement date of the transaction once it gets posted
	SettlementDate *string `json:"settlement_date,omitempty"`
	// The current status of the transfer
	Status string `json:"status"`
	// The id of the tenant containing the resource. This is relevant for Fintechs that have multiple workspaces.
	Tenant string `json:"tenant"`
	// ID of the resulting transaction resource
	TransactionId *string `json:"transaction_id,omitempty"`
	// The fedwire label associated with the subtype code
	TypeSubtype *string `json:"type_subtype,omitempty"`
}

type _IncomingWire IncomingWire

// NewIncomingWire instantiates a new IncomingWire object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIncomingWire(amount int32, creationTime time.Time, id string, isReturn bool, receiver Party, receivingAccountNumber string, sender Party, senderReferenceId string, status string, tenant string) *IncomingWire {
	this := IncomingWire{}
	this.Amount = amount
	this.CreationTime = creationTime
	this.Id = id
	this.IsReturn = isReturn
	this.Receiver = receiver
	this.ReceivingAccountNumber = receivingAccountNumber
	this.Sender = sender
	this.SenderReferenceId = senderReferenceId
	this.Status = status
	this.Tenant = tenant
	return &this
}

// NewIncomingWireWithDefaults instantiates a new IncomingWire object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIncomingWireWithDefaults() *IncomingWire {
	this := IncomingWire{}
	return &this
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *IncomingWire) GetAccountId() string {
	if o == nil || IsNil(o.AccountId) {
		var ret string
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomingWire) GetAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.AccountId) {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *IncomingWire) HasAccountId() bool {
	if o != nil && !IsNil(o.AccountId) {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given string and assigns it to the AccountId field.
func (o *IncomingWire) SetAccountId(v string) {
	o.AccountId = &v
}

// GetAmount returns the Amount field value
func (o *IncomingWire) GetAmount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *IncomingWire) GetAmountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *IncomingWire) SetAmount(v int32) {
	o.Amount = v
}

// GetBankMessage returns the BankMessage field value if set, zero value otherwise.
func (o *IncomingWire) GetBankMessage() string {
	if o == nil || IsNil(o.BankMessage) {
		var ret string
		return ret
	}
	return *o.BankMessage
}

// GetBankMessageOk returns a tuple with the BankMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomingWire) GetBankMessageOk() (*string, bool) {
	if o == nil || IsNil(o.BankMessage) {
		return nil, false
	}
	return o.BankMessage, true
}

// HasBankMessage returns a boolean if a field has been set.
func (o *IncomingWire) HasBankMessage() bool {
	if o != nil && !IsNil(o.BankMessage) {
		return true
	}

	return false
}

// SetBankMessage gets a reference to the given string and assigns it to the BankMessage field.
func (o *IncomingWire) SetBankMessage(v string) {
	o.BankMessage = &v
}

// GetCreationTime returns the CreationTime field value
func (o *IncomingWire) GetCreationTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreationTime
}

// GetCreationTimeOk returns a tuple with the CreationTime field value
// and a boolean to check if the value has been set.
func (o *IncomingWire) GetCreationTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreationTime, true
}

// SetCreationTime sets field value
func (o *IncomingWire) SetCreationTime(v time.Time) {
	o.CreationTime = v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *IncomingWire) GetCurrency() string {
	if o == nil || IsNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomingWire) GetCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *IncomingWire) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *IncomingWire) SetCurrency(v string) {
	o.Currency = &v
}

// GetCustomerId returns the CustomerId field value if set, zero value otherwise.
func (o *IncomingWire) GetCustomerId() string {
	if o == nil || IsNil(o.CustomerId) {
		var ret string
		return ret
	}
	return *o.CustomerId
}

// GetCustomerIdOk returns a tuple with the CustomerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomingWire) GetCustomerIdOk() (*string, bool) {
	if o == nil || IsNil(o.CustomerId) {
		return nil, false
	}
	return o.CustomerId, true
}

// HasCustomerId returns a boolean if a field has been set.
func (o *IncomingWire) HasCustomerId() bool {
	if o != nil && !IsNil(o.CustomerId) {
		return true
	}

	return false
}

// SetCustomerId gets a reference to the given string and assigns it to the CustomerId field.
func (o *IncomingWire) SetCustomerId(v string) {
	o.CustomerId = &v
}

// GetDeclineReason returns the DeclineReason field value if set, zero value otherwise.
func (o *IncomingWire) GetDeclineReason() string {
	if o == nil || IsNil(o.DeclineReason) {
		var ret string
		return ret
	}
	return *o.DeclineReason
}

// GetDeclineReasonOk returns a tuple with the DeclineReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomingWire) GetDeclineReasonOk() (*string, bool) {
	if o == nil || IsNil(o.DeclineReason) {
		return nil, false
	}
	return o.DeclineReason, true
}

// HasDeclineReason returns a boolean if a field has been set.
func (o *IncomingWire) HasDeclineReason() bool {
	if o != nil && !IsNil(o.DeclineReason) {
		return true
	}

	return false
}

// SetDeclineReason gets a reference to the given string and assigns it to the DeclineReason field.
func (o *IncomingWire) SetDeclineReason(v string) {
	o.DeclineReason = &v
}

// GetEffectiveDate returns the EffectiveDate field value if set, zero value otherwise.
func (o *IncomingWire) GetEffectiveDate() string {
	if o == nil || IsNil(o.EffectiveDate) {
		var ret string
		return ret
	}
	return *o.EffectiveDate
}

// GetEffectiveDateOk returns a tuple with the EffectiveDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomingWire) GetEffectiveDateOk() (*string, bool) {
	if o == nil || IsNil(o.EffectiveDate) {
		return nil, false
	}
	return o.EffectiveDate, true
}

// HasEffectiveDate returns a boolean if a field has been set.
func (o *IncomingWire) HasEffectiveDate() bool {
	if o != nil && !IsNil(o.EffectiveDate) {
		return true
	}

	return false
}

// SetEffectiveDate gets a reference to the given string and assigns it to the EffectiveDate field.
func (o *IncomingWire) SetEffectiveDate(v string) {
	o.EffectiveDate = &v
}

// GetId returns the Id field value
func (o *IncomingWire) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *IncomingWire) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *IncomingWire) SetId(v string) {
	o.Id = v
}

// GetInputMessageAccountabilityData returns the InputMessageAccountabilityData field value if set, zero value otherwise.
func (o *IncomingWire) GetInputMessageAccountabilityData() string {
	if o == nil || IsNil(o.InputMessageAccountabilityData) {
		var ret string
		return ret
	}
	return *o.InputMessageAccountabilityData
}

// GetInputMessageAccountabilityDataOk returns a tuple with the InputMessageAccountabilityData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomingWire) GetInputMessageAccountabilityDataOk() (*string, bool) {
	if o == nil || IsNil(o.InputMessageAccountabilityData) {
		return nil, false
	}
	return o.InputMessageAccountabilityData, true
}

// HasInputMessageAccountabilityData returns a boolean if a field has been set.
func (o *IncomingWire) HasInputMessageAccountabilityData() bool {
	if o != nil && !IsNil(o.InputMessageAccountabilityData) {
		return true
	}

	return false
}

// SetInputMessageAccountabilityData gets a reference to the given string and assigns it to the InputMessageAccountabilityData field.
func (o *IncomingWire) SetInputMessageAccountabilityData(v string) {
	o.InputMessageAccountabilityData = &v
}

// GetIsReturn returns the IsReturn field value
func (o *IncomingWire) GetIsReturn() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsReturn
}

// GetIsReturnOk returns a tuple with the IsReturn field value
// and a boolean to check if the value has been set.
func (o *IncomingWire) GetIsReturnOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsReturn, true
}

// SetIsReturn sets field value
func (o *IncomingWire) SetIsReturn(v bool) {
	o.IsReturn = v
}

// GetNetwork returns the Network field value if set, zero value otherwise.
func (o *IncomingWire) GetNetwork() string {
	if o == nil || IsNil(o.Network) {
		var ret string
		return ret
	}
	return *o.Network
}

// GetNetworkOk returns a tuple with the Network field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomingWire) GetNetworkOk() (*string, bool) {
	if o == nil || IsNil(o.Network) {
		return nil, false
	}
	return o.Network, true
}

// HasNetwork returns a boolean if a field has been set.
func (o *IncomingWire) HasNetwork() bool {
	if o != nil && !IsNil(o.Network) {
		return true
	}

	return false
}

// SetNetwork gets a reference to the given string and assigns it to the Network field.
func (o *IncomingWire) SetNetwork(v string) {
	o.Network = &v
}

// GetOriginatingAccountNumber returns the OriginatingAccountNumber field value if set, zero value otherwise.
func (o *IncomingWire) GetOriginatingAccountNumber() string {
	if o == nil || IsNil(o.OriginatingAccountNumber) {
		var ret string
		return ret
	}
	return *o.OriginatingAccountNumber
}

// GetOriginatingAccountNumberOk returns a tuple with the OriginatingAccountNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomingWire) GetOriginatingAccountNumberOk() (*string, bool) {
	if o == nil || IsNil(o.OriginatingAccountNumber) {
		return nil, false
	}
	return o.OriginatingAccountNumber, true
}

// HasOriginatingAccountNumber returns a boolean if a field has been set.
func (o *IncomingWire) HasOriginatingAccountNumber() bool {
	if o != nil && !IsNil(o.OriginatingAccountNumber) {
		return true
	}

	return false
}

// SetOriginatingAccountNumber gets a reference to the given string and assigns it to the OriginatingAccountNumber field.
func (o *IncomingWire) SetOriginatingAccountNumber(v string) {
	o.OriginatingAccountNumber = &v
}

// GetReceiver returns the Receiver field value
func (o *IncomingWire) GetReceiver() Party {
	if o == nil {
		var ret Party
		return ret
	}

	return o.Receiver
}

// GetReceiverOk returns a tuple with the Receiver field value
// and a boolean to check if the value has been set.
func (o *IncomingWire) GetReceiverOk() (*Party, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Receiver, true
}

// SetReceiver sets field value
func (o *IncomingWire) SetReceiver(v Party) {
	o.Receiver = v
}

// GetReceivingAccountId returns the ReceivingAccountId field value if set, zero value otherwise.
func (o *IncomingWire) GetReceivingAccountId() string {
	if o == nil || IsNil(o.ReceivingAccountId) {
		var ret string
		return ret
	}
	return *o.ReceivingAccountId
}

// GetReceivingAccountIdOk returns a tuple with the ReceivingAccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomingWire) GetReceivingAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.ReceivingAccountId) {
		return nil, false
	}
	return o.ReceivingAccountId, true
}

// HasReceivingAccountId returns a boolean if a field has been set.
func (o *IncomingWire) HasReceivingAccountId() bool {
	if o != nil && !IsNil(o.ReceivingAccountId) {
		return true
	}

	return false
}

// SetReceivingAccountId gets a reference to the given string and assigns it to the ReceivingAccountId field.
func (o *IncomingWire) SetReceivingAccountId(v string) {
	o.ReceivingAccountId = &v
}

// GetReceivingAccountNumber returns the ReceivingAccountNumber field value
func (o *IncomingWire) GetReceivingAccountNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReceivingAccountNumber
}

// GetReceivingAccountNumberOk returns a tuple with the ReceivingAccountNumber field value
// and a boolean to check if the value has been set.
func (o *IncomingWire) GetReceivingAccountNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReceivingAccountNumber, true
}

// SetReceivingAccountNumber sets field value
func (o *IncomingWire) SetReceivingAccountNumber(v string) {
	o.ReceivingAccountNumber = v
}

// GetRecipientMessage returns the RecipientMessage field value if set, zero value otherwise.
func (o *IncomingWire) GetRecipientMessage() string {
	if o == nil || IsNil(o.RecipientMessage) {
		var ret string
		return ret
	}
	return *o.RecipientMessage
}

// GetRecipientMessageOk returns a tuple with the RecipientMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomingWire) GetRecipientMessageOk() (*string, bool) {
	if o == nil || IsNil(o.RecipientMessage) {
		return nil, false
	}
	return o.RecipientMessage, true
}

// HasRecipientMessage returns a boolean if a field has been set.
func (o *IncomingWire) HasRecipientMessage() bool {
	if o != nil && !IsNil(o.RecipientMessage) {
		return true
	}

	return false
}

// SetRecipientMessage gets a reference to the given string and assigns it to the RecipientMessage field.
func (o *IncomingWire) SetRecipientMessage(v string) {
	o.RecipientMessage = &v
}

// GetReturnData returns the ReturnData field value if set, zero value otherwise.
func (o *IncomingWire) GetReturnData() ReturnData1 {
	if o == nil || IsNil(o.ReturnData) {
		var ret ReturnData1
		return ret
	}
	return *o.ReturnData
}

// GetReturnDataOk returns a tuple with the ReturnData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomingWire) GetReturnDataOk() (*ReturnData1, bool) {
	if o == nil || IsNil(o.ReturnData) {
		return nil, false
	}
	return o.ReturnData, true
}

// HasReturnData returns a boolean if a field has been set.
func (o *IncomingWire) HasReturnData() bool {
	if o != nil && !IsNil(o.ReturnData) {
		return true
	}

	return false
}

// SetReturnData gets a reference to the given ReturnData1 and assigns it to the ReturnData field.
func (o *IncomingWire) SetReturnData(v ReturnData1) {
	o.ReturnData = &v
}

// GetReturnReason returns the ReturnReason field value if set, zero value otherwise.
func (o *IncomingWire) GetReturnReason() string {
	if o == nil || IsNil(o.ReturnReason) {
		var ret string
		return ret
	}
	return *o.ReturnReason
}

// GetReturnReasonOk returns a tuple with the ReturnReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomingWire) GetReturnReasonOk() (*string, bool) {
	if o == nil || IsNil(o.ReturnReason) {
		return nil, false
	}
	return o.ReturnReason, true
}

// HasReturnReason returns a boolean if a field has been set.
func (o *IncomingWire) HasReturnReason() bool {
	if o != nil && !IsNil(o.ReturnReason) {
		return true
	}

	return false
}

// SetReturnReason gets a reference to the given string and assigns it to the ReturnReason field.
func (o *IncomingWire) SetReturnReason(v string) {
	o.ReturnReason = &v
}

// GetSender returns the Sender field value
func (o *IncomingWire) GetSender() Party {
	if o == nil {
		var ret Party
		return ret
	}

	return o.Sender
}

// GetSenderOk returns a tuple with the Sender field value
// and a boolean to check if the value has been set.
func (o *IncomingWire) GetSenderOk() (*Party, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sender, true
}

// SetSender sets field value
func (o *IncomingWire) SetSender(v Party) {
	o.Sender = v
}

// GetSenderReferenceId returns the SenderReferenceId field value
func (o *IncomingWire) GetSenderReferenceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SenderReferenceId
}

// GetSenderReferenceIdOk returns a tuple with the SenderReferenceId field value
// and a boolean to check if the value has been set.
func (o *IncomingWire) GetSenderReferenceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SenderReferenceId, true
}

// SetSenderReferenceId sets field value
func (o *IncomingWire) SetSenderReferenceId(v string) {
	o.SenderReferenceId = v
}

// GetSettlementDate returns the SettlementDate field value if set, zero value otherwise.
func (o *IncomingWire) GetSettlementDate() string {
	if o == nil || IsNil(o.SettlementDate) {
		var ret string
		return ret
	}
	return *o.SettlementDate
}

// GetSettlementDateOk returns a tuple with the SettlementDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomingWire) GetSettlementDateOk() (*string, bool) {
	if o == nil || IsNil(o.SettlementDate) {
		return nil, false
	}
	return o.SettlementDate, true
}

// HasSettlementDate returns a boolean if a field has been set.
func (o *IncomingWire) HasSettlementDate() bool {
	if o != nil && !IsNil(o.SettlementDate) {
		return true
	}

	return false
}

// SetSettlementDate gets a reference to the given string and assigns it to the SettlementDate field.
func (o *IncomingWire) SetSettlementDate(v string) {
	o.SettlementDate = &v
}

// GetStatus returns the Status field value
func (o *IncomingWire) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *IncomingWire) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *IncomingWire) SetStatus(v string) {
	o.Status = v
}

// GetTenant returns the Tenant field value
func (o *IncomingWire) GetTenant() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Tenant
}

// GetTenantOk returns a tuple with the Tenant field value
// and a boolean to check if the value has been set.
func (o *IncomingWire) GetTenantOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tenant, true
}

// SetTenant sets field value
func (o *IncomingWire) SetTenant(v string) {
	o.Tenant = v
}

// GetTransactionId returns the TransactionId field value if set, zero value otherwise.
func (o *IncomingWire) GetTransactionId() string {
	if o == nil || IsNil(o.TransactionId) {
		var ret string
		return ret
	}
	return *o.TransactionId
}

// GetTransactionIdOk returns a tuple with the TransactionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomingWire) GetTransactionIdOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionId) {
		return nil, false
	}
	return o.TransactionId, true
}

// HasTransactionId returns a boolean if a field has been set.
func (o *IncomingWire) HasTransactionId() bool {
	if o != nil && !IsNil(o.TransactionId) {
		return true
	}

	return false
}

// SetTransactionId gets a reference to the given string and assigns it to the TransactionId field.
func (o *IncomingWire) SetTransactionId(v string) {
	o.TransactionId = &v
}

// GetTypeSubtype returns the TypeSubtype field value if set, zero value otherwise.
func (o *IncomingWire) GetTypeSubtype() string {
	if o == nil || IsNil(o.TypeSubtype) {
		var ret string
		return ret
	}
	return *o.TypeSubtype
}

// GetTypeSubtypeOk returns a tuple with the TypeSubtype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomingWire) GetTypeSubtypeOk() (*string, bool) {
	if o == nil || IsNil(o.TypeSubtype) {
		return nil, false
	}
	return o.TypeSubtype, true
}

// HasTypeSubtype returns a boolean if a field has been set.
func (o *IncomingWire) HasTypeSubtype() bool {
	if o != nil && !IsNil(o.TypeSubtype) {
		return true
	}

	return false
}

// SetTypeSubtype gets a reference to the given string and assigns it to the TypeSubtype field.
func (o *IncomingWire) SetTypeSubtype(v string) {
	o.TypeSubtype = &v
}

func (o IncomingWire) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IncomingWire) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccountId) {
		toSerialize["account_id"] = o.AccountId
	}
	toSerialize["amount"] = o.Amount
	if !IsNil(o.BankMessage) {
		toSerialize["bank_message"] = o.BankMessage
	}
	toSerialize["creation_time"] = o.CreationTime
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.CustomerId) {
		toSerialize["customer_id"] = o.CustomerId
	}
	if !IsNil(o.DeclineReason) {
		toSerialize["decline_reason"] = o.DeclineReason
	}
	if !IsNil(o.EffectiveDate) {
		toSerialize["effective_date"] = o.EffectiveDate
	}
	toSerialize["id"] = o.Id
	if !IsNil(o.InputMessageAccountabilityData) {
		toSerialize["input_message_accountability_data"] = o.InputMessageAccountabilityData
	}
	toSerialize["is_return"] = o.IsReturn
	if !IsNil(o.Network) {
		toSerialize["network"] = o.Network
	}
	if !IsNil(o.OriginatingAccountNumber) {
		toSerialize["originating_account_number"] = o.OriginatingAccountNumber
	}
	toSerialize["receiver"] = o.Receiver
	if !IsNil(o.ReceivingAccountId) {
		toSerialize["receiving_account_id"] = o.ReceivingAccountId
	}
	toSerialize["receiving_account_number"] = o.ReceivingAccountNumber
	if !IsNil(o.RecipientMessage) {
		toSerialize["recipient_message"] = o.RecipientMessage
	}
	if !IsNil(o.ReturnData) {
		toSerialize["return_data"] = o.ReturnData
	}
	if !IsNil(o.ReturnReason) {
		toSerialize["return_reason"] = o.ReturnReason
	}
	toSerialize["sender"] = o.Sender
	toSerialize["sender_reference_id"] = o.SenderReferenceId
	if !IsNil(o.SettlementDate) {
		toSerialize["settlement_date"] = o.SettlementDate
	}
	toSerialize["status"] = o.Status
	toSerialize["tenant"] = o.Tenant
	if !IsNil(o.TransactionId) {
		toSerialize["transaction_id"] = o.TransactionId
	}
	if !IsNil(o.TypeSubtype) {
		toSerialize["type_subtype"] = o.TypeSubtype
	}
	return toSerialize, nil
}

func (o *IncomingWire) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"amount",
		"creation_time",
		"id",
		"is_return",
		"receiver",
		"receiving_account_number",
		"sender",
		"sender_reference_id",
		"status",
		"tenant",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIncomingWire := _IncomingWire{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIncomingWire)

	if err != nil {
		return err
	}

	*o = IncomingWire(varIncomingWire)

	return err
}

type NullableIncomingWire struct {
	value *IncomingWire
	isSet bool
}

func (v NullableIncomingWire) Get() *IncomingWire {
	return v.value
}

func (v *NullableIncomingWire) Set(val *IncomingWire) {
	v.value = val
	v.isSet = true
}

func (v NullableIncomingWire) IsSet() bool {
	return v.isSet
}

func (v *NullableIncomingWire) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIncomingWire(val *IncomingWire) *NullableIncomingWire {
	return &NullableIncomingWire{value: val, isSet: true}
}

func (v NullableIncomingWire) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIncomingWire) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
