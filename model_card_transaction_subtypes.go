/*
Synctera API

<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p> 

API version: 0.32.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// CardTransactionSubtypes The set of valid CARD transaction subtypes
type CardTransactionSubtypes string

// List of card_transaction_subtypes
const (
	CARDTRANSACTIONSUBTYPES_ATM_WITHDRAWAL CardTransactionSubtypes = "ATM_WITHDRAWAL"
	CARDTRANSACTIONSUBTYPES_ATM_WITHDRAWAL_REVERSAL CardTransactionSubtypes = "ATM_WITHDRAWAL_REVERSAL"
	CARDTRANSACTIONSUBTYPES_BALANCE_INQUIRY CardTransactionSubtypes = "BALANCE_INQUIRY"
	CARDTRANSACTIONSUBTYPES_CARD_TRANSACTION CardTransactionSubtypes = "CARD_TRANSACTION"
	CARDTRANSACTIONSUBTYPES_CARD_TRANSACTION_REVERSAL CardTransactionSubtypes = "CARD_TRANSACTION_REVERSAL"
	CARDTRANSACTIONSUBTYPES_CREDIT CardTransactionSubtypes = "CREDIT"
	CARDTRANSACTIONSUBTYPES_CREDIT_REVERSAL CardTransactionSubtypes = "CREDIT_REVERSAL"
	CARDTRANSACTIONSUBTYPES_DIRECTPOST CardTransactionSubtypes = "DIRECTPOST"
	CARDTRANSACTIONSUBTYPES_DIRECTPOST_REVERSAL CardTransactionSubtypes = "DIRECTPOST_REVERSAL"
	CARDTRANSACTIONSUBTYPES_POS_CASHBACK CardTransactionSubtypes = "POS_CASHBACK"
	CARDTRANSACTIONSUBTYPES_POS_CASHBACK_REVERSAL CardTransactionSubtypes = "POS_CASHBACK_REVERSAL"
	CARDTRANSACTIONSUBTYPES_POS_PURCHASE CardTransactionSubtypes = "POS_PURCHASE"
	CARDTRANSACTIONSUBTYPES_POS_PURCHASE_REFUND CardTransactionSubtypes = "POS_PURCHASE_REFUND"
	CARDTRANSACTIONSUBTYPES_POS_PURCHASE_REFUND_REVERSAL CardTransactionSubtypes = "POS_PURCHASE_REFUND_REVERSAL"
	CARDTRANSACTIONSUBTYPES_POS_PURCHASE_REVERSAL CardTransactionSubtypes = "POS_PURCHASE_REVERSAL"
	CARDTRANSACTIONSUBTYPES_POS_REFUND CardTransactionSubtypes = "POS_REFUND"
	CARDTRANSACTIONSUBTYPES_POS_REFUND_REVERSAL CardTransactionSubtypes = "POS_REFUND_REVERSAL"
	CARDTRANSACTIONSUBTYPES_PROVISIONAL_CREDIT CardTransactionSubtypes = "PROVISIONAL_CREDIT"
	CARDTRANSACTIONSUBTYPES_PROVISIONAL_CREDIT_REVERSAL CardTransactionSubtypes = "PROVISIONAL_CREDIT_REVERSAL"
)

// All allowed values of CardTransactionSubtypes enum
var AllowedCardTransactionSubtypesEnumValues = []CardTransactionSubtypes{
	"ATM_WITHDRAWAL",
	"ATM_WITHDRAWAL_REVERSAL",
	"BALANCE_INQUIRY",
	"CARD_TRANSACTION",
	"CARD_TRANSACTION_REVERSAL",
	"CREDIT",
	"CREDIT_REVERSAL",
	"DIRECTPOST",
	"DIRECTPOST_REVERSAL",
	"POS_CASHBACK",
	"POS_CASHBACK_REVERSAL",
	"POS_PURCHASE",
	"POS_PURCHASE_REFUND",
	"POS_PURCHASE_REFUND_REVERSAL",
	"POS_PURCHASE_REVERSAL",
	"POS_REFUND",
	"POS_REFUND_REVERSAL",
	"PROVISIONAL_CREDIT",
	"PROVISIONAL_CREDIT_REVERSAL",
}

func (v *CardTransactionSubtypes) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CardTransactionSubtypes(value)
	for _, existing := range AllowedCardTransactionSubtypesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CardTransactionSubtypes", value)
}

// NewCardTransactionSubtypesFromValue returns a pointer to a valid CardTransactionSubtypes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCardTransactionSubtypesFromValue(v string) (*CardTransactionSubtypes, error) {
	ev := CardTransactionSubtypes(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CardTransactionSubtypes: valid values are %v", v, AllowedCardTransactionSubtypesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CardTransactionSubtypes) IsValid() bool {
	for _, existing := range AllowedCardTransactionSubtypesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to card_transaction_subtypes value
func (v CardTransactionSubtypes) Ptr() *CardTransactionSubtypes {
	return &v
}

type NullableCardTransactionSubtypes struct {
	value *CardTransactionSubtypes
	isSet bool
}

func (v NullableCardTransactionSubtypes) Get() *CardTransactionSubtypes {
	return v.value
}

func (v *NullableCardTransactionSubtypes) Set(val *CardTransactionSubtypes) {
	v.value = val
	v.isSet = true
}

func (v NullableCardTransactionSubtypes) IsSet() bool {
	return v.isSet
}

func (v *NullableCardTransactionSubtypes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCardTransactionSubtypes(val *CardTransactionSubtypes) *NullableCardTransactionSubtypes {
	return &NullableCardTransactionSubtypes{value: val, isSet: true}
}

func (v NullableCardTransactionSubtypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCardTransactionSubtypes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

