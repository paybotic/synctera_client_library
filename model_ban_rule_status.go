/*
Synctera API

<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p> 

API version: 0.5.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// BanRuleStatus Active status for ban_rule. Default is ACTIVE
type BanRuleStatus string

// List of ban_rule_status
const (
	BANRULESTATUS_ACTIVE BanRuleStatus = "ACTIVE"
	BANRULESTATUS_INACTIVE BanRuleStatus = "INACTIVE"
)

// All allowed values of BanRuleStatus enum
var AllowedBanRuleStatusEnumValues = []BanRuleStatus{
	"ACTIVE",
	"INACTIVE",
}

func (v *BanRuleStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BanRuleStatus(value)
	for _, existing := range AllowedBanRuleStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BanRuleStatus", value)
}

// NewBanRuleStatusFromValue returns a pointer to a valid BanRuleStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBanRuleStatusFromValue(v string) (*BanRuleStatus, error) {
	ev := BanRuleStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BanRuleStatus: valid values are %v", v, AllowedBanRuleStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BanRuleStatus) IsValid() bool {
	for _, existing := range AllowedBanRuleStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ban_rule_status value
func (v BanRuleStatus) Ptr() *BanRuleStatus {
	return &v
}

type NullableBanRuleStatus struct {
	value *BanRuleStatus
	isSet bool
}

func (v NullableBanRuleStatus) Get() *BanRuleStatus {
	return v.value
}

func (v *NullableBanRuleStatus) Set(val *BanRuleStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableBanRuleStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableBanRuleStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBanRuleStatus(val *BanRuleStatus) *NullableBanRuleStatus {
	return &NullableBanRuleStatus{value: val, isSet: true}
}

func (v NullableBanRuleStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBanRuleStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

