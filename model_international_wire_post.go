/*
Synctera API

<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.69.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the InternationalWirePost type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InternationalWirePost{}

// InternationalWirePost struct for InternationalWirePost
type InternationalWirePost struct {
	// Transfer amount in cents ($100 would be 10000) in the currency of the beneficiary.
	AmountInBeneficiaryCurrency int64 `json:"amount_in_beneficiary_currency"`
	// The currency of the beneficiary's account in ISO4217 format. Optional, the currency will be inferred form the receiving account, validation will be performed if this field is provided, if the receiving account currency and this field do not match the API will return an error.
	BeneficiaryCurrency *string `json:"beneficiary_currency,omitempty"`
	// The customer UUID representing the person initiating the Wire transfer.
	CustomerId string `json:"customer_id"`
	// Additional transfer metadata structured as key-value pairs.
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// The account uuid representing the sender of the wire.
	OriginatingAccountId string `json:"originating_account_id"`
	// The quote id returned from the /international_wire/quote endpoint, contains FX rate information. Required if the international wire is cross currency.
	QuoteId *string `json:"quote_id,omitempty"`
	// The external account uuid representing the recipient of the wire. Needs to be configured with international bank routing details (e.g. SWIFT code, refer to external accounts documentation).
	ReceivingAccountId string `json:"receiving_account_id"`
	// The currency of the sender's account in ISO4217 format. Optional, the currency will be inferred form the originating account, validation will be performed if this field is provided, if the originating account currency and this field do not match the API will return an error.
	SenderCurrency *string `json:"sender_currency,omitempty"`
	// Optional transaction instructions for the recipient bank if required by the recipient bank.
	WireInstruction *string `json:"wire_instruction,omitempty"`
	// Reason for the wire transfer.
	WirePurpose string `json:"wire_purpose"`
}

// NewInternationalWirePost instantiates a new InternationalWirePost object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInternationalWirePost(amountInBeneficiaryCurrency int64, customerId string, originatingAccountId string, receivingAccountId string, wirePurpose string) *InternationalWirePost {
	this := InternationalWirePost{}
	this.AmountInBeneficiaryCurrency = amountInBeneficiaryCurrency
	this.CustomerId = customerId
	this.OriginatingAccountId = originatingAccountId
	this.ReceivingAccountId = receivingAccountId
	this.WirePurpose = wirePurpose
	return &this
}

// NewInternationalWirePostWithDefaults instantiates a new InternationalWirePost object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInternationalWirePostWithDefaults() *InternationalWirePost {
	this := InternationalWirePost{}
	return &this
}

// GetAmountInBeneficiaryCurrency returns the AmountInBeneficiaryCurrency field value
func (o *InternationalWirePost) GetAmountInBeneficiaryCurrency() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.AmountInBeneficiaryCurrency
}

// GetAmountInBeneficiaryCurrencyOk returns a tuple with the AmountInBeneficiaryCurrency field value
// and a boolean to check if the value has been set.
func (o *InternationalWirePost) GetAmountInBeneficiaryCurrencyOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AmountInBeneficiaryCurrency, true
}

// SetAmountInBeneficiaryCurrency sets field value
func (o *InternationalWirePost) SetAmountInBeneficiaryCurrency(v int64) {
	o.AmountInBeneficiaryCurrency = v
}

// GetBeneficiaryCurrency returns the BeneficiaryCurrency field value if set, zero value otherwise.
func (o *InternationalWirePost) GetBeneficiaryCurrency() string {
	if o == nil || IsNil(o.BeneficiaryCurrency) {
		var ret string
		return ret
	}
	return *o.BeneficiaryCurrency
}

// GetBeneficiaryCurrencyOk returns a tuple with the BeneficiaryCurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InternationalWirePost) GetBeneficiaryCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.BeneficiaryCurrency) {
		return nil, false
	}
	return o.BeneficiaryCurrency, true
}

// HasBeneficiaryCurrency returns a boolean if a field has been set.
func (o *InternationalWirePost) HasBeneficiaryCurrency() bool {
	if o != nil && !IsNil(o.BeneficiaryCurrency) {
		return true
	}

	return false
}

// SetBeneficiaryCurrency gets a reference to the given string and assigns it to the BeneficiaryCurrency field.
func (o *InternationalWirePost) SetBeneficiaryCurrency(v string) {
	o.BeneficiaryCurrency = &v
}

// GetCustomerId returns the CustomerId field value
func (o *InternationalWirePost) GetCustomerId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CustomerId
}

// GetCustomerIdOk returns a tuple with the CustomerId field value
// and a boolean to check if the value has been set.
func (o *InternationalWirePost) GetCustomerIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CustomerId, true
}

// SetCustomerId sets field value
func (o *InternationalWirePost) SetCustomerId(v string) {
	o.CustomerId = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *InternationalWirePost) GetMetadata() map[string]interface{} {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InternationalWirePost) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Metadata) {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *InternationalWirePost) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *InternationalWirePost) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

// GetOriginatingAccountId returns the OriginatingAccountId field value
func (o *InternationalWirePost) GetOriginatingAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OriginatingAccountId
}

// GetOriginatingAccountIdOk returns a tuple with the OriginatingAccountId field value
// and a boolean to check if the value has been set.
func (o *InternationalWirePost) GetOriginatingAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OriginatingAccountId, true
}

// SetOriginatingAccountId sets field value
func (o *InternationalWirePost) SetOriginatingAccountId(v string) {
	o.OriginatingAccountId = v
}

// GetQuoteId returns the QuoteId field value if set, zero value otherwise.
func (o *InternationalWirePost) GetQuoteId() string {
	if o == nil || IsNil(o.QuoteId) {
		var ret string
		return ret
	}
	return *o.QuoteId
}

// GetQuoteIdOk returns a tuple with the QuoteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InternationalWirePost) GetQuoteIdOk() (*string, bool) {
	if o == nil || IsNil(o.QuoteId) {
		return nil, false
	}
	return o.QuoteId, true
}

// HasQuoteId returns a boolean if a field has been set.
func (o *InternationalWirePost) HasQuoteId() bool {
	if o != nil && !IsNil(o.QuoteId) {
		return true
	}

	return false
}

// SetQuoteId gets a reference to the given string and assigns it to the QuoteId field.
func (o *InternationalWirePost) SetQuoteId(v string) {
	o.QuoteId = &v
}

// GetReceivingAccountId returns the ReceivingAccountId field value
func (o *InternationalWirePost) GetReceivingAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReceivingAccountId
}

// GetReceivingAccountIdOk returns a tuple with the ReceivingAccountId field value
// and a boolean to check if the value has been set.
func (o *InternationalWirePost) GetReceivingAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReceivingAccountId, true
}

// SetReceivingAccountId sets field value
func (o *InternationalWirePost) SetReceivingAccountId(v string) {
	o.ReceivingAccountId = v
}

// GetSenderCurrency returns the SenderCurrency field value if set, zero value otherwise.
func (o *InternationalWirePost) GetSenderCurrency() string {
	if o == nil || IsNil(o.SenderCurrency) {
		var ret string
		return ret
	}
	return *o.SenderCurrency
}

// GetSenderCurrencyOk returns a tuple with the SenderCurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InternationalWirePost) GetSenderCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.SenderCurrency) {
		return nil, false
	}
	return o.SenderCurrency, true
}

// HasSenderCurrency returns a boolean if a field has been set.
func (o *InternationalWirePost) HasSenderCurrency() bool {
	if o != nil && !IsNil(o.SenderCurrency) {
		return true
	}

	return false
}

// SetSenderCurrency gets a reference to the given string and assigns it to the SenderCurrency field.
func (o *InternationalWirePost) SetSenderCurrency(v string) {
	o.SenderCurrency = &v
}

// GetWireInstruction returns the WireInstruction field value if set, zero value otherwise.
func (o *InternationalWirePost) GetWireInstruction() string {
	if o == nil || IsNil(o.WireInstruction) {
		var ret string
		return ret
	}
	return *o.WireInstruction
}

// GetWireInstructionOk returns a tuple with the WireInstruction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InternationalWirePost) GetWireInstructionOk() (*string, bool) {
	if o == nil || IsNil(o.WireInstruction) {
		return nil, false
	}
	return o.WireInstruction, true
}

// HasWireInstruction returns a boolean if a field has been set.
func (o *InternationalWirePost) HasWireInstruction() bool {
	if o != nil && !IsNil(o.WireInstruction) {
		return true
	}

	return false
}

// SetWireInstruction gets a reference to the given string and assigns it to the WireInstruction field.
func (o *InternationalWirePost) SetWireInstruction(v string) {
	o.WireInstruction = &v
}

// GetWirePurpose returns the WirePurpose field value
func (o *InternationalWirePost) GetWirePurpose() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WirePurpose
}

// GetWirePurposeOk returns a tuple with the WirePurpose field value
// and a boolean to check if the value has been set.
func (o *InternationalWirePost) GetWirePurposeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WirePurpose, true
}

// SetWirePurpose sets field value
func (o *InternationalWirePost) SetWirePurpose(v string) {
	o.WirePurpose = v
}

func (o InternationalWirePost) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InternationalWirePost) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["amount_in_beneficiary_currency"] = o.AmountInBeneficiaryCurrency
	if !IsNil(o.BeneficiaryCurrency) {
		toSerialize["beneficiary_currency"] = o.BeneficiaryCurrency
	}
	toSerialize["customer_id"] = o.CustomerId
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	toSerialize["originating_account_id"] = o.OriginatingAccountId
	if !IsNil(o.QuoteId) {
		toSerialize["quote_id"] = o.QuoteId
	}
	toSerialize["receiving_account_id"] = o.ReceivingAccountId
	if !IsNil(o.SenderCurrency) {
		toSerialize["sender_currency"] = o.SenderCurrency
	}
	if !IsNil(o.WireInstruction) {
		toSerialize["wire_instruction"] = o.WireInstruction
	}
	toSerialize["wire_purpose"] = o.WirePurpose
	return toSerialize, nil
}

type NullableInternationalWirePost struct {
	value *InternationalWirePost
	isSet bool
}

func (v NullableInternationalWirePost) Get() *InternationalWirePost {
	return v.value
}

func (v *NullableInternationalWirePost) Set(val *InternationalWirePost) {
	v.value = val
	v.isSet = true
}

func (v NullableInternationalWirePost) IsSet() bool {
	return v.isSet
}

func (v *NullableInternationalWirePost) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInternationalWirePost(val *InternationalWirePost) *NullableInternationalWirePost {
	return &NullableInternationalWirePost{value: val, isSet: true}
}

func (v NullableInternationalWirePost) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInternationalWirePost) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


