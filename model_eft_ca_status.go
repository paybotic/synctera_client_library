/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.140.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EftCaStatus The status of the transfer in the Synctera platform. This is automatically set upon the creation of a transfer. To cancel a transfer, the current status must be 'INITIATED' or 'PENDING' and the request status set to 'CANCELLED'. To trigger a return, the current status must be 'POSTED' and the returned status will be set to 'RETURNED' if successful.
type EftCaStatus string

// List of eft_ca_status
const (
	EFTCASTATUS_CANCELLED   EftCaStatus = "CANCELLED"
	EFTCASTATUS_EXPIRED     EftCaStatus = "EXPIRED"
	EFTCASTATUS_INITIATED   EftCaStatus = "INITIATED"
	EFTCASTATUS_IN_SUSPENSE EftCaStatus = "IN_SUSPENSE"
	EFTCASTATUS_PENDING     EftCaStatus = "PENDING"
	EFTCASTATUS_POSTED      EftCaStatus = "POSTED"
)

// All allowed values of EftCaStatus enum
var AllowedEftCaStatusEnumValues = []EftCaStatus{
	"CANCELLED",
	"EXPIRED",
	"INITIATED",
	"IN_SUSPENSE",
	"PENDING",
	"POSTED",
}

func (v *EftCaStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EftCaStatus(value)
	for _, existing := range AllowedEftCaStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EftCaStatus", value)
}

// NewEftCaStatusFromValue returns a pointer to a valid EftCaStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEftCaStatusFromValue(v string) (*EftCaStatus, error) {
	ev := EftCaStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EftCaStatus: valid values are %v", v, AllowedEftCaStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EftCaStatus) IsValid() bool {
	for _, existing := range AllowedEftCaStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to eft_ca_status value
func (v EftCaStatus) Ptr() *EftCaStatus {
	return &v
}

type NullableEftCaStatus struct {
	value *EftCaStatus
	isSet bool
}

func (v NullableEftCaStatus) Get() *EftCaStatus {
	return v.value
}

func (v *NullableEftCaStatus) Set(val *EftCaStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableEftCaStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableEftCaStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEftCaStatus(val *EftCaStatus) *NullableEftCaStatus {
	return &NullableEftCaStatus{value: val, isSet: true}
}

func (v NullableEftCaStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEftCaStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
