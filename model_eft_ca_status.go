/*
Synctera API

<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.69.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EftCaStatus The status of the transfer in the Synctera platform. This is automatically set upon the creation of a transfer. To cancel a transfer, the current status must be 'PENDING' and the request status set to 'CANCELLED'. To trigger a return, the current status must be 'POSTED' and the returned status will be set to 'RETURNED' if successful. 
type EftCaStatus string

// List of eft_ca_status
const (
	EFTCASTATUS_CANCELLED EftCaStatus = "CANCELLED"
	EFTCASTATUS_FAILED EftCaStatus = "FAILED"
	EFTCASTATUS_PENDING EftCaStatus = "PENDING"
	EFTCASTATUS_POSTED EftCaStatus = "POSTED"
	EFTCASTATUS_REJECTED EftCaStatus = "REJECTED"
	EFTCASTATUS_RETURNED EftCaStatus = "RETURNED"
)

// All allowed values of EftCaStatus enum
var AllowedEftCaStatusEnumValues = []EftCaStatus{
	"CANCELLED",
	"FAILED",
	"PENDING",
	"POSTED",
	"REJECTED",
	"RETURNED",
}

func (v *EftCaStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EftCaStatus(value)
	for _, existing := range AllowedEftCaStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EftCaStatus", value)
}

// NewEftCaStatusFromValue returns a pointer to a valid EftCaStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEftCaStatusFromValue(v string) (*EftCaStatus, error) {
	ev := EftCaStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EftCaStatus: valid values are %v", v, AllowedEftCaStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EftCaStatus) IsValid() bool {
	for _, existing := range AllowedEftCaStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to eft_ca_status value
func (v EftCaStatus) Ptr() *EftCaStatus {
	return &v
}

type NullableEftCaStatus struct {
	value *EftCaStatus
	isSet bool
}

func (v NullableEftCaStatus) Get() *EftCaStatus {
	return v.value
}

func (v *NullableEftCaStatus) Set(val *EftCaStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableEftCaStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableEftCaStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEftCaStatus(val *EftCaStatus) *NullableEftCaStatus {
	return &NullableEftCaStatus{value: val, isSet: true}
}

func (v NullableEftCaStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEftCaStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

