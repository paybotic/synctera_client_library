/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.140.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// IndustryType The industry type
type IndustryType string

// List of industry_type
const (
	INDUSTRYTYPE_ACCOMMODATION_AND_FOOD_SERVICES                                          IndustryType = "ACCOMMODATION_AND_FOOD_SERVICES"
	INDUSTRYTYPE_ADMINISTRATIVE_AND_SUPPORT_AND_WASTE_MANAGEMENT_AND_REMEDIATION_SERVICES IndustryType = "ADMINISTRATIVE_AND_SUPPORT_AND_WASTE_MANAGEMENT_AND_REMEDIATION_SERVICES"
	INDUSTRYTYPE_AGRICULTURE_FORESTRY_FISHING_AND_HUNTING                                 IndustryType = "AGRICULTURE_FORESTRY_FISHING_AND_HUNTING"
	INDUSTRYTYPE_ARTS_ENTERTAINMENT_AND_RECREATION                                        IndustryType = "ARTS_ENTERTAINMENT_AND_RECREATION"
	INDUSTRYTYPE_CONSTRUCTION                                                             IndustryType = "CONSTRUCTION"
	INDUSTRYTYPE_EDUCATIONAL_SERVICES                                                     IndustryType = "EDUCATIONAL_SERVICES"
	INDUSTRYTYPE_FINANCE_AND_INSURANCE                                                    IndustryType = "FINANCE_AND_INSURANCE"
	INDUSTRYTYPE_HEALTH_CARE_AND_SOCIAL_ASSISTANCE                                        IndustryType = "HEALTH_CARE_AND_SOCIAL_ASSISTANCE"
	INDUSTRYTYPE_INFORMATION                                                              IndustryType = "INFORMATION"
	INDUSTRYTYPE_MANAGEMENT_OF_COMPANIES_AND_ENTERPRISES                                  IndustryType = "MANAGEMENT_OF_COMPANIES_AND_ENTERPRISES"
	INDUSTRYTYPE_MANUFACTURING                                                            IndustryType = "MANUFACTURING"
	INDUSTRYTYPE_MINING_QUARRYING_AND_OIL_AND_GAS_EXTRACTION                              IndustryType = "MINING_QUARRYING_AND_OIL_AND_GAS_EXTRACTION"
	INDUSTRYTYPE_OTHER_SERVICES                                                           IndustryType = "OTHER_SERVICES"
	INDUSTRYTYPE_PROFESSIONAL_SCIENTIFIC_AND_TECHNICAL_SERVICES                           IndustryType = "PROFESSIONAL_SCIENTIFIC_AND_TECHNICAL_SERVICES"
	INDUSTRYTYPE_PUBLIC_ADMINISTRATION                                                    IndustryType = "PUBLIC_ADMINISTRATION"
	INDUSTRYTYPE_REAL_ESTATE_AND_RENTAL_AND_LEASING                                       IndustryType = "REAL_ESTATE_AND_RENTAL_AND_LEASING"
	INDUSTRYTYPE_RETAIL_TRADE                                                             IndustryType = "RETAIL_TRADE"
	INDUSTRYTYPE_TRANSPORTATION_AND_WAREHOUSING                                           IndustryType = "TRANSPORTATION_AND_WAREHOUSING"
	INDUSTRYTYPE_UTILITIES                                                                IndustryType = "UTILITIES"
	INDUSTRYTYPE_WHOLESALE_TRADE                                                          IndustryType = "WHOLESALE_TRADE"
)

// All allowed values of IndustryType enum
var AllowedIndustryTypeEnumValues = []IndustryType{
	"ACCOMMODATION_AND_FOOD_SERVICES",
	"ADMINISTRATIVE_AND_SUPPORT_AND_WASTE_MANAGEMENT_AND_REMEDIATION_SERVICES",
	"AGRICULTURE_FORESTRY_FISHING_AND_HUNTING",
	"ARTS_ENTERTAINMENT_AND_RECREATION",
	"CONSTRUCTION",
	"EDUCATIONAL_SERVICES",
	"FINANCE_AND_INSURANCE",
	"HEALTH_CARE_AND_SOCIAL_ASSISTANCE",
	"INFORMATION",
	"MANAGEMENT_OF_COMPANIES_AND_ENTERPRISES",
	"MANUFACTURING",
	"MINING_QUARRYING_AND_OIL_AND_GAS_EXTRACTION",
	"OTHER_SERVICES",
	"PROFESSIONAL_SCIENTIFIC_AND_TECHNICAL_SERVICES",
	"PUBLIC_ADMINISTRATION",
	"REAL_ESTATE_AND_RENTAL_AND_LEASING",
	"RETAIL_TRADE",
	"TRANSPORTATION_AND_WAREHOUSING",
	"UTILITIES",
	"WHOLESALE_TRADE",
}

func (v *IndustryType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := IndustryType(value)
	for _, existing := range AllowedIndustryTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid IndustryType", value)
}

// NewIndustryTypeFromValue returns a pointer to a valid IndustryType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIndustryTypeFromValue(v string) (*IndustryType, error) {
	ev := IndustryType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for IndustryType: valid values are %v", v, AllowedIndustryTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IndustryType) IsValid() bool {
	for _, existing := range AllowedIndustryTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to industry_type value
func (v IndustryType) Ptr() *IndustryType {
	return &v
}

type NullableIndustryType struct {
	value *IndustryType
	isSet bool
}

func (v NullableIndustryType) Get() *IndustryType {
	return v.value
}

func (v *NullableIndustryType) Set(val *IndustryType) {
	v.value = val
	v.isSet = true
}

func (v NullableIndustryType) IsSet() bool {
	return v.isSet
}

func (v *NullableIndustryType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIndustryType(val *IndustryType) *NullableIndustryType {
	return &NullableIndustryType{value: val, isSet: true}
}

func (v NullableIndustryType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIndustryType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
