/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.140.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the InstitutionList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstitutionList{}

// InstitutionList struct for InstitutionList
type InstitutionList struct {
	// If returned, use the next_page_token to query for the next page of results. Not returned if there are no more rows.
	NextPageToken *string       `json:"next_page_token,omitempty"`
	Institutions  []Institution `json:"institutions,omitempty"`
}

// NewInstitutionList instantiates a new InstitutionList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstitutionList() *InstitutionList {
	this := InstitutionList{}
	return &this
}

// NewInstitutionListWithDefaults instantiates a new InstitutionList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstitutionListWithDefaults() *InstitutionList {
	this := InstitutionList{}
	return &this
}

// GetNextPageToken returns the NextPageToken field value if set, zero value otherwise.
func (o *InstitutionList) GetNextPageToken() string {
	if o == nil || IsNil(o.NextPageToken) {
		var ret string
		return ret
	}
	return *o.NextPageToken
}

// GetNextPageTokenOk returns a tuple with the NextPageToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstitutionList) GetNextPageTokenOk() (*string, bool) {
	if o == nil || IsNil(o.NextPageToken) {
		return nil, false
	}
	return o.NextPageToken, true
}

// HasNextPageToken returns a boolean if a field has been set.
func (o *InstitutionList) HasNextPageToken() bool {
	if o != nil && !IsNil(o.NextPageToken) {
		return true
	}

	return false
}

// SetNextPageToken gets a reference to the given string and assigns it to the NextPageToken field.
func (o *InstitutionList) SetNextPageToken(v string) {
	o.NextPageToken = &v
}

// GetInstitutions returns the Institutions field value if set, zero value otherwise.
func (o *InstitutionList) GetInstitutions() []Institution {
	if o == nil || IsNil(o.Institutions) {
		var ret []Institution
		return ret
	}
	return o.Institutions
}

// GetInstitutionsOk returns a tuple with the Institutions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstitutionList) GetInstitutionsOk() ([]Institution, bool) {
	if o == nil || IsNil(o.Institutions) {
		return nil, false
	}
	return o.Institutions, true
}

// HasInstitutions returns a boolean if a field has been set.
func (o *InstitutionList) HasInstitutions() bool {
	if o != nil && !IsNil(o.Institutions) {
		return true
	}

	return false
}

// SetInstitutions gets a reference to the given []Institution and assigns it to the Institutions field.
func (o *InstitutionList) SetInstitutions(v []Institution) {
	o.Institutions = v
}

func (o InstitutionList) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstitutionList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NextPageToken) {
		toSerialize["next_page_token"] = o.NextPageToken
	}
	if !IsNil(o.Institutions) {
		toSerialize["institutions"] = o.Institutions
	}
	return toSerialize, nil
}

type NullableInstitutionList struct {
	value *InstitutionList
	isSet bool
}

func (v NullableInstitutionList) Get() *InstitutionList {
	return v.value
}

func (v *NullableInstitutionList) Set(val *InstitutionList) {
	v.value = val
	v.isSet = true
}

func (v NullableInstitutionList) IsSet() bool {
	return v.isSet
}

func (v *NullableInstitutionList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstitutionList(val *InstitutionList) *NullableInstitutionList {
	return &NullableInstitutionList{value: val, isSet: true}
}

func (v NullableInstitutionList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstitutionList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
