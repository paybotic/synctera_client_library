/*
Synctera API

<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.69.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ReturnData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReturnData{}

// ReturnData Data associated with a returned wire
type ReturnData struct {
	// Wire UUID of the original wire that was returned
	OriginalId *string `json:"original_id,omitempty"`
	// Transaction UUID of the original wire that was returned
	OriginalTransactionId *string `json:"original_transaction_id,omitempty"`
	// Wire reference ID of the original wire that was returned
	PreviousMessageId string `json:"previous_message_id"`
	// The cause of the return
	Reason *string `json:"reason,omitempty"`
}

// NewReturnData instantiates a new ReturnData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReturnData(previousMessageId string) *ReturnData {
	this := ReturnData{}
	this.PreviousMessageId = previousMessageId
	return &this
}

// NewReturnDataWithDefaults instantiates a new ReturnData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReturnDataWithDefaults() *ReturnData {
	this := ReturnData{}
	return &this
}

// GetOriginalId returns the OriginalId field value if set, zero value otherwise.
func (o *ReturnData) GetOriginalId() string {
	if o == nil || IsNil(o.OriginalId) {
		var ret string
		return ret
	}
	return *o.OriginalId
}

// GetOriginalIdOk returns a tuple with the OriginalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReturnData) GetOriginalIdOk() (*string, bool) {
	if o == nil || IsNil(o.OriginalId) {
		return nil, false
	}
	return o.OriginalId, true
}

// HasOriginalId returns a boolean if a field has been set.
func (o *ReturnData) HasOriginalId() bool {
	if o != nil && !IsNil(o.OriginalId) {
		return true
	}

	return false
}

// SetOriginalId gets a reference to the given string and assigns it to the OriginalId field.
func (o *ReturnData) SetOriginalId(v string) {
	o.OriginalId = &v
}

// GetOriginalTransactionId returns the OriginalTransactionId field value if set, zero value otherwise.
func (o *ReturnData) GetOriginalTransactionId() string {
	if o == nil || IsNil(o.OriginalTransactionId) {
		var ret string
		return ret
	}
	return *o.OriginalTransactionId
}

// GetOriginalTransactionIdOk returns a tuple with the OriginalTransactionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReturnData) GetOriginalTransactionIdOk() (*string, bool) {
	if o == nil || IsNil(o.OriginalTransactionId) {
		return nil, false
	}
	return o.OriginalTransactionId, true
}

// HasOriginalTransactionId returns a boolean if a field has been set.
func (o *ReturnData) HasOriginalTransactionId() bool {
	if o != nil && !IsNil(o.OriginalTransactionId) {
		return true
	}

	return false
}

// SetOriginalTransactionId gets a reference to the given string and assigns it to the OriginalTransactionId field.
func (o *ReturnData) SetOriginalTransactionId(v string) {
	o.OriginalTransactionId = &v
}

// GetPreviousMessageId returns the PreviousMessageId field value
func (o *ReturnData) GetPreviousMessageId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PreviousMessageId
}

// GetPreviousMessageIdOk returns a tuple with the PreviousMessageId field value
// and a boolean to check if the value has been set.
func (o *ReturnData) GetPreviousMessageIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PreviousMessageId, true
}

// SetPreviousMessageId sets field value
func (o *ReturnData) SetPreviousMessageId(v string) {
	o.PreviousMessageId = v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *ReturnData) GetReason() string {
	if o == nil || IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReturnData) GetReasonOk() (*string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *ReturnData) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *ReturnData) SetReason(v string) {
	o.Reason = &v
}

func (o ReturnData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReturnData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OriginalId) {
		toSerialize["original_id"] = o.OriginalId
	}
	if !IsNil(o.OriginalTransactionId) {
		toSerialize["original_transaction_id"] = o.OriginalTransactionId
	}
	toSerialize["previous_message_id"] = o.PreviousMessageId
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	return toSerialize, nil
}

type NullableReturnData struct {
	value *ReturnData
	isSet bool
}

func (v NullableReturnData) Get() *ReturnData {
	return v.value
}

func (v *NullableReturnData) Set(val *ReturnData) {
	v.value = val
	v.isSet = true
}

func (v NullableReturnData) IsSet() bool {
	return v.isSet
}

func (v *NullableReturnData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReturnData(val *ReturnData) *NullableReturnData {
	return &NullableReturnData{value: val, isSet: true}
}

func (v NullableReturnData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReturnData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


