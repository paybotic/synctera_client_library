/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.140.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the SingleUseTokenResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SingleUseTokenResponse{}

// SingleUseTokenResponse struct for SingleUseTokenResponse
type SingleUseTokenResponse struct {
	CustomerAccountMappingId *string `json:"customer_account_mapping_id,omitempty"`
	// yyyy-MM-ddTHH:mm:ssZ
	Expires time.Time `json:"expires"`
	Token   *string   `json:"token,omitempty"`
}

type _SingleUseTokenResponse SingleUseTokenResponse

// NewSingleUseTokenResponse instantiates a new SingleUseTokenResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSingleUseTokenResponse(expires time.Time) *SingleUseTokenResponse {
	this := SingleUseTokenResponse{}
	this.Expires = expires
	return &this
}

// NewSingleUseTokenResponseWithDefaults instantiates a new SingleUseTokenResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSingleUseTokenResponseWithDefaults() *SingleUseTokenResponse {
	this := SingleUseTokenResponse{}
	return &this
}

// GetCustomerAccountMappingId returns the CustomerAccountMappingId field value if set, zero value otherwise.
func (o *SingleUseTokenResponse) GetCustomerAccountMappingId() string {
	if o == nil || IsNil(o.CustomerAccountMappingId) {
		var ret string
		return ret
	}
	return *o.CustomerAccountMappingId
}

// GetCustomerAccountMappingIdOk returns a tuple with the CustomerAccountMappingId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SingleUseTokenResponse) GetCustomerAccountMappingIdOk() (*string, bool) {
	if o == nil || IsNil(o.CustomerAccountMappingId) {
		return nil, false
	}
	return o.CustomerAccountMappingId, true
}

// HasCustomerAccountMappingId returns a boolean if a field has been set.
func (o *SingleUseTokenResponse) HasCustomerAccountMappingId() bool {
	if o != nil && !IsNil(o.CustomerAccountMappingId) {
		return true
	}

	return false
}

// SetCustomerAccountMappingId gets a reference to the given string and assigns it to the CustomerAccountMappingId field.
func (o *SingleUseTokenResponse) SetCustomerAccountMappingId(v string) {
	o.CustomerAccountMappingId = &v
}

// GetExpires returns the Expires field value
func (o *SingleUseTokenResponse) GetExpires() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Expires
}

// GetExpiresOk returns a tuple with the Expires field value
// and a boolean to check if the value has been set.
func (o *SingleUseTokenResponse) GetExpiresOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Expires, true
}

// SetExpires sets field value
func (o *SingleUseTokenResponse) SetExpires(v time.Time) {
	o.Expires = v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *SingleUseTokenResponse) GetToken() string {
	if o == nil || IsNil(o.Token) {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SingleUseTokenResponse) GetTokenOk() (*string, bool) {
	if o == nil || IsNil(o.Token) {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *SingleUseTokenResponse) HasToken() bool {
	if o != nil && !IsNil(o.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *SingleUseTokenResponse) SetToken(v string) {
	o.Token = &v
}

func (o SingleUseTokenResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SingleUseTokenResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CustomerAccountMappingId) {
		toSerialize["customer_account_mapping_id"] = o.CustomerAccountMappingId
	}
	toSerialize["expires"] = o.Expires
	if !IsNil(o.Token) {
		toSerialize["token"] = o.Token
	}
	return toSerialize, nil
}

func (o *SingleUseTokenResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"expires",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSingleUseTokenResponse := _SingleUseTokenResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSingleUseTokenResponse)

	if err != nil {
		return err
	}

	*o = SingleUseTokenResponse(varSingleUseTokenResponse)

	return err
}

type NullableSingleUseTokenResponse struct {
	value *SingleUseTokenResponse
	isSet bool
}

func (v NullableSingleUseTokenResponse) Get() *SingleUseTokenResponse {
	return v.value
}

func (v *NullableSingleUseTokenResponse) Set(val *SingleUseTokenResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSingleUseTokenResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSingleUseTokenResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSingleUseTokenResponse(val *SingleUseTokenResponse) *NullableSingleUseTokenResponse {
	return &NullableSingleUseTokenResponse{value: val, isSet: true}
}

func (v NullableSingleUseTokenResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSingleUseTokenResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
