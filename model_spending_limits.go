/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.140.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SpendingLimits type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SpendingLimits{}

// SpendingLimits Account spending limits is unused and has been deprecated. Instead use the spend controls API.
type SpendingLimits struct {
	Day *SpendingLimitWithTime `json:"day,omitempty"`
	// User provided description on the spending limits
	Description *string                    `json:"description,omitempty"`
	Lifetime    *SpendingLimitWithTime     `json:"lifetime,omitempty"`
	Month       *SpendingLimitWithTime     `json:"month,omitempty"`
	Transaction *SpendingLimitsTransaction `json:"transaction,omitempty"`
	Week        *SpendingLimitWithTime     `json:"week,omitempty"`
}

// NewSpendingLimits instantiates a new SpendingLimits object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpendingLimits() *SpendingLimits {
	this := SpendingLimits{}
	return &this
}

// NewSpendingLimitsWithDefaults instantiates a new SpendingLimits object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpendingLimitsWithDefaults() *SpendingLimits {
	this := SpendingLimits{}
	return &this
}

// GetDay returns the Day field value if set, zero value otherwise.
func (o *SpendingLimits) GetDay() SpendingLimitWithTime {
	if o == nil || IsNil(o.Day) {
		var ret SpendingLimitWithTime
		return ret
	}
	return *o.Day
}

// GetDayOk returns a tuple with the Day field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpendingLimits) GetDayOk() (*SpendingLimitWithTime, bool) {
	if o == nil || IsNil(o.Day) {
		return nil, false
	}
	return o.Day, true
}

// HasDay returns a boolean if a field has been set.
func (o *SpendingLimits) HasDay() bool {
	if o != nil && !IsNil(o.Day) {
		return true
	}

	return false
}

// SetDay gets a reference to the given SpendingLimitWithTime and assigns it to the Day field.
func (o *SpendingLimits) SetDay(v SpendingLimitWithTime) {
	o.Day = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SpendingLimits) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpendingLimits) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SpendingLimits) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SpendingLimits) SetDescription(v string) {
	o.Description = &v
}

// GetLifetime returns the Lifetime field value if set, zero value otherwise.
func (o *SpendingLimits) GetLifetime() SpendingLimitWithTime {
	if o == nil || IsNil(o.Lifetime) {
		var ret SpendingLimitWithTime
		return ret
	}
	return *o.Lifetime
}

// GetLifetimeOk returns a tuple with the Lifetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpendingLimits) GetLifetimeOk() (*SpendingLimitWithTime, bool) {
	if o == nil || IsNil(o.Lifetime) {
		return nil, false
	}
	return o.Lifetime, true
}

// HasLifetime returns a boolean if a field has been set.
func (o *SpendingLimits) HasLifetime() bool {
	if o != nil && !IsNil(o.Lifetime) {
		return true
	}

	return false
}

// SetLifetime gets a reference to the given SpendingLimitWithTime and assigns it to the Lifetime field.
func (o *SpendingLimits) SetLifetime(v SpendingLimitWithTime) {
	o.Lifetime = &v
}

// GetMonth returns the Month field value if set, zero value otherwise.
func (o *SpendingLimits) GetMonth() SpendingLimitWithTime {
	if o == nil || IsNil(o.Month) {
		var ret SpendingLimitWithTime
		return ret
	}
	return *o.Month
}

// GetMonthOk returns a tuple with the Month field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpendingLimits) GetMonthOk() (*SpendingLimitWithTime, bool) {
	if o == nil || IsNil(o.Month) {
		return nil, false
	}
	return o.Month, true
}

// HasMonth returns a boolean if a field has been set.
func (o *SpendingLimits) HasMonth() bool {
	if o != nil && !IsNil(o.Month) {
		return true
	}

	return false
}

// SetMonth gets a reference to the given SpendingLimitWithTime and assigns it to the Month field.
func (o *SpendingLimits) SetMonth(v SpendingLimitWithTime) {
	o.Month = &v
}

// GetTransaction returns the Transaction field value if set, zero value otherwise.
func (o *SpendingLimits) GetTransaction() SpendingLimitsTransaction {
	if o == nil || IsNil(o.Transaction) {
		var ret SpendingLimitsTransaction
		return ret
	}
	return *o.Transaction
}

// GetTransactionOk returns a tuple with the Transaction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpendingLimits) GetTransactionOk() (*SpendingLimitsTransaction, bool) {
	if o == nil || IsNil(o.Transaction) {
		return nil, false
	}
	return o.Transaction, true
}

// HasTransaction returns a boolean if a field has been set.
func (o *SpendingLimits) HasTransaction() bool {
	if o != nil && !IsNil(o.Transaction) {
		return true
	}

	return false
}

// SetTransaction gets a reference to the given SpendingLimitsTransaction and assigns it to the Transaction field.
func (o *SpendingLimits) SetTransaction(v SpendingLimitsTransaction) {
	o.Transaction = &v
}

// GetWeek returns the Week field value if set, zero value otherwise.
func (o *SpendingLimits) GetWeek() SpendingLimitWithTime {
	if o == nil || IsNil(o.Week) {
		var ret SpendingLimitWithTime
		return ret
	}
	return *o.Week
}

// GetWeekOk returns a tuple with the Week field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpendingLimits) GetWeekOk() (*SpendingLimitWithTime, bool) {
	if o == nil || IsNil(o.Week) {
		return nil, false
	}
	return o.Week, true
}

// HasWeek returns a boolean if a field has been set.
func (o *SpendingLimits) HasWeek() bool {
	if o != nil && !IsNil(o.Week) {
		return true
	}

	return false
}

// SetWeek gets a reference to the given SpendingLimitWithTime and assigns it to the Week field.
func (o *SpendingLimits) SetWeek(v SpendingLimitWithTime) {
	o.Week = &v
}

func (o SpendingLimits) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SpendingLimits) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Day) {
		toSerialize["day"] = o.Day
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Lifetime) {
		toSerialize["lifetime"] = o.Lifetime
	}
	if !IsNil(o.Month) {
		toSerialize["month"] = o.Month
	}
	if !IsNil(o.Transaction) {
		toSerialize["transaction"] = o.Transaction
	}
	if !IsNil(o.Week) {
		toSerialize["week"] = o.Week
	}
	return toSerialize, nil
}

type NullableSpendingLimits struct {
	value *SpendingLimits
	isSet bool
}

func (v NullableSpendingLimits) Get() *SpendingLimits {
	return v.value
}

func (v *NullableSpendingLimits) Set(val *SpendingLimits) {
	v.value = val
	v.isSet = true
}

func (v NullableSpendingLimits) IsSet() bool {
	return v.isSet
}

func (v *NullableSpendingLimits) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpendingLimits(val *SpendingLimits) *NullableSpendingLimits {
	return &NullableSpendingLimits{value: val, isSet: true}
}

func (v NullableSpendingLimits) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpendingLimits) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
