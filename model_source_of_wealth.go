/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.140.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// SourceOfWealth The source of wealth for the customer.
type SourceOfWealth string

// List of source_of_wealth
const (
	SOURCEOFWEALTH_INHERITANCE   SourceOfWealth = "INHERITANCE"
	SOURCEOFWEALTH_INVESTMENT    SourceOfWealth = "INVESTMENT"
	SOURCEOFWEALTH_OTHER         SourceOfWealth = "OTHER"
	SOURCEOFWEALTH_PROPERTY_SALE SourceOfWealth = "PROPERTY_SALE"
	SOURCEOFWEALTH_RETIREMENT    SourceOfWealth = "RETIREMENT"
	SOURCEOFWEALTH_SALARY        SourceOfWealth = "SALARY"
)

// All allowed values of SourceOfWealth enum
var AllowedSourceOfWealthEnumValues = []SourceOfWealth{
	"INHERITANCE",
	"INVESTMENT",
	"OTHER",
	"PROPERTY_SALE",
	"RETIREMENT",
	"SALARY",
}

func (v *SourceOfWealth) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SourceOfWealth(value)
	for _, existing := range AllowedSourceOfWealthEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SourceOfWealth", value)
}

// NewSourceOfWealthFromValue returns a pointer to a valid SourceOfWealth
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSourceOfWealthFromValue(v string) (*SourceOfWealth, error) {
	ev := SourceOfWealth(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SourceOfWealth: valid values are %v", v, AllowedSourceOfWealthEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SourceOfWealth) IsValid() bool {
	for _, existing := range AllowedSourceOfWealthEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to source_of_wealth value
func (v SourceOfWealth) Ptr() *SourceOfWealth {
	return &v
}

type NullableSourceOfWealth struct {
	value *SourceOfWealth
	isSet bool
}

func (v NullableSourceOfWealth) Get() *SourceOfWealth {
	return v.value
}

func (v *NullableSourceOfWealth) Set(val *SourceOfWealth) {
	v.value = val
	v.isSet = true
}

func (v NullableSourceOfWealth) IsSet() bool {
	return v.isSet
}

func (v *NullableSourceOfWealth) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSourceOfWealth(val *SourceOfWealth) *NullableSourceOfWealth {
	return &NullableSourceOfWealth{value: val, isSet: true}
}

func (v NullableSourceOfWealth) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSourceOfWealth) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
