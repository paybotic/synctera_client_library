/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.140.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// SpendControlDirection The direction of funds flow to which a spend control applies. To limit the rate of funds flowing out of an account, use DEBIT. To limit the rate of funds flowing in to an account, use CREDIT. If this is not set, the spend control applies to debits (ie spending) only.
type SpendControlDirection string

// List of spend_control_direction
const (
	SPENDCONTROLDIRECTION_CREDITS SpendControlDirection = "CREDITS"
	SPENDCONTROLDIRECTION_DEBITS  SpendControlDirection = "DEBITS"
)

// All allowed values of SpendControlDirection enum
var AllowedSpendControlDirectionEnumValues = []SpendControlDirection{
	"CREDITS",
	"DEBITS",
}

func (v *SpendControlDirection) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SpendControlDirection(value)
	for _, existing := range AllowedSpendControlDirectionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SpendControlDirection", value)
}

// NewSpendControlDirectionFromValue returns a pointer to a valid SpendControlDirection
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSpendControlDirectionFromValue(v string) (*SpendControlDirection, error) {
	ev := SpendControlDirection(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SpendControlDirection: valid values are %v", v, AllowedSpendControlDirectionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SpendControlDirection) IsValid() bool {
	for _, existing := range AllowedSpendControlDirectionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to spend_control_direction value
func (v SpendControlDirection) Ptr() *SpendControlDirection {
	return &v
}

type NullableSpendControlDirection struct {
	value *SpendControlDirection
	isSet bool
}

func (v NullableSpendControlDirection) Get() *SpendControlDirection {
	return v.value
}

func (v *NullableSpendControlDirection) Set(val *SpendControlDirection) {
	v.value = val
	v.isSet = true
}

func (v NullableSpendControlDirection) IsSet() bool {
	return v.isSet
}

func (v *NullableSpendControlDirection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpendControlDirection(val *SpendControlDirection) *NullableSpendControlDirection {
	return &NullableSpendControlDirection{value: val, isSet: true}
}

func (v NullableSpendControlDirection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpendControlDirection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
