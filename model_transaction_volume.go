/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.140.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TransactionVolume type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionVolume{}

// TransactionVolume The transaction volume of the business.
type TransactionVolume struct {
	// The amount of the transactions in ISO 4217 minor currency units. For example, a transaction of $100 USD will be displayed as 10000.
	Amount *int32 `json:"amount,omitempty"`
	// The channel of the transaction volume.
	Channel *string `json:"channel,omitempty"`
	// The channel coverage of the transaction volume.
	ChannelCoverage *string `json:"channel_coverage,omitempty"`
	// The currency in ISO 4217 format.
	Currency  *string           `json:"currency,omitempty" validate:"regexp=^[A-Z]{3}$"`
	Frequency NullableFrequency `json:"frequency,omitempty"`
	// Whether the transaction volume is on Synctera.
	OnSynctera *bool `json:"on_synctera,omitempty"`
	// The number of transactions.
	TransactionCount *int32 `json:"transaction_count,omitempty"`
}

// NewTransactionVolume instantiates a new TransactionVolume object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionVolume() *TransactionVolume {
	this := TransactionVolume{}
	return &this
}

// NewTransactionVolumeWithDefaults instantiates a new TransactionVolume object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionVolumeWithDefaults() *TransactionVolume {
	this := TransactionVolume{}
	return &this
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *TransactionVolume) GetAmount() int32 {
	if o == nil || IsNil(o.Amount) {
		var ret int32
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionVolume) GetAmountOk() (*int32, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *TransactionVolume) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given int32 and assigns it to the Amount field.
func (o *TransactionVolume) SetAmount(v int32) {
	o.Amount = &v
}

// GetChannel returns the Channel field value if set, zero value otherwise.
func (o *TransactionVolume) GetChannel() string {
	if o == nil || IsNil(o.Channel) {
		var ret string
		return ret
	}
	return *o.Channel
}

// GetChannelOk returns a tuple with the Channel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionVolume) GetChannelOk() (*string, bool) {
	if o == nil || IsNil(o.Channel) {
		return nil, false
	}
	return o.Channel, true
}

// HasChannel returns a boolean if a field has been set.
func (o *TransactionVolume) HasChannel() bool {
	if o != nil && !IsNil(o.Channel) {
		return true
	}

	return false
}

// SetChannel gets a reference to the given string and assigns it to the Channel field.
func (o *TransactionVolume) SetChannel(v string) {
	o.Channel = &v
}

// GetChannelCoverage returns the ChannelCoverage field value if set, zero value otherwise.
func (o *TransactionVolume) GetChannelCoverage() string {
	if o == nil || IsNil(o.ChannelCoverage) {
		var ret string
		return ret
	}
	return *o.ChannelCoverage
}

// GetChannelCoverageOk returns a tuple with the ChannelCoverage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionVolume) GetChannelCoverageOk() (*string, bool) {
	if o == nil || IsNil(o.ChannelCoverage) {
		return nil, false
	}
	return o.ChannelCoverage, true
}

// HasChannelCoverage returns a boolean if a field has been set.
func (o *TransactionVolume) HasChannelCoverage() bool {
	if o != nil && !IsNil(o.ChannelCoverage) {
		return true
	}

	return false
}

// SetChannelCoverage gets a reference to the given string and assigns it to the ChannelCoverage field.
func (o *TransactionVolume) SetChannelCoverage(v string) {
	o.ChannelCoverage = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *TransactionVolume) GetCurrency() string {
	if o == nil || IsNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionVolume) GetCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *TransactionVolume) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *TransactionVolume) SetCurrency(v string) {
	o.Currency = &v
}

// GetFrequency returns the Frequency field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TransactionVolume) GetFrequency() Frequency {
	if o == nil || IsNil(o.Frequency.Get()) {
		var ret Frequency
		return ret
	}
	return *o.Frequency.Get()
}

// GetFrequencyOk returns a tuple with the Frequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionVolume) GetFrequencyOk() (*Frequency, bool) {
	if o == nil {
		return nil, false
	}
	return o.Frequency.Get(), o.Frequency.IsSet()
}

// HasFrequency returns a boolean if a field has been set.
func (o *TransactionVolume) HasFrequency() bool {
	if o != nil && o.Frequency.IsSet() {
		return true
	}

	return false
}

// SetFrequency gets a reference to the given NullableFrequency and assigns it to the Frequency field.
func (o *TransactionVolume) SetFrequency(v Frequency) {
	o.Frequency.Set(&v)
}

// SetFrequencyNil sets the value for Frequency to be an explicit nil
func (o *TransactionVolume) SetFrequencyNil() {
	o.Frequency.Set(nil)
}

// UnsetFrequency ensures that no value is present for Frequency, not even an explicit nil
func (o *TransactionVolume) UnsetFrequency() {
	o.Frequency.Unset()
}

// GetOnSynctera returns the OnSynctera field value if set, zero value otherwise.
func (o *TransactionVolume) GetOnSynctera() bool {
	if o == nil || IsNil(o.OnSynctera) {
		var ret bool
		return ret
	}
	return *o.OnSynctera
}

// GetOnSyncteraOk returns a tuple with the OnSynctera field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionVolume) GetOnSyncteraOk() (*bool, bool) {
	if o == nil || IsNil(o.OnSynctera) {
		return nil, false
	}
	return o.OnSynctera, true
}

// HasOnSynctera returns a boolean if a field has been set.
func (o *TransactionVolume) HasOnSynctera() bool {
	if o != nil && !IsNil(o.OnSynctera) {
		return true
	}

	return false
}

// SetOnSynctera gets a reference to the given bool and assigns it to the OnSynctera field.
func (o *TransactionVolume) SetOnSynctera(v bool) {
	o.OnSynctera = &v
}

// GetTransactionCount returns the TransactionCount field value if set, zero value otherwise.
func (o *TransactionVolume) GetTransactionCount() int32 {
	if o == nil || IsNil(o.TransactionCount) {
		var ret int32
		return ret
	}
	return *o.TransactionCount
}

// GetTransactionCountOk returns a tuple with the TransactionCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionVolume) GetTransactionCountOk() (*int32, bool) {
	if o == nil || IsNil(o.TransactionCount) {
		return nil, false
	}
	return o.TransactionCount, true
}

// HasTransactionCount returns a boolean if a field has been set.
func (o *TransactionVolume) HasTransactionCount() bool {
	if o != nil && !IsNil(o.TransactionCount) {
		return true
	}

	return false
}

// SetTransactionCount gets a reference to the given int32 and assigns it to the TransactionCount field.
func (o *TransactionVolume) SetTransactionCount(v int32) {
	o.TransactionCount = &v
}

func (o TransactionVolume) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionVolume) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.Channel) {
		toSerialize["channel"] = o.Channel
	}
	if !IsNil(o.ChannelCoverage) {
		toSerialize["channel_coverage"] = o.ChannelCoverage
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if o.Frequency.IsSet() {
		toSerialize["frequency"] = o.Frequency.Get()
	}
	if !IsNil(o.OnSynctera) {
		toSerialize["on_synctera"] = o.OnSynctera
	}
	if !IsNil(o.TransactionCount) {
		toSerialize["transaction_count"] = o.TransactionCount
	}
	return toSerialize, nil
}

type NullableTransactionVolume struct {
	value *TransactionVolume
	isSet bool
}

func (v NullableTransactionVolume) Get() *TransactionVolume {
	return v.value
}

func (v *NullableTransactionVolume) Set(val *TransactionVolume) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionVolume) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionVolume) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionVolume(val *TransactionVolume) *NullableTransactionVolume {
	return &NullableTransactionVolume{value: val, isSet: true}
}

func (v NullableTransactionVolume) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionVolume) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
