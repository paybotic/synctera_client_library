/*
Synctera API

<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p> 

API version: 0.5.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// NoteResponse struct for NoteResponse
type NoteResponse struct {
	// The note's author.
	Author string `json:"author"`
	// The note's text content.
	Content string `json:"content"`
	// The date and time the note was created.
	CreationTime time.Time `json:"creation_time"`
	// note ID
	Id string `json:"id"`
	// The date and time the note was last updated.
	LastUpdatedTime time.Time `json:"last_updated_time"`
	// Optional field to store additional information about the resource. Intended to be used by the integrator to store non-sensitive data. 
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// The id of the resource that is associated with the note. This is typically a UUID. For TENANT it is a string tenant ID. 
	RelatedResourceId string `json:"related_resource_id"`
	RelatedResourceType RelatedResourceType1 `json:"related_resource_type"`
	// The tenant containing the resource. Tenancy is represented as bank_id_partner_id. This attribute is included on all responses. For requests, it is optional for clients with access to a single tenant. 
	Tenant string `json:"tenant"`
}

// NewNoteResponse instantiates a new NoteResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNoteResponse(author string, content string, creationTime time.Time, id string, lastUpdatedTime time.Time, relatedResourceId string, relatedResourceType RelatedResourceType1, tenant string) *NoteResponse {
	this := NoteResponse{}
	this.Author = author
	this.Content = content
	this.CreationTime = creationTime
	this.Id = id
	this.LastUpdatedTime = lastUpdatedTime
	this.RelatedResourceId = relatedResourceId
	this.RelatedResourceType = relatedResourceType
	this.Tenant = tenant
	return &this
}

// NewNoteResponseWithDefaults instantiates a new NoteResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNoteResponseWithDefaults() *NoteResponse {
	this := NoteResponse{}
	return &this
}

// GetAuthor returns the Author field value
func (o *NoteResponse) GetAuthor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Author
}

// GetAuthorOk returns a tuple with the Author field value
// and a boolean to check if the value has been set.
func (o *NoteResponse) GetAuthorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Author, true
}

// SetAuthor sets field value
func (o *NoteResponse) SetAuthor(v string) {
	o.Author = v
}

// GetContent returns the Content field value
func (o *NoteResponse) GetContent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *NoteResponse) GetContentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Content, true
}

// SetContent sets field value
func (o *NoteResponse) SetContent(v string) {
	o.Content = v
}

// GetCreationTime returns the CreationTime field value
func (o *NoteResponse) GetCreationTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreationTime
}

// GetCreationTimeOk returns a tuple with the CreationTime field value
// and a boolean to check if the value has been set.
func (o *NoteResponse) GetCreationTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreationTime, true
}

// SetCreationTime sets field value
func (o *NoteResponse) SetCreationTime(v time.Time) {
	o.CreationTime = v
}

// GetId returns the Id field value
func (o *NoteResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *NoteResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *NoteResponse) SetId(v string) {
	o.Id = v
}

// GetLastUpdatedTime returns the LastUpdatedTime field value
func (o *NoteResponse) GetLastUpdatedTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.LastUpdatedTime
}

// GetLastUpdatedTimeOk returns a tuple with the LastUpdatedTime field value
// and a boolean to check if the value has been set.
func (o *NoteResponse) GetLastUpdatedTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastUpdatedTime, true
}

// SetLastUpdatedTime sets field value
func (o *NoteResponse) SetLastUpdatedTime(v time.Time) {
	o.LastUpdatedTime = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *NoteResponse) GetMetadata() map[string]interface{} {
	if o == nil || o.Metadata == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoteResponse) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *NoteResponse) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *NoteResponse) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

// GetRelatedResourceId returns the RelatedResourceId field value
func (o *NoteResponse) GetRelatedResourceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RelatedResourceId
}

// GetRelatedResourceIdOk returns a tuple with the RelatedResourceId field value
// and a boolean to check if the value has been set.
func (o *NoteResponse) GetRelatedResourceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RelatedResourceId, true
}

// SetRelatedResourceId sets field value
func (o *NoteResponse) SetRelatedResourceId(v string) {
	o.RelatedResourceId = v
}

// GetRelatedResourceType returns the RelatedResourceType field value
func (o *NoteResponse) GetRelatedResourceType() RelatedResourceType1 {
	if o == nil {
		var ret RelatedResourceType1
		return ret
	}

	return o.RelatedResourceType
}

// GetRelatedResourceTypeOk returns a tuple with the RelatedResourceType field value
// and a boolean to check if the value has been set.
func (o *NoteResponse) GetRelatedResourceTypeOk() (*RelatedResourceType1, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RelatedResourceType, true
}

// SetRelatedResourceType sets field value
func (o *NoteResponse) SetRelatedResourceType(v RelatedResourceType1) {
	o.RelatedResourceType = v
}

// GetTenant returns the Tenant field value
func (o *NoteResponse) GetTenant() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Tenant
}

// GetTenantOk returns a tuple with the Tenant field value
// and a boolean to check if the value has been set.
func (o *NoteResponse) GetTenantOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tenant, true
}

// SetTenant sets field value
func (o *NoteResponse) SetTenant(v string) {
	o.Tenant = v
}

func (o NoteResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["author"] = o.Author
	}
	if true {
		toSerialize["content"] = o.Content
	}
	if true {
		toSerialize["creation_time"] = o.CreationTime
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["last_updated_time"] = o.LastUpdatedTime
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if true {
		toSerialize["related_resource_id"] = o.RelatedResourceId
	}
	if true {
		toSerialize["related_resource_type"] = o.RelatedResourceType
	}
	if true {
		toSerialize["tenant"] = o.Tenant
	}
	return json.Marshal(toSerialize)
}

type NullableNoteResponse struct {
	value *NoteResponse
	isSet bool
}

func (v NullableNoteResponse) Get() *NoteResponse {
	return v.value
}

func (v *NullableNoteResponse) Set(val *NoteResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableNoteResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableNoteResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNoteResponse(val *NoteResponse) *NullableNoteResponse {
	return &NullableNoteResponse{value: val, isSet: true}
}

func (v NullableNoteResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNoteResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


