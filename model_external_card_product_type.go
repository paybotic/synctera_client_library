/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.140.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ExternalCardProductType Product type
type ExternalCardProductType string

// List of external_card_product_type
const (
	EXTERNALCARDPRODUCTTYPE_CREDIT  ExternalCardProductType = "CREDIT"
	EXTERNALCARDPRODUCTTYPE_DEBIT   ExternalCardProductType = "DEBIT"
	EXTERNALCARDPRODUCTTYPE_PREPAID ExternalCardProductType = "PREPAID"
)

// All allowed values of ExternalCardProductType enum
var AllowedExternalCardProductTypeEnumValues = []ExternalCardProductType{
	"CREDIT",
	"DEBIT",
	"PREPAID",
}

func (v *ExternalCardProductType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ExternalCardProductType(value)
	for _, existing := range AllowedExternalCardProductTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ExternalCardProductType", value)
}

// NewExternalCardProductTypeFromValue returns a pointer to a valid ExternalCardProductType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewExternalCardProductTypeFromValue(v string) (*ExternalCardProductType, error) {
	ev := ExternalCardProductType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ExternalCardProductType: valid values are %v", v, AllowedExternalCardProductTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ExternalCardProductType) IsValid() bool {
	for _, existing := range AllowedExternalCardProductTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to external_card_product_type value
func (v ExternalCardProductType) Ptr() *ExternalCardProductType {
	return &v
}

type NullableExternalCardProductType struct {
	value *ExternalCardProductType
	isSet bool
}

func (v NullableExternalCardProductType) Get() *ExternalCardProductType {
	return v.value
}

func (v *NullableExternalCardProductType) Set(val *ExternalCardProductType) {
	v.value = val
	v.isSet = true
}

func (v NullableExternalCardProductType) IsSet() bool {
	return v.isSet
}

func (v *NullableExternalCardProductType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExternalCardProductType(val *ExternalCardProductType) *NullableExternalCardProductType {
	return &NullableExternalCardProductType{value: val, isSet: true}
}

func (v NullableExternalCardProductType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExternalCardProductType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
