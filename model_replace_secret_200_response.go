/*
Synctera API

<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p> 

API version: 0.17.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// ReplaceSecret200Response struct for ReplaceSecret200Response
type ReplaceSecret200Response struct {
	// Timestamp that the old secret is delete
	DeleteAt *time.Time `json:"delete_at,omitempty"`
	// Generated secret. Do not share. This secret will be used to verify that webhook requests were sent from Synctera.
	Secret *string `json:"secret,omitempty"`
}

// NewReplaceSecret200Response instantiates a new ReplaceSecret200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReplaceSecret200Response() *ReplaceSecret200Response {
	this := ReplaceSecret200Response{}
	return &this
}

// NewReplaceSecret200ResponseWithDefaults instantiates a new ReplaceSecret200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReplaceSecret200ResponseWithDefaults() *ReplaceSecret200Response {
	this := ReplaceSecret200Response{}
	return &this
}

// GetDeleteAt returns the DeleteAt field value if set, zero value otherwise.
func (o *ReplaceSecret200Response) GetDeleteAt() time.Time {
	if o == nil || o.DeleteAt == nil {
		var ret time.Time
		return ret
	}
	return *o.DeleteAt
}

// GetDeleteAtOk returns a tuple with the DeleteAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplaceSecret200Response) GetDeleteAtOk() (*time.Time, bool) {
	if o == nil || o.DeleteAt == nil {
		return nil, false
	}
	return o.DeleteAt, true
}

// HasDeleteAt returns a boolean if a field has been set.
func (o *ReplaceSecret200Response) HasDeleteAt() bool {
	if o != nil && o.DeleteAt != nil {
		return true
	}

	return false
}

// SetDeleteAt gets a reference to the given time.Time and assigns it to the DeleteAt field.
func (o *ReplaceSecret200Response) SetDeleteAt(v time.Time) {
	o.DeleteAt = &v
}

// GetSecret returns the Secret field value if set, zero value otherwise.
func (o *ReplaceSecret200Response) GetSecret() string {
	if o == nil || o.Secret == nil {
		var ret string
		return ret
	}
	return *o.Secret
}

// GetSecretOk returns a tuple with the Secret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplaceSecret200Response) GetSecretOk() (*string, bool) {
	if o == nil || o.Secret == nil {
		return nil, false
	}
	return o.Secret, true
}

// HasSecret returns a boolean if a field has been set.
func (o *ReplaceSecret200Response) HasSecret() bool {
	if o != nil && o.Secret != nil {
		return true
	}

	return false
}

// SetSecret gets a reference to the given string and assigns it to the Secret field.
func (o *ReplaceSecret200Response) SetSecret(v string) {
	o.Secret = &v
}

func (o ReplaceSecret200Response) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DeleteAt != nil {
		toSerialize["delete_at"] = o.DeleteAt
	}
	if o.Secret != nil {
		toSerialize["secret"] = o.Secret
	}
	return json.Marshal(toSerialize)
}

type NullableReplaceSecret200Response struct {
	value *ReplaceSecret200Response
	isSet bool
}

func (v NullableReplaceSecret200Response) Get() *ReplaceSecret200Response {
	return v.value
}

func (v *NullableReplaceSecret200Response) Set(val *ReplaceSecret200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableReplaceSecret200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableReplaceSecret200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplaceSecret200Response(val *ReplaceSecret200Response) *NullableReplaceSecret200Response {
	return &NullableReplaceSecret200Response{value: val, isSet: true}
}

func (v NullableReplaceSecret200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplaceSecret200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


