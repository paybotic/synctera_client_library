/*
Synctera API

<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.69.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// PatchAccount struct for PatchAccount
type PatchAccount struct {
	PatchAccountChargeSecured *PatchAccountChargeSecured
	PatchAccountDepository *PatchAccountDepository
	PatchAccountLineOfCredit *PatchAccountLineOfCredit
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *PatchAccount) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into PatchAccountChargeSecured
	err = json.Unmarshal(data, &dst.PatchAccountChargeSecured);
	if err == nil {
		jsonPatchAccountChargeSecured, _ := json.Marshal(dst.PatchAccountChargeSecured)
		if string(jsonPatchAccountChargeSecured) == "{}" { // empty struct
			dst.PatchAccountChargeSecured = nil
		} else {
			return nil // data stored in dst.PatchAccountChargeSecured, return on the first match
		}
	} else {
		dst.PatchAccountChargeSecured = nil
	}

	// try to unmarshal JSON data into PatchAccountDepository
	err = json.Unmarshal(data, &dst.PatchAccountDepository);
	if err == nil {
		jsonPatchAccountDepository, _ := json.Marshal(dst.PatchAccountDepository)
		if string(jsonPatchAccountDepository) == "{}" { // empty struct
			dst.PatchAccountDepository = nil
		} else {
			return nil // data stored in dst.PatchAccountDepository, return on the first match
		}
	} else {
		dst.PatchAccountDepository = nil
	}

	// try to unmarshal JSON data into PatchAccountLineOfCredit
	err = json.Unmarshal(data, &dst.PatchAccountLineOfCredit);
	if err == nil {
		jsonPatchAccountLineOfCredit, _ := json.Marshal(dst.PatchAccountLineOfCredit)
		if string(jsonPatchAccountLineOfCredit) == "{}" { // empty struct
			dst.PatchAccountLineOfCredit = nil
		} else {
			return nil // data stored in dst.PatchAccountLineOfCredit, return on the first match
		}
	} else {
		dst.PatchAccountLineOfCredit = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(PatchAccount)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *PatchAccount) MarshalJSON() ([]byte, error) {
	if src.PatchAccountChargeSecured != nil {
		return json.Marshal(&src.PatchAccountChargeSecured)
	}

	if src.PatchAccountDepository != nil {
		return json.Marshal(&src.PatchAccountDepository)
	}

	if src.PatchAccountLineOfCredit != nil {
		return json.Marshal(&src.PatchAccountLineOfCredit)
	}

	return nil, nil // no data in anyOf schemas
}

type NullablePatchAccount struct {
	value *PatchAccount
	isSet bool
}

func (v NullablePatchAccount) Get() *PatchAccount {
	return v.value
}

func (v *NullablePatchAccount) Set(val *PatchAccount) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchAccount) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchAccount(val *PatchAccount) *NullablePatchAccount {
	return &NullablePatchAccount{value: val, isSet: true}
}

func (v NullablePatchAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


