/*
Synctera API

<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p> 

API version: 0.17.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MinimumPayment - The scheme for calculating the minimum payment due for outstanding balances in a billing period. 
type MinimumPayment struct {
	MinimumPaymentRateOrAmount *MinimumPaymentRateOrAmount
}

// MinimumPaymentRateOrAmountAsMinimumPayment is a convenience function that returns MinimumPaymentRateOrAmount wrapped in MinimumPayment
func MinimumPaymentRateOrAmountAsMinimumPayment(v *MinimumPaymentRateOrAmount) MinimumPayment {
	return MinimumPayment{
		MinimumPaymentRateOrAmount: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *MinimumPayment) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into MinimumPaymentRateOrAmount
	err = newStrictDecoder(data).Decode(&dst.MinimumPaymentRateOrAmount)
	if err == nil {
		jsonMinimumPaymentRateOrAmount, _ := json.Marshal(dst.MinimumPaymentRateOrAmount)
		if string(jsonMinimumPaymentRateOrAmount) == "{}" { // empty struct
			dst.MinimumPaymentRateOrAmount = nil
		} else {
			match++
		}
	} else {
		dst.MinimumPaymentRateOrAmount = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.MinimumPaymentRateOrAmount = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(MinimumPayment)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(MinimumPayment)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src MinimumPayment) MarshalJSON() ([]byte, error) {
	if src.MinimumPaymentRateOrAmount != nil {
		return json.Marshal(&src.MinimumPaymentRateOrAmount)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *MinimumPayment) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.MinimumPaymentRateOrAmount != nil {
		return obj.MinimumPaymentRateOrAmount
	}

	// all schemas are nil
	return nil
}

type NullableMinimumPayment struct {
	value *MinimumPayment
	isSet bool
}

func (v NullableMinimumPayment) Get() *MinimumPayment {
	return v.value
}

func (v *NullableMinimumPayment) Set(val *MinimumPayment) {
	v.value = val
	v.isSet = true
}

func (v NullableMinimumPayment) IsSet() bool {
	return v.isSet
}

func (v *NullableMinimumPayment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMinimumPayment(val *MinimumPayment) *NullableMinimumPayment {
	return &NullableMinimumPayment{value: val, isSet: true}
}

func (v NullableMinimumPayment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMinimumPayment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


