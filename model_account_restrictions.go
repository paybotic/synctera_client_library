/*
Synctera API

<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.69.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AccountRestrictions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccountRestrictions{}

// AccountRestrictions Conditions that restrict the use of the account.
type AccountRestrictions struct {
	// A flag to indicate whether any of the account holders of the account are out of the supported countries. Can only be set by the Synctera platform. 
	IsAccountOutOfArea *bool `json:"is_account_out_of_area,omitempty"`
	// A flag to indicate whether a credit account is greater than 30 days past due on minimum payments. Delinquent accounts will be unable to spend until overdue amount is paid. Can only be set by the Synctera platform. 
	IsDelinquent *bool `json:"is_delinquent,omitempty"`
	// A flag to indicate whether a credit account is past due on minimum payments.  Can only be set by the Synctera platform. 
	IsPastDue *bool `json:"is_past_due,omitempty"`
	// A flag to indicates whether a credit account has been revoked (greater than 90 days past due). Revoked accounts will be unable to spend and  no longer accrue interest.  Can only be set by the Synctera platform. 
	IsRevoked *bool `json:"is_revoked,omitempty"`
}

// NewAccountRestrictions instantiates a new AccountRestrictions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountRestrictions() *AccountRestrictions {
	this := AccountRestrictions{}
	return &this
}

// NewAccountRestrictionsWithDefaults instantiates a new AccountRestrictions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountRestrictionsWithDefaults() *AccountRestrictions {
	this := AccountRestrictions{}
	return &this
}

// GetIsAccountOutOfArea returns the IsAccountOutOfArea field value if set, zero value otherwise.
func (o *AccountRestrictions) GetIsAccountOutOfArea() bool {
	if o == nil || IsNil(o.IsAccountOutOfArea) {
		var ret bool
		return ret
	}
	return *o.IsAccountOutOfArea
}

// GetIsAccountOutOfAreaOk returns a tuple with the IsAccountOutOfArea field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountRestrictions) GetIsAccountOutOfAreaOk() (*bool, bool) {
	if o == nil || IsNil(o.IsAccountOutOfArea) {
		return nil, false
	}
	return o.IsAccountOutOfArea, true
}

// HasIsAccountOutOfArea returns a boolean if a field has been set.
func (o *AccountRestrictions) HasIsAccountOutOfArea() bool {
	if o != nil && !IsNil(o.IsAccountOutOfArea) {
		return true
	}

	return false
}

// SetIsAccountOutOfArea gets a reference to the given bool and assigns it to the IsAccountOutOfArea field.
func (o *AccountRestrictions) SetIsAccountOutOfArea(v bool) {
	o.IsAccountOutOfArea = &v
}

// GetIsDelinquent returns the IsDelinquent field value if set, zero value otherwise.
func (o *AccountRestrictions) GetIsDelinquent() bool {
	if o == nil || IsNil(o.IsDelinquent) {
		var ret bool
		return ret
	}
	return *o.IsDelinquent
}

// GetIsDelinquentOk returns a tuple with the IsDelinquent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountRestrictions) GetIsDelinquentOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDelinquent) {
		return nil, false
	}
	return o.IsDelinquent, true
}

// HasIsDelinquent returns a boolean if a field has been set.
func (o *AccountRestrictions) HasIsDelinquent() bool {
	if o != nil && !IsNil(o.IsDelinquent) {
		return true
	}

	return false
}

// SetIsDelinquent gets a reference to the given bool and assigns it to the IsDelinquent field.
func (o *AccountRestrictions) SetIsDelinquent(v bool) {
	o.IsDelinquent = &v
}

// GetIsPastDue returns the IsPastDue field value if set, zero value otherwise.
func (o *AccountRestrictions) GetIsPastDue() bool {
	if o == nil || IsNil(o.IsPastDue) {
		var ret bool
		return ret
	}
	return *o.IsPastDue
}

// GetIsPastDueOk returns a tuple with the IsPastDue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountRestrictions) GetIsPastDueOk() (*bool, bool) {
	if o == nil || IsNil(o.IsPastDue) {
		return nil, false
	}
	return o.IsPastDue, true
}

// HasIsPastDue returns a boolean if a field has been set.
func (o *AccountRestrictions) HasIsPastDue() bool {
	if o != nil && !IsNil(o.IsPastDue) {
		return true
	}

	return false
}

// SetIsPastDue gets a reference to the given bool and assigns it to the IsPastDue field.
func (o *AccountRestrictions) SetIsPastDue(v bool) {
	o.IsPastDue = &v
}

// GetIsRevoked returns the IsRevoked field value if set, zero value otherwise.
func (o *AccountRestrictions) GetIsRevoked() bool {
	if o == nil || IsNil(o.IsRevoked) {
		var ret bool
		return ret
	}
	return *o.IsRevoked
}

// GetIsRevokedOk returns a tuple with the IsRevoked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountRestrictions) GetIsRevokedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsRevoked) {
		return nil, false
	}
	return o.IsRevoked, true
}

// HasIsRevoked returns a boolean if a field has been set.
func (o *AccountRestrictions) HasIsRevoked() bool {
	if o != nil && !IsNil(o.IsRevoked) {
		return true
	}

	return false
}

// SetIsRevoked gets a reference to the given bool and assigns it to the IsRevoked field.
func (o *AccountRestrictions) SetIsRevoked(v bool) {
	o.IsRevoked = &v
}

func (o AccountRestrictions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccountRestrictions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IsAccountOutOfArea) {
		toSerialize["is_account_out_of_area"] = o.IsAccountOutOfArea
	}
	if !IsNil(o.IsDelinquent) {
		toSerialize["is_delinquent"] = o.IsDelinquent
	}
	if !IsNil(o.IsPastDue) {
		toSerialize["is_past_due"] = o.IsPastDue
	}
	if !IsNil(o.IsRevoked) {
		toSerialize["is_revoked"] = o.IsRevoked
	}
	return toSerialize, nil
}

type NullableAccountRestrictions struct {
	value *AccountRestrictions
	isSet bool
}

func (v NullableAccountRestrictions) Get() *AccountRestrictions {
	return v.value
}

func (v *NullableAccountRestrictions) Set(val *AccountRestrictions) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountRestrictions) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountRestrictions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountRestrictions(val *AccountRestrictions) *NullableAccountRestrictions {
	return &NullableAccountRestrictions{value: val, isSet: true}
}

func (v NullableAccountRestrictions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountRestrictions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


