/*
Synctera API

<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p> 

API version: 0.32.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AchTransactionSimulationRequest Simulate receiving an ACH transaction
type AchTransactionSimulationRequest struct {
	// Number of the receiving account
	AccountNumber string `json:"account_number"`
	// Amount to transfer in cents (e.g. 100 = $1).
	Amount int32 `json:"amount"`
	// The type of transaction (debit or credit) in relation to the receiving account. A credit is a transfer in and a debit is a transfer pulling money out of the receiving account.
	DcSign string `json:"dc_sign"`
	// Effective date of the transaction. Transactions with the current date or date in the past are posted immediately. Future-dated transactions are scheduled to be posted on the chosen date.
	EffectiveDate string `json:"effective_date"`
}

// NewAchTransactionSimulationRequest instantiates a new AchTransactionSimulationRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAchTransactionSimulationRequest(accountNumber string, amount int32, dcSign string, effectiveDate string) *AchTransactionSimulationRequest {
	this := AchTransactionSimulationRequest{}
	this.AccountNumber = accountNumber
	this.Amount = amount
	this.DcSign = dcSign
	this.EffectiveDate = effectiveDate
	return &this
}

// NewAchTransactionSimulationRequestWithDefaults instantiates a new AchTransactionSimulationRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAchTransactionSimulationRequestWithDefaults() *AchTransactionSimulationRequest {
	this := AchTransactionSimulationRequest{}
	return &this
}

// GetAccountNumber returns the AccountNumber field value
func (o *AchTransactionSimulationRequest) GetAccountNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountNumber
}

// GetAccountNumberOk returns a tuple with the AccountNumber field value
// and a boolean to check if the value has been set.
func (o *AchTransactionSimulationRequest) GetAccountNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountNumber, true
}

// SetAccountNumber sets field value
func (o *AchTransactionSimulationRequest) SetAccountNumber(v string) {
	o.AccountNumber = v
}

// GetAmount returns the Amount field value
func (o *AchTransactionSimulationRequest) GetAmount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *AchTransactionSimulationRequest) GetAmountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *AchTransactionSimulationRequest) SetAmount(v int32) {
	o.Amount = v
}

// GetDcSign returns the DcSign field value
func (o *AchTransactionSimulationRequest) GetDcSign() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DcSign
}

// GetDcSignOk returns a tuple with the DcSign field value
// and a boolean to check if the value has been set.
func (o *AchTransactionSimulationRequest) GetDcSignOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DcSign, true
}

// SetDcSign sets field value
func (o *AchTransactionSimulationRequest) SetDcSign(v string) {
	o.DcSign = v
}

// GetEffectiveDate returns the EffectiveDate field value
func (o *AchTransactionSimulationRequest) GetEffectiveDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EffectiveDate
}

// GetEffectiveDateOk returns a tuple with the EffectiveDate field value
// and a boolean to check if the value has been set.
func (o *AchTransactionSimulationRequest) GetEffectiveDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EffectiveDate, true
}

// SetEffectiveDate sets field value
func (o *AchTransactionSimulationRequest) SetEffectiveDate(v string) {
	o.EffectiveDate = v
}

func (o AchTransactionSimulationRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["account_number"] = o.AccountNumber
	}
	if true {
		toSerialize["amount"] = o.Amount
	}
	if true {
		toSerialize["dc_sign"] = o.DcSign
	}
	if true {
		toSerialize["effective_date"] = o.EffectiveDate
	}
	return json.Marshal(toSerialize)
}

type NullableAchTransactionSimulationRequest struct {
	value *AchTransactionSimulationRequest
	isSet bool
}

func (v NullableAchTransactionSimulationRequest) Get() *AchTransactionSimulationRequest {
	return v.value
}

func (v *NullableAchTransactionSimulationRequest) Set(val *AchTransactionSimulationRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAchTransactionSimulationRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAchTransactionSimulationRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAchTransactionSimulationRequest(val *AchTransactionSimulationRequest) *NullableAchTransactionSimulationRequest {
	return &NullableAchTransactionSimulationRequest{value: val, isSet: true}
}

func (v NullableAchTransactionSimulationRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAchTransactionSimulationRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


