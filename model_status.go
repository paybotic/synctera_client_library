/*
Synctera API

<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.69.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// Status The status of the account  | Status | Description | Transactable | |------|-----------|-----| | ACCOUNT_NEVER_ACTIVE | Account was never activated by the customer | N | | ACCOUNT_NOT_DESIRED | A credit account was created for a customer, but the customer did not accept the account | N | | ACTIVATED_NOT_DISBURSED | A credit account was created for the customer, but the funds have not been paid out or used | N | | ACTIVE_OR_DISBURSED | The account is active and transactable | Y | | APPLICATION_SUBMITTED | Deprecated status | N | | AWAITING_FIXING | Account is awaiting fixing | N | | CHARGED_OFF | The account has been charged off and is closed | N | | CLOSED | Accounts must be zeroed out before being closed.  Closed accounts cannot transact | N | | DELINQUENT | Synctera will update a credit account to delinquent if the customer has not paid within their expected billing cycle | N | | FAILED_KYC | We were unable to verify the identity of the account holder: they have not passed know-your-customer (KYC) checks | N | | IN_CLOSING | The account is in the process of being closed | N | | RESTRICTED | Synctera will update accounts to restricted of the account holder has not successfully passed KYC | N | | SUSPENDED | Account has been suspected of fraudulent activity and is blocked from further transactions | N | 
type Status string

// List of status
const (
	STATUS_ACCOUNT_NEVER_ACTIVE Status = "ACCOUNT_NEVER_ACTIVE"
	STATUS_ACCOUNT_NOT_DESIRED Status = "ACCOUNT_NOT_DESIRED"
	STATUS_ACTIVATED_NOT_DISBURSED Status = "ACTIVATED_NOT_DISBURSED"
	STATUS_ACTIVE_OR_DISBURSED Status = "ACTIVE_OR_DISBURSED"
	STATUS_APPLICATION_SUBMITTED Status = "APPLICATION_SUBMITTED"
	STATUS_AWAITING_FIXING Status = "AWAITING_FIXING"
	STATUS_CHARGED_OFF Status = "CHARGED_OFF"
	STATUS_CLOSED Status = "CLOSED"
	STATUS_DELINQUENT Status = "DELINQUENT"
	STATUS_FAILED_KYC Status = "FAILED_KYC"
	STATUS_IN_CLOSING Status = "IN_CLOSING"
	STATUS_RESTRICTED Status = "RESTRICTED"
	STATUS_SUSPENDED Status = "SUSPENDED"
)

// All allowed values of Status enum
var AllowedStatusEnumValues = []Status{
	"ACCOUNT_NEVER_ACTIVE",
	"ACCOUNT_NOT_DESIRED",
	"ACTIVATED_NOT_DISBURSED",
	"ACTIVE_OR_DISBURSED",
	"APPLICATION_SUBMITTED",
	"AWAITING_FIXING",
	"CHARGED_OFF",
	"CLOSED",
	"DELINQUENT",
	"FAILED_KYC",
	"IN_CLOSING",
	"RESTRICTED",
	"SUSPENDED",
}

func (v *Status) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Status(value)
	for _, existing := range AllowedStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Status", value)
}

// NewStatusFromValue returns a pointer to a valid Status
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStatusFromValue(v string) (*Status, error) {
	ev := Status(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Status: valid values are %v", v, AllowedStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Status) IsValid() bool {
	for _, existing := range AllowedStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to status value
func (v Status) Ptr() *Status {
	return &v
}

type NullableStatus struct {
	value *Status
	isSet bool
}

func (v NullableStatus) Get() *Status {
	return v.value
}

func (v *NullableStatus) Set(val *Status) {
	v.value = val
	v.isSet = true
}

func (v NullableStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatus(val *Status) *NullableStatus {
	return &NullableStatus{value: val, isSet: true}
}

func (v NullableStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

