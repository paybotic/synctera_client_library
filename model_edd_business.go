/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.140.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the EddBusiness type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EddBusiness{}

// EddBusiness struct for EddBusiness
type EddBusiness struct {
	// Additional questions regarding the related resource
	AdditionalQuestions []Question `json:"additional_questions,omitempty"`
	// The ID of the case related to this EDD record
	CaseId *int32 `json:"case_id,omitempty"`
	// The reason for this EDD record to be requested
	Reason string `json:"reason"`
	// related resource UUID
	RelatedResourceId   string               `json:"related_resource_id"`
	RelatedResourceType RelatedResourceType1 `json:"related_resource_type"`
	// The id of the tenant containing the resource. This is relevant for Fintechs that have multiple workspaces.
	Tenant *string `json:"tenant,omitempty"`
	// ISO-3166-1 Alpha-2 country code
	Country          *string           `json:"country,omitempty" validate:"regexp=^[A-Z]{2}$"`
	EstimatedRevenue *EstimatedRevenue `json:"estimated_revenue,omitempty"`
	IndustryType     *IndustryType     `json:"industry_type,omitempty"`
	// The number of negative news findings.
	NegativeNewsFindings *int32 `json:"negative_news_findings,omitempty"`
	// True if the customer is expected to send or receive wire transfers at a regular frequency.
	RecurringWireUsage  *bool                `json:"recurring_wire_usage,omitempty"`
	SpecificInvolvement *SpecificInvolvement `json:"specific_involvement,omitempty"`
	// Array of transaction volumes.
	TransactionVolume []TransactionVolume `json:"transaction_volume,omitempty"`
}

type _EddBusiness EddBusiness

// NewEddBusiness instantiates a new EddBusiness object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEddBusiness(reason string, relatedResourceId string, relatedResourceType RelatedResourceType1) *EddBusiness {
	this := EddBusiness{}
	this.Reason = reason
	this.RelatedResourceId = relatedResourceId
	this.RelatedResourceType = relatedResourceType
	return &this
}

// NewEddBusinessWithDefaults instantiates a new EddBusiness object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEddBusinessWithDefaults() *EddBusiness {
	this := EddBusiness{}
	return &this
}

// GetAdditionalQuestions returns the AdditionalQuestions field value if set, zero value otherwise.
func (o *EddBusiness) GetAdditionalQuestions() []Question {
	if o == nil || IsNil(o.AdditionalQuestions) {
		var ret []Question
		return ret
	}
	return o.AdditionalQuestions
}

// GetAdditionalQuestionsOk returns a tuple with the AdditionalQuestions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EddBusiness) GetAdditionalQuestionsOk() ([]Question, bool) {
	if o == nil || IsNil(o.AdditionalQuestions) {
		return nil, false
	}
	return o.AdditionalQuestions, true
}

// HasAdditionalQuestions returns a boolean if a field has been set.
func (o *EddBusiness) HasAdditionalQuestions() bool {
	if o != nil && !IsNil(o.AdditionalQuestions) {
		return true
	}

	return false
}

// SetAdditionalQuestions gets a reference to the given []Question and assigns it to the AdditionalQuestions field.
func (o *EddBusiness) SetAdditionalQuestions(v []Question) {
	o.AdditionalQuestions = v
}

// GetCaseId returns the CaseId field value if set, zero value otherwise.
func (o *EddBusiness) GetCaseId() int32 {
	if o == nil || IsNil(o.CaseId) {
		var ret int32
		return ret
	}
	return *o.CaseId
}

// GetCaseIdOk returns a tuple with the CaseId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EddBusiness) GetCaseIdOk() (*int32, bool) {
	if o == nil || IsNil(o.CaseId) {
		return nil, false
	}
	return o.CaseId, true
}

// HasCaseId returns a boolean if a field has been set.
func (o *EddBusiness) HasCaseId() bool {
	if o != nil && !IsNil(o.CaseId) {
		return true
	}

	return false
}

// SetCaseId gets a reference to the given int32 and assigns it to the CaseId field.
func (o *EddBusiness) SetCaseId(v int32) {
	o.CaseId = &v
}

// GetReason returns the Reason field value
func (o *EddBusiness) GetReason() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reason
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
func (o *EddBusiness) GetReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reason, true
}

// SetReason sets field value
func (o *EddBusiness) SetReason(v string) {
	o.Reason = v
}

// GetRelatedResourceId returns the RelatedResourceId field value
func (o *EddBusiness) GetRelatedResourceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RelatedResourceId
}

// GetRelatedResourceIdOk returns a tuple with the RelatedResourceId field value
// and a boolean to check if the value has been set.
func (o *EddBusiness) GetRelatedResourceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RelatedResourceId, true
}

// SetRelatedResourceId sets field value
func (o *EddBusiness) SetRelatedResourceId(v string) {
	o.RelatedResourceId = v
}

// GetRelatedResourceType returns the RelatedResourceType field value
func (o *EddBusiness) GetRelatedResourceType() RelatedResourceType1 {
	if o == nil {
		var ret RelatedResourceType1
		return ret
	}

	return o.RelatedResourceType
}

// GetRelatedResourceTypeOk returns a tuple with the RelatedResourceType field value
// and a boolean to check if the value has been set.
func (o *EddBusiness) GetRelatedResourceTypeOk() (*RelatedResourceType1, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RelatedResourceType, true
}

// SetRelatedResourceType sets field value
func (o *EddBusiness) SetRelatedResourceType(v RelatedResourceType1) {
	o.RelatedResourceType = v
}

// GetTenant returns the Tenant field value if set, zero value otherwise.
func (o *EddBusiness) GetTenant() string {
	if o == nil || IsNil(o.Tenant) {
		var ret string
		return ret
	}
	return *o.Tenant
}

// GetTenantOk returns a tuple with the Tenant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EddBusiness) GetTenantOk() (*string, bool) {
	if o == nil || IsNil(o.Tenant) {
		return nil, false
	}
	return o.Tenant, true
}

// HasTenant returns a boolean if a field has been set.
func (o *EddBusiness) HasTenant() bool {
	if o != nil && !IsNil(o.Tenant) {
		return true
	}

	return false
}

// SetTenant gets a reference to the given string and assigns it to the Tenant field.
func (o *EddBusiness) SetTenant(v string) {
	o.Tenant = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *EddBusiness) GetCountry() string {
	if o == nil || IsNil(o.Country) {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EddBusiness) GetCountryOk() (*string, bool) {
	if o == nil || IsNil(o.Country) {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *EddBusiness) HasCountry() bool {
	if o != nil && !IsNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *EddBusiness) SetCountry(v string) {
	o.Country = &v
}

// GetEstimatedRevenue returns the EstimatedRevenue field value if set, zero value otherwise.
func (o *EddBusiness) GetEstimatedRevenue() EstimatedRevenue {
	if o == nil || IsNil(o.EstimatedRevenue) {
		var ret EstimatedRevenue
		return ret
	}
	return *o.EstimatedRevenue
}

// GetEstimatedRevenueOk returns a tuple with the EstimatedRevenue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EddBusiness) GetEstimatedRevenueOk() (*EstimatedRevenue, bool) {
	if o == nil || IsNil(o.EstimatedRevenue) {
		return nil, false
	}
	return o.EstimatedRevenue, true
}

// HasEstimatedRevenue returns a boolean if a field has been set.
func (o *EddBusiness) HasEstimatedRevenue() bool {
	if o != nil && !IsNil(o.EstimatedRevenue) {
		return true
	}

	return false
}

// SetEstimatedRevenue gets a reference to the given EstimatedRevenue and assigns it to the EstimatedRevenue field.
func (o *EddBusiness) SetEstimatedRevenue(v EstimatedRevenue) {
	o.EstimatedRevenue = &v
}

// GetIndustryType returns the IndustryType field value if set, zero value otherwise.
func (o *EddBusiness) GetIndustryType() IndustryType {
	if o == nil || IsNil(o.IndustryType) {
		var ret IndustryType
		return ret
	}
	return *o.IndustryType
}

// GetIndustryTypeOk returns a tuple with the IndustryType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EddBusiness) GetIndustryTypeOk() (*IndustryType, bool) {
	if o == nil || IsNil(o.IndustryType) {
		return nil, false
	}
	return o.IndustryType, true
}

// HasIndustryType returns a boolean if a field has been set.
func (o *EddBusiness) HasIndustryType() bool {
	if o != nil && !IsNil(o.IndustryType) {
		return true
	}

	return false
}

// SetIndustryType gets a reference to the given IndustryType and assigns it to the IndustryType field.
func (o *EddBusiness) SetIndustryType(v IndustryType) {
	o.IndustryType = &v
}

// GetNegativeNewsFindings returns the NegativeNewsFindings field value if set, zero value otherwise.
func (o *EddBusiness) GetNegativeNewsFindings() int32 {
	if o == nil || IsNil(o.NegativeNewsFindings) {
		var ret int32
		return ret
	}
	return *o.NegativeNewsFindings
}

// GetNegativeNewsFindingsOk returns a tuple with the NegativeNewsFindings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EddBusiness) GetNegativeNewsFindingsOk() (*int32, bool) {
	if o == nil || IsNil(o.NegativeNewsFindings) {
		return nil, false
	}
	return o.NegativeNewsFindings, true
}

// HasNegativeNewsFindings returns a boolean if a field has been set.
func (o *EddBusiness) HasNegativeNewsFindings() bool {
	if o != nil && !IsNil(o.NegativeNewsFindings) {
		return true
	}

	return false
}

// SetNegativeNewsFindings gets a reference to the given int32 and assigns it to the NegativeNewsFindings field.
func (o *EddBusiness) SetNegativeNewsFindings(v int32) {
	o.NegativeNewsFindings = &v
}

// GetRecurringWireUsage returns the RecurringWireUsage field value if set, zero value otherwise.
func (o *EddBusiness) GetRecurringWireUsage() bool {
	if o == nil || IsNil(o.RecurringWireUsage) {
		var ret bool
		return ret
	}
	return *o.RecurringWireUsage
}

// GetRecurringWireUsageOk returns a tuple with the RecurringWireUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EddBusiness) GetRecurringWireUsageOk() (*bool, bool) {
	if o == nil || IsNil(o.RecurringWireUsage) {
		return nil, false
	}
	return o.RecurringWireUsage, true
}

// HasRecurringWireUsage returns a boolean if a field has been set.
func (o *EddBusiness) HasRecurringWireUsage() bool {
	if o != nil && !IsNil(o.RecurringWireUsage) {
		return true
	}

	return false
}

// SetRecurringWireUsage gets a reference to the given bool and assigns it to the RecurringWireUsage field.
func (o *EddBusiness) SetRecurringWireUsage(v bool) {
	o.RecurringWireUsage = &v
}

// GetSpecificInvolvement returns the SpecificInvolvement field value if set, zero value otherwise.
func (o *EddBusiness) GetSpecificInvolvement() SpecificInvolvement {
	if o == nil || IsNil(o.SpecificInvolvement) {
		var ret SpecificInvolvement
		return ret
	}
	return *o.SpecificInvolvement
}

// GetSpecificInvolvementOk returns a tuple with the SpecificInvolvement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EddBusiness) GetSpecificInvolvementOk() (*SpecificInvolvement, bool) {
	if o == nil || IsNil(o.SpecificInvolvement) {
		return nil, false
	}
	return o.SpecificInvolvement, true
}

// HasSpecificInvolvement returns a boolean if a field has been set.
func (o *EddBusiness) HasSpecificInvolvement() bool {
	if o != nil && !IsNil(o.SpecificInvolvement) {
		return true
	}

	return false
}

// SetSpecificInvolvement gets a reference to the given SpecificInvolvement and assigns it to the SpecificInvolvement field.
func (o *EddBusiness) SetSpecificInvolvement(v SpecificInvolvement) {
	o.SpecificInvolvement = &v
}

// GetTransactionVolume returns the TransactionVolume field value if set, zero value otherwise.
func (o *EddBusiness) GetTransactionVolume() []TransactionVolume {
	if o == nil || IsNil(o.TransactionVolume) {
		var ret []TransactionVolume
		return ret
	}
	return o.TransactionVolume
}

// GetTransactionVolumeOk returns a tuple with the TransactionVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EddBusiness) GetTransactionVolumeOk() ([]TransactionVolume, bool) {
	if o == nil || IsNil(o.TransactionVolume) {
		return nil, false
	}
	return o.TransactionVolume, true
}

// HasTransactionVolume returns a boolean if a field has been set.
func (o *EddBusiness) HasTransactionVolume() bool {
	if o != nil && !IsNil(o.TransactionVolume) {
		return true
	}

	return false
}

// SetTransactionVolume gets a reference to the given []TransactionVolume and assigns it to the TransactionVolume field.
func (o *EddBusiness) SetTransactionVolume(v []TransactionVolume) {
	o.TransactionVolume = v
}

func (o EddBusiness) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EddBusiness) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AdditionalQuestions) {
		toSerialize["additional_questions"] = o.AdditionalQuestions
	}
	if !IsNil(o.CaseId) {
		toSerialize["case_id"] = o.CaseId
	}
	toSerialize["reason"] = o.Reason
	toSerialize["related_resource_id"] = o.RelatedResourceId
	toSerialize["related_resource_type"] = o.RelatedResourceType
	if !IsNil(o.Tenant) {
		toSerialize["tenant"] = o.Tenant
	}
	if !IsNil(o.Country) {
		toSerialize["country"] = o.Country
	}
	if !IsNil(o.EstimatedRevenue) {
		toSerialize["estimated_revenue"] = o.EstimatedRevenue
	}
	if !IsNil(o.IndustryType) {
		toSerialize["industry_type"] = o.IndustryType
	}
	if !IsNil(o.NegativeNewsFindings) {
		toSerialize["negative_news_findings"] = o.NegativeNewsFindings
	}
	if !IsNil(o.RecurringWireUsage) {
		toSerialize["recurring_wire_usage"] = o.RecurringWireUsage
	}
	if !IsNil(o.SpecificInvolvement) {
		toSerialize["specific_involvement"] = o.SpecificInvolvement
	}
	if !IsNil(o.TransactionVolume) {
		toSerialize["transaction_volume"] = o.TransactionVolume
	}
	return toSerialize, nil
}

func (o *EddBusiness) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"reason",
		"related_resource_id",
		"related_resource_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEddBusiness := _EddBusiness{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEddBusiness)

	if err != nil {
		return err
	}

	*o = EddBusiness(varEddBusiness)

	return err
}

type NullableEddBusiness struct {
	value *EddBusiness
	isSet bool
}

func (v NullableEddBusiness) Get() *EddBusiness {
	return v.value
}

func (v *NullableEddBusiness) Set(val *EddBusiness) {
	v.value = val
	v.isSet = true
}

func (v NullableEddBusiness) IsSet() bool {
	return v.isSet
}

func (v *NullableEddBusiness) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEddBusiness(val *EddBusiness) *NullableEddBusiness {
	return &NullableEddBusiness{value: val, isSet: true}
}

func (v NullableEddBusiness) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEddBusiness) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
