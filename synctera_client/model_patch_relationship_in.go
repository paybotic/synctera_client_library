/*
Synctera API

<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p> 

API version: 0.17.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"fmt"
)

// PatchRelationshipIn - struct for PatchRelationshipIn
type PatchRelationshipIn struct {
	PatchBusinessBusinessOwnerRelationship *PatchBusinessBusinessOwnerRelationship
	PatchPersonBusinessOwnerRelationship *PatchPersonBusinessOwnerRelationship
	PatchPersonBusinessRelationship *PatchPersonBusinessRelationship
}

// PatchBusinessBusinessOwnerRelationshipAsPatchRelationshipIn is a convenience function that returns PatchBusinessBusinessOwnerRelationship wrapped in PatchRelationshipIn
func PatchBusinessBusinessOwnerRelationshipAsPatchRelationshipIn(v *PatchBusinessBusinessOwnerRelationship) PatchRelationshipIn {
	return PatchRelationshipIn{
		PatchBusinessBusinessOwnerRelationship: v,
	}
}

// PatchPersonBusinessOwnerRelationshipAsPatchRelationshipIn is a convenience function that returns PatchPersonBusinessOwnerRelationship wrapped in PatchRelationshipIn
func PatchPersonBusinessOwnerRelationshipAsPatchRelationshipIn(v *PatchPersonBusinessOwnerRelationship) PatchRelationshipIn {
	return PatchRelationshipIn{
		PatchPersonBusinessOwnerRelationship: v,
	}
}

// PatchPersonBusinessRelationshipAsPatchRelationshipIn is a convenience function that returns PatchPersonBusinessRelationship wrapped in PatchRelationshipIn
func PatchPersonBusinessRelationshipAsPatchRelationshipIn(v *PatchPersonBusinessRelationship) PatchRelationshipIn {
	return PatchRelationshipIn{
		PatchPersonBusinessRelationship: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *PatchRelationshipIn) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into PatchBusinessBusinessOwnerRelationship
	err = newStrictDecoder(data).Decode(&dst.PatchBusinessBusinessOwnerRelationship)
	if err == nil {
		jsonPatchBusinessBusinessOwnerRelationship, _ := json.Marshal(dst.PatchBusinessBusinessOwnerRelationship)
		if string(jsonPatchBusinessBusinessOwnerRelationship) == "{}" { // empty struct
			dst.PatchBusinessBusinessOwnerRelationship = nil
		} else {
			match++
		}
	} else {
		dst.PatchBusinessBusinessOwnerRelationship = nil
	}

	// try to unmarshal data into PatchPersonBusinessOwnerRelationship
	err = newStrictDecoder(data).Decode(&dst.PatchPersonBusinessOwnerRelationship)
	if err == nil {
		jsonPatchPersonBusinessOwnerRelationship, _ := json.Marshal(dst.PatchPersonBusinessOwnerRelationship)
		if string(jsonPatchPersonBusinessOwnerRelationship) == "{}" { // empty struct
			dst.PatchPersonBusinessOwnerRelationship = nil
		} else {
			match++
		}
	} else {
		dst.PatchPersonBusinessOwnerRelationship = nil
	}

	// try to unmarshal data into PatchPersonBusinessRelationship
	err = newStrictDecoder(data).Decode(&dst.PatchPersonBusinessRelationship)
	if err == nil {
		jsonPatchPersonBusinessRelationship, _ := json.Marshal(dst.PatchPersonBusinessRelationship)
		if string(jsonPatchPersonBusinessRelationship) == "{}" { // empty struct
			dst.PatchPersonBusinessRelationship = nil
		} else {
			match++
		}
	} else {
		dst.PatchPersonBusinessRelationship = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.PatchBusinessBusinessOwnerRelationship = nil
		dst.PatchPersonBusinessOwnerRelationship = nil
		dst.PatchPersonBusinessRelationship = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(PatchRelationshipIn)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(PatchRelationshipIn)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src PatchRelationshipIn) MarshalJSON() ([]byte, error) {
	if src.PatchBusinessBusinessOwnerRelationship != nil {
		return json.Marshal(&src.PatchBusinessBusinessOwnerRelationship)
	}

	if src.PatchPersonBusinessOwnerRelationship != nil {
		return json.Marshal(&src.PatchPersonBusinessOwnerRelationship)
	}

	if src.PatchPersonBusinessRelationship != nil {
		return json.Marshal(&src.PatchPersonBusinessRelationship)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *PatchRelationshipIn) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.PatchBusinessBusinessOwnerRelationship != nil {
		return obj.PatchBusinessBusinessOwnerRelationship
	}

	if obj.PatchPersonBusinessOwnerRelationship != nil {
		return obj.PatchPersonBusinessOwnerRelationship
	}

	if obj.PatchPersonBusinessRelationship != nil {
		return obj.PatchPersonBusinessRelationship
	}

	// all schemas are nil
	return nil
}

type NullablePatchRelationshipIn struct {
	value *PatchRelationshipIn
	isSet bool
}

func (v NullablePatchRelationshipIn) Get() *PatchRelationshipIn {
	return v.value
}

func (v *NullablePatchRelationshipIn) Set(val *PatchRelationshipIn) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchRelationshipIn) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchRelationshipIn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchRelationshipIn(val *PatchRelationshipIn) *NullablePatchRelationshipIn {
	return &NullablePatchRelationshipIn{value: val, isSet: true}
}

func (v NullablePatchRelationshipIn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchRelationshipIn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


