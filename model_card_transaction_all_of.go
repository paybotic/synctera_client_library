/*
Synctera API

<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.32.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CardTransactionAllOf struct for CardTransactionAllOf
type CardTransactionAllOf struct {
	CardTransaction CardTransactionData     `json:"card_transaction"`
	Subtype         CardTransactionSubtypes `json:"subtype"`
}

// NewCardTransactionAllOf instantiates a new CardTransactionAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCardTransactionAllOf(cardTransaction CardTransactionData, subtype CardTransactionSubtypes) *CardTransactionAllOf {
	this := CardTransactionAllOf{}
	this.CardTransaction = cardTransaction
	this.Subtype = subtype
	return &this
}

// NewCardTransactionAllOfWithDefaults instantiates a new CardTransactionAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCardTransactionAllOfWithDefaults() *CardTransactionAllOf {
	this := CardTransactionAllOf{}
	return &this
}

// GetCardTransaction returns the CardTransaction field value
func (o *CardTransactionAllOf) GetCardTransaction() CardTransactionData {
	if o == nil {
		var ret CardTransactionData
		return ret
	}

	return o.CardTransaction
}

// GetCardTransactionOk returns a tuple with the CardTransaction field value
// and a boolean to check if the value has been set.
func (o *CardTransactionAllOf) GetCardTransactionOk() (*CardTransactionData, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CardTransaction, true
}

// SetCardTransaction sets field value
func (o *CardTransactionAllOf) SetCardTransaction(v CardTransactionData) {
	o.CardTransaction = v
}

// GetSubtype returns the Subtype field value
func (o *CardTransactionAllOf) GetSubtype() CardTransactionSubtypes {
	if o == nil {
		var ret CardTransactionSubtypes
		return ret
	}

	return o.Subtype
}

// GetSubtypeOk returns a tuple with the Subtype field value
// and a boolean to check if the value has been set.
func (o *CardTransactionAllOf) GetSubtypeOk() (*CardTransactionSubtypes, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subtype, true
}

// SetSubtype sets field value
func (o *CardTransactionAllOf) SetSubtype(v CardTransactionSubtypes) {
	o.Subtype = v
}

func (o CardTransactionAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["card_transaction"] = o.CardTransaction
	}
	if true {
		toSerialize["subtype"] = o.Subtype
	}
	return json.Marshal(toSerialize)
}

type NullableCardTransactionAllOf struct {
	value *CardTransactionAllOf
	isSet bool
}

func (v NullableCardTransactionAllOf) Get() *CardTransactionAllOf {
	return v.value
}

func (v *NullableCardTransactionAllOf) Set(val *CardTransactionAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableCardTransactionAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableCardTransactionAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCardTransactionAllOf(val *CardTransactionAllOf) *NullableCardTransactionAllOf {
	return &NullableCardTransactionAllOf{value: val, isSet: true}
}

func (v NullableCardTransactionAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCardTransactionAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
