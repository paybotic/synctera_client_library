/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.140.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ExternalAccountLanguage The language that corresponds to the link token. For Plaid, see their [documentation](https://plaid.com/docs/api/tokens/#link-token-create-request-language) for a list of allowed values.
type ExternalAccountLanguage string

// List of external_account_language
const (
	EXTERNALACCOUNTLANGUAGE_DE ExternalAccountLanguage = "DE"
	EXTERNALACCOUNTLANGUAGE_EN ExternalAccountLanguage = "EN"
	EXTERNALACCOUNTLANGUAGE_ES ExternalAccountLanguage = "ES"
	EXTERNALACCOUNTLANGUAGE_FR ExternalAccountLanguage = "FR"
	EXTERNALACCOUNTLANGUAGE_NL ExternalAccountLanguage = "NL"
)

// All allowed values of ExternalAccountLanguage enum
var AllowedExternalAccountLanguageEnumValues = []ExternalAccountLanguage{
	"DE",
	"EN",
	"ES",
	"FR",
	"NL",
}

func (v *ExternalAccountLanguage) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ExternalAccountLanguage(value)
	for _, existing := range AllowedExternalAccountLanguageEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ExternalAccountLanguage", value)
}

// NewExternalAccountLanguageFromValue returns a pointer to a valid ExternalAccountLanguage
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewExternalAccountLanguageFromValue(v string) (*ExternalAccountLanguage, error) {
	ev := ExternalAccountLanguage(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ExternalAccountLanguage: valid values are %v", v, AllowedExternalAccountLanguageEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ExternalAccountLanguage) IsValid() bool {
	for _, existing := range AllowedExternalAccountLanguageEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to external_account_language value
func (v ExternalAccountLanguage) Ptr() *ExternalAccountLanguage {
	return &v
}

type NullableExternalAccountLanguage struct {
	value *ExternalAccountLanguage
	isSet bool
}

func (v NullableExternalAccountLanguage) Get() *ExternalAccountLanguage {
	return v.value
}

func (v *NullableExternalAccountLanguage) Set(val *ExternalAccountLanguage) {
	v.value = val
	v.isSet = true
}

func (v NullableExternalAccountLanguage) IsSet() bool {
	return v.isSet
}

func (v *NullableExternalAccountLanguage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExternalAccountLanguage(val *ExternalAccountLanguage) *NullableExternalAccountLanguage {
	return &NullableExternalAccountLanguage{value: val, isSet: true}
}

func (v NullableExternalAccountLanguage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExternalAccountLanguage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
