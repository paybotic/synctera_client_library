openapi: 3.0.3
info:
  title: Synctera API
  description: |
    <h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.17.0
servers:
- url: https://api.synctera.com/v0
  description: Production
- url: https://api-sandbox.synctera.com/v0
  description: Sandbox (no real world financial impact)
security:
- bearerAuth: []
tags:
- name: Account Products
  description: "Requests to create and manage account products, including fees, interest."
- name: Accounts
  description: Request to create and manage accounts
- name: Account Templates
  description: Account Template
- name: Payments
  description: Create and manage payments
- name: Applications
  description: Create a credit application.
- name: Businesses
  description: |
    A legal entity (corporation, partnership, etc.) that is relevant to the  Synctera platform in some way: a business customer or some other  organization that has an ownership share in such a business customer.
- name: Cards
  description: Requests to issue and manage cards
- name: External Cards (alpha)
  description: Push and pull from cards
- name: Customers
  description: Requests to create and manage customers
- name: Disclosures
  description: |
    The disclosures resource is used to track the status of disclosures and
    ensure that all parties have been shown the necessary disclosures to meet
    regulatory obligations.
- name: External Accounts
  description: |
    The External Account resource is used for managing links to accounts
    that operate outside of the Synctera ecosystem.
- name: Internal Accounts
  description: |
    The internal account resource is used for managing links to internal
    accounts where the funds are managed by integrators.
- name: KYC Verification
  description: Requests to initiate customer verification.
- name: Cronut
  description: Request to create and manage payment_schedules
- name: Persons
  description: |
    A natural person (individual human) that is relevant to the Synctera  platform in some way: e.g. a personal customer or a director/officer/owner  of a business.
- name: Remote Check Deposit
  description: Request to create and manage deposits using remote deposit capture
- name: Reconciliations
  description: Requests to create and manage reconciliation
- name: Relationships
  description: |
    Represents the relationships between parties. A relationship can exist between personal customers, business customers, or non-customer persons/organizations.
- name: Stately
  description: Request to create and manage statements
- name: Card Transaction Simulations
  description: Requests to generate simulated transactions
- name: Transactions
  description: Create and manage transactions
- name: KYC/KYB Verifications
  description: Requests to initiate customer verification.
- name: Waitlist
  description: Request to create and manage waitlists
- name: Watchlist
  description: "Request to enroll, renew, or cancel watchlist monitors"
- name: Card Webhook Simulations
  description: Requests to generate simulated webhooks
- name: Webhooks
  description: Requests to create and manage webhooks
- name: Wires (alpha)
  description: Create and manage wire transfers
paths:
  /accounts:
    summary: Accounts
    get:
      tags:
      - Accounts
      summary: List accounts
      description: Get paginated list of Accounts associated
      operationId: listAccounts
      parameters:
      - name: id
        in: query
        description: |
          Account ID(s). Multiple IDs can be provided as a comma-separated list.
        required: false
        style: form
        explode: false
        schema:
          $ref: '#/components/schemas/account_id_query_schema'
        x-external: true
      - name: linked_account_id
        in: query
        description: |
          Return only resources that are linked to the specified backing account in balance_floor or balance_ceiling. Multiple IDs can be provided as a comma-separated list.
        required: false
        style: form
        explode: false
        schema:
          $ref: '#/components/schemas/account_id_query_schema'
        x-external: true
      - name: overdraft_account_id
        in: query
        description: |
          Overdraft account ID(s). Multiple IDs can be provided as a comma-separated list.
          This parameter is deprecated and will be removed in a future API version. Use linked_account_id instead.
        required: false
        deprecated: true
        style: form
        explode: false
        schema:
          $ref: '#/components/schemas/account_id_query_schema'
        x-external: true
      - name: overflow_account_id
        in: query
        description: |
          Overflow account ID(s). Multiple IDs can be provided as a comma-separated list.
          This parameter is deprecated and will be removed in a future API version. Use linked_account_id instead.
        required: false
        deprecated: true
        style: form
        explode: false
        schema:
          $ref: '#/components/schemas/account_id_query_schema'
        x-external: true
      - name: account_number
        in: query
        description: |
          Account number(s). Multiple account numbers can be provided as a comma-separated list.
          When only a single account number is provided, any * characters in the string are wildcards, and match any characters.
        required: false
        style: form
        explode: false
        schema:
          type: array
          example: "2345678108180014864"
          items:
            type: string
        x-external: true
      - name: status
        in: query
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/status'
        x-external: true
      - name: interest_product_id
        in: query
        description: Interest product ID that accounts associate with. Multiple IDs
          can be provided as a comma-separated list.
        required: false
        style: form
        explode: true
        schema:
          type: string
        x-external: true
      - name: customer_type
        in: query
        description: |
          Customer type of the account, BUSINESS or PERSONAL
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/customer_type'
        x-external: true
      - name: customer_id
        in: query
        description: The customer's unique identifier
        required: false
        deprecated: true
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/customer_id'
        x-external: true
      - name: business_id
        in: query
        description: |
          Unique identifier for the business. Multiple IDs can be provided as a comma-separated list.
        required: false
        style: form
        explode: false
        schema:
          type: array
          example: "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157"
          items:
            type: string
            format: uuid
        x-external: true
      - name: person_id
        in: query
        description: |
          Unique identifier for the person. Multiple IDs can be provided as a comma-separated list.
        required: false
        style: form
        explode: false
        schema:
          type: array
          example: "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157"
          items:
            type: string
            format: uuid
        x-external: true
      - name: first_name
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          description: "Only return resources where the first_name field matches the\
            \ specified string. Any * characters in the string are wildcards, and\
            \ match any characters."
          example: Alice
        x-external: true
      - name: last_name
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          description: "Only return resources where the last_name field matches the\
            \ specified string. Any * characters in the string are wildcards, and\
            \ match any characters."
          example: Smith
        x-external: true
      - name: limit
        in: query
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          description: |
            Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
          example: 100
          default: 100
        x-external: true
      - name: page_token
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          description: "Optional pagination token to be provided to retrieve subsequent\
            \ pages, returned from previous get"
          example: xwsfu1mkaq
        x-external: true
      - name: sort_by
        in: query
        description: |
          Specifies the sort order for the returned accounts.
        required: false
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
            enum:
            - account_number:asc
            - account_number:desc
            - account_type:asc
            - account_type:desc
            - first_name:asc
            - first_name:desc
            - last_name:asc
            - last_name:desc
        x-external: true
      responses:
        "200":
          description: List of accounts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/account_list'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
    post:
      tags:
      - Accounts
      summary: Create an account
      description: |
        Create a shadow mode or lead mode account. You need to determine the mode according to integrator configuration, and specify the required fields accordingly.

        Shadow mode required fields:
          - account_number
          - status

        Lead mode required fields:
          - account_template_id
          - relationships
      operationId: createAccount
      parameters:
      - name: Idempotency-Key
        in: header
        description: An idempotency key is an arbitrary unique value generated by
          client to detect subsequent retries of the same request. It is recommended
          that a UUID or a similar random identifier be used as an idempotency key
        required: false
        style: simple
        explode: false
        schema:
          type: string
          example: 81026fb3-d06c-4b37-80da-2b17b4749a3f
        x-external: true
      requestBody:
        description: Account to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/account_creation'
        required: true
      responses:
        "201":
          description: Created account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/account_generic_response'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "422":
          description: Unprocessable entity request response
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
  /accounts/{account_id}:
    summary: account
    get:
      tags:
      - Accounts
      summary: Get account
      description: Get an account
      operationId: getAccount
      parameters:
      - name: account_id
        in: path
        description: Unique identifier for the account.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: 12dbc24c-3cfc-46dc-a164-0977434afabf
      responses:
        "200":
          description: Account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/account_generic_response'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "461":
          description: Account has been closed
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
    put:
      tags:
      - Accounts
      summary: Update account
      description: |
        Update account

        Shadow mode required fields:
          - account_number
          - status

        Lead mode required fields:
          - All fields are required.

        Please note:
          - access_status needs to be in ACTIVE.
          - PUT request cannot change access_status.
      operationId: updateAccount
      parameters:
      - name: account_id
        in: path
        description: Unique identifier for the account.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: 12dbc24c-3cfc-46dc-a164-0977434afabf
      requestBody:
        description: Account to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/account'
        required: true
      responses:
        "200":
          description: Updated account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/account_generic_response'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "461":
          description: Account has been closed
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
    patch:
      tags:
      - Accounts
      summary: Patch account
      description: |
        Patch account.

        Immutable fields:
          - account_number
          - account_type
          - account_template_id
          - customer_type

        Please note:
          - Other fields cannot be modified when access_status is FROZEN.
          - access_status has to be patched individually without other fields.
      operationId: patchAccount
      parameters:
      - name: Idempotency-Key
        in: header
        description: An idempotency key is an arbitrary unique value generated by
          client to detect subsequent retries of the same request. It is recommended
          that a UUID or a similar random identifier be used as an idempotency key
        required: false
        style: simple
        explode: false
        schema:
          type: string
          example: 81026fb3-d06c-4b37-80da-2b17b4749a3f
        x-external: true
      - name: account_id
        in: path
        description: Unique identifier for the account.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: 12dbc24c-3cfc-46dc-a164-0977434afabf
      requestBody:
        description: Account fields to be patched
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/account'
        required: true
      responses:
        "200":
          description: Updated account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/account_generic_response'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "461":
          description: Account has been closed
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
  /accounts/{account_id}/relationships:
    summary: Account Relationship
    get:
      tags:
      - Accounts
      summary: List account relationships
      description: List all customers of an account
      operationId: listAccountRelationship
      parameters:
      - name: account_id
        in: path
        description: Unique identifier for the account.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: 12dbc24c-3cfc-46dc-a164-0977434afabf
      - name: limit
        in: query
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          description: |
            Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
          example: 100
          default: 100
        x-external: true
      - name: page_token
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          description: "Optional pagination token to be provided to retrieve subsequent\
            \ pages, returned from previous get"
          example: xwsfu1mkaq
        x-external: true
      responses:
        "200":
          description: List of account relationships
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/relationship_list'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "461":
          description: Account has been closed
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
    post:
      tags:
      - Accounts
      summary: Create account relationship
      description: Add a customer to an account
      operationId: createAccountRelationship
      parameters:
      - name: Idempotency-Key
        in: header
        description: An idempotency key is an arbitrary unique value generated by
          client to detect subsequent retries of the same request. It is recommended
          that a UUID or a similar random identifier be used as an idempotency key
        required: false
        style: simple
        explode: false
        schema:
          type: string
          example: 81026fb3-d06c-4b37-80da-2b17b4749a3f
        x-external: true
      - name: account_id
        in: path
        description: Unique identifier for the account.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: 12dbc24c-3cfc-46dc-a164-0977434afabf
      requestBody:
        description: Account relationship object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/relationship'
        required: true
      responses:
        "201":
          description: Account relationship object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/relationship'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "461":
          description: Account has been closed
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
  /accounts/{account_id}/relationships/{relationship_id}:
    summary: Account Relationship
    get:
      tags:
      - Accounts
      summary: Get account relationship
      description: Get account relationship by ID
      operationId: getAccountRelationship
      parameters:
      - name: account_id
        in: path
        description: Unique identifier for the account.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: 12dbc24c-3cfc-46dc-a164-0977434afabf
      - name: relationship_id
        in: path
        description: Relationship ID of the account associate with the account entity
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: 491b33fd-182c-4f0b-90d4-f2f929bbb6d9
      responses:
        "200":
          description: Account relationship
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/relationship'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "461":
          description: Account has been closed
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
    put:
      tags:
      - Accounts
      summary: Update account relationship
      description: Update account relationship. Only relationship_type can be updated.
        customer_id should not be modified.
      operationId: updateAccountRelationship
      parameters:
      - name: account_id
        in: path
        description: Unique identifier for the account.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: 12dbc24c-3cfc-46dc-a164-0977434afabf
      - name: relationship_id
        in: path
        description: Relationship ID of the account associate with the account entity
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: 491b33fd-182c-4f0b-90d4-f2f929bbb6d9
      requestBody:
        description: Account relationship to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/relationship'
        required: true
      responses:
        "200":
          description: Updated account relationship
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/relationship'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "461":
          description: Account has been closed
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
    delete:
      tags:
      - Accounts
      summary: Delete account relationship
      description: Delete account relationship
      operationId: DeleteAccountRelationship
      parameters:
      - name: account_id
        in: path
        description: Unique identifier for the account.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: 12dbc24c-3cfc-46dc-a164-0977434afabf
      - name: relationship_id
        in: path
        description: Relationship ID of the account associate with the account entity
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: 491b33fd-182c-4f0b-90d4-f2f929bbb6d9
      responses:
        "200":
          description: Resource has been deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/delete_response'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "461":
          description: Account has been closed
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
  /accounts/products:
    summary: Account products
    get:
      tags:
      - Accounts
      summary: List account products
      description: |
        List account Products
      operationId: listAccountResourceProducts
      parameters:
      - name: limit
        in: query
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          description: |
            Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
          example: 100
          default: 100
        x-external: true
      - name: page_token
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          description: "Optional pagination token to be provided to retrieve subsequent\
            \ pages, returned from previous get"
          example: xwsfu1mkaq
        x-external: true
      - name: start_date
        in: query
        description: Date range filtering for type INTEREST. All rates in interest
          resource have to have valid_from later or equal to start_date.
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date
        x-external: true
      - name: end_date
        in: query
        description: Date range filtering for type INTEREST. All rates in interest
          resource have to have valid_to earlier or equal to end_date.
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date
        x-external: true
      - name: product_type
        in: query
        description: Type of account product
        required: true
        style: form
        explode: true
        schema:
          type: string
          enum:
          - FEE
          - INTEREST
        x-external: true
      responses:
        "200":
          description: List of account products
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/account_product_list'
      x-external: true
    post:
      tags:
      - Accounts
      summary: Create an account product
      description: |
        Create an account product. Rates cannot be nil or empty.
      operationId: createAccountResourceProduct
      parameters:
      - name: Idempotency-Key
        in: header
        description: An idempotency key is an arbitrary unique value generated by
          client to detect subsequent retries of the same request. It is recommended
          that a UUID or a similar random identifier be used as an idempotency key
        required: false
        style: simple
        explode: false
        schema:
          type: string
          example: 81026fb3-d06c-4b37-80da-2b17b4749a3f
        x-external: true
      requestBody:
        description: Account product to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/account_product'
        required: true
      responses:
        "201":
          description: Account product created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/account_product'
      x-external: true
  /accounts/products/{product_id}:
    summary: Account products
    patch:
      tags:
      - Accounts
      summary: Patch account product
      description: |
        Patch account product. Rates requires at minimum 1 entry if specified.
      operationId: patchAccountProduct
      parameters:
      - name: Idempotency-Key
        in: header
        description: An idempotency key is an arbitrary unique value generated by
          client to detect subsequent retries of the same request. It is recommended
          that a UUID or a similar random identifier be used as an idempotency key
        required: false
        style: simple
        explode: false
        schema:
          type: string
          example: 81026fb3-d06c-4b37-80da-2b17b4749a3f
        x-external: true
      - name: product_id
        in: path
        description: Account Product ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: 0175dfc6-250f-4245-9360-17d3682b943a
      requestBody:
        description: Account product fields to be patched
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/patch_account_product'
        required: true
      responses:
        "200":
          description: Updated account product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/account_product'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
  /accounts/templates:
    summary: Accounts
    get:
      tags:
      - Accounts
      summary: List account templates
      description: |
        List account templates
      operationId: listAccountTemplates
      parameters:
      - name: limit
        in: query
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          description: |
            Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
          example: 100
          default: 100
        x-external: true
      - name: page_token
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          description: "Optional pagination token to be provided to retrieve subsequent\
            \ pages, returned from previous get"
          example: xwsfu1mkaq
        x-external: true
      responses:
        "200":
          description: List of account templates
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/template_list'
      x-external: true
    post:
      tags:
      - Accounts
      summary: Create an account template
      description: |
        Create an account template. An account template is need when create an account in a lead mode
      operationId: createAccountTemplate
      parameters:
      - name: Idempotency-Key
        in: header
        description: An idempotency key is an arbitrary unique value generated by
          client to detect subsequent retries of the same request. It is recommended
          that a UUID or a similar random identifier be used as an idempotency key
        required: false
        style: simple
        explode: false
        schema:
          type: string
          example: 81026fb3-d06c-4b37-80da-2b17b4749a3f
        x-external: true
      requestBody:
        description: Account template to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/account_template'
        required: true
      responses:
        "201":
          description: Account template created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/account_template_response'
      x-external: true
  /accounts/templates/{template_id}:
    summary: account
    get:
      tags:
      - Accounts
      summary: Get account template
      description: Get an account template
      operationId: getAccountTemplate
      parameters:
      - name: template_id
        in: path
        description: Account Template ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: 858f5a31-2723-452d-9cdc-b2c01d40d9dd
      responses:
        "200":
          description: Account Template
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/account_template_response'
      x-external: true
    put:
      tags:
      - Accounts
      summary: Update account template
      description: |
        Update account template
      operationId: updateAccountTemplate
      parameters:
      - name: template_id
        in: path
        description: Account Template ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: 858f5a31-2723-452d-9cdc-b2c01d40d9dd
      requestBody:
        description: Account template to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/account_template'
        required: true
      responses:
        "200":
          description: Account template updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/account_template_response'
      x-external: true
    delete:
      tags:
      - Accounts
      summary: Delete account template
      description: Delete account template
      operationId: DeleteAccountTemplate
      parameters:
      - name: template_id
        in: path
        description: Account Template ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: 858f5a31-2723-452d-9cdc-b2c01d40d9dd
      responses:
        "200":
          description: Resource has been deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/delete_response'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
  /ach:
    summary: Outgoing ACH
    description: |
      The ACH object represents your outgoing ACH.
    get:
      tags:
      - Payments
      summary: List outgoing ACH transactions
      description: List outgoing ACH transactions
      operationId: listTransactionsOut
      parameters:
      - name: limit
        in: query
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          description: |
            Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
          example: 100
          default: 100
        x-external: true
      - name: page_token
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          description: "Optional pagination token to be provided to retrieve subsequent\
            \ pages, returned from previous get"
          example: xwsfu1mkaq
        x-external: true
      responses:
        "200":
          description: List of outgoing ACH transactions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/outgoing_ach_list'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
    post:
      tags:
      - Payments
      summary: Create an outgoing ACH
      description: |
        Create an outgoing ACH
      operationId: addTransactionOut
      requestBody:
        description: Outgoing ACH
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/outgoing_ach_request'
        required: true
      responses:
        "201":
          description: Created an Outgoing ACH
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/outgoing_ach'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "422":
          description: Unprocessable entity request response
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
  /ach/{transaction_id}:
    summary: Outgoing ACH detail
    get:
      tags:
      - Payments
      summary: Get an outgoing ACH transaction
      description: Get a single outgoing ACH transaction
      operationId: getTransactionOut
      parameters:
      - name: transaction_id
        in: path
        description: Transaction ID in the ledger
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: 25ae35db-92b9-4b74-82d9-140a07eece71
      responses:
        "200":
          description: Outgoing ACH transaction representation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/outgoing_ach'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
    patch:
      tags:
      - Payments
      summary: Update outgoing ACH transaction
      description: Update outgoing ACH transaction (either status or funds availability)
      operationId: patchTransactionOut
      parameters:
      - name: transaction_id
        in: path
        description: Transaction ID in the ledger
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: 25ae35db-92b9-4b74-82d9-140a07eece71
      requestBody:
        description: Outgoing ACH update request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/outgoing_ach_patch'
        required: true
      responses:
        "200":
          description: Cancelled successfully
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "422":
          description: Unprocessable entity request response
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
  /applications:
    summary: Applications
    get:
      tags:
      - Applications
      summary: List credit applications.
      description: |
        List credit applications.
      operationId: listApplications
      parameters:
      - name: customer_id
        in: query
        description: "A list of customer unique identifiers, with a comma separating\
          \ any values."
        required: false
        style: form
        explode: false
        schema:
          type: array
          items:
            $ref: '#/components/schemas/customer_id'
        x-external: true
      - name: status
        in: query
        description: |
          Status of the credit application
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/application_status'
        x-external: true
      responses:
        "200":
          description: List of credit applications
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/application_list'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
    post:
      tags:
      - Applications
      summary: Create a credit application.
      description: |
        Create a credit application.
      operationId: createApplication
      parameters:
      - name: Idempotency-Key
        in: header
        description: An idempotency key is an arbitrary unique value generated by
          client to detect subsequent retries of the same request. It is recommended
          that a UUID or a similar random identifier be used as an idempotency key
        required: false
        style: simple
        explode: false
        schema:
          type: string
          example: 81026fb3-d06c-4b37-80da-2b17b4749a3f
        x-external: true
      requestBody:
        description: Submit application details for a credit account
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/application'
        required: true
      responses:
        "201":
          description: Credit application created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/application_response'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "409":
          description: Resource already exists error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
  /applications/{application_id}:
    summary: Application
    get:
      tags:
      - Applications
      summary: Get Application
      description: |
        Get application by ID.
      operationId: getApplication
      parameters:
      - name: application_id
        in: path
        description: Unique identifier for the application.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: 4d463562-87b0-40bf-ba3f-7b52833f4898
      responses:
        "200":
          description: Application representation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/application_response'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
    patch:
      tags:
      - Applications
      summary: Patch Application
      description: |
        Patch Application.
      operationId: patchApplication
      parameters:
      - name: Idempotency-Key
        in: header
        description: An idempotency key is an arbitrary unique value generated by
          client to detect subsequent retries of the same request. It is recommended
          that a UUID or a similar random identifier be used as an idempotency key
        required: false
        style: simple
        explode: false
        schema:
          type: string
          example: 81026fb3-d06c-4b37-80da-2b17b4749a3f
        x-external: true
      - name: application_id
        in: path
        description: Unique identifier for the application.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: 4d463562-87b0-40bf-ba3f-7b52833f4898
      requestBody:
        description: Application fields to be patched
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/application_patch'
        required: true
      responses:
        "200":
          description: Updated application
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/application_response'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
  /businesses:
    summary: Businesses
    get:
      tags:
      - Businesses
      summary: List business
      description: Retrieves paginated list of businesses associated with the authorized
        requester.
      operationId: listBusinesses
      parameters:
      - name: id
        in: query
        description: |
          Unique identifier for the business. Multiple IDs can be provided as a comma-separated list.
        required: false
        style: form
        explode: false
        schema:
          type: array
          example: "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157"
          items:
            type: string
            format: uuid
        x-external: true
      - name: entity_name
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          description: "Only return resources where the `entity_name` field matches\
            \ the specified string. Any `*` characters in the string are wildcards,\
            \ and match any characters."
          example: Apex Corporation
        x-external: true
      - name: phone_number
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          description: "Only return resources where the phone_number field matches\
            \ the specified string. Phone numbers use the E.164 format e.g. +19178675309.\
            \ Any * characters in the string are wildcards, and match any characters."
          example: +12065550100
        x-external: true
      - name: status
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          description: |
            Status of the business. One of the following:
            * `PROSPECT` – a potential customer, used for information-gathering and disclosures.
            * `ACTIVE` –  is an integrator defined status.  Integrators should set a business to active if they believe the person to be qualified for conducting business.  Synctera will combine this status with other statuses such a verification to determine if the business is eligible for specific actions such as initiating transactions or issuing a card.
            * `FROZEN` – business's actions are blocked for security, legal, or other reasons.
            * `SANCTION` – business is on a sanctions list and should be carefully monitored.
            * `DISSOLVED` – an inactive status indicating a business entity has filed articles of dissolution or a certificate of termination to terminate its existence.
            * `CANCELLED` – an inactive status indicating that a business entity has filed a cancellation or has failed to file its periodic report after notice of forfeiture of its rights to do business.
            * `SUSPENDED` – an inactive status indicating that the business entity has lost the right to operate in it's registered jurisdiction.
            * `MERGED` – an inactive status indicating that the business entity has terminated existence by merging into another entity.
            * `INACTIVE` – an inactive status indicating that the business entity is no longer active.
            * `CONVERTED` – An inactive status indicating that the business entity has been converted to another type of business entity in the same jurisdiction.
          enum:
          - PROSPECT
          - ACTIVE
          - FROZEN
          - SANCTION
          - DISSOLVED
          - CANCELLED
          - SUSPENDED
          - MERGED
          - INACTIVE
          - CONVERTED
        x-external: true
      - name: is_customer
        in: query
        description: "If true, show only customers. If false, show non-customer parties."
        required: false
        style: form
        explode: true
        schema:
          type: boolean
        x-external: true
      - name: sort_by
        in: query
        description: |
          Specifies the sort order for the returned businesses.
        required: false
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
            enum:
            - entity_name:asc
            - entity_name:desc
        x-external: true
      - name: limit
        in: query
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          description: |
            Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
          example: 100
          default: 100
        x-external: true
      - name: page_token
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          description: "Optional pagination token to be provided to retrieve subsequent\
            \ pages, returned from previous get"
          example: xwsfu1mkaq
        x-external: true
      responses:
        "200":
          description: List of businesses.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/business_list'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
      x-status: alpha
    post:
      tags:
      - Businesses
      summary: Create a business
      description: |
        Create a business who may act as a customer or a related business. You can then verify the identity of this customer and associate them with other people and accounts.
      operationId: createBusiness
      parameters:
      - name: Idempotency-Key
        in: header
        description: An idempotency key is an arbitrary unique value generated by
          client to detect subsequent retries of the same request. It is recommended
          that a UUID or a similar random identifier be used as an idempotency key
        required: false
        style: simple
        explode: false
        schema:
          type: string
          example: 81026fb3-d06c-4b37-80da-2b17b4749a3f
        x-external: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/business'
        required: true
      responses:
        "201":
          description: The created business.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/business'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "409":
          description: Resource already exists error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
      x-status: alpha
  /businesses/{business_id}:
    get:
      tags:
      - Businesses
      summary: Get business
      description: Get business by ID.
      operationId: getBusiness
      parameters:
      - name: business_id
        in: path
        description: Business's unique identifier.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: 2e3304dc-a1c2-427e-ac5a-a2586a95ce1f
      responses:
        "200":
          description: Business representation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/business'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
      x-status: alpha
    patch:
      tags:
      - Businesses
      summary: Patch business
      description: Update business by ID.
      operationId: updateBusiness
      parameters:
      - name: Idempotency-Key
        in: header
        description: An idempotency key is an arbitrary unique value generated by
          client to detect subsequent retries of the same request. It is recommended
          that a UUID or a similar random identifier be used as an idempotency key
        required: false
        style: simple
        explode: false
        schema:
          type: string
          example: 81026fb3-d06c-4b37-80da-2b17b4749a3f
        x-external: true
      - name: business_id
        in: path
        description: Business's unique identifier.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: 2e3304dc-a1c2-427e-ac5a-a2586a95ce1f
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/patch_business'
        required: true
      responses:
        "200":
          description: Updated business representation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/business'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
      x-status: alpha
  /cards:
    summary: Cards
    description: |
      The Card object represents your customer's spending card.
    get:
      tags:
      - Cards
      summary: List Cards
      description: |
        List of cards matching query parameters
      operationId: listCards
      parameters:
      - name: customer_id
        in: query
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/customer_id1'
        x-external: true
      - name: account_id
        in: query
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/account_id'
        x-external: true
      - name: emboss_name
        in: query
        description: emboss name
        required: false
        style: form
        explode: true
        schema:
          type: string
        x-external: true
      - name: last_four
        in: query
        description: The last 4 digits of the card PAN
        required: false
        style: form
        explode: true
        schema:
          pattern: "^\\d{4}$"
          type: string
          example: "1234"
        x-external: true
      - name: expiration_date
        in: query
        description: The date representing when the card would expire at
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date
          example: 2006-01-02
        x-external: true
      - name: card_type
        in: query
        description: Indicates the type of card
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - DEBIT
        x-external: true
      - name: card_brand
        in: query
        description: The brand of a card product
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/card_brand'
        x-external: true
      - name: form
        in: query
        description: The format of the card
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/form'
        x-external: true
      - name: card_product_id
        in: query
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/card_product_id'
        x-external: true
      - name: card_status
        in: query
        description: The status of a card
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/card_status'
        x-external: true
      - name: postal_code
        in: query
        description: The postal code of a card user
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: "49633"
        x-external: true
      - name: limit
        in: query
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          description: |
            Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
          example: 100
          default: 100
        x-external: true
      - name: page_token
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          description: "Optional pagination token to be provided to retrieve subsequent\
            \ pages, returned from previous get"
          example: xwsfu1mkaq
        x-external: true
      - name: sort_by
        in: query
        description: |
          Specifies the sort order for the returned cards.
        required: false
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
            enum:
            - account_id:asc
            - account_id:desc
            - customer_id:asc
            - customer_id:desc
            - card_product_id:asc
            - card_product_id:desc
            - last_four:asc
            - last_four:desc
            - card_type:asc
            - card_type:desc
            - card_brand:asc
            - card_brand:desc
            - expiration_date:asc
            - expiration_date:desc
            - form:asc
            - form:desc
            - card_status:asc
            - card_status:desc
        x-external: true
      responses:
        "201":
          description: Cards
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/card_list_response'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "422":
          description: Unprocessable entity request response
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
    post:
      tags:
      - Cards
      summary: Issue a Card
      description: |
        Issue or reissue a new card for a customer
      operationId: issueCard
      requestBody:
        description: Card to issue
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/card_issuance_request'
        required: true
      responses:
        "201":
          description: Card issued
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/card_response'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "422":
          description: Unprocessable entity request response
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
  /cards/{card_id}:
    summary: Cards
    description: |
      The Card object represents your customer's spending card.
    get:
      tags:
      - Cards
      summary: Get Card
      description: |
        Get the details about a card that has been issued
      operationId: getCard
      parameters:
      - name: card_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/card_id'
      responses:
        "200":
          description: Card details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/card_response'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "422":
          description: Unprocessable entity request response
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
    patch:
      tags:
      - Cards
      summary: Update Card
      description: |
        Integrators can update the card resource to change status, update shipping (if the card hasn't been shipped) or edit metadata.
      operationId: updateCard
      parameters:
      - name: card_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/card_id'
      requestBody:
        description: Card edits
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/card_edit_request'
        required: true
      responses:
        "200":
          description: Card issued
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/card_response'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "422":
          description: Unprocessable entity request response
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
  /cards/{card_id}/barcodes:
    summary: Cards
    get:
      tags:
      - Cards
      summary: Get Card Barcode
      description: |
        This endpoint is for testing environment only to provide access to barcode of a test card
      operationId: getCardBarcode
      parameters:
      - name: card_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/card_id'
      responses:
        "200":
          description: Barcode
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "422":
          description: Unprocessable entity request response
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
  /cards/{card_id}/changes:
    get:
      tags:
      - Cards
      summary: List Card Changes
      description: |
        List card change history
      operationId: listChanges
      parameters:
      - name: card_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/card_id'
      responses:
        "200":
          description: List of card changes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/card_changes_list'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "422":
          description: Unprocessable entity request response
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
  /cards/{card_id}/client_token:
    summary: Get Client Access Token
    description: |
      Client access token for accessing privileged details about a card
    post:
      tags:
      - Cards
      summary: Get a client token
      description: |
        Create a client access token for interacting with a card.  This token will be used on the client to identify the card for flows like viewing Full PAN or setting the PIN in a PCI compliant manner.
      operationId: getClientAccessToken
      parameters:
      - name: card_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/card_id'
      responses:
        "201":
          description: Client token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/client_token'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "422":
          description: Unprocessable entity request response
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
  /cards/{card_id}/digital_wallet_tokens/applepay:
    post:
      tags:
      - Digital Wallet Tokens
      summary: Create digital wallet token provision request for Apple Pay
      operationId: createDigitalWalletApple
      parameters:
      - name: card_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/card_id'
      requestBody:
        description: Request to provision digital wallet card data to pass to Apple
          Pay digital wallet
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/apple_digital_wallet_provision_request'
        required: true
      responses:
        "201":
          description: Digital wallet token provision request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apple_digital_wallet_provision_response'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "422":
          description: Unprocessable entity request response
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
  /cards/{card_id}/digital_wallet_tokens/googlepay:
    post:
      tags:
      - Digital Wallet Tokens
      summary: Create digital wallet token provision request for Google Pay
      operationId: createDigitalWalletGoogle
      parameters:
      - name: card_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/card_id'
      requestBody:
        description: Request to provision digital wallet card data to pass to Google
          Pay digital wallet
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/google_digital_wallet_provision_request'
        required: true
      responses:
        "201":
          description: Digital wallet token provision request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/google_digital_wallet_provision_response'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "422":
          description: Unprocessable entity request response
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
  /cards/{card_id}/webhook_simulations/fulfillment:
    summary: Card Webhook Simulations
    description: |
      Simulate card fulfillment event
    post:
      tags:
      - Card Webhook Simulations
      summary: Simulate Card Fulfillment Event
      description: |
        This endpoint is for testing environment only to trigger a simulated change in card fulfillment status event
      operationId: simulateCardFulfillmentEvent
      parameters:
      - name: card_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/card_id'
      requestBody:
        description: Desired simulated fulfillment status change value
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/simulate_card_fulfillment'
        required: true
      responses:
        "200":
          description: Simulated fulfillment status change value
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/simulate_card_fulfillment'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "422":
          description: Unprocessable entity request response
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
  /cards/activate:
    summary: Card Activation
    description: |
      Activate a card
    post:
      tags:
      - Cards
      summary: Activate a card
      description: |
        Activate a card
      operationId: activateCard
      requestBody:
        description: Card activation code
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/card_activation_request'
        required: true
      responses:
        "200":
          description: Card activated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/card_response'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "422":
          description: Unprocessable entity request response
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
  /cards/card_widget_url:
    summary: Get Card Widget URL
    get:
      tags:
      - Cards
      summary: Get card widget URL
      description: |
        This endpoint returns a URL address of the specified widget for a given card
      operationId: getCardWidgetURL
      parameters:
      - name: widget_type
        in: query
        description: The type of widget for which to construct the URL
        required: true
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/widget_type'
        x-external: true
      - name: customer_id
        in: query
        required: true
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/customer_id1'
        x-external: true
      - name: account_id
        in: query
        required: true
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/account_id'
        x-external: true
      - name: card_id
        in: query
        description: The ID of the card (required for set PIN widget)
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/card_id'
        x-external: true
      responses:
        "200":
          description: Card issued
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/card_widget_url_response'
        default:
          description: Error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
  /cards/digital_wallet_tokens:
    get:
      tags:
      - Digital Wallet Tokens
      summary: List Digital Wallet Tokens
      description: |
        List Digital Wallet Tokens
      operationId: listDigitalWalletTokens
      parameters:
      - name: card_id
        in: query
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/card_id'
        x-external: true
      - name: token_state
        in: query
        description: The status of the Digital Wallet Token
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/digital_wallet_token_state'
        x-external: true
      - name: limit
        in: query
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          description: |
            Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
          example: 100
          default: 100
        x-external: true
      - name: page_token
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          description: "Optional pagination token to be provided to retrieve subsequent\
            \ pages, returned from previous get"
          example: xwsfu1mkaq
        x-external: true
      responses:
        "200":
          description: List of Digital Wallet Tokens of a card
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/token_list_response'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "422":
          description: Unprocessable entity request response
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
  /cards/digital_wallet_tokens/{digital_wallet_token_id}:
    summary: Digital Wallet Token
    description: |
      The Digital Wallet token object represents your card's digital wallet token(s).
    get:
      tags:
      - Digital Wallet Tokens
      summary: Get Digital Wallet Token
      description: |
        Get the details about the digital wallet token of a card
      operationId: getDigitalWalletToken
      parameters:
      - name: digital_wallet_token_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/digital_wallet_token_id'
      responses:
        "200":
          description: Digital Wallet Token details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/digital_wallet_token_response'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "422":
          description: Unprocessable entity request response
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
    patch:
      tags:
      - Digital Wallet Tokens
      summary: Update Digital Wallet Token's life cycle status
      description: |
        The status of a digital wallet token can be updated as, ACTIVE to SUSPENDED, SUSPENDED to ACTIVE, ACTIVE to TERMINATED or SUSPENDED to TERMINATED.
      operationId: updateDigitalWalletTokenStatus
      parameters:
      - name: digital_wallet_token_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/digital_wallet_token_id'
      requestBody:
        description: Update Digital wallet token status
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/digital_wallet_token_edit_request'
        required: true
      responses:
        "200":
          description: Digital wallet token Status updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/digital_wallet_token_response'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "422":
          description: Unprocessable entity request response
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
  /cards/images:
    get:
      tags:
      - Cards
      summary: List Card Image Details
      description: |
        List all card image details
      operationId: listCardImageDetails
      parameters:
      - name: customer_id
        in: query
        required: true
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/customer_id1'
        x-external: true
      responses:
        "200":
          description: List of details for images uploaded by the given customer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/card_image_details_list'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
    post:
      tags:
      - Cards
      summary: Create Card Image
      description: |
        Create a card image entity. Note that this does not include the image data itself. You can upload the image data via a subsequent uploadCardImageData request using the ID created here.
      operationId: createCardImage
      requestBody:
        description: Details of the image to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create_card_image_request'
        required: true
      responses:
        "201":
          description: Card image entity created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/card_image_details'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "422":
          description: Unprocessable entity request response
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
  /cards/images/{card_image_id}:
    get:
      tags:
      - Cards
      summary: Get Card Image Details
      description: Get card image details
      operationId: getCardImageDetails
      parameters:
      - name: card_image_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/card_image_id'
      responses:
        "200":
          description: Details of the card image
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/card_image_details'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
    patch:
      tags:
      - Cards
      summary: Update Card Image Details
      description: Update card image details. The only detail that can be updated
        is the card status as APPROVED or REJECTED.
      operationId: updateCardImageDetails
      parameters:
      - name: card_image_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/card_image_id'
      requestBody:
        description: Details of the image to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/update_card_image_request'
        required: true
      responses:
        "200":
          description: Details of the card image
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/card_image_details'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
  /cards/images/{card_image_id}/data:
    get:
      tags:
      - Cards
      summary: Get Card Image Data
      description: Get card image data
      operationId: getCardImageData
      parameters:
      - name: card_image_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/card_image_id'
      responses:
        "200":
          description: Image data
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
                x-content-type: image/jpeg
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
    post:
      tags:
      - Cards
      summary: Upload Card Image
      description: Upload card image data
      operationId: uploadCardImageData
      parameters:
      - name: card_image_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/card_image_id'
      requestBody:
        description: Binary image data
        content:
          image/jpeg:
            schema:
              type: string
              format: binary
        required: true
      responses:
        "200":
          description: Card image data was successfully uploaded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/card_image_details'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "422":
          description: Unprocessable entity request response
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
  /cards/products:
    get:
      tags:
      - Cards
      summary: List Card Products
      operationId: listCardProducts
      parameters:
      - name: limit
        in: query
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          description: |
            Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
          example: 100
          default: 100
        x-external: true
      - name: page_token
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          description: "Optional pagination token to be provided to retrieve subsequent\
            \ pages, returned from previous get"
          example: xwsfu1mkaq
        x-external: true
      responses:
        "200":
          description: List of available Card Products
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/card_product_list_response'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
  /cards/single_use_token:
    summary: Get Single-Use Token
    post:
      tags:
      - Cards
      summary: Get single-use token
      description: |
        This endpoint returns a single-use access token. This type of token authorizes a single request to access API endpoints and data associated with a particular user
      operationId: getClientSingleUseToken
      requestBody:
        description: User token details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/single_use_token_request'
        required: true
      responses:
        "201":
          description: Token Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/single_use_token_response'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "422":
          description: Unprocessable entity request response
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
  /cards/transaction_simulations/authorization:
    summary: Simulate Authorization
    post:
      tags:
      - Card Transaction Simulations
      summary: Simulate authorization
      description: |
        Simulate an `authorization` type transaction by including the `card_token` and other authorization details in your request.
      operationId: simulateAuthorization
      requestBody:
        description: Authorization details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/auth_request_model'
        required: false
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/simulation_response_model'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
  /cards/transaction_simulations/authorization/advice:
    summary: Simulate Authorization Advice
    post:
      tags:
      - Card Transaction Simulations
      summary: Simulate authorization advice
      description: |
        An authorization advice allows an amount to be decreased after the authorization. This endpoint allows you to simulate post-swipe adjustments.

        Simulate an `authorization.advice` type transaction by including the `original_transaction_token` and other authorization details in your request.
      operationId: simulateAuthorizationAdvice
      requestBody:
        description: Authorization advice details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authorization_advice_model'
        required: false
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/simulation_response_model'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
  /cards/transaction_simulations/clearing:
    summary: Simulate Clearing or Refund
    post:
      tags:
      - Card Transaction Simulations
      summary: Simulate clearing or refund
      description: |
        Simulate an `authorization.clearing` type transaction by including the `original_transaction_token` and `amount` in your request. To simulate a refund type transaction, set the `is_refund` field to true.
      operationId: simulateClearing
      requestBody:
        description: Transaction clearing or refund details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/clearing_model'
        required: false
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/simulation_response_model'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
  /cards/transaction_simulations/financial:
    summary: Simulate Financial
    post:
      tags:
      - Card Transaction Simulations
      summary: Simulate financial
      description: |
        A "financial" is a transaction message class that includes ATM transactions, PIN-debit transactions, and balance inquiries.

        Simulate a `pindebit` type transaction by including the `card_token` and `amount` in your request.
      operationId: simulateFinancial
      requestBody:
        description: Financial details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/financial_request_model'
        required: true
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/simulation_response_model'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
  /cards/transaction_simulations/financial/advice:
    summary: Simulate Financial Advice
    post:
      tags:
      - Card Transaction Simulations
      summary: Simulate financial advice
      description: |
        Simulate a financial advice by including the `original_transaction_token` and other authorization details in JSON format in the body of the request.
      operationId: simulateFinancialAdvice
      requestBody:
        description: Financial advice details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authorization_advice_model'
        required: true
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/simulation_response_model'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
  /cards/transaction_simulations/financial/balance_inquiry:
    summary: Simulate Balance Inquiry
    post:
      tags:
      - Card Transaction Simulations
      summary: Simulate balance inquiry
      description: |
        Simulate a `pindebit.balanceinquiry` type transaction by sending a POST request to the `/simulate/financial/balanceinquiry` endpoint.
      operationId: simulateBalanceInquiry
      requestBody:
        description: Balance inquiry details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/balance_inquiry_request_model'
        required: true
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/simulation_response_model'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
  /cards/transaction_simulations/financial/original_credit:
    summary: Simulate OCT
    post:
      tags:
      - Card Transaction Simulations
      summary: Simulate OCT
      description: |
        This Original Credit Transaction (OCT) enables the cardholder to receive funds on the specified card from an external source via the card network. Use this endpoint to simulate a transaction that is similar to a wire transfer and not linked to any purchase.

        Simulate an OCT by including the `card_token`, `amount`, `mid`, and `type` in your request.
      operationId: simulateOriginalCredit
      requestBody:
        description: OCT details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/original_credit_request_model'
        required: true
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/simulation_response_model'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
  /cards/transaction_simulations/financial/withdrawal:
    summary: Simulate ATM Withdrawal
    post:
      tags:
      - Card Transaction Simulations
      summary: Simulate ATM withdrawal
      description: |
        Simulate a `pindebit.atm.withdrawal` type transaction by including the `card_token` and `amount` in your request.
      operationId: simulateWithdrawal
      requestBody:
        description: ATM withdrawal details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/withdrawal_request_model'
        required: true
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/simulation_response_model'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
  /cards/transaction_simulations/reversal:
    summary: Simulate Reversal
    post:
      tags:
      - Card Transaction Simulations
      summary: Simulate reversal
      description: |
        A reversal releases the hold that was placed on account funds by an authorization, thus returning the funds to the account.

        Simulate an `authorization.reversal` type transaction by including the `original_transaction_token` and `amount` in your request.
      operationId: simulateReversal
      requestBody:
        description: Reversal details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/reversal_model'
        required: true
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/simulation_response_model'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
  /customers:
    summary: Customer
    description: |
      The Customer object represents your customer's identity.  You can then verify the identity of this customer and associate them with other people and accounts
    get:
      tags:
      - Customers
      summary: List Customers
      description: Retrieves paginated list of Customers associated with the authorized
        requester
      operationId: listCustomers
      parameters:
      - name: id
        in: query
        description: Unique resource identifier
        required: false
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
            format: uuid
            example: 63ea71cb-7f86-44c1-956b-77f6cbd6ecf7
        x-external: true
      - name: first_name
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          description: "Only return resources where the first_name field matches the\
            \ specified string. Any * characters in the string are wildcards, and\
            \ match any characters."
          example: Alice
        x-external: true
      - name: last_name
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          description: "Only return resources where the last_name field matches the\
            \ specified string. Any * characters in the string are wildcards, and\
            \ match any characters."
          example: Smith
        x-external: true
      - name: phone_number
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          description: "Only return resources where the phone_number field matches\
            \ the specified string. Phone numbers use the E.164 format e.g. +19178675309.\
            \ Any * characters in the string are wildcards, and match any characters."
          example: +12065550100
        x-external: true
      - name: email
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          description: "Only return resources where the email field matches the specified\
            \ string. Any * characters in the string are wildcards, and match any\
            \ characters."
          example: john.doe@example.com
        x-external: true
      - name: ssn_last_4
        in: query
        required: false
        style: form
        explode: true
        schema:
          maxLength: 4
          minLength: 4
          type: string
          description: Only return resources where the last 4 characters of the SSN
            match the specified value.
          example: "6789"
        x-external: true
      - name: status
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          description: Only return resources where with the specified status.
          example: ACTIVE
          enum:
          - ACTIVE
          - DECEASED
          - DENIED
          - DORMANT
          - ESCHEAT
          - FROZEN
          - INACTIVE
          - PROSPECT
          - SANCTION
        x-external: true
      - name: limit
        in: query
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          description: |
            Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
          example: 100
          default: 100
        x-external: true
      - name: page_token
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          description: "Optional pagination token to be provided to retrieve subsequent\
            \ pages, returned from previous get"
          example: xwsfu1mkaq
        x-external: true
      - name: sort_by
        in: query
        description: |
          Specifies the sort order for the returned customers.
        required: false
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
            enum:
            - creation_time:asc
            - creation_time:desc
            - last_updated_time:asc
            - last_updated_time:desc
            - first_name:asc
            - first_name:desc
            - last_name:asc
            - last_name:desc
        x-external: true
      responses:
        "200":
          description: List of customers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customer_list'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
    post:
      tags:
      - Customers
      summary: Create a Customer
      description: |
        The customer object represents your customer's identity. You can then verify the identity of this customer and associate them with other people and accounts.
        Note that if no shipping_address attribute is provided in the request, the shipping_address will be set to a copy of the legal_address.
      operationId: createCustomer
      parameters:
      - name: Idempotency-Key
        in: header
        description: An idempotency key is an arbitrary unique value generated by
          client to detect subsequent retries of the same request. It is recommended
          that a UUID or a similar random identifier be used as an idempotency key
        required: false
        style: simple
        explode: false
        schema:
          type: string
          example: 81026fb3-d06c-4b37-80da-2b17b4749a3f
        x-external: true
      requestBody:
        description: Customer to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/customer_in_path'
        required: true
      responses:
        "201":
          description: Created customer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customer_in_path'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "409":
          description: Resource already exists error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
  /customers/{customer_id}:
    summary: Customer
    description: |
      This resource represents a customer.  Each customer is identified by a customer `ID`
    get:
      tags:
      - Customers
      summary: Get Customer
      description: Get Customer based on ID
      operationId: getCustomer
      parameters:
      - name: customer_id
        in: path
        description: The customer's unique identifier
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/customer_id'
      responses:
        "200":
          description: Customer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customer_in_path'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
    put:
      tags:
      - Customers
      summary: Update Customer
      description: |
        Update customer based on ID
        Note that if no shipping_address attribute is provided in the request, the shipping_address will be set to a copy of the legal_address.
      operationId: updateCustomer
      parameters:
      - name: customer_id
        in: path
        description: The customer's unique identifier
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/customer_id'
      requestBody:
        description: Customer to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/customer_in_path'
        required: true
      responses:
        "200":
          description: Updated customer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customer_in_path'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
    patch:
      tags:
      - Customers
      summary: Patch Customer
      description: |
        Patch fields of customer based on ID
        Note that if:
          * legal address is provided in the request, AND
          * shipping_address is not provided in the request, AND
          * the customer resource does not have shipping_address
          then shipping_address will be set to a copy of the legal_address.
      operationId: patchCustomer
      parameters:
      - name: Idempotency-Key
        in: header
        description: An idempotency key is an arbitrary unique value generated by
          client to detect subsequent retries of the same request. It is recommended
          that a UUID or a similar random identifier be used as an idempotency key
        required: false
        style: simple
        explode: false
        schema:
          type: string
          example: 81026fb3-d06c-4b37-80da-2b17b4749a3f
        x-external: true
      - name: customer_id
        in: path
        description: The customer's unique identifier
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/customer_id'
      requestBody:
        description: Customer to be patched
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/patch_customer'
        required: true
      responses:
        "200":
          description: Patched customer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customer_in_path'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
  /customers/{customer_id}/disclosures:
    summary: Disclosures
    description: |
      Disclosures to be made to customers
    get:
      tags:
      - Disclosures
      summary: List Disclosures
      description: Retrieves paginated list of disclosures associated with the authorized
        requester
      operationId: listDisclosures1
      parameters:
      - name: customer_id
        in: path
        description: The customer's unique identifier
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/customer_id'
      - name: limit
        in: query
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          description: |
            Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
          example: 100
          default: 100
        x-external: true
      - name: page_token
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          description: "Optional pagination token to be provided to retrieve subsequent\
            \ pages, returned from previous get"
          example: xwsfu1mkaq
        x-external: true
      responses:
        "200":
          description: List of disclosures
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/disclosure_response'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      deprecated: true
      x-external: true
      x-status: deprecated
    post:
      tags:
      - Disclosures
      summary: Create a Disclosure
      description: |
        Disclosures to be made to customers
      operationId: createDisclosure1
      parameters:
      - name: Idempotency-Key
        in: header
        description: An idempotency key is an arbitrary unique value generated by
          client to detect subsequent retries of the same request. It is recommended
          that a UUID or a similar random identifier be used as an idempotency key
        required: false
        style: simple
        explode: false
        schema:
          type: string
          example: 81026fb3-d06c-4b37-80da-2b17b4749a3f
        x-external: true
      - name: customer_id
        in: path
        description: The customer's unique identifier
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/customer_id'
      requestBody:
        description: Disclosure to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/disclosure1'
        required: true
      responses:
        "201":
          description: Created disclosure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/disclosure1'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      deprecated: true
      x-external: true
      x-status: deprecated
  /customers/{customer_id}/employment:
    summary: Customer employment group operations
    get:
      tags:
      - Customers
      summary: List customer employment records
      description: |
        Get a list of customer's current employment records. To see historic employment pass the `include_history` flag.
      operationId: getAllCustomerEmployment
      parameters:
      - name: customer_id
        in: path
        description: The customer's unique identifier
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/customer_id'
      - name: include_history
        in: query
        description: "If true, include old (inactive) records as well."
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
        x-external: true
      responses:
        "200":
          description: List of customer employment records.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/employment_list'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
    post:
      tags:
      - Customers
      summary: Create employment record
      description: Create a customer employment record.
      operationId: createCustomerEmployment
      parameters:
      - name: Idempotency-Key
        in: header
        description: An idempotency key is an arbitrary unique value generated by
          client to detect subsequent retries of the same request. It is recommended
          that a UUID or a similar random identifier be used as an idempotency key
        required: false
        style: simple
        explode: false
        schema:
          type: string
          example: 81026fb3-d06c-4b37-80da-2b17b4749a3f
        x-external: true
      - name: customer_id
        in: path
        description: The customer's unique identifier
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/customer_id'
      requestBody:
        description: Customer employment record to create.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/employment'
        required: true
      responses:
        "201":
          description: Created customer employment record.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/employment'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
  /customers/{customer_id}/employment/{employment_id}:
    summary: Customer employment operations
    get:
      tags:
      - Customers
      summary: Get customer employment record
      description: Get a single record of customer employment
      operationId: getPartyEmployment
      parameters:
      - name: customer_id
        in: path
        description: The customer's unique identifier
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/customer_id'
      - name: employment_id
        in: path
        description: Unique ID for the employment record.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: 3fa12d3f-6436-482c-a8a1-d65e9761dc2d
      responses:
        "200":
          description: Customer employment record.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/employment'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
    put:
      tags:
      - Customers
      summary: Update customer employment record
      description: Update a single record of customer employment.
      operationId: updatePartyEmployment
      parameters:
      - name: customer_id
        in: path
        description: The customer's unique identifier
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/customer_id'
      - name: employment_id
        in: path
        description: Unique ID for the employment record.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: 3fa12d3f-6436-482c-a8a1-d65e9761dc2d
      requestBody:
        description: Customer employment to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/employment'
        required: true
      responses:
        "200":
          description: Updated customer employment record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/employment'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
  /customers/{customer_id}/prefill:
    post:
      tags:
      - Customers
      summary: Prefill customer
      description: |
        Prefill takes a subset of a person's information and automatically fills  personally identifiable information (PII) required for know your customer  (KYC) verification.
      operationId: prefillCustomer
      parameters:
      - name: customer_id
        in: path
        description: The customer's unique identifier
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/customer_id'
      - name: Idempotency-Key
        in: header
        description: An idempotency key is an arbitrary unique value generated by
          client to detect subsequent retries of the same request. It is recommended
          that a UUID or a similar random identifier be used as an idempotency key
        required: false
        style: simple
        explode: false
        schema:
          type: string
          example: 81026fb3-d06c-4b37-80da-2b17b4749a3f
        x-external: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/prefill_request'
        required: true
      responses:
        "200":
          description: Prefill response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/prefill_request'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
      x-status: alpha
  /customers/{customer_id}/risk_ratings:
    summary: Risk Rating group operations
    get:
      tags:
      - Customers
      summary: List customer risk ratings
      description: Get list of customer risk ratings
      operationId: getAllCustomerRiskRatings
      parameters:
      - name: customer_id
        in: path
        description: The customer's unique identifier
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/customer_id'
      - name: include_history
        in: query
        description: "If true, include old (inactive) records as well."
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
        x-external: true
      responses:
        "200":
          description: List of customer risk ratings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/risk_rating_list'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
    post:
      tags:
      - Customers
      summary: Create customer risk rating
      description: Create customer risk rating
      operationId: createCustomerRiskRating
      parameters:
      - name: Idempotency-Key
        in: header
        description: An idempotency key is an arbitrary unique value generated by
          client to detect subsequent retries of the same request. It is recommended
          that a UUID or a similar random identifier be used as an idempotency key
        required: false
        style: simple
        explode: false
        schema:
          type: string
          example: 81026fb3-d06c-4b37-80da-2b17b4749a3f
        x-external: true
      - name: customer_id
        in: path
        description: The customer's unique identifier
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/customer_id'
      requestBody:
        description: |
          Create a customer risk rating. With a risk rating in request body, Synctera
          validates the data and saves it. With no request body, Synctera runs an
          automated risk analysis and saves the result.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/risk_rating'
        required: false
      responses:
        "201":
          description: Created risk rating
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/risk_rating'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
  /customers/{customer_id}/risk_ratings/{risk_rating_id}:
    summary: Risk Rating
    get:
      tags:
      - Customers
      summary: Get customer risk rating
      description: Get a customer risk rating
      operationId: getCustomerRiskRating
      parameters:
      - name: customer_id
        in: path
        description: The customer's unique identifier
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/customer_id'
      - name: risk_rating_id
        in: path
        description: Risk Rating ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: 2c0b200c-7b43-4110-83f4-79370103ded8
      responses:
        "200":
          description: Customer risk rating of id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/risk_rating'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
  /customers/{customer_id}/verifications:
    get:
      tags:
      - KYC Verification
      summary: List verification results
      description: |
        List verification results.

        This endpoint will be removed in API v1. Use `GET /v0/verifications?customer_id={customer_id}` instead.
      operationId: listVerifications
      parameters:
      - name: customer_id
        in: path
        description: The customer's unique identifier
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/customer_id'
      - name: include_history
        in: query
        description: "If true, include old (inactive) records as well."
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
        x-external: true
      - name: limit
        in: query
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          description: |
            Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
          example: 100
          default: 100
        x-external: true
      - name: page_token
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          description: "Optional pagination token to be provided to retrieve subsequent\
            \ pages, returned from previous get"
          example: xwsfu1mkaq
        x-external: true
      responses:
        "200":
          description: List of customer verification results.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customer_verification_result_list'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      deprecated: true
      x-external: true
      x-status: deprecated
    post:
      tags:
      - KYC Verification
      summary: Create a customer verification result
      description: |
        Create a verification result for a customer.
        This endpoint will be removed in API v1. Use `POST /v0/verifications` instead.
      operationId: createCustomerVerificationResult
      parameters:
      - name: Idempotency-Key
        in: header
        description: An idempotency key is an arbitrary unique value generated by
          client to detect subsequent retries of the same request. It is recommended
          that a UUID or a similar random identifier be used as an idempotency key
        required: false
        style: simple
        explode: false
        schema:
          type: string
          example: 81026fb3-d06c-4b37-80da-2b17b4749a3f
        x-external: true
      - name: customer_id
        in: path
        description: The customer's unique identifier
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/customer_id'
      requestBody:
        description: Customer verification result to create.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/customer_verification_result'
        required: true
      responses:
        "201":
          description: Created customer verification result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customer_verification_result'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      deprecated: true
      x-external: true
      x-status: deprecated
  /customers/{customer_id}/verifications/{verification_id}:
    get:
      tags:
      - KYC Verification
      summary: Get verification result
      description: |
        Get verification result by ID.

        This endpoint will be removed in API v1. Use `GET /v0/verifications/{verification_id}` instead.
      operationId: getVerification
      parameters:
      - name: customer_id
        in: path
        description: The customer's unique identifier
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/customer_id'
      - name: verification_id
        in: path
        description: Unique identifier for the verification.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: 72aad5e2-302a-4683-8d33-2510afae6eab
      responses:
        "200":
          description: Verification result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customer_verification_result'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      deprecated: true
      x-external: true
      x-status: deprecated
  /customers/{customer_id}/verify:
    post:
      tags:
      - KYC Verification
      summary: Verify a customer's identity
      description: |
        Initiate identity verification for a customer and run the specified identity checks.

        Verifying a personal customer requires that the following fields already be set:
        * `first_name`
        * `last_name`
        * `dob`
        * `email`
        * `phone_number`
        * `legal_address`
        * `ssn`

        This endpoint will be removed in API v1. Use `POST /v0/verifications/verify` instead.
      operationId: verifyCustomer
      parameters:
      - name: Idempotency-Key
        in: header
        description: An idempotency key is an arbitrary unique value generated by
          client to detect subsequent retries of the same request. It is recommended
          that a UUID or a similar random identifier be used as an idempotency key
        required: false
        style: simple
        explode: false
        schema:
          type: string
          example: 81026fb3-d06c-4b37-80da-2b17b4749a3f
        x-external: true
      - name: customer_id
        in: path
        description: The customer's unique identifier
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/customer_id'
      requestBody:
        description: Customer verification request.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/customer_verification'
        required: true
      responses:
        "200":
          description: Customer verification result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customer_verify_response'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      deprecated: true
      x-external: true
      x-status: deprecated
  /customers/{customer_id}/watchlists/alerts:
    summary: Subscriptions to watchlist alerts
    description: |
      List, retrieve, or update watchlist alerts.
    get:
      tags:
      - Watchlist
      summary: List watchlist monitoring alerts for a customer
      operationId: listWatchlistAlerts
      parameters:
      - name: customer_id
        in: path
        description: The customer's unique identifier
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/customer_id'
      responses:
        "200":
          description: List of watchlist alerts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/watchlist_alert_list'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
  /customers/{customer_id}/watchlists/alerts/{alert_id}:
    summary: Retrieve or update a single watchlist alert.
    description: |
      Retrieve or update a single watchlist alert.
    get:
      tags:
      - Watchlist
      summary: Retrieve watchlist monitoring alert
      operationId: getWatchlistAlert
      parameters:
      - name: customer_id
        in: path
        description: The customer's unique identifier
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/customer_id'
      - name: alert_id
        in: path
        description: Unique identifier for this watchlist alert.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: ff23b9d0-4e64-4b98-9f4a-3591ed08121a
      responses:
        "200":
          description: A single watchlist alert
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/watchlist_alert'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
    put:
      tags:
      - Watchlist
      summary: Update watchlist alert
      operationId: updateWatchlistAlert
      parameters:
      - name: customer_id
        in: path
        description: The customer's unique identifier
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/customer_id'
      - name: alert_id
        in: path
        description: Unique identifier for this watchlist alert.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: ff23b9d0-4e64-4b98-9f4a-3591ed08121a
      requestBody:
        description: A watchlist body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/watchlist_alert'
        required: true
      responses:
        "200":
          description: Watchlist alert was updated
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
      x-status: alpha
  /customers/{customer_id}/watchlists/subscriptions:
    summary: Subscriptions to watchlist monitoring
    description: |
      Create, list, or retrieve watchlist subscriptions
    get:
      tags:
      - Watchlist
      summary: List watchlist monitoring subscriptions for a customer
      operationId: listWatchlistSubscriptions
      parameters:
      - name: customer_id
        in: path
        description: The customer's unique identifier
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/customer_id'
      responses:
        "200":
          description: List of watchlist subscriptions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/watchlist_subscription_list'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
    post:
      tags:
      - Watchlist
      summary: Subscribe a customer to watchlist monitoring
      operationId: watchlistSubscribe
      parameters:
      - name: Idempotency-Key
        in: header
        description: An idempotency key is an arbitrary unique value generated by
          client to detect subsequent retries of the same request. It is recommended
          that a UUID or a similar random identifier be used as an idempotency key
        required: false
        style: simple
        explode: false
        schema:
          type: string
          example: 81026fb3-d06c-4b37-80da-2b17b4749a3f
        x-external: true
      - name: customer_id
        in: path
        description: The customer's unique identifier
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/customer_id'
      requestBody:
        description: A watchlist subscription
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/watchlist_subscription'
        required: true
      responses:
        "201":
          description: New watchlist subscription
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/watchlist_subscription'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
  /customers/{customer_id}/watchlists/subscriptions/{subscription_id}:
    summary: Watchlist monitoring subscription
    description: |
      Retrieve or update a single watchlist subscription
    get:
      tags:
      - Watchlist
      summary: Retrieve watchlist monitoring subscription
      operationId: getWatchlistSubscription
      parameters:
      - name: customer_id
        in: path
        description: The customer's unique identifier
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/customer_id'
      - name: subscription_id
        in: path
        description: Watchlist monitoring subscription ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: 1558a413-6b1c-45e0-8da0-386ae5b46b75
      responses:
        "200":
          description: A single watchlist subscription
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/watchlist_subscription'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
    put:
      tags:
      - Watchlist
      summary: Update watchlist monitoring subscription
      operationId: updateWatchlistSubscription
      parameters:
      - name: customer_id
        in: path
        description: The customer's unique identifier
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/customer_id'
      - name: subscription_id
        in: path
        description: Watchlist monitoring subscription ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: 1558a413-6b1c-45e0-8da0-386ae5b46b75
      requestBody:
        description: |
          Watchlist monitoring subscription to be updated. The only field that matters is `status`; all other fields are ignored.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/watchlist_subscription'
        required: true
      responses:
        "200":
          description: Updated watchlist subscription
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/watchlist_subscription'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
  /customers/{customer_id}/watchlists/suppressions:
    summary: Update suppression of watchlist alerts for one subject
    description: |
      Suppress or unsuppress current and future alerts for the given subject (person).
    post:
      tags:
      - Watchlist
      summary: Suppress entity alert
      operationId: suppressWatchlistEntityAlert
      parameters:
      - name: Idempotency-Key
        in: header
        description: An idempotency key is an arbitrary unique value generated by
          client to detect subsequent retries of the same request. It is recommended
          that a UUID or a similar random identifier be used as an idempotency key
        required: false
        style: simple
        explode: false
        schema:
          type: string
          example: 81026fb3-d06c-4b37-80da-2b17b4749a3f
        x-external: true
      - name: customer_id
        in: path
        description: The customer's unique identifier
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/customer_id'
      requestBody:
        description: A watchlist suppression object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/watchlist_suppress'
        required: true
      responses:
        "200":
          description: Watchlist alerts belonging to entity was updated
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
  /disclosures:
    get:
      tags:
      - Disclosures
      summary: List disclosures
      description: Retrieves paginated list of disclosures associated with the authorized
        requester.
      operationId: listDisclosures
      parameters:
      - name: id
        in: query
        description: Unique resource identifier
        required: false
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
            format: uuid
            example: 63ea71cb-7f86-44c1-956b-77f6cbd6ecf7
        x-external: true
      - name: person_id
        in: query
        description: |
          Unique identifier for the person. Multiple IDs can be provided as a comma-separated list.
        required: false
        style: form
        explode: false
        schema:
          type: array
          example: "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157"
          items:
            type: string
            format: uuid
        x-external: true
      - name: business_id
        in: query
        description: |
          Unique identifier for the business. Multiple IDs can be provided as a comma-separated list.
        required: false
        style: form
        explode: false
        schema:
          type: array
          example: "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157"
          items:
            type: string
            format: uuid
        x-external: true
      - name: limit
        in: query
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          description: |
            Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
          example: 100
          default: 100
        x-external: true
      - name: page_token
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          description: "Optional pagination token to be provided to retrieve subsequent\
            \ pages, returned from previous get"
          example: xwsfu1mkaq
        x-external: true
      responses:
        "200":
          description: List of disclosures.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/disclosure_list'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
      x-status: alpha
    post:
      tags:
      - Disclosures
      summary: Create disclosure record
      description: Record the fact that a regulatory document was disclosed to a customer.
      operationId: createDisclosure
      parameters:
      - name: Idempotency-Key
        in: header
        description: An idempotency key is an arbitrary unique value generated by
          client to detect subsequent retries of the same request. It is recommended
          that a UUID or a similar random identifier be used as an idempotency key
        required: false
        style: simple
        explode: false
        schema:
          type: string
          example: 81026fb3-d06c-4b37-80da-2b17b4749a3f
        x-external: true
      requestBody:
        description: Disclosure to create.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/disclosure'
        required: true
      responses:
        "201":
          description: Created disclosure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/disclosure'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
      x-status: alpha
  /disclosures/{disclosure_id}:
    get:
      tags:
      - Disclosures
      summary: Get disclosure
      description: Get disclosure by ID.
      operationId: getDisclosure
      parameters:
      - name: disclosure_id
        in: path
        description: The unique identifier for the disclosure.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: 1985f769-dd31-4128-95db-f765355e6631
      responses:
        "200":
          description: Disclosure representation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/disclosure'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
      x-status: alpha
  /external_accounts:
    summary: External Accounts
    description: |
      The External Account resource is used for managing links to accounts that operate outside of the Synctera ecosystem.
    get:
      tags:
      - External Accounts
      summary: List external accounts
      description: |
        Returns a list of all external accounts assigned to customers.
      operationId: listExternalAccounts
      parameters:
      - name: customer_id
        in: query
        description: "A list of customer unique identifiers, with a comma separating\
          \ any values."
        required: false
        style: form
        explode: false
        schema:
          type: array
          items:
            $ref: '#/components/schemas/customer_id'
        x-external: true
      - name: business_id
        in: query
        description: "A list of business unique identifiers, with a comma separating\
          \ any values."
        required: false
        style: form
        explode: false
        schema:
          type: array
          items:
            $ref: '#/components/schemas/business_id2'
        x-external: true
      - name: limit
        in: query
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          description: |
            Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
          example: 100
          default: 100
        x-external: true
      - name: page_token
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          description: "Optional pagination token to be provided to retrieve subsequent\
            \ pages, returned from previous get"
          example: xwsfu1mkaq
        x-external: true
      responses:
        "200":
          description: List of external accounts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/external_accounts_list'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
    post:
      tags:
      - External Accounts
      summary: Add an external account
      description: |
        Add an external account for a customer. The account will be created in an unverified state.
      operationId: addExternalAccounts
      parameters:
      - name: Idempotency-Key
        in: header
        description: An idempotency key is an arbitrary unique value generated by
          client to detect subsequent retries of the same request. It is recommended
          that a UUID or a similar random identifier be used as an idempotency key
        required: false
        style: simple
        explode: false
        schema:
          type: string
          example: 81026fb3-d06c-4b37-80da-2b17b4749a3f
        x-external: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/add_accounts_request'
        required: true
      responses:
        "201":
          description: The external account added.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/external_account'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "409":
          description: Resource already exists error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
  /external_accounts/{external_account_id}:
    summary: External Accounts
    description: |
      The External Account resource is used for managing links to accounts that operate outside of the Synctera ecosystem.
    get:
      tags:
      - External Accounts
      summary: Get an external account
      description: |
        Returns an external account, given an external account ID.
      operationId: getExternalAccount
      parameters:
      - name: external_account_id
        in: path
        description: External Account ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: dd8cd509-ce52-4990-8f84-316558e68e9a
      responses:
        "200":
          description: The external account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/external_account'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
    delete:
      tags:
      - External Accounts
      summary: Delete an external account
      description: |
        Deletes an external account, given an external account ID. If no accounts left, the access token to the financial institution will be removed
      operationId: deleteExternalAccount
      parameters:
      - name: external_account_id
        in: path
        description: External Account ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: dd8cd509-ce52-4990-8f84-316558e68e9a
      responses:
        "200":
          description: Resource has been deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/delete_response'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "409":
          description: Resource already exists error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "422":
          description: Unprocessable entity request response
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
    patch:
      tags:
      - External Accounts
      summary: Patch an external account
      description: |
        Edits an unverified external account, given an external account ID.
      operationId: updateExternalAccount
      parameters:
      - name: Idempotency-Key
        in: header
        description: An idempotency key is an arbitrary unique value generated by
          client to detect subsequent retries of the same request. It is recommended
          that a UUID or a similar random identifier be used as an idempotency key
        required: false
        style: simple
        explode: false
        schema:
          type: string
          example: 81026fb3-d06c-4b37-80da-2b17b4749a3f
        x-external: true
      - name: external_account_id
        in: path
        description: External Account ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: dd8cd509-ce52-4990-8f84-316558e68e9a
      requestBody:
        description: External account to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/patch_external_account'
        required: true
      responses:
        "200":
          description: Updated external account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/external_account'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "409":
          description: Resource already exists error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "422":
          description: Unprocessable entity request response
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
  /external_accounts/{external_account_id}/balance:
    summary: External Accounts
    description: |
      The External Account resource is used for managing links to accounts that operate outside of the Synctera ecosystem.
    get:
      tags:
      - External Accounts
      summary: Get an external account balance
      description: |
        Returns an external account balance, given an external account ID.
      operationId: getExternalAccountBalance
      parameters:
      - name: external_account_id
        in: path
        description: External Account ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: dd8cd509-ce52-4990-8f84-316558e68e9a
      - name: max_age
        in: query
        description: |
          Optional relative age of a balance in seconds. If the balance is older than the requested seconds it will fail. This field is optional for most financial institutions, but required for some, so you should probably send it.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          format: int64
          example: 861
        x-external: true
      responses:
        "200":
          description: The external account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/external_account_balance'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
  /external_accounts/{external_account_id}/transactions:
    summary: External Accounts
    description: |
      The External Account resource is used for managing links to accounts that operate outside of the Synctera ecosystem.
    get:
      tags:
      - External Accounts
      summary: List transactions of a given external account
      description: |
        Returns a list of transactions on from the external account, given an external account ID. Maximum 500 transctions will be returned.
      operationId: getExternalAccountTransactions
      parameters:
      - name: external_account_id
        in: path
        description: External Account ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: dd8cd509-ce52-4990-8f84-316558e68e9a
      - name: start_date
        in: query
        description: Date range filtering for transactions. Date is inclusive. Date
          must be in UTC.
        required: true
        style: form
        explode: true
        schema:
          type: string
          format: date
        x-external: true
      - name: end_date
        in: query
        description: Date range filtering for transactions. Date is exclusive. Date
          must be in UTC.
        required: true
        style: form
        explode: true
        schema:
          type: string
          format: date
        x-external: true
      responses:
        "200":
          description: The external account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/external_accounts_transaction_list'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "422":
          description: Unprocessable entity request response
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
  /external_accounts/access_tokens:
    summary: External account access token
    description: |
      Create a permanent access token for an external account
    post:
      tags:
      - External Accounts
      summary: Create a permanent access token for an external account
      operationId: createAccessToken
      parameters:
      - name: Idempotency-Key
        in: header
        description: An idempotency key is an arbitrary unique value generated by
          client to detect subsequent retries of the same request. It is recommended
          that a UUID or a similar random identifier be used as an idempotency key
        required: false
        style: simple
        explode: false
        schema:
          type: string
          example: 81026fb3-d06c-4b37-80da-2b17b4749a3f
        x-external: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/external_account_access_token'
        required: true
      responses:
        "201":
          description: New verification link token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/external_account_access_token'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
  /external_accounts/add_vendor_accounts:
    summary: External Accounts
    description: |
      The External Account resource is used for managing links to accounts that operate outside of the Synctera ecosystem.
    post:
      tags:
      - External Accounts
      summary: "Add external accounts through a vendor, such as Plaid."
      description: |
        Add external accounts for a customer through an existing access token. The token must be valid, and the information on the accounts returned by the vendor must correspond to the customer. A success response for this route may include failures if an account could not be added, so it's important that the caller checks the response body.
      operationId: addVendorExternalAccounts
      parameters:
      - name: Idempotency-Key
        in: header
        description: An idempotency key is an arbitrary unique value generated by
          client to detect subsequent retries of the same request. It is recommended
          that a UUID or a similar random identifier be used as an idempotency key
        required: false
        style: simple
        explode: false
        schema:
          type: string
          example: 81026fb3-d06c-4b37-80da-2b17b4749a3f
        x-external: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/add_vendor_accounts_request'
        required: true
      responses:
        "200":
          description: |
            Result of adding accounts through the vendor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/add_vendor_accounts_response'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
  /external_accounts/link_tokens:
    summary: External account verification link token
    description: |
      Create a link token to verify an external account
    post:
      tags:
      - External Accounts
      summary: Create a link token to verify an external account
      operationId: createVerificationLinkToken
      parameters:
      - name: Idempotency-Key
        in: header
        description: An idempotency key is an arbitrary unique value generated by
          client to detect subsequent retries of the same request. It is recommended
          that a UUID or a similar random identifier be used as an idempotency key
        required: false
        style: simple
        explode: false
        schema:
          type: string
          example: 81026fb3-d06c-4b37-80da-2b17b4749a3f
        x-external: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/external_account_link_token'
        required: true
      responses:
        "201":
          description: New verification link token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/external_account_link_token'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
  /external_accounts/sync_vendor_accounts:
    summary: External Accounts
    description: |
      The External Account resource is used for managing links to accounts that operate outside of the Synctera ecosystem.
    post:
      tags:
      - External Accounts
      summary: "Sync external accounts through a vendor, such as Plaid."
      description: |
        Sync external accounts for a customer through an existing access token. The token must be valid, and the information on the accounts returned by the vendor must correspond to the customer. A success response for this route may include failures if an account could not be added and deletions if the account is removed by the end user, so it's important that the caller checks the response body.
      operationId: syncVendorExternalAccounts
      parameters:
      - name: Idempotency-Key
        in: header
        description: An idempotency key is an arbitrary unique value generated by
          client to detect subsequent retries of the same request. It is recommended
          that a UUID or a similar random identifier be used as an idempotency key
        required: false
        style: simple
        explode: false
        schema:
          type: string
          example: 81026fb3-d06c-4b37-80da-2b17b4749a3f
        x-external: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/add_vendor_accounts_request'
        required: true
      responses:
        "200":
          description: |
            Result of syncing accounts through the vendor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/add_vendor_accounts_response'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
  /external_cards:
    get:
      tags:
      - External Cards (alpha)
      summary: List external cards
      description: |
        List external cards
      operationId: listExternalCards
      parameters:
      - name: limit
        in: query
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          description: |
            Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
          example: 100
          default: 100
        x-external: true
      - name: page_token
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          description: "Optional pagination token to be provided to retrieve subsequent\
            \ pages, returned from previous get"
          example: xwsfu1mkaq
        x-external: true
      - name: customer_id
        in: query
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/customer_id1'
        x-external: true
      responses:
        "200":
          description: External cards list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/external_card_list_response'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "422":
          description: Unprocessable entity request response
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
  /external_cards/{external_card_id}:
    summary: Get External Card
    description: |
      External Card
    get:
      tags:
      - External Cards (alpha)
      summary: Get a external card
      description: |
        Get an external card
      operationId: getExternalCard
      parameters:
      - name: external_card_id
        in: path
        description: The unique identifier of an external card
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: 4675ebf0-0691-4a2b-b1db-7ca6f4ff9ec5
      responses:
        "200":
          description: External card details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/external_card_response'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "422":
          description: Unprocessable entity request response
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
  /external_cards/tokens:
    post:
      tags:
      - External Cards (alpha)
      summary: Create external card from token
      description: |
        Create an external card from token - You must first tokenize the external card using the external card iframe. You will receive a token for the external card upon successful completion. This endpoint will persist the external card and associate it to a customer. The customer's name and address should match that of the external card as entered in the iframe. <br>NB: Tokens should be associated right away. Tokens not associated within 30 mins of creation will be invalidated.</br> NB: If a valid business_id is provided, the address verification for the external card will be done against the address of the business. Otherwise, the address of the customer will be used. In either case, the name of the customer will be used to match the name of the cardholder.
      operationId: createExternalCardFromToken
      requestBody:
        description: Details of the card to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/external_card_request'
        required: true
      responses:
        "201":
          description: External card created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/external_card_response'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "422":
          description: Unprocessable entity request response
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
  /external_cards/transfers:
    get:
      tags:
      - External Cards (alpha)
      summary: List external transfers
      description: |
        List external card transfer
      operationId: listExternalCardTransfers
      parameters:
      - name: limit
        in: query
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          description: |
            Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
          example: 100
          default: 100
        x-external: true
      - name: page_token
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          description: "Optional pagination token to be provided to retrieve subsequent\
            \ pages, returned from previous get"
          example: xwsfu1mkaq
        x-external: true
      - name: customer_id
        in: query
        required: false
        style: form
        explode: false
        schema:
          type: array
          items:
            $ref: '#/components/schemas/customer_id1'
        x-external: true
      - name: external_card_id
        in: query
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/external_card_id'
        x-external: true
      - name: originating_account_id
        in: query
        required: false
        style: form
        explode: false
        schema:
          type: array
          items:
            $ref: '#/components/schemas/originating_account_id'
        x-external: true
      - name: type
        in: query
        description: The type of an external transfer
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/transfer_type'
        x-external: true
      responses:
        "200":
          description: External transfer list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/transfer_list_response'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "422":
          description: Unprocessable entity request response
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
    post:
      tags:
      - External Cards (alpha)
      summary: Create external card transfer
      description: |
        Create a external card transfer
      operationId: createExternalCardTransfer
      requestBody:
        description: Details of the transfer to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/transfer_request'
        required: true
      responses:
        "201":
          description: External card transfer created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/transfer_response'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "422":
          description: Unprocessable entity request response
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
  /external_cards/transfers/{transfer_id}:
    summary: External Card Transfer
    description: |
      External card transfer
    get:
      tags:
      - External Cards (alpha)
      summary: Get an external card transfer
      description: |
        Get an external transfer
      operationId: getExternalCardTransfer
      parameters:
      - name: transfer_id
        in: path
        description: The unique identifier of a transfer
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: ddcacaa4-e0e4-4652-ae9f-5ef7f1b7d7e1
      responses:
        "200":
          description: External card transfer details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/transfer_response'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "422":
          description: Unprocessable entity request response
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
  /internal_accounts:
    summary: Internal Accounts
    description: |
      The internal account resource is used for managing links to internal accounts where the funds are managed by integrators.
    get:
      tags:
      - Internal Accounts
      summary: List internal accounts
      description: |
        Returns a list of all internal accounts.
      operationId: listInternalAccounts
      parameters:
      - name: limit
        in: query
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          description: |
            Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
          example: 100
          default: 100
        x-external: true
      - name: page_token
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          description: "Optional pagination token to be provided to retrieve subsequent\
            \ pages, returned from previous get"
          example: xwsfu1mkaq
        x-external: true
      - name: id
        in: query
        description: |
          Internal account ID(s). Multiple IDs can be provided as a comma-separated list.
        required: false
        style: form
        explode: false
        schema:
          $ref: '#/components/schemas/account_id_query_schema'
        x-external: true
      responses:
        "200":
          description: List of internal accounts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internal_accounts_list'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
    post:
      tags:
      - Internal Accounts
      summary: Add internal accounts
      description: |
        Add an internal account
      operationId: addInternalAccounts
      parameters:
      - name: Idempotency-Key
        in: header
        description: An idempotency key is an arbitrary unique value generated by
          client to detect subsequent retries of the same request. It is recommended
          that a UUID or a similar random identifier be used as an idempotency key
        required: false
        style: simple
        explode: false
        schema:
          type: string
          example: 81026fb3-d06c-4b37-80da-2b17b4749a3f
        x-external: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/internal_account'
        required: true
      responses:
        "201":
          description: The internal account added.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internal_account'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "409":
          description: Resource already exists error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
  /internal_accounts/{internal_account_id}:
    summary: Internal Accounts
    patch:
      tags:
      - Internal Accounts
      summary: Patch internal account
      description: |
        Patch internal account.
      operationId: patchInternalAccount
      parameters:
      - name: internal_account_id
        in: path
        description: Unique identifier for the internal account.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: 69c8bfb7-a0ab-4b55-9f2b-6d8065d71220
      requestBody:
        description: Internal Account fields to be patched
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/internal_account_patch'
        required: true
      responses:
        "200":
          description: Updated internal account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internal_account'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "461":
          description: Account has been closed
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
  /payment_schedules:
    summary: PaymentSchedules
    get:
      tags:
      - PaymentSchedules
      summary: List payment schedules
      description: Get paginated list of payment schedules
      operationId: listPaymentSchedules
      parameters:
      - name: limit
        in: query
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          description: |
            Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
          example: 100
          default: 100
        x-external: true
      - name: page_token
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          description: "Optional pagination token to be provided to retrieve subsequent\
            \ pages, returned from previous get"
          example: xwsfu1mkaq
        x-external: true
      - name: id
        in: query
        description: IDs. Multiple IDs can be provided as a comma-separated list.
        required: false
        style: form
        explode: false
        schema:
          $ref: '#/components/schemas/id_list_query_schema'
        x-external: true
      - name: account_id
        in: query
        description: Originating account IDs. Multiple IDs can be provided as a comma-separated
          list.
        required: false
        style: form
        explode: false
        schema:
          $ref: '#/components/schemas/id_list_query_schema'
        x-external: true
      - name: customer_id
        in: query
        description: The IDs of customers who created the payment schedules. Multiple
          IDs can be provided as a comma-separated list.
        required: false
        style: form
        explode: false
        schema:
          $ref: '#/components/schemas/id_list_query_schema'
        x-external: true
      responses:
        "200":
          description: List of payment schedules
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/payment_schedule_list'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
    post:
      tags:
      - PaymentSchedules
      summary: Create a payment schedule
      description: Create a payment schedule
      operationId: createPaymentSchedule
      requestBody:
        description: payment schedule to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/payment_schedule'
        required: true
      responses:
        "201":
          description: Created payment schedule
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/payment_schedule'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "409":
          description: Resource already exists error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
  /payment_schedules/{payment_schedule_id}:
    patch:
      tags:
      - PaymentSchedules
      summary: Update a payment schedule
      description: Update a payment schedule
      operationId: patchPaymentSchedule
      parameters:
      - name: payment_schedule_id
        in: path
        description: Payment schedule ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
      requestBody:
        description: payment schedule to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/patch_payment_schedule'
        required: true
      responses:
        "200":
          description: Updated payment schedule
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/payment_schedule'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "409":
          description: Resource already exists error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
  /payment_schedules/payments:
    summary: PaymentSchedules
    get:
      tags:
      - PaymentSchedules
      summary: List payments
      description: Get paginated list of payments
      operationId: listPayments
      parameters:
      - name: limit
        in: query
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          description: |
            Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
          example: 100
          default: 100
        x-external: true
      - name: page_token
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          description: "Optional pagination token to be provided to retrieve subsequent\
            \ pages, returned from previous get"
          example: xwsfu1mkaq
        x-external: true
      - name: id
        in: query
        description: IDs. Multiple IDs can be provided as a comma-separated list.
        required: false
        style: form
        explode: false
        schema:
          $ref: '#/components/schemas/id_list_query_schema'
        x-external: true
      - name: schedule_id
        in: query
        description: Payment schedule IDs. Multiple IDs can be provided as a comma-separated
          list.
        required: false
        style: form
        explode: false
        schema:
          $ref: '#/components/schemas/id_list_query_schema'
        x-external: true
      - name: account_id
        in: query
        description: Originating account IDs. Multiple IDs can be provided as a comma-separated
          list.
        required: false
        style: form
        explode: false
        schema:
          $ref: '#/components/schemas/id_list_query_schema'
        x-external: true
      - name: customer_id
        in: query
        description: The IDs of customers who created the payment schedules. Multiple
          IDs can be provided as a comma-separated list.
        required: false
        style: form
        explode: false
        schema:
          $ref: '#/components/schemas/id_list_query_schema'
        x-external: true
      responses:
        "200":
          description: List of payment schedules
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/payment_list'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
  /persons:
    summary: Persons
    get:
      tags:
      - Persons
      summary: List persons
      description: Retrieves paginated list of persons associated with the authorized
        requester.
      operationId: listPersons
      parameters:
      - name: id
        in: query
        description: |
          Unique identifier for the resource. Multiple IDs can be provided as a comma-separated list.
        required: false
        style: form
        explode: false
        schema:
          type: array
          example: "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157"
          items:
            type: string
            format: uuid
        x-external: true
      - name: first_name
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          description: "Only return resources where the first_name field matches the\
            \ specified string. Any * characters in the string are wildcards, and\
            \ match any characters."
          example: Alice
        x-external: true
      - name: last_name
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          description: "Only return resources where the last_name field matches the\
            \ specified string. Any * characters in the string are wildcards, and\
            \ match any characters."
          example: Smith
        x-external: true
      - name: phone_number
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          description: "Only return resources where the phone_number field matches\
            \ the specified string. Phone numbers use the E.164 format e.g. +19178675309.\
            \ Any * characters in the string are wildcards, and match any characters."
          example: +12065550100
        x-external: true
      - name: email
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          description: "Only return resources where the email field matches the specified\
            \ string. Any * characters in the string are wildcards, and match any\
            \ characters."
          example: john.doe@example.com
        x-external: true
      - name: status
        in: query
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/status1'
        x-external: true
      - name: is_customer
        in: query
        description: "If true, show only customers. If false, show non-customer parties."
        required: false
        style: form
        explode: true
        schema:
          type: boolean
        x-external: true
      - name: limit
        in: query
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          description: |
            Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
          example: 100
          default: 100
        x-external: true
      - name: page_token
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          description: "Optional pagination token to be provided to retrieve subsequent\
            \ pages, returned from previous get"
          example: xwsfu1mkaq
        x-external: true
      - name: sort_by
        in: query
        description: |
          Specifies the sort order for the returned persons.
        required: false
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
            enum:
            - first_name:asc
            - first_name:desc
            - last_name:asc
            - last_name:desc
            - creation_time:asc
            - creation_time:desc
            - last_updated_time:asc
            - last_updated_time:desc
        x-external: true
      responses:
        "200":
          description: List of persons.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/person_list'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
      x-status: alpha
    post:
      tags:
      - Persons
      summary: Create a person
      description: |
        Create a person who may act as a personal customer or a director/officer/owner of a business. You can then verify the identity of this customer and associate them with other people and accounts.
      operationId: createPerson
      parameters:
      - name: Idempotency-Key
        in: header
        description: An idempotency key is an arbitrary unique value generated by
          client to detect subsequent retries of the same request. It is recommended
          that a UUID or a similar random identifier be used as an idempotency key
        required: false
        style: simple
        explode: false
        schema:
          type: string
          example: 81026fb3-d06c-4b37-80da-2b17b4749a3f
        x-external: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/person'
        required: true
      responses:
        "201":
          description: Created person representation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/person'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "409":
          description: Resource already exists error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
      x-status: alpha
  /persons/{person_id}:
    summary: Persons
    get:
      tags:
      - Persons
      summary: Get person
      description: Get person by ID.
      operationId: getPerson
      parameters:
      - name: person_id
        in: path
        description: Person's unique identifier.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: 322d7fc5-938e-4bff-87fb-064a09a0672f
      responses:
        "200":
          description: Person representation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/person'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
      x-status: alpha
    patch:
      tags:
      - Persons
      summary: Update person
      description: Update person by ID.
      operationId: updatePerson
      parameters:
      - name: Idempotency-Key
        in: header
        description: An idempotency key is an arbitrary unique value generated by
          client to detect subsequent retries of the same request. It is recommended
          that a UUID or a similar random identifier be used as an idempotency key
        required: false
        style: simple
        explode: false
        schema:
          type: string
          example: 81026fb3-d06c-4b37-80da-2b17b4749a3f
        x-external: true
      - name: person_id
        in: path
        description: Person's unique identifier.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: 322d7fc5-938e-4bff-87fb-064a09a0672f
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/patch_person'
        required: true
      responses:
        "200":
          description: Updated person representation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/patch_person'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
      x-status: alpha
  /persons/{person_id}/prefill:
    post:
      tags:
      - Persons
      summary: Prefill person
      description: |
        Prefill takes a subset of a person's information and automatically fills  personally identifiable information (PII) required for know your customer  (KYC) verification.
      operationId: prefillPerson
      parameters:
      - name: person_id
        in: path
        description: Person's unique identifier.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: 322d7fc5-938e-4bff-87fb-064a09a0672f
      - name: Idempotency-Key
        in: header
        description: An idempotency key is an arbitrary unique value generated by
          client to detect subsequent retries of the same request. It is recommended
          that a UUID or a similar random identifier be used as an idempotency key
        required: false
        style: simple
        explode: false
        schema:
          type: string
          example: 81026fb3-d06c-4b37-80da-2b17b4749a3f
        x-external: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/prefill_request'
        required: true
      responses:
        "200":
          description: Prefill response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/prefill_request'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
      x-status: alpha
  /rdc/deposits:
    summary: Remote Check Deposits
    description: |
      The Remote Check Deposits collection represents all the deposits made using remote deposit capture associated with an account
    get:
      tags:
      - Remote Check Deposit
      summary: List Remote Check Deposits
      description: Retrieves a paginated list of the deposits made using remote deposit
        capture associated with an account
      operationId: listRdcDeposits
      parameters:
      - name: limit
        in: query
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          description: |
            Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
          example: 100
          default: 100
        x-external: true
      - name: page_token
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          description: "Optional pagination token to be provided to retrieve subsequent\
            \ pages, returned from previous get"
          example: xwsfu1mkaq
        x-external: true
      responses:
        "200":
          description: List of deposits made with remote deposit capture
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deposit_list'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
    post:
      tags:
      - Remote Check Deposit
      summary: Create a Remote Check Deposit
      description: |
        Create a new deposit using remote deposit capture to an account
      operationId: createRdcDeposit
      requestBody:
        description: Attributes of the Remote Check Deposit to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/deposit'
      responses:
        "201":
          description: Successful creation of a deposit using remote deposit capture
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deposit'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
      x-status: alpha
  /rdc/deposits/{deposit_id}:
    summary: Remote Check Deposit by Id
    description: |
      The Remote Check Deposit represents one deposit made using remote deposit capture associated with an account
    get:
      tags:
      - Remote Check Deposit
      summary: Get Remote Check Deposit
      description: Retrieves one deposit made using remote deposit capture associated
        with an account
      operationId: getRdcDeposit
      parameters:
      - name: deposit_id
        in: path
        description: ID of a deposit for a remote deposit capture
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: 3b601be1-1c91-4136-bca8-6754cc78f713
      responses:
        "200":
          description: Successful retrieval of a Remote Check Deposit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deposit'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
      x-status: alpha
  /reconciliations:
    summary: Reconciliations
    description: |
      The Reconcilations collections represents the jobs reconciling transactions.
    get:
      tags:
      - Reconciliations
      summary: List reconciliations
      description: Retrieves paginated list of reconciliations
      operationId: listReconciliations
      parameters:
      - name: limit
        in: query
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          description: |
            Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
          example: 100
          default: 100
        x-external: true
      - name: page_token
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          description: "Optional pagination token to be provided to retrieve subsequent\
            \ pages, returned from previous get"
          example: xwsfu1mkaq
        x-external: true
      responses:
        "200":
          description: List of reconciliations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reconciliation_list'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
      x-status: alpha
    post:
      tags:
      - Reconciliations
      summary: Create a reconciliation
      description: |
        Create a new reconciliation job
      operationId: createReconciliation
      requestBody:
        description: Reconciliation to perform
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/reconciliation_input'
      responses:
        "201":
          description: Successful creation of a reconciliation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reconciliation'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
      x-status: alpha
  /reconciliations/{reconciliation_id}:
    summary: Reconciliation by ID
    description: |
      The Reconcilations collections represents the jobs reconciling transactions.
    get:
      tags:
      - Reconciliations
      summary: Get reconciliation
      description: Retrieves one reconciliation by id
      operationId: getReconciliation
      parameters:
      - name: reconciliation_id
        in: path
        description: Reconciliation id
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: b8522850-d4de-4906-9cf1-b472066bf4b2
      responses:
        "200":
          description: Successful retrieval of a reconciliation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reconciliation'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
      x-status: alpha
  /relationships:
    summary: Relationships
    get:
      tags:
      - Relationships
      summary: List relationships
      description: Retrieves paginated list of relationships viewable by the authorized
        requester.
      operationId: listRelationships
      parameters:
      - name: id
        in: query
        description: Unique resource identifier
        required: false
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
            format: uuid
            example: 63ea71cb-7f86-44c1-956b-77f6cbd6ecf7
        x-external: true
      - name: from_person_id
        in: query
        description: |
          Unique identifier for the person. Multiple IDs can be provided as a comma-separated list.
        required: false
        style: form
        explode: false
        schema:
          type: array
          example: "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157"
          items:
            type: string
            format: uuid
        x-external: true
      - name: from_business_id
        in: query
        description: |
          Unique identifier for the business. Multiple IDs can be provided as a comma-separated list.
        required: false
        style: form
        explode: false
        schema:
          type: array
          example: "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157"
          items:
            type: string
            format: uuid
        x-external: true
      - name: to_business_id
        in: query
        description: |
          Unique identifier for the business. Multiple IDs can be provided as a comma-separated list.
        required: false
        style: form
        explode: false
        schema:
          type: array
          example: "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157"
          items:
            type: string
            format: uuid
        x-external: true
      - name: relationship_type
        in: query
        description: |
          The relationship type. Any of the following:
          * `BENEFICIAL_OWNER_OF` – a person who directly or indirectly owns a portion of the business.
          * `MANAGING_PERSON_OF` – a person who is an officer, director, or other notable person of an organization.
          * `OWNER_OF` – a business with ownership of another business.
        required: false
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
            format: enum
            example: BENEFICIAL_OWNER_OF
            enum:
            - BENEFICIAL_OWNER_OF
            - MANAGING_PERSON_OF
            - OWNER_OF
        x-external: true
      - name: limit
        in: query
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          description: |
            Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
          example: 100
          default: 100
        x-external: true
      - name: page_token
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          description: "Optional pagination token to be provided to retrieve subsequent\
            \ pages, returned from previous get"
          example: xwsfu1mkaq
        x-external: true
      responses:
        "200":
          description: Relationship representation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/relationships_list'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
      x-status: alpha
    post:
      tags:
      - Relationships
      summary: Create a relationship
      description: Create a party relationship.
      operationId: createRelationship
      parameters:
      - name: Idempotency-Key
        in: header
        description: An idempotency key is an arbitrary unique value generated by
          client to detect subsequent retries of the same request. It is recommended
          that a UUID or a similar random identifier be used as an idempotency key
        required: false
        style: simple
        explode: false
        schema:
          type: string
          example: 81026fb3-d06c-4b37-80da-2b17b4749a3f
        x-external: true
      requestBody:
        description: Party relationship to create.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/relationship_in'
        required: true
      responses:
        "201":
          description: Created relationship representation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/relationship_in'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "409":
          description: Resource already exists error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "422":
          description: Unprocessable entity request response
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
      x-status: alpha
  /relationships/{relationship_id}:
    summary: Relationship
    get:
      tags:
      - Relationships
      summary: Get relationship
      description: Get relationship by ID.
      operationId: getRelationship
      parameters:
      - name: relationship_id
        in: path
        description: Relationship ID.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: 95a2e06d-83ab-458b-b3b8-962941411ee6
      responses:
        "200":
          description: Relationship representation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/relationship_in'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
      x-status: alpha
    delete:
      tags:
      - Relationships
      summary: Delete relationship
      description: Delete party relationship by ID.
      operationId: deleteRelationship
      parameters:
      - name: relationship_id
        in: path
        description: Relationship ID.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: 95a2e06d-83ab-458b-b3b8-962941411ee6
      responses:
        "200":
          description: Resource has been deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/delete_response'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
      x-status: alpha
    patch:
      tags:
      - Relationships
      summary: Update relationship
      description: Update relationship by ID.
      operationId: updateRelationship
      parameters:
      - name: Idempotency-Key
        in: header
        description: An idempotency key is an arbitrary unique value generated by
          client to detect subsequent retries of the same request. It is recommended
          that a UUID or a similar random identifier be used as an idempotency key
        required: false
        style: simple
        explode: false
        schema:
          type: string
          example: 81026fb3-d06c-4b37-80da-2b17b4749a3f
        x-external: true
      - name: relationship_id
        in: path
        description: Relationship ID.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: 95a2e06d-83ab-458b-b3b8-962941411ee6
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/patch_relationship_in'
        required: true
      responses:
        "200":
          description: Updated relationship representation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/patch_relationship_in'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "409":
          description: Resource already exists error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "422":
          description: Unprocessable entity request response
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
      x-status: alpha
  /statements:
    summary: Statements
    get:
      tags:
      - Statements
      summary: List statements
      description: Get list of statements
      operationId: listStatements
      parameters:
      - name: account_id
        in: query
        description: The account's unique identifier provided by Synctera
        required: true
        style: form
        explode: true
        schema:
          type: string
          format: uuid
          example: e4b92656-ef1e-41f5-a85f-af09346611c0
        x-external: true
      responses:
        "200":
          description: List of statements for a given account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/statement_list'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
  /statements/{statement_id}:
    summary: Statements
    get:
      tags:
      - Statements
      summary: Get a statement
      description: Get a statement
      operationId: getStatement
      parameters:
      - name: statement_id
        in: path
        description: The unique identifier of a statement
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: 6917767f-50b9-475e-91c0-ed7d1efc8e13
        x-external: true
      responses:
        "200":
          description: statement
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/statement'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
  /transactions/internal_transfer:
    summary: Initiate an internal account-to-account transfer
    description: An internal transfer is an immediate payment between two accounts
      within the same Fintech.
    post:
      tags:
      - Transactions
      summary: Create an internal transfer
      description: Create an internal transfer
      operationId: createInternalTransfer
      parameters:
      - name: Idempotency-Key
        in: header
        description: An idempotency key is an arbitrary unique value generated by
          client to detect subsequent retries of the same request. It is recommended
          that a UUID or a similar random identifier be used as an idempotency key
        required: false
        style: simple
        explode: false
        schema:
          type: string
          example: 81026fb3-d06c-4b37-80da-2b17b4749a3f
        x-external: true
      requestBody:
        description: Transfer request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/internal_transfer'
        required: true
      responses:
        "200":
          description: Transaction Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internal_transfer_response'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "422":
          description: Unprocessable entity request response
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
  /transactions/pending:
    summary: List pending transactions
    description: |
      Pending transactions represent a "hold" of a paricular amount on an account balance.
    get:
      tags:
      - Transactions
      summary: List pending transactions
      description: |
        Get paginated list of pending transactions matching the provided filters
      operationId: listPendingTransactions
      parameters:
      - name: account_no
        in: query
        description: Account number
        required: false
        style: form
        explode: true
        schema:
          type: string
        x-external: true
      - name: account_id
        in: query
        description: Account ID
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: uuid
          example: d6201244-02d1-493e-87f6-a3391527abfc
        x-external: true
      - name: from_date
        in: query
        description: Only display transactions with a posting date greater than from_date
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date
        x-external: true
      - name: to_date
        in: query
        description: Only display transactions with a posting date less than or equal
          to to_date
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date
        x-external: true
      - name: status
        in: query
        description: The status of the transaction
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: PENDING
        x-external: true
      - name: transaction_id
        in: query
        description: Only display holds linked to the provided transaction id
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: uuid
          example: 1dac8580-6815-4c9f-be84-ac5518a46832
        x-external: true
      - name: type
        in: query
        description: Only display transactions matching the given type
        required: false
        style: form
        explode: true
        schema:
          type: string
        x-external: true
      - name: subtype
        in: query
        description: Only display transactions matching the given subtype
        required: false
        style: form
        explode: true
        schema:
          type: string
        x-external: true
      - name: limit
        in: query
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          description: |
            Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
          example: 100
          default: 100
        x-external: true
      - name: page_token
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          description: "Optional pagination token to be provided to retrieve subsequent\
            \ pages, returned from previous get"
          example: xwsfu1mkaq
        x-external: true
      responses:
        "200":
          description: Paginated list of pending transactions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pending_transactions'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "422":
          description: Unprocessable entity request response
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
  /transactions/pending/{id}:
    summary: Get pending transaction
    description: |
      A pending transaction represent a "hold" of a paricular amount on an account balance.
    get:
      tags:
      - Transactions
      summary: Get a pending transaction
      description: |
        Get a pending transaction by its uuid
      operationId: getPendingTransactionByID
      parameters:
      - name: id
        in: path
        description: Transaction ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: 411e5190-c495-4344-9fb5-0a3c7bab0345
      responses:
        "200":
          description: Pending Transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pending_transaction'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "422":
          description: Unprocessable entity request response
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
  /transactions/posted:
    summary: List posted transactions
    description: |
      Posted transactions represent a completed money movement.
    get:
      tags:
      - Transactions
      summary: List posted transactions
      description: |
        Get paginated list of posted transactions matching the provided filters
      operationId: listPostedTransactions
      parameters:
      - name: account_no
        in: query
        description: Account number
        required: false
        style: form
        explode: true
        schema:
          type: string
        x-external: true
      - name: account_id
        in: query
        description: Account ID
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: uuid
          example: d6201244-02d1-493e-87f6-a3391527abfc
        x-external: true
      - name: from_date
        in: query
        description: Only display transactions with a posting date greater than from_date
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date
        x-external: true
      - name: to_date
        in: query
        description: Only display transactions with a posting date less than or equal
          to to_date
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date
        x-external: true
      - name: type
        in: query
        description: Only display transactions matching the given type
        required: false
        style: form
        explode: true
        schema:
          type: string
        x-external: true
      - name: subtype
        in: query
        description: Only display transactions matching the given subtype
        required: false
        style: form
        explode: true
        schema:
          type: string
        x-external: true
      - name: limit
        in: query
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          description: |
            Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
          example: 100
          default: 100
        x-external: true
      - name: page_token
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          description: "Optional pagination token to be provided to retrieve subsequent\
            \ pages, returned from previous get"
          example: xwsfu1mkaq
        x-external: true
      responses:
        "200":
          description: Paginated list of posted transactions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/posted_transactions'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "422":
          description: Unprocessable entity request response
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
  /transactions/posted/{id}:
    summary: Get posted transaction
    description: |
      A posted transaction represents a completed money movement.
    get:
      tags:
      - Transactions
      summary: Get a posted transaction
      description: |
        Get a posted transaction by its uuid
      operationId: getPostedTransactionByID
      parameters:
      - name: id
        in: path
        description: Transaction ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: 411e5190-c495-4344-9fb5-0a3c7bab0345
      responses:
        "200":
          description: Posted Transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/posted_transaction'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "422":
          description: Unprocessable entity request response
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
  /verifications:
    get:
      tags:
      - KYC/KYB Verifications
      summary: List verifications
      description: List customer verification results.
      operationId: listVerifications1
      parameters:
      - name: id
        in: query
        description: |
          Unique identifier for the resource. Multiple IDs can be provided as a comma-separated list.
        required: false
        style: form
        explode: false
        schema:
          type: array
          example: "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157"
          items:
            type: string
            format: uuid
        x-external: true
      - name: person_id
        in: query
        description: |
          Unique identifier for the person. Multiple IDs can be provided as a comma-separated list.
        required: false
        style: form
        explode: false
        schema:
          type: array
          example: "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157"
          items:
            type: string
            format: uuid
        x-external: true
      - name: business_id
        in: query
        description: |
          Unique identifier for the business. Multiple IDs can be provided as a comma-separated list.
        required: false
        style: form
        explode: false
        schema:
          type: array
          example: "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157"
          items:
            type: string
            format: uuid
        x-external: true
      - name: verification_type
        in: query
        description: |
          The type of verification run. Multiple values can be provided as a comma-separated list.
        required: false
        style: form
        explode: false
        schema:
          type: array
          items:
            $ref: '#/components/schemas/verification_type1'
        x-external: true
      - name: result
        in: query
        description: |
          The result of the verification that was run on the party.  Multiple values can be provided as a comma-separated list.
        required: false
        style: form
        explode: false
        schema:
          type: array
          items:
            $ref: '#/components/schemas/verification_result'
        x-external: true
      - name: include_history
        in: query
        description: "If true, include old (inactive) records as well."
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
        x-external: true
      - name: limit
        in: query
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          description: |
            Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
          example: 100
          default: 100
        x-external: true
      - name: page_token
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          description: "Optional pagination token to be provided to retrieve subsequent\
            \ pages, returned from previous get"
          example: xwsfu1mkaq
        x-external: true
      responses:
        "200":
          description: List verifications.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/verification_list'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
      x-status: alpha
    post:
      tags:
      - KYC/KYB Verifications
      summary: Create a verification
      description: |
        Upload evidence of an externally performed KYC/KYB.  You may use your own KYC/KYB provider and upload evidence of that result to Synctera instead of using Synctera's providers.
      operationId: createVerification
      parameters:
      - name: Idempotency-Key
        in: header
        description: An idempotency key is an arbitrary unique value generated by
          client to detect subsequent retries of the same request. It is recommended
          that a UUID or a similar random identifier be used as an idempotency key
        required: false
        style: simple
        explode: false
        schema:
          type: string
          example: 81026fb3-d06c-4b37-80da-2b17b4749a3f
        x-external: true
      requestBody:
        description: Verification result to create.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/verification'
        required: true
      responses:
        "201":
          description: Created verification.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/verification'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
      x-status: alpha
  /verifications/{verification_id}:
    get:
      tags:
      - KYC/KYB Verifications
      summary: Get verification
      description: Get customer verification result.
      operationId: getVerification1
      parameters:
      - name: verification_id
        in: path
        description: Verification's unique identifier.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: 0cf88729-42fe-482d-904f-2f0508252858
      responses:
        "200":
          description: Verification representation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/verification'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
      x-status: alpha
  /verifications/adhoc:
    summary: Check if an individual is on any watchlists
    description: |
      Check if an individual is on any watchlists. Intended for use before a transfer payment, to ensure that the payee is not flagged.
    post:
      tags:
      - KYC/KYB Verifications
      summary: Check if an individual is on any watchlists
      operationId: verifyAdHoc
      parameters:
      - name: Idempotency-Key
        in: header
        description: An idempotency key is an arbitrary unique value generated by
          client to detect subsequent retries of the same request. It is recommended
          that a UUID or a similar random identifier be used as an idempotency key
        required: false
        style: simple
        explode: false
        schema:
          type: string
          example: 81026fb3-d06c-4b37-80da-2b17b4749a3f
        x-external: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/adhoc_verification_request'
        required: true
      responses:
        "200":
          description: successful check
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/adhoc_verification_response'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
  /verifications/verify:
    post:
      tags:
      - KYC/KYB Verifications
      summary: Verify a customer's identity
      description: |
        Initiate identity verification and run the specified identity checks.

        Verifying a personal customer requires that the following fields already be set:
        * `first_name`
        * `last_name`
        * `dob`
        * `email`
        * `phone_number`
        * `legal_address`
        * `ssn`

        Verifying a business customer requires that the following fields already be set:
        * `entity_name`
        * `legal_address`
      operationId: verify
      parameters:
      - name: Idempotency-Key
        in: header
        description: An idempotency key is an arbitrary unique value generated by
          client to detect subsequent retries of the same request. It is recommended
          that a UUID or a similar random identifier be used as an idempotency key
        required: false
        style: simple
        explode: false
        schema:
          type: string
          example: 81026fb3-d06c-4b37-80da-2b17b4749a3f
        x-external: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/verification_request'
        required: true
      responses:
        "200":
          description: Created identity request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/verify_response'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
      x-status: alpha
  /webhooks:
    get:
      tags:
      - Webhooks
      summary: List webhooks
      description: List all webhooks
      operationId: listWebhooks1
      parameters:
      - name: limit
        in: query
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          description: |
            Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
          example: 100
          default: 100
        x-external: true
      - name: page_token
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          description: "Optional pagination token to be provided to retrieve subsequent\
            \ pages, returned from previous get"
          example: xwsfu1mkaq
        x-external: true
      - name: is_enabled_only
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
        x-external: true
      responses:
        "200":
          description: List of webhooks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhook_list'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
    post:
      tags:
      - Webhooks
      summary: Create a webhook
      description: Create a webhook
      operationId: createWebhook1
      requestBody:
        description: Webhook to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook'
        required: true
      responses:
        "201":
          description: Created webhook
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhook'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
  /webhooks/{webhook_id}:
    get:
      tags:
      - Webhooks
      summary: Get a webhook
      description: Get a webhook
      operationId: getWebhook1
      parameters:
      - name: webhook_id
        in: path
        description: Webhook ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: 1b7767fe-7dcd-43d5-85cf-c4392bb3e830
      responses:
        "200":
          description: Webhook
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhook'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
    put:
      tags:
      - Webhooks
      summary: Update a webhook
      description: Update a webhook
      operationId: updateWebhook
      parameters:
      - name: webhook_id
        in: path
        description: Webhook ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: 1b7767fe-7dcd-43d5-85cf-c4392bb3e830
      requestBody:
        description: Webhook to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook'
        required: true
      responses:
        "200":
          description: Created webhook
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhook'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
    delete:
      tags:
      - Webhooks
      summary: Delete a webhook
      description: Delete a webhook
      operationId: deleteWebhook
      parameters:
      - name: webhook_id
        in: path
        description: Webhook ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: 1b7767fe-7dcd-43d5-85cf-c4392bb3e830
      responses:
        "200":
          description: Resource has been deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/delete_response'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
  /webhooks/{webhook_id}/events:
    get:
      tags:
      - Webhooks
      summary: List webhook events
      description: List webhook events. This response will not associate with the
        event response history.
      operationId: listEvents
      parameters:
      - name: webhook_id
        in: path
        description: Webhook ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: 1b7767fe-7dcd-43d5-85cf-c4392bb3e830
      - name: start_date
        in: query
        description: Start date of date range filtering for events. Date is inclusive
          and should be in UTC timezone 00:00:00.. start_date is alias of start_time
          and is deprecated. Please use start_time instead.
        required: false
        deprecated: true
        style: form
        explode: true
        schema:
          type: string
          format: date
        x-external: true
      - name: end_date
        in: query
        description: End date of date range filtering for events. Date is inclusive
          and should be in UTC timezone 00:00:00.. end_date is alias of end_time and
          is deprecated. Please use end_time instead.
        required: false
        deprecated: true
        style: form
        explode: true
        schema:
          type: string
          format: date
        x-external: true
      - name: start_time
        in: query
        description: Start time of date-time range filtering for events. Date is inclusive
          and should be in UTC timezone 00:00:00.
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
        x-external: true
      - name: end_time
        in: query
        description: End time of date-time range filtering for events. Date is inclusive
          and should be in UTC timezone 00:00:00.
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
        x-external: true
      - name: limit
        in: query
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          description: |
            Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
          example: 100
          default: 100
        x-external: true
      - name: page_token
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          description: "Optional pagination token to be provided to retrieve subsequent\
            \ pages, returned from previous get"
          example: xwsfu1mkaq
        x-external: true
      responses:
        "200":
          description: List of webhook events
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/event_list'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
  /webhooks/{webhook_id}/events/{event_id}:
    get:
      tags:
      - Webhooks
      summary: Get webhook event
      description: Get webhook event by ID
      operationId: getEvent
      parameters:
      - name: webhook_id
        in: path
        description: Webhook ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: 1b7767fe-7dcd-43d5-85cf-c4392bb3e830
      - name: event_id
        in: path
        description: Webhook event ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: 7379b0b0-5bb4-4981-a29c-93efe72df042
      responses:
        "200":
          description: Webhook event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/event'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
  /webhooks/{webhook_id}/events/{event_id}/resend:
    post:
      tags:
      - Webhooks
      summary: Resend an event
      description: Resend a webhook event
      operationId: resendEvent
      parameters:
      - name: webhook_id
        in: path
        description: Webhook ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: 1b7767fe-7dcd-43d5-85cf-c4392bb3e830
      - name: event_id
        in: path
        description: Webhook event ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: f3e6e378-b3ad-4d00-85b0-7c907b5fff54
      - name: delay
        in: query
        description: Delay the event triggering in seconds
        required: false
        style: form
        explode: true
        schema:
          maximum: 3600
          minimum: 0
          type: integer
        x-external: true
      responses:
        "200":
          description: Resent webhook event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/event'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
  /webhooks/secret:
    put:
      tags:
      - Webhooks
      summary: Replace an existing secret
      description: Replace an existing webhook secret immediately or as part of rotation.
        This new secret will be used to verify all subsequent webhook request signature.
      operationId: replaceSecret
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhooks_secret_body'
        required: true
      responses:
        "200":
          description: Webhook secret response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
    post:
      tags:
      - Webhooks
      summary: Create a secret
      description: Create a webhook secret. The secret will be used to verify all
        subsequent webhook request signature.
      operationId: createSecret
      responses:
        "201":
          description: Webhook secret response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "409":
          description: Resource already exists error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
    delete:
      tags:
      - Webhooks
      summary: Revoke the secret
      description: "Revoke the existing webhook secret. If this is called at the rolling\
        \ secret time, then both old and new secrets will be revoked"
      operationId: revokeSecret
      parameters:
      - name: old_secret_only
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
        x-external: true
      responses:
        "200":
          description: Secret has been revoked
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
  /webhooks/trigger:
    post:
      tags:
      - Webhooks
      summary: Trigger an event
      description: Trigger an specific event for webhook testing purpose
      operationId: triggerEvent
      requestBody:
        description: Provide an event type to trigger
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhooks_trigger_body'
        required: true
      responses:
        "200":
          description: Triggered webhook event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/event_trigger'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
  /wipe:
    summary: Wipe
    post:
      tags:
      - Sandbox Wipe (alpha)
      summary: Delete data
      description: |
        Delete the customer and account related data, leaving other configuration data intact. This enables use cases such as bulk data deletion between tests.
        Data associated with below resources will be deleted:
          - Accounts
          - Account applications
          - ACH
          - Businesses
          - Cards
          - Card images
          - Cases
          - Customers
          - Disclosures
          - External Accounts
          - Internal Accounts
          - Payment schedules and history
          - Persons
          - RDC
          - Relationships
          - Transactions (including for Internal Accounts)
          - Verifications

        Data associated with below resources will be retained:
          - Account Templates
          - API Keys
          - Bank/Partner data
          - Card product
          - Disclosure document records
          - Egress config
          - Groups
          - PII contract with vault
          - Roles
          - Users
          - Webhooks
      operationId: wipeWorkspace
      responses:
        "204":
          description: successfully wiped resources for a particular tenant
        "404":
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
      x-status: alpha
  /wires:
    summary: Wire
    get:
      tags:
      - Wires (alpha)
      summary: List wires
      description: Get paginated list of wires
      operationId: listWires
      parameters:
      - name: limit
        in: query
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          description: |
            Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
          example: 100
          default: 100
        x-external: true
      - name: page_token
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          description: "Optional pagination token to be provided to retrieve subsequent\
            \ pages, returned from previous get"
          example: xwsfu1mkaq
        x-external: true
      - name: status
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          description: Optional query parameter that can be use to filter the list
            of returned wires by transfer status
          example: PENDING
          enum:
          - PENDING
          - COMPLETED
          - CANCELLED
        x-external: true
      - name: customer_id
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: uuid
          example: 21b74a02-b7c7-49f4-a497-98ba5cbedb27
        x-external: true
      - name: originating_account_id
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: uuid
          example: f122e6f2-ba88-4a5d-9084-350bba5f27e1
        x-external: true
      - name: receiving_account_id
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: uuid
          example: 251ee435-8230-48cb-8a71-b11a43dcf497
        x-external: true
      responses:
        "200":
          description: List of wires
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/wire_list'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
      x-status: alpha
    post:
      tags:
      - Wires (alpha)
      summary: Send a wire
      description: Create an outgoing wire transfer
      operationId: createWire
      requestBody:
        description: Wire transfer request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/wire_request'
        required: true
      responses:
        "201":
          description: Created wire
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/wire'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "422":
          description: Unprocessable entity request response
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
      x-status: alpha
  /wires/{wire_id}:
    summary: Wire
    get:
      tags:
      - Wires (alpha)
      summary: Get a wire by id
      description: Get a wire by id
      operationId: getWire
      parameters:
      - name: wire_id
        in: path
        description: The unique identifier of a wire
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: 50653b5a-fba5-4e95-aef3-819414206d61
      responses:
        "200":
          description: wire
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/wire'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
      x-status: alpha
    patch:
      tags:
      - Wires (alpha)
      summary: Cancel an outgoing wire
      description: Cancel an outgoing tranfer
      operationId: cancelWire
      parameters:
      - name: wire_id
        in: path
        description: The unique identifier of a wire
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: 50653b5a-fba5-4e95-aef3-819414206d61
      requestBody:
        description: wire to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/update_transfer'
        required: true
      responses:
        "200":
          description: Updated wire
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/wire'
        "400":
          description: BadRequest
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "403":
          description: Forbidden error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
      x-external: true
      x-status: alpha
components:
  schemas:
    account:
      type: object
      description: Account
      anyOf:
      - $ref: '#/components/schemas/account_depository'
      - $ref: '#/components/schemas/account_line_of_credit'
    account_access_status:
      type: string
      description: Access status for account. Default ACTIVE
      enum:
      - ACTIVE
      - FROZEN
    account_base:
      type: object
      properties:
        access_status:
          $ref: '#/components/schemas/account_access_status'
        account_number:
          maxLength: 50
          type: string
          description: Account number
          readOnly: true
        account_purpose:
          type: string
          description: Purpose of the account
          example: This account for the account holder's salary deposit.
        account_type:
          $ref: '#/components/schemas/account_type'
        balances:
          type: array
          description: A list of balances for account based on different type
          readOnly: true
          items:
            $ref: '#/components/schemas/balance'
        bank_routing:
          maxLength: 9
          type: string
          description: Bank routing number
          readOnly: true
        creation_time:
          type: string
          description: Account creation timestamp in RFC3339 format
          format: date-time
          readOnly: true
        currency:
          pattern: "^[A-Z]{3}$"
          type: string
          description: Account currency or account settlement currency. ISO 4217 alphabetic
            currency code. Default USD
          example: BRL
        customer_ids:
          type: array
          description: A list of the customer IDs of the account holders.
          readOnly: true
          items:
            type: string
            format: uuid
        customer_type:
          $ref: '#/components/schemas/customer_type'
        exchange_rate_type:
          maxLength: 10
          type: string
          description: Exchange rate type
          example: "M, INTERBANK, CUST"
        fee_product_ids:
          type: array
          description: A list of fee resources from account product that the current
            account associate with
          items:
            type: string
            format: uuid
        iban:
          maxLength: 34
          type: string
          description: International bank account number
        id:
          type: string
          description: Account ID
          format: uuid
          readOnly: true
        interest_product_id:
          type: string
          description: An interest from account product that the current account associate
            with
          format: uuid
        is_account_pool:
          type: boolean
          description: Account is investment (variable balance) account or a multi-balance
            account pool. Default false
        is_ach_enabled:
          type: boolean
          description: A flag to indicate whether ACH transactions are enabled.
          readOnly: true
        is_card_enabled:
          type: boolean
          description: A flag to indicate whether card transactions are enabled.
          readOnly: true
        is_p2p_enabled:
          type: boolean
          description: A flag to indicate whether P2P transactions are enabled.
          readOnly: true
        is_wire_enabled:
          type: boolean
          description: A flag to indicate whether wire transactions are enabled.
          readOnly: true
        last_updated_time:
          type: string
          description: Timestamp of the last account modification in RFC3339 format
          format: date-time
          readOnly: true
        metadata:
          type: object
          description: User provided account metadata
        nickname:
          type: string
          description: User provided account nickname
        status:
          $ref: '#/components/schemas/status'
        swift_code:
          maxLength: 11
          minLength: 8
          type: string
          description: SWIFT code
    account_creation:
      allOf:
      - $ref: '#/components/schemas/account'
      - type: object
        properties:
          account_template_id:
            type: string
            description: Account template ID
            format: uuid
          relationships:
            type: array
            description: List of the relationship for this account to the parties
            items:
              $ref: '#/components/schemas/relationship'
    account_depository:
      type: object
      description: Account representing either a checking or saving account.
      allOf:
      - $ref: '#/components/schemas/account_base'
      - properties:
          balance_ceiling:
            $ref: '#/components/schemas/balance_ceiling'
          balance_floor:
            $ref: '#/components/schemas/balance_floor'
          overdraft_limit:
            minimum: 0
            type: integer
            description: Account's overdraft limit
            format: int64
          spending_limits:
            $ref: '#/components/schemas/spending_limits'
    account_generic_response:
      type: object
      properties:
        access_status:
          $ref: '#/components/schemas/account_access_status'
        account_number:
          maxLength: 50
          type: string
          description: Account number
          readOnly: true
        account_purpose:
          type: string
          description: Purpose of the account
          example: This account for the account holder's salary deposit.
        account_type:
          $ref: '#/components/schemas/account_type'
        application_id:
          type: string
          description: |
            The application ID for this account.
          format: uuid
        balance_ceiling:
          $ref: '#/components/schemas/balance_ceiling'
        balance_floor:
          $ref: '#/components/schemas/balance_floor'
        balances:
          type: array
          description: A list of balances for account based on different type
          readOnly: true
          items:
            $ref: '#/components/schemas/balance'
        bank_routing:
          maxLength: 9
          type: string
          description: Bank routing number
          readOnly: true
        billing_period:
          $ref: '#/components/schemas/billing_period'
        business_ids:
          type: array
          description: A list of the business IDs of the account holders.
          readOnly: true
          items:
            type: string
            format: uuid
        chargeoff_period:
          minimum: 0
          type: integer
          description: |
            The number of days an account can stay delinquent before marking an account as charged-off.
          default: 90
        creation_time:
          type: string
          description: Account creation timestamp in RFC3339 format
          format: date-time
          readOnly: true
        credit_limit:
          minimum: 0
          type: integer
          description: |
            The credit limit for this line of credit account in cents. Minimum is 0.
          format: int64
          example: 2500
        currency:
          pattern: "^[A-Z]{3}$"
          type: string
          description: Account currency or account settlement currency. ISO 4217 alphabetic
            currency code. Default USD
          example: SBD
        customer_ids:
          type: array
          description: A list of the customer IDs of the account holders.
          readOnly: true
          items:
            type: string
            format: uuid
        customer_type:
          $ref: '#/components/schemas/customer_type'
        delinquency_period:
          minimum: 0
          type: integer
          description: |
            The number of days past the due date to wait for a minimum payment before marking an account as delinquent.
          default: 30
        exchange_rate_type:
          maxLength: 10
          type: string
          description: Exchange rate type
          example: "M, INTERBANK, CUST"
        fee_product_ids:
          type: array
          description: A list of fee resources from account product that the current
            account associate with
          items:
            type: string
            format: uuid
        grace_period:
          minimum: 0
          type: integer
          description: |
            The number of days past the billing period to allow for payment before it is considered due. This directly infers the due date for a payment.
          example: 25
        iban:
          maxLength: 34
          type: string
          description: International bank account number
        id:
          type: string
          description: Account ID
          format: uuid
          readOnly: true
        interest_product_id:
          type: string
          description: An interest from account product that the current account associate
            with
          format: uuid
        is_account_pool:
          type: boolean
          description: Account is investment (variable balance) account or a multi-balance
            account pool. Default false
        is_ach_enabled:
          type: boolean
          description: A flag to indicate whether ACH transactions are enabled.
          readOnly: true
        is_card_enabled:
          type: boolean
          description: A flag to indicate whether card transactions are enabled.
          readOnly: true
        is_p2p_enabled:
          type: boolean
          description: A flag to indicate whether P2P transactions are enabled.
          readOnly: true
        is_wire_enabled:
          type: boolean
          description: A flag to indicate whether wire transactions are enabled.
          readOnly: true
        last_updated_time:
          type: string
          description: Timestamp of the last account modification in RFC3339 format
          format: date-time
          readOnly: true
        metadata:
          type: object
          description: User provided account metadata
        minimum_payment:
          $ref: '#/components/schemas/minimum_payment'
        nickname:
          type: string
          description: User provided account nickname
        overdraft_limit:
          minimum: 0
          type: integer
          description: Account's overdraft limit
          format: int64
        spending_limits:
          $ref: '#/components/schemas/spending_limits'
        status:
          $ref: '#/components/schemas/status'
        swift_code:
          maxLength: 11
          minLength: 8
          type: string
          description: SWIFT code
      example:
        billing_period:
          frequency: ANNUALLY
          start_date: 2000-01-23T04:56:07.000+00:00
        creation_time: 2000-01-23T04:56:07.000+00:00
        customer_type: BUSINESS
        account_number: account_number
        account_type: SAVING
        metadata: {}
        access_status: ACTIVE
        fee_product_ids:
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        is_wire_enabled: true
        is_ach_enabled: true
        chargeoff_period: 0
        account_purpose: This account for the account holder's salary deposit.
        delinquency_period: 0
        balances:
        - balance: 311
          type: ACCOUNT_BALANCE
        - balance: 311
          type: ACCOUNT_BALANCE
        business_ids:
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        credit_limit: 2500
        minimum_payment: ""
        nickname: nickname
        currency: SBD
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        interest_product_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        overdraft_limit: 0
        swift_code: swift_code
        is_account_pool: true
        balance_ceiling:
          balance: 0
          linked_account_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          overflow_account_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        balance_floor:
          balance: 6
          linked_account_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          overdraft_account_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        application_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        is_p2p_enabled: true
        grace_period: 25
        is_card_enabled: true
        exchange_rate_type: "M, INTERBANK, CUST"
        last_updated_time: 2000-01-23T04:56:07.000+00:00
        iban: iban
        customer_ids:
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        spending_limits:
          week: null
          month: null
          lifetime: null
          description: description
          day:
            amount: 0
            transactions: 0
          transaction:
            amount: 0
        bank_routing: bank_routing
        status: APPLICATION_SUBMITTED
    account_id:
      type: string
      description: The unique identifier of an account
      format: uuid
      example: 0cb707c3-9921-40da-8308-34fc6d6aa58c
    account_id_query_schema:
      type: array
      example: "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157"
      items:
        type: string
        format: uuid
      x-schema-name: account_id_query_schema
    account_identifiers:
      title: Identifiers for the account
      required:
      - number
      type: object
      properties:
        iban:
          type: string
          description: |
            The IBAN of the account. Value may be masked, in which case only the last four digits are returned.
          example: FR4116409654593F22958471597
        number:
          type: string
          description: |
            The account number. Value may be masked, in which case only the last four digits are returned.
          example: "78277121"
      example:
        number: "78277121"
        iban: FR4116409654593F22958471597
    account_line_of_credit:
      type: object
      description: Account representing a line of credit account.
      allOf:
      - $ref: '#/components/schemas/account_base'
      - type: object
        properties:
          application_id:
            type: string
            description: |
              (REQUIRED): The application ID for this account.
            format: uuid
          chargeoff_period:
            minimum: 0
            type: integer
            description: |
              The number of days an account can stay delinquent before marking an account as charged-off.
            default: 90
          credit_limit:
            minimum: 0
            type: integer
            description: |
              The credit limit for this line of credit account in cents. Minimum is 0.
            format: int64
            example: 2500
          delinquency_period:
            minimum: 0
            type: integer
            description: |
              The number of days past the due date to wait for a minimum payment before marking an account as delinquent.
            default: 30
          grace_period:
            minimum: 0
            type: integer
            description: |
              The number of days past the billing period to allow for payment before it is considered due. This directly infers the due date for a payment.
            example: 25
          minimum_payment:
            $ref: '#/components/schemas/minimum_payment'
    account_list:
      allOf:
      - required:
        - accounts
        type: object
        properties:
          accounts:
            type: array
            description: Array of Accounts
            items:
              $ref: '#/components/schemas/account_generic_response'
      - $ref: '#/components/schemas/paginated_response'
    account_product:
      type: object
      discriminator:
        propertyName: ProductType
        mapping:
          FEE: '#/components/schemas/fee'
          INTEREST: '#/components/schemas/interest'
      oneOf:
      - $ref: '#/components/schemas/interest'
      - $ref: '#/components/schemas/fee'
    account_product_list:
      allOf:
      - required:
        - account_products
        type: object
        properties:
          account_products:
            type: array
            description: Array of account products
            items:
              $ref: '#/components/schemas/account_product'
      - $ref: '#/components/schemas/paginated_response'
    account_range:
      required:
      - account_range
      - bank_id
      - bin_id
      - partner_id
      type: object
      properties:
        account_range:
          type: array
          items:
            maxLength: 2
            minLength: 2
            type: integer
            format: int64
        bank_id:
          type: integer
          description: The bank ID
        bin_id:
          type: string
          description: The ID of the BIN this account range belogns to
          format: uuid
          example: fb0e3416-0999-409c-995e-7c5e3cb02942
        creation_time:
          type: string
          description: The timestamp representing when the account range was created
          format: date-time
          readOnly: true
        end_date:
          type: string
          description: The time when account range becomes inactive
          format: date-time
        id:
          type: string
          description: Account Range Id
          format: uuid
          readOnly: true
          example: f4184702-5997-4de7-bc94-403f645c2e3f
        is_tokenization_enabled:
          type: boolean
          description: Controls whether account range allows tokenization
          example: true
          default: false
        last_modified_time:
          type: string
          description: The timestamp representing when the account range was last
            modified
          format: date-time
          readOnly: true
        partner_id:
          type: integer
          description: The partner ID
        physical_card_format:
          $ref: '#/components/schemas/physical_card_format'
        start_date:
          type: string
          description: The time when account range becomes active
          format: date-time
    account_range_id:
      type: string
      description: The unique identifier of a account range
      format: uuid
      example: 027127dc-a09f-4353-a76b-b16a781a3052
    account_range_response:
      required:
      - account_range
      - bank_id
      - bin_id
      - creation_time
      - id
      - is_tokenization_enabled
      - last_modified_time
      - partner_id
      allOf:
      - $ref: '#/components/schemas/account_range'
    account_range_response_list:
      allOf:
      - required:
        - account_ranges
        type: object
        properties:
          account_ranges:
            type: array
            description: Array of Account Ranges
            items:
              $ref: '#/components/schemas/account_range_response'
      - $ref: '#/components/schemas/paginated_response'
    account_range_update_request:
      type: object
      properties:
        end_date:
          type: string
          description: The time when account range becomes inactive
          format: date-time
        is_tokenization_enabled:
          type: boolean
          description: Controls whether account range allows tokenization
          example: false
        physical_card_format:
          $ref: '#/components/schemas/physical_card_format'
        start_date:
          type: string
          description: The time when account range becomes active
          format: date-time
      additionalProperties: false
    account_relationship_type:
      type: string
      description: Relationship type
      enum:
      - ACCOUNT_HOLDER
      - PRIMARY_ACCOUNT_HOLDER
      - JOINT_ACCOUNT_HOLDER
      - AUTHORIZED_SIGNER
    account_routing:
      title: Routing information for the account
      required:
      - bank_countries
      - bank_name
      type: object
      properties:
        ach_routing_number:
          type: string
          description: |
            The routing number used for US ACH payments. Only appears if `bank_countries` contains `US`. Value may be masked, in which case only the last four digits are returned.
          example: "756392185"
        bank_countries:
          type: array
          description: The countries that this bank operates the account in
          items:
            type: string
            enum:
            - US
            - CA
        bank_name:
          type: string
          description: The name of the bank managing the account
          example: Chase
        eft_routing_number:
          type: string
          description: |
            The routing number used for EFT payments, identifying a Canadian bank, consisting of the institution number and the branch number. Only appears if `bank_countries` contains `CA`. Value may be masked, in which case only the last four digits are returned.
          example: "02101140"
        swift_code:
          type: string
          description: |
            The SWIFT code for the bank. Value may be masked, in which case only the last four characters are returned.
          example: CHASUS3AXXX
        wire_routing_number:
          type: string
          description: |
            The routing number used for domestic wire payments. Only appears if `bank_countries` contains `US`. Value may be masked, in which case only the last four digits are returned.
          example: "756392185"
      example:
        eft_routing_number: "02101140"
        swift_code: CHASUS3AXXX
        bank_countries:
        - US
        - US
        bank_name: Chase
        wire_routing_number: "756392185"
        ach_routing_number: "756392185"
    account_summary:
      title: Account Summary
      type: object
      properties:
        account_number:
          type: string
          description: Account number
        account_status:
          type: string
          description: Account Status
        account_type:
          type: string
          description: |
            The type of the account. In lead mode, this always takes the value of the template. If not specified in shadow mode, CHECKING will be assumed.
        balance_ceiling:
          $ref: '#/components/schemas/account_summary_balance_ceiling'
        balance_floor:
          $ref: '#/components/schemas/account_summary_balance_floor'
        creation_time:
          type: string
          description: Account creation time
          format: date-time
        currency:
          pattern: "^[A-Z]{3}$"
          type: string
          description: Account currency or account settlement currency. ISO 4217 alphabetic
            currency code. Default USD
          example: IQD
        customer_type:
          type: string
          description: Customer type
        financial_institution:
          $ref: '#/components/schemas/financial_institution'
        id:
          type: string
          description: The unique identifier of the account the statement belongs
            to
          format: uuid
        last_updated_time:
          type: string
          description: Account last modification time
          format: date-time
        nickname:
          type: string
          description: User provided account nickname
    account_template:
      required:
      - is_enabled
      - name
      - template
      type: object
      properties:
        description:
          type: string
          description: User provided account template description
        id:
          type: string
          description: Generated ID for the template
          format: uuid
          readOnly: true
        is_enabled:
          type: boolean
          description: Whether this template can be used for account creation
        name:
          type: string
          description: Unique account template name
        template:
          $ref: '#/components/schemas/template_fields'
    account_template_response:
      required:
      - is_enabled
      - name
      - template
      type: object
      properties:
        description:
          type: string
          description: Account template description
        id:
          type: string
          description: Generated ID for the template
          format: uuid
        is_enabled:
          type: boolean
          description: Whether this template can be used for account creation
        name:
          type: string
          description: Unique account template name
        template:
          $ref: '#/components/schemas/template_fields_generic_response'
      example:
        is_enabled: true
        template:
          billing_period:
            frequency: ANNUALLY
            start_date: 2000-01-23T04:56:07.000+00:00
          account_type: account_type
          interest_product_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          overdraft_limit: 0
          fee_product_ids:
          - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          is_wire_enabled: false
          is_ach_enabled: false
          bank_country: US
          balance_ceiling:
            balance: 0
            linked_account_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            overflow_account_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          balance_floor:
            balance: 6
            linked_account_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            overdraft_account_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          chargeoff_period: 0
          is_p2p_enabled: false
          grace_period: 0
          is_card_enabled: false
          delinquency_period: 0
          minimum_payment: ""
          spending_limits:
            week: null
            month: null
            lifetime: null
            description: description
            day:
              amount: 0
              transactions: 0
            transaction:
              amount: 0
          currency: USD
        name: name
        description: description
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
    account_type:
      title: Account Type
      type: string
      description: |
        The type of the account. In lead mode, this always takes the value of the template. If not specified in shadow mode, CHECKING will be assumed.
      enum:
      - SAVING
      - CHECKING
      - LINE_OF_CREDIT
      x-enumDescriptions:
      - SAVING: Savings account
      - CHECKING: Checking account
      - LINE_OF_CREDIT: Line of Credit account
    account_verification:
      title: Information about the account verification process
      type: object
      description: |
        Information about the account verification process. If the account has not been verified, this will be null.
      nullable: true
      discriminator:
        propertyName: Vendor
        mapping:
          FINICITY: '#/components/schemas/finicity_account_verification'
          MANUAL: '#/components/schemas/manual_account_verification'
          PLAID: '#/components/schemas/plaid_account_verification'
      oneOf:
      - $ref: '#/components/schemas/plaid_account_verification'
      - $ref: '#/components/schemas/manual_account_verification'
      - $ref: '#/components/schemas/finicity_account_verification'
    accrual_payout_schedule:
      type: string
      enum:
      - NONE
      - MONTHLY
    ach_instruction:
      required:
      - request
      - type
      type: object
      properties:
        request:
          $ref: '#/components/schemas/outgoing_ach_request'
        type:
          type: string
          enum:
          - ACH
    ach_request_hold_data:
      required:
      - amount
      - duration
      type: object
      properties:
        amount:
          type: integer
        duration:
          minimum: 0
          type: integer
          example: 2
    add_accounts_request:
      required:
      - account_identifiers
      - account_owner_names
      - customer_type
      - routing_identifiers
      - type
      type: object
      properties:
        account_identifiers:
          $ref: '#/components/schemas/add_accounts_request_account_identifiers'
        account_owner_names:
          minItems: 1
          type: array
          description: The names of the account owners.
          items:
            minLength: 1
            type: string
            example: Jodi Larkin
        business_id:
          type: string
          description: |
            The identifier for the business customer associated with this external account. Exactly one of `business_id` or `customer_id` must be specified.
          format: uuid
          example: 79495dbd-d9b6-4230-b6b1-743d911b325b
        customer_id:
          type: string
          description: |
            The identifier for the personal customer associated with this external account. Exactly one of `customer_id` or `business_id` must be specified.
          format: uuid
          example: 2bd7fc0f-a9ba-46ba-9b90-30a55ccafc74
        customer_type:
          $ref: '#/components/schemas/ext_account_customer_type'
        metadata:
          type: object
          description: User-supplied metadata
        nickname:
          minLength: 1
          type: string
          description: A user-meaningful name for the account
          example: Savings Account
        routing_identifiers:
          $ref: '#/components/schemas/add_accounts_request_routing_identifiers'
        type:
          type: string
          description: The type of the account
          enum:
          - CHECKING
          - SAVINGS
        vendor_account_id:
          minLength: 1
          type: string
          description: "The ID of the vendor account, will be empty for MANUAL vendor"
          example: blgvvBlXw3cq5GMPwqB6s6q4dLKB9WcVqGDGo
        verification:
          $ref: '#/components/schemas/account_verification'
    add_accounts_request_account_identifiers:
      title: Identifiers for the account
      required:
      - number
      type: object
      properties:
        number:
          minLength: 1
          type: string
          description: |
            The account number. On write, Synctera will store the entire account number; on read, we only return the last 4 characters.
          example: "78277121"
    add_accounts_request_routing_identifiers:
      title: Identifiers for the bank
      required:
      - ach_routing_number
      - bank_countries
      - bank_name
      type: object
      properties:
        ach_routing_number:
          minLength: 1
          type: string
          description: |
            The routing number used for US ACH payments.
          example: "756392185"
        bank_countries:
          minItems: 1
          type: array
          description: The countries that this bank operates the account in
          items:
            type: string
            enum:
            - US
        bank_name:
          minLength: 1
          type: string
          description: The name of the bank managing the account
          example: Chase
        wire_routing_number:
          minLength: 1
          type: string
          description: |
            The routing number used for US wire payments.
          example: "915075033"
    add_vendor_account_failure:
      required:
      - reason
      - reason_description
      - vendor_account_id
      type: object
      properties:
        reason:
          $ref: '#/components/schemas/add_vendor_accounts_error_reason'
        reason_description:
          type: string
          description: A human-readable message describing the reason for the failure.
        vendor_account_id:
          type: string
          description: |
            The vendor account ID for the account that failed. For Plaid, this is an `account_id`.
          example: blgvvBlXw3cq5GMPwqB6s6q4dLKB9WcVqGDGo
        vendor_error_message:
          type: string
          description: |
            The display_message returned by the vendor. Only returned if reason is set to `PROVIDER_ERROR`. For Plaid, this is the `display_message`.
        vendor_request_id:
          type: string
          description: |
            A unique identifier for the request from the vendor, which can be used for troubleshooting. Only returned if reason is set to `PROVIDER_ERROR`.
      example:
        reason: FAILED_VERIFICATION
        vendor_request_id: vendor_request_id
        vendor_error_message: vendor_error_message
        reason_description: reason_description
        vendor_account_id: blgvvBlXw3cq5GMPwqB6s6q4dLKB9WcVqGDGo
    add_vendor_accounts_error_reason:
      type: string
      description: A machine-readable code describing the reason for the failure.
      enum:
      - FAILED_VERIFICATION
      - UNSUPPORTED_ACCOUNT_TYPE
      - DUPLICATE_ACCOUNT
      - ACCOUNT_NOT_FOUND
      - PROVIDER_ERROR
    add_vendor_accounts_request:
      required:
      - customer_type
      - vendor
      type: object
      properties:
        business_id:
          type: string
          description: |
            The identifier for the business customer associated with this external account. Exactly one of `business_id` or `customer_id` must be specified.
          format: uuid
          example: c142c707-94a6-4ff9-ba9f-fd26bbbc1065
        customer_id:
          type: string
          description: |
            The identifier for the personal customer associated with this external account. Exactly one of `customer_id` or `business_id` must be specified.
          format: uuid
          example: 17e0260f-085a-45ff-97a2-d792d06a2f06
        customer_type:
          $ref: '#/components/schemas/ext_account_customer_type'
        vendor:
          $ref: '#/components/schemas/external_account_vendor_values'
        vendor_access_token:
          minLength: 1
          type: string
          description: |
            The token provided to link external accounts. For Plaid, this is their `access_token`.
          example: access-sandbox-de3ce8ef-33f8-452c-a685-8671031fc0f6
        vendor_account_ids:
          minItems: 1
          type: array
          description: |
            The list of vendor account IDs that the customer chose to link. For Plaid, these are `account_id`s.
          items:
            minLength: 1
            type: string
            description: The Plaid account_id.
            example: blgvvBlXw3cq5GMPwqB6s6q4dLKB9WcVqGDGo
        vendor_customer_id:
          type: string
          description: |
            The identifier provided by the vendor for the customer associated with this external account.
          example: "811"
        verify_owner:
          type: boolean
          description: |
            If true, Synctera will attempt to verify that the external account owner is the same as the customer by comparing external account data to customer data. At least 2 of the following fields must match: name, phone number, email, address. Verification is disabled by default.
          default: false
    add_vendor_accounts_response:
      required:
      - added_accounts
      - failed_accounts
      type: object
      properties:
        added_accounts:
          type: array
          items:
            $ref: '#/components/schemas/external_account'
        deleted_accounts:
          type: array
          items:
            $ref: '#/components/schemas/external_account'
        failed_accounts:
          type: array
          items:
            $ref: '#/components/schemas/add_vendor_account_failure'
      example:
        deleted_accounts:
        - null
        - null
        failed_accounts:
        - reason: FAILED_VERIFICATION
          vendor_request_id: vendor_request_id
          vendor_error_message: vendor_error_message
          reason_description: reason_description
          vendor_account_id: blgvvBlXw3cq5GMPwqB6s6q4dLKB9WcVqGDGo
        - reason: FAILED_VERIFICATION
          vendor_request_id: vendor_request_id
          vendor_error_message: vendor_error_message
          reason_description: reason_description
          vendor_account_id: blgvvBlXw3cq5GMPwqB6s6q4dLKB9WcVqGDGo
        added_accounts:
        - creation_time: 2022-01-01T00:00:00Z
          metadata: {}
          routing_identifiers:
            eft_routing_number: "02101140"
            swift_code: CHASUS3AXXX
            bank_countries:
            - US
            - US
            bank_name: Chase
            wire_routing_number: "756392185"
            ach_routing_number: "756392185"
          vendor_data:
            account_number_mask: account_number_mask
            institution_id: institution_id
          type: CHECKING
          vendor_info: ""
          account_identifiers:
            number: "78277121"
            iban: FR4116409654593F22958471597
          last_updated_time: 2022-01-01T00:00:00Z
          name: Plaid Checking
          nickname: Auto Loan Account
          account_owner_names:
          - Norman Walsh PhD
          - Norman Walsh PhD
          id: 3aeb2292-c681-4037-b716-655226548c2a
          customer_id: aac579e0-e6ff-4053-a137-33fb1d77ea88
          business_id: 2752e077-14f5-4caf-8d38-361c50a53873
          verification: ""
          status: ACTIVE
        - creation_time: 2022-01-01T00:00:00Z
          metadata: {}
          routing_identifiers:
            eft_routing_number: "02101140"
            swift_code: CHASUS3AXXX
            bank_countries:
            - US
            - US
            bank_name: Chase
            wire_routing_number: "756392185"
            ach_routing_number: "756392185"
          vendor_data:
            account_number_mask: account_number_mask
            institution_id: institution_id
          type: CHECKING
          vendor_info: ""
          account_identifiers:
            number: "78277121"
            iban: FR4116409654593F22958471597
          last_updated_time: 2022-01-01T00:00:00Z
          name: Plaid Checking
          nickname: Auto Loan Account
          account_owner_names:
          - Norman Walsh PhD
          - Norman Walsh PhD
          id: 3aeb2292-c681-4037-b716-655226548c2a
          customer_id: aac579e0-e6ff-4053-a137-33fb1d77ea88
          business_id: 2752e077-14f5-4caf-8d38-361c50a53873
          verification: ""
          status: ACTIVE
    additional_data:
      required:
      - title
      type: object
      properties:
        title:
          type: string
          description: The professional role or position the person holds at the related
            organization.
          format: enum
          enum:
          - OFFICER
          - DIRECTOR
      description: Contains additional information about the relationship.
    additional_owner_data:
      required:
      - percent_ownership
      type: object
      properties:
        percent_ownership:
          maximum: 100
          minimum: 0
          exclusiveMinimum: true
          type: number
          description: Percentage ownership of the related business.
          format: double
          example: 35.75
      description: Contains additional information about the relationship.
    address:
      required:
      - address_line_1
      - country_code
      type: object
      properties:
        address_line_1:
          type: string
          description: Street address line 1
          example: 7975 Kilback Stream
        address_line_2:
          type: string
          description: String address line 2
          example: Apt. 808
        city:
          type: string
          description: City
          example: Romaton
        country_code:
          pattern: "^[A-Z]{2}$"
          type: string
          description: ISO-3166-1 Alpha-2 country code
          example: US
        postal_code:
          type: string
          description: Postal code
          example: "28620"
        state:
          type: string
          description: "State, region, province, or prefecture"
          example: GA
    address1:
      required:
      - address_line_1
      - city
      - country_code
      - postal_code
      - state
      type: object
      properties:
        address_line_1:
          type: string
          description: Street address line 1
          example: 2010 Schowalter Parks
        address_line_2:
          type: string
          description: String address line 2
          example: Apt. 479
        city:
          type: string
          description: City
          example: Port Shawn
        country_code:
          type: string
          description: ISO-3166-1 Alpha-2 country code
          example: TG
        postal_code:
          type: string
          description: Postal code
          example: "49633"
        state:
          type: string
          description: "State, region, province, or prefecture"
          example: CO
      example:
        country_code: TG
        city: Port Shawn
        address_line_1: 2010 Schowalter Parks
        address_line_2: Apt. 479
        state: CO
        postal_code: "49633"
    address2:
      title: Address
      type: object
      properties:
        address_line_1:
          type: string
        address_line_2:
          type: string
        city:
          type: string
        country_code:
          type: string
        postal_code:
          type: string
        state:
          type: string
    adhoc_verification_request:
      required:
      - payee_id
      - payer_id
      type: object
      properties:
        payee_id:
          type: string
          description: Synctera party (non-customer) who is receiving money from a
            customer (the payer)
          format: uuid
        payer_id:
          type: string
          description: Synctera customer who is sending money to a non-customer (the
            payee)
          format: uuid
      description: |
        Basic identifying information about the person being verified.
    adhoc_verification_response:
      required:
      - id
      - matching_watchlists
      - result
      type: object
      properties:
        id:
          type: string
          description: Unique ID for this verification result.
          format: uuid
          example: 91a0ced5-2403-4a98-9b9f-c4577834eac1
        matching_watchlists:
          type: array
          description: |
            list of watchlists that the subject of the request matched
          items:
            type: string
            enum:
            - US_OFAC
        result:
          $ref: '#/components/schemas/verification_result'
        vendor_info:
          $ref: '#/components/schemas/vendor_info'
      example:
        result: ACCEPTED
        matching_watchlists:
        - US_OFAC
        - US_OFAC
        id: 91a0ced5-2403-4a98-9b9f-c4577834eac1
        vendor_info: ""
    alias:
      title: Account Alias
      type: object
      properties:
        account_id:
          type: string
          description: Account ID
          format: uuid
        account_number:
          type: string
          description: Account number
        alias_info:
          type: object
          description: Additional information for the alias
        alias_name:
          type: string
          description: Alias name
        alias_source:
          type: string
          description: Alias source
        alias_type:
          type: string
          description: Alias type
        id:
          type: string
          description: Alias ID
          format: uuid
          readOnly: true
    alias_list:
      required:
      - aliases
      type: object
      properties:
        aliases:
          type: array
          description: Array of account alias
          items:
            $ref: '#/components/schemas/alias'
    apple_digital_wallet_provision_request:
      required:
      - certificates
      - device_type
      - nonce
      - nonce_signature
      - provisioning_app_version
      type: object
      properties:
        certificates:
          type: array
          description: Leaf and sub-CA certificates provided by Apple
          items:
            type: string
            description: Array of Base64 encoded certificates from Apple.
        device_type:
          $ref: '#/components/schemas/device_type'
        nonce:
          type: string
          description: One-time-use nonce provided by Apple for security purposes.
        nonce_signature:
          type: string
          description: Apple-provided signature to the nonce.
        provisioning_app_version:
          $ref: '#/components/schemas/provisioning_app_version'
    apple_digital_wallet_provision_response:
      type: object
      properties:
        activation_data:
          type: string
        card_id:
          $ref: '#/components/schemas/card_id'
        created_time:
          type: string
          format: date-time
        encrypted_pass_data:
          type: string
        ephemeral_public_key:
          type: string
        last_modified_time:
          type: string
          format: date-time
      example:
        ephemeral_public_key: ephemeral_public_key
        activation_data: activation_data
        created_time: 2000-01-23T04:56:07.000+00:00
        encrypted_pass_data: encrypted_pass_data
        last_modified_time: 2000-01-23T04:56:07.000+00:00
        card_id: 8f2edf2c-3346-4242-a5ba-c91a300a1d45
    application:
      title: Credit application details
      required:
      - application_details
      - customer_id
      - type
      type: object
      properties:
        application_details:
          type: object
          description: Details about the applicant. The exact schema is to be determined
            with your bank.
          example:
            annual_salary: 50000
            fico_score: 700
        customer_id:
          type: string
          description: Customer ID for the application
          format: uuid
        status:
          $ref: '#/components/schemas/application_status'
        type:
          $ref: '#/components/schemas/application_type'
    application_list:
      allOf:
      - required:
        - applications
        type: object
        properties:
          applications:
            type: array
            description: Array of credit applications.
            items:
              $ref: '#/components/schemas/application_response'
      - $ref: '#/components/schemas/paginated_response'
    application_list_response:
      allOf:
      - required:
        - external_applications
        type: object
        properties:
          external_applications:
            type: array
            description: Array of External Applications
            items:
              $ref: '#/components/schemas/application_response1'
      - $ref: '#/components/schemas/paginated_response'
    application_patch:
      title: Credit application details
      type: object
      properties:
        application_details:
          type: object
          description: Details about the applicant. The exact schema is to be determined
            with your bank.
          example:
            annual_salary: 50000
            fico_score: 700
        status:
          $ref: '#/components/schemas/application_status'
    application_request:
      required:
      - bank_id
      - business_address
      - business_name
      - business_phone
      - business_tax_id
      - business_type
      - doing_business_as
      - max_transaction_amount
      - partner_id
      type: object
      properties:
        bank_id:
          type: integer
          description: Bank ID
        business_address:
          $ref: '#/components/schemas/address1'
        business_name:
          type: string
          description: todo
        business_phone:
          type: string
          description: todo
        business_tax_id:
          maxLength: 9
          minLength: 9
          type: string
          description: todo
        business_type:
          type: string
          description: todo
          enum:
          - INDIVIDUAL_SOLE_PROPRIETORSHIP
          - CORPORATION
          - LIMITED_LIABILITY_COMPANY
          - PARTNERSHIP
          - ASSOCIATION_ESTATE_TRUST
          - TAX_EXEMPT_ORGANIZATION
          - INTERNATIONAL_ORGANIZATION
          - GOVERNMENT_AGENCY
        dob:
          $ref: '#/components/schemas/external_payment_date'
        doing_business_as:
          type: string
          description: todo
        email:
          type: string
          description: todo
        first_name:
          type: string
          description: todo
        incorporation_date:
          $ref: '#/components/schemas/external_payment_date'
        last_name:
          type: string
          description: todo
        max_transaction_amount:
          type: integer
          description: Maximum amount that can be transacted for a single transaction
            in cents
        partner_id:
          type: integer
          description: Partner ID
        personal_address:
          $ref: '#/components/schemas/address1'
        phone:
          type: string
          description: todo
        principal_percentage_ownership:
          type: string
          description: todo
        tax_id:
          maxLength: 9
          minLength: 9
          type: string
          description: todo
        title:
          type: string
          description: todo
        url:
          type: string
          description: todo
    application_response:
      title: Credit application details
      required:
      - application_details
      - creation_time
      - customer_id
      - id
      - last_updated_time
      - status
      - type
      type: object
      properties:
        application_details:
          type: object
          description: Details about the applicant. The exact schema is to be determined
            with your bank.
          example:
            annual_salary: 50000
            fico_score: 700
        creation_time:
          type: string
          description: Application creation timestamp in RFC3339 format
          format: date-time
          readOnly: true
        customer_id:
          type: string
          description: Customer ID for the application
          format: uuid
        id:
          type: string
          description: Generated ID for the application
          format: uuid
          readOnly: true
        last_updated_time:
          type: string
          description: Timestamp of the last application modification in RFC3339 format
          format: date-time
          readOnly: true
        status:
          $ref: '#/components/schemas/application_status'
        type:
          $ref: '#/components/schemas/application_type'
      example:
        creation_time: 2000-01-23T04:56:07.000+00:00
        last_updated_time: 2000-01-23T04:56:07.000+00:00
        application_details:
          annual_salary: 50000
          fico_score: 700
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        customer_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        type: LINE_OF_CREDIT
        status: APPLICATION_SUBMITTED
    application_response1:
      required:
      - created_time
      - id
      - last_modified_time
      type: object
      properties:
        created_time:
          type: string
          format: date-time
          example: 2020-01-01T00:00:00Z
        external_id:
          type: string
          description: The id of the application from processor
        id:
          type: string
          description: The id of the application
        last_modified_time:
          type: string
          format: date-time
          example: 2020-01-01T00:00:00Z
    application_status:
      title: Application Status
      type: string
      description: |
        Status of the credit application
      enum:
      - APPLICATION_SUBMITTED
      - CREDIT_APPROVED
      - CREDIT_DENIED
      - CREDIT_NOT_ACCEPTED_BY_CUSTOMER
      - CREDIT_ACCEPTED_BY_CUSTOMER
      x-enumDescriptions:
      - APPLICATION_SUBMITTED: Credit application has been submitted
      - CREDIT_APPROVED: Credit application has been approved
      - CREDIT_DENIED: Credit application has been denied
      - CREDIT_NOT_ACCEPTED_BY_CUSTOMER: Credit application has not been accepted
          by the customer
      - CREDIT_ACCEPTED_BY_CUSTOMER: Credit application has been accepted by the customer
    application_type:
      title: Type of Credit Application
      type: string
      description: Type of Credit Application
      example: LINE_OF_CREDIT
      enum:
      - LINE_OF_CREDIT
      x-enumDescriptions:
      - LINE_OF_CREDIT: Line of credit application type
    auth_request_model:
      required:
      - amount
      - card_id
      - mid
      type: object
      properties:
        amount:
          type: integer
          description: The amount of the transaction in the smallest whole denomination
            of the applicable currency (eg. For USD use cents)
        card_acceptor:
          $ref: '#/components/schemas/card_acceptor_model'
        card_id:
          type: string
          format: uuid
        card_options:
          $ref: '#/components/schemas/card_options'
        cash_back_amount:
          type: integer
        is_pre_auth:
          type: boolean
          default: false
        mid:
          maxLength: 50
          minLength: 1
          type: string
        network_fees:
          type: array
          items:
            $ref: '#/components/schemas/network_fee_model'
        pin:
          maxLength: 50
          minLength: 1
          type: string
        transaction_options:
          $ref: '#/components/schemas/transaction_options'
    authorization_advice_model:
      required:
      - amount
      - original_transaction_id
      type: object
      properties:
        amount:
          type: integer
          description: The amount of the transaction in the smallest whole denomination
            of the applicable currency (eg. For USD use cents)
        network_fees:
          type: array
          items:
            $ref: '#/components/schemas/network_fee_model'
        original_transaction_id:
          type: string
          format: uuid
        transaction_options:
          $ref: '#/components/schemas/transaction_options'
    balance:
      required:
      - balance
      - type
      type: object
      properties:
        balance:
          type: integer
          description: balance in ISO 4217 minor currency units. Unit in cents.
          format: int64
          readOnly: true
          example: 311
        type:
          $ref: '#/components/schemas/balance_type'
      example:
        balance: 311
        type: ACCOUNT_BALANCE
    balance_ceiling:
      required:
      - balance
      type: object
      properties:
        balance:
          minimum: 0
          type: integer
          description: Maximum balance in the account's currency. Unit in cents.
          format: int64
        linked_account_id:
          type: string
          description: |
            ID of linked backing account for just-in-time (JIT) funding of transactions to maintain the balance ceiling
          format: uuid
        overflow_account_id:
          type: string
          description: |
            ID of linked backing account for just-in-time (JIT) funding of transactions to maintain the balance ceiling
            This attribute is a deprecated alias for linked_account_id.
          format: uuid
          deprecated: true
      example:
        balance: 0
        linked_account_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        overflow_account_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
    balance_floor:
      required:
      - balance
      type: object
      properties:
        balance:
          type: integer
          description: Minimum balance in the account's currency. Unit in cents.
          format: int64
        linked_account_id:
          type: string
          description: |
            ID of linked backing account for just-in-time (JIT) funding of transactions to maintain the balance floor
          format: uuid
        overdraft_account_id:
          type: string
          description: |
            ID of linked backing account for just-in-time (JIT) funding of transactions to maintain the balance floor
            This attribute is a deprecated alias for linked_account_id.
          format: uuid
          deprecated: true
      example:
        balance: 6
        linked_account_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        overdraft_account_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
    balance_inquiry_request_model:
      required:
      - account_type
      - card_acceptor
      - card_id
      - mid
      type: object
      properties:
        account_type:
          type: string
          enum:
          - checking
          - savings
          - credit
        card_acceptor:
          $ref: '#/components/schemas/card_acceptor_model'
        card_id:
          type: string
          format: uuid
        mid:
          maxLength: 50
          minLength: 1
          type: string
        network_fees:
          type: array
          items:
            $ref: '#/components/schemas/network_fee_model'
        pin:
          maxLength: 15
          minLength: 1
          type: string
    balance_type:
      type: string
      description: "For `SAVING` and `CHECKING` accounts:\n* `ACCOUNT_BALANCE`: the\
        \ amount of money in the account. Equal to the sum of credits minus debits\
        \ for all posted transactions. \n* `AVAILABLE_BALANCE`: the account balance\
        \ minus any pending debits.\n\nFor `LINE_OF_CREDIT` accounts:\n* `ACCOUNT_BALANCE`:\
        \ the amount of credit currently in use. Equal to the sum of debits minus\
        \ credits for all posted transactions.\n* `AVAILABLE_BALANCE`: the amount\
        \ of credit available. Equal to the credit limit minus `account_balance` minus\
        \ any pending debits.\n"
      enum:
      - ACCOUNT_BALANCE
      - AVAILABLE_BALANCE
    bank_debit_network_response:
      allOf:
      - $ref: '#/components/schemas/debit_network'
      - type: object
        properties:
          bank_network_id:
            type: string
            description: The ID of the bank network
          bin_id:
            type: string
            description: The ID of the bank's bin that uses this debit network
            format: uuid
    base:
      type: object
      properties:
        creation_time:
          type: string
          description: The date and time the resource was created.
          format: date-time
          readOnly: true
          example: 2021-06-14T11:23:41Z
        ein:
          type: string
          description: "U.S. Employer Identification Number (EIN) for this business,\
            \ in the format xx-xxxxxxx."
          example: 12-3456789
        email:
          type: string
          description: Business's email.
          example: Eladio_Barrows@gmail.com
        entity_name:
          type: string
          description: Business's legal name.
          example: Apex Corporation
        formation_date:
          type: string
          description: Date the business was legally registered in RFC 3339 full-date
            format (YYYY-MM-DD).
          format: date
          example: 2000-01-01
        formation_state:
          type: string
          description: U.S. state where the business is legally registered (2-letter
            abbreviation).
          example: AL
        id:
          type: string
          description: Business's unique identifier.
          format: uuid
          readOnly: true
          example: 1cac55ec-9c9f-4d06-b97f-dbe36bcc6fab
        is_customer:
          $ref: '#/components/schemas/is_customer'
        last_updated_time:
          type: string
          description: The date and time the resource was last updated.
          format: date-time
          readOnly: true
          example: 2022-01-18T17:54:12Z
        legal_address:
          $ref: '#/components/schemas/address'
        metadata:
          $ref: '#/components/schemas/metadata'
        phone_number:
          pattern: "^\\+[1-9]\\d{1,14}$"
          type: string
          description: Business's phone number with country code in E.164 format.
            Must have a valid country code. Area code and local phone number are not
            validated.
          example: +14374570680
        status:
          type: string
          description: |
            Status of the business. One of the following:
            * `PROSPECT` – a potential customer, used for information-gathering and disclosures.
            * `ACTIVE` –  is an integrator defined status.  Integrators should set a business to active if they believe the person to be qualified for conducting business.  Synctera will combine this status with other statuses such a verification to determine if the business is eligible for specific actions such as initiating transactions or issuing a card.
            * `FROZEN` – business's actions are blocked for security, legal, or other reasons.
            * `SANCTION` – business is on a sanctions list and should be carefully monitored.
            * `DISSOLVED` – an inactive status indicating a business entity has filed articles of dissolution or a certificate of termination to terminate its existence.
            * `CANCELLED` – an inactive status indicating that a business entity has filed a cancellation or has failed to file its periodic report after notice of forfeiture of its rights to do business.
            * `SUSPENDED` – an inactive status indicating that the business entity has lost the right to operate in it's registered jurisdiction.
            * `MERGED` – an inactive status indicating that the business entity has terminated existence by merging into another entity.
            * `INACTIVE` – an inactive status indicating that the business entity is no longer active.
            * `CONVERTED` – An inactive status indicating that the business entity has been converted to another type of business entity in the same jurisdiction.
          enum:
          - PROSPECT
          - ACTIVE
          - FROZEN
          - SANCTION
          - DISSOLVED
          - CANCELLED
          - SUSPENDED
          - MERGED
          - INACTIVE
          - CONVERTED
        structure:
          type: string
          description: Business's legal structure.
          example: CORPORATION
          enum:
          - SOLE_PROPRIETORSHIP
          - PARTNERSHIP
          - LLC
          - CORPORATION
          - S_CORPORATION
          - NON_PROFIT
          - OTHER
        trade_names:
          type: array
          description: Other names by which this business is known.
          example:
          - Apex
          - Apex LLC
          - CorporationID#77231
          items:
            type: string
        verification_last_run:
          type: string
          description: Date and time KYB verification was last run on the business.
          format: date-time
          readOnly: true
          example: 2022-01-18T17:54:12Z
        verification_status:
          $ref: '#/components/schemas/verification_status'
        website:
          type: string
          description: Business's website.
          example: https://example.com
    base_account_verification:
      title: Information about account verification
      required:
      - status
      - vendor
      type: object
      properties:
        creation_time:
          type: string
          description: The time at which verification was first completed.
          format: date-time
          example: 2022-01-01T00:00:00Z
        last_updated_time:
          type: string
          description: The time at which verification was last updated.
          format: date-time
          example: 2022-01-01T00:00:00Z
        status:
          type: string
          description: The status of verification
          enum:
          - VERIFIED
          - UNVERIFIED
        vendor:
          type: string
          description: The vendor used for verifying the account
          enum:
          - PLAID
          - MANUAL
          - FINICITY
    base_card:
      allOf:
      - $ref: '#/components/schemas/card_format'
      - required:
        - form
        type: object
        properties:
          account_id:
            type: string
            description: The ID of the account to which the card will be linked
            format: uuid
            example: 7bbd3567-dfc3-4b9b-9311-5a6e667ff3ab
          bin:
            type: string
            description: The bin number
          card_brand:
            $ref: '#/components/schemas/card_brand'
          card_product_id:
            type: string
            description: The card product to which the card is attached
            format: uuid
            example: 31dbb03f-7960-4b36-a670-046b6c23e1f9
          creation_time:
            type: string
            description: The timestamp representing when the card issuance request
              was made
            format: date-time
            readOnly: true
          customer_id:
            type: string
            description: The ID of the customer to whom the card will be issued
            format: uuid
            example: 15047152-4b0f-48ce-8318-862807352003
          emboss_name:
            $ref: '#/components/schemas/emboss_name'
          expiration_month:
            type: string
            readOnly: true
            example: "06"
          expiration_time:
            type: string
            description: The timestamp representing when the card would expire at
            format: date-time
            readOnly: true
          expiration_year:
            type: string
            readOnly: true
            example: "25"
          id:
            type: string
            description: Card ID
            format: uuid
            readOnly: true
            example: 9db7605b-35be-46dd-8bcf-16cfc26c3961
          last_four:
            type: string
            description: The last 4 digits of the card PAN
            readOnly: true
            example: "1234"
          last_modified_time:
            type: string
            description: The timestamp representing when the card was last modified
              at
            format: date-time
            readOnly: true
          metadata:
            $ref: '#/components/schemas/card_metadata'
          reissue_reason:
            type: string
            description: |
              This is the reason the card needs to be reissued, if any. The reason determines several behaviours:
                - whether or not the new card will use the same PAN as the original card
                - the old card will be terminated and if so, when it will be terminated

              Reason                 | Same PAN | Terminate Old Card
              ---------------------- | -------- | ------------------
              EXPIRATION             | yes      | on activation
              LOST                   | no       | immediately
              STOLEN                 | no       | immediately
              DAMAGED                | yes      | on activation
              VIRTUAL_TO_PHYSICAL(*) | yes      | on activation
              PRODUCT_CHANGE         | yes      | on activation
              NAME_CHANGE(**)        | yes      | on activation
              APPEARANCE             | yes      | on activation

              (*) VIRTUAL_TO_PHYSICAL is deprecated. Please use PRODUCT_CHANGE whenever reissuing from one
              card product to another, including from a virtual product to a physical product.

              (**) NAME_CHANGE is deprecated. Please use APPEARANCE whenever reissuing in order to change the
              appearance of a card, such as the printed name or custom image.

              For all reasons, the new card will use the same PIN as the original card and digital wallet tokens will
              reassigned to the new card
            enum:
            - EXPIRATION
            - LOST
            - STOLEN
            - DAMAGED
            - NAME_CHANGE
            - VIRTUAL_TO_PHYSICAL
            - PRODUCT_CHANGE
            - APPEARANCE
          reissued_from_id:
            type: string
            description: |
              When reissuing a card, specify the card to be replaced here. When getting a card's details, if this card was issued as a reissuance of another card, this ID refers to the card was replaced. If this field is set, then reissue_reason must also be set.
            format: uuid
            example: 3898d3a7-dd8b-47eb-9354-b0f5c9bcf88b
          reissued_to_id:
            type: string
            description: "If this card was reissued, this ID refers to the card that\
              \ replaced it."
            format: uuid
            readOnly: true
            example: 39f453e9-7a83-4f88-90bd-bc8df324fc42
          type:
            type: string
            description: Indicates the type of card to be issued
            enum:
            - DEBIT
    base_disclosure:
      type: object
      properties:
        business_id:
          $ref: '#/components/schemas/business_id1'
        creation_time:
          type: string
          description: The date and time the resource was created.
          format: date-time
          readOnly: true
          example: 2021-06-14T11:23:41Z
        disclosure_date:
          type: string
          description: Date and time the disclosure was made.
          format: date-time
          example: 2021-06-14T11:21:17Z
        event_type:
          type: string
          description: |
            Describes how the disclosure was shown and what the user did as a result.
            One of the following:
            * `DISPLAYED` —
                The document was made visible to the user,
                but they did not interact with it.
            * `VIEWED` —
                The document was made visible to the user,
                and they interacted enough to see the whole document (e.g. scrolled to the bottom).
            * `ACKNOWLEDGED` —
                The document was made visible to the user,
                and they took positive action to confirm that they have read and accepted the document.
          example: ACKNOWLEDGED
          enum:
          - DISPLAYED
          - VIEWED
          - ACKNOWLEDGED
        id:
          $ref: '#/components/schemas/id'
        last_updated_time:
          type: string
          description: The date and time the resource was last updated.
          format: date-time
          readOnly: true
          example: 2022-01-18T17:54:12Z
        metadata:
          $ref: '#/components/schemas/metadata'
        person_id:
          $ref: '#/components/schemas/person_id'
        type:
          $ref: '#/components/schemas/disclosure_type'
        version:
          $ref: '#/components/schemas/version'
    base_master_disclosure:
      type: object
      properties:
        creation_time:
          type: string
          description: The date and time the resource was created.
          format: date-time
          readOnly: true
          example: 2021-06-14T11:23:41Z
        id:
          $ref: '#/components/schemas/id'
        last_updated_time:
          type: string
          description: The date and time the resource was last updated.
          format: date-time
          readOnly: true
          example: 2022-01-18T17:54:12Z
        metadata:
          $ref: '#/components/schemas/metadata'
        type:
          $ref: '#/components/schemas/disclosure_type'
        version:
          $ref: '#/components/schemas/version'
    base_person:
      type: object
      properties:
        creation_time:
          type: string
          description: The date and time the resource was created.
          format: date-time
          readOnly: true
          example: 2021-06-14T11:23:41Z
        email:
          type: string
          description: Customer's email
          example: Arlo.Medhurst@gmail.com
        id:
          type: string
          description: Customer unique identifier
          format: uuid
          readOnly: true
          example: 3e874c4f-a5c6-4f45-8f07-78ffa097e985
        kyc_exempt:
          type: boolean
          description: Customer's KYC exemption
          readOnly: true
        kyc_last_run:
          type: string
          description: Date and time KYC was last run on the customer
          format: date-time
          readOnly: true
          example: 2022-01-18T17:54:12Z
        kyc_status:
          $ref: '#/components/schemas/customer_kyc_status'
        last_updated_time:
          type: string
          description: The date and time the resource was last updated.
          format: date-time
          readOnly: true
          example: 2022-01-18T17:54:12Z
        legal_address:
          $ref: '#/components/schemas/address'
        metadata:
          type: object
          description: User-supplied metadata. Do not use to store PII.
        middle_name:
          type: string
          description: Customer's middle name
          example: b
        phone_number:
          pattern: "^\\+[1-9]\\d{1,14}$"
          type: string
          description: Customer's mobile phone number with country code in E.164 format.
            Must have a valid country code. Area code and local phone number are not
            validated.
          example: +14374570680
        related_customers:
          type: array
          description: Customer's relationships with other accounts eg. guardian
          items:
            $ref: '#/components/schemas/relationship1'
        shipping_address:
          $ref: '#/components/schemas/address'
        ssn:
          type: string
          description: "Customer's full tax ID eg SSN formatted with hyphens. This\
            \ optional parameter is required when running KYC on a customer. Input\
            \ must match the pattern ^\\d{3}-\\d{2}-\\d{4}$. The response contains\
            \ the last 4 digits only (e.g. 6789)."
          example: 914-39-4344
        ssn_source:
          $ref: '#/components/schemas/ssn_source'
    base_person1:
      type: object
      properties:
        creation_time:
          type: string
          description: The date and time the resource was created.
          format: date-time
          readOnly: true
          example: 2021-06-14T11:23:41Z
        dob:
          type: string
          description: Person's date of birth in RFC 3339 full-date format (YYYY-MM-DD).
          format: date
          example: 2000-01-01
        email:
          type: string
          description: Person's email.
          example: Sterling78@gmail.com
        first_name:
          type: string
          description: Person's first name.
          example: Marge
        id:
          type: string
          description: Person's unique identifier.
          format: uuid
          readOnly: true
          example: 9aac19c7-6fb8-42ff-86d3-461540b8193f
        is_customer:
          $ref: '#/components/schemas/is_customer'
        last_name:
          type: string
          description: Person's last name.
          example: Schimmel
        last_updated_time:
          type: string
          description: The date and time the resource was last updated.
          format: date-time
          readOnly: true
          example: 2022-01-18T17:54:12Z
        legal_address:
          $ref: '#/components/schemas/address'
        metadata:
          $ref: '#/components/schemas/metadata'
        middle_name:
          type: string
          description: Person's middle name.
          example: b
        phone_number:
          pattern: "^\\+[1-9]\\d{1,14}$"
          type: string
          description: Person's mobile phone number with country code in E.164 format.
            Must have a valid country code. Area code and local phone number are not
            validated
          example: +14374570680
        shipping_address:
          $ref: '#/components/schemas/address'
        ssn:
          type: string
          description: Person's full tax ID eg SSN formatted with hyphens. This optional
            parameter is required when running KYC. The response contains the last
            4 digits only (e.g. 6789).
          example: 711-65-4795
        ssn_source:
          $ref: '#/components/schemas/ssn_source'
        status:
          $ref: '#/components/schemas/status1'
        verification_last_run:
          type: string
          description: Date and time KYC verification was last run on the person.
          format: date-time
          readOnly: true
          example: 2022-01-18T17:54:12Z
        verification_status:
          $ref: '#/components/schemas/verification_status'
    base_template_fields:
      required:
      - account_type
      - bank_country
      - currency
      type: object
      properties:
        account_type:
          $ref: '#/components/schemas/account_type'
        bank_country:
          pattern: "^[A-Z]{2,3}$"
          type: string
          description: Bank country of the account. ISO 3166-1 Alpha-2 or Alpha-3
            country code.
          example: US
        currency:
          pattern: "^[A-Z]{3}$"
          type: string
          description: Account currency. ISO 4217 alphabetic currency code
          example: USD
    billing_address:
      type: object
      properties:
        address:
          type: string
        compressed_zip:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        zip:
          type: string
    billing_period:
      required:
      - frequency
      - start_date
      type: object
      properties:
        frequency:
          type: string
          description: |
            The frequency of billing cycles. Along with the start date, this will determine the start and end of each cycle.
          enum:
          - ANNUALLY
          - MONTHLY
          - SEMI_MONTHLY
          - BI_WEEKLY
          - WEEKLY
          - DAILY
        start_date:
          type: string
          description: |
            The first day of the first billing cycle for this account. For a monthly billing cycle, this would determine the day of the month each billing cycle will start on.
          format: date-time
      description: |
        The scheme for determining an account's billing period.
      example:
        frequency: ANNUALLY
        start_date: 2000-01-23T04:56:07.000+00:00
    bin:
      required:
      - account_range_length
      - bank_id
      - billing_ica
      - bin
      - brand_product_code
      - card_brand
      - card_category
      - card_product_type
      - country
      - currency
      - ica_bid
      - pan_utilization
      - partner_id
      - processor
      type: object
      properties:
        account_range_length:
          type: integer
          description: Account range length
        bank_id:
          type: integer
          description: The bank ID
        billing_ica:
          type: string
          description: The ICA to which fees will be billed
        bin:
          type: string
          description: The bin number
        bin_status:
          $ref: '#/components/schemas/bin_status'
        brand_product_code:
          $ref: '#/components/schemas/brand_product_code'
        card_brand:
          $ref: '#/components/schemas/card_brand'
        card_category:
          $ref: '#/components/schemas/card_category'
        card_product_type:
          $ref: '#/components/schemas/card_product_type'
        country:
          $ref: '#/components/schemas/country_code'
        creation_time:
          type: string
          description: The timestamp representing when the bin was created
          format: date-time
          readOnly: true
        currency:
          $ref: '#/components/schemas/currency_code'
        digital_wallet_active:
          type: boolean
          description: Determines if bin supports digital wallet tokenization
          example: true
          default: false
        end_date:
          type: string
          description: The time when bin is decommissioned
          format: date-time
        ica_bid:
          type: string
          description: ICA/BID
        id:
          type: string
          description: Bin ID
          format: uuid
          readOnly: true
          example: c0aabfc6-2db8-4ea8-a18a-3fed534c34ac
        is_tokenization_enabled:
          type: boolean
          description: Controls whether bin allows tokenization
          example: true
          default: false
        last_modified_time:
          type: string
          description: The timestamp representing when the bin was last modified
          format: date-time
          readOnly: true
        pan_utilization:
          type: integer
          description: Pan utilization
        partner_id:
          type: integer
          description: The partner ID
        physical_card_format:
          $ref: '#/components/schemas/physical_card_format'
        processor:
          type: string
          description: The name of the card processor
        start_date:
          type: string
          description: The time when bin goes live
          format: date-time
    bin_and_debit_network:
      required:
      - bank_network_id
      - bin
      - debit_network
      type: object
      properties:
        bank_network_id:
          type: string
          description: The ID of the bank network
        bin:
          $ref: '#/components/schemas/bin'
        debit_network:
          $ref: '#/components/schemas/debit_network'
    bin_and_debit_network_list:
      allOf:
      - required:
        - bin_and_debit_networks
        type: object
        properties:
          bin_and_debit_networks:
            type: array
            description: Array of BINs and debit networks
            items:
              $ref: '#/components/schemas/bin_and_debit_network'
      - $ref: '#/components/schemas/paginated_response'
    bin_id:
      type: string
      description: The unique identifier of a bin
      format: uuid
      example: 10dc6ea0-e330-4bdf-a30c-1bc82cabdaac
    bin_network_mapping:
      required:
      - active
      - bank_network_id
      - bin_id
      - network_id
      type: object
      properties:
        active:
          type: boolean
          description: indicates whether mapping is active
        bank_network_id:
          type: string
          description: ID debit network uses to identify a bank
        bin_id:
          type: string
          description: The ID of the bank's BIN that uses this debit network
          format: uuid
        creation_time:
          type: string
          description: The timestamp representing when BIN network mapping was created
          format: date-time
          readOnly: true
        end_date:
          type: string
          description: The time when mapping becomes inactive
          format: date-time
        last_modified_time:
          type: string
          description: The timestamp representing when the BIN network mapping was
            last modified
          format: date-time
          readOnly: true
        network_id:
          type: string
          description: The ID of the debit_network associated with the BIN of the
            bank
          format: uuid
        start_date:
          type: string
          description: The time when mapping becomes active
          format: date-time
    bin_network_mapping_response:
      required:
      - active
      - bank_network_id
      - bin_id
      - creation_time
      - end_date
      - last_modified_time
      - network_id
      - start_date
      allOf:
      - $ref: '#/components/schemas/bin_network_mapping'
    bin_response:
      required:
      - account_range_length
      - bank_id
      - billing_ica
      - bin
      - bin_status
      - brand_product_code
      - card_brand
      - card_category
      - card_product_type
      - country
      - creation_time
      - currency
      - ica_bid
      - id
      - is_tokenization_enabled
      - last_modified_time
      - partner_id
      - processor
      allOf:
      - $ref: '#/components/schemas/bin'
    bin_response_list:
      allOf:
      - required:
        - bins
        type: object
        properties:
          bins:
            type: array
            description: Array of Bins
            items:
              $ref: '#/components/schemas/bin_response'
      - $ref: '#/components/schemas/paginated_response'
    bin_status:
      type: string
      description: Bin status
      enum:
      - ACTIVE
      - INACTIVE
    bin_update_request:
      type: object
      properties:
        bin_status:
          $ref: '#/components/schemas/bin_status'
        card_brand:
          $ref: '#/components/schemas/card_brand'
        card_category:
          $ref: '#/components/schemas/card_category'
        card_product_type:
          $ref: '#/components/schemas/card_product_type'
        end_date:
          type: string
          description: The time when bin is decommissioned
          format: date-time
        is_tokenization_enabled:
          type: boolean
          description: Controls whether bin allows tokenization
          example: true
        physical_card_format:
          $ref: '#/components/schemas/physical_card_format'
        start_date:
          type: string
          description: The time when bin goes live
          format: date-time
      additionalProperties: false
    brand_product_code:
      maxLength: 3
      minLength: 3
      type: string
      description: The Mastercard or Visa Product Code - 3 alpha-numeric characters
    business:
      type: object
      description: Represents a business customer.
      allOf:
      - required:
        - is_customer
        - status
      - $ref: '#/components/schemas/base'
    business_business_owner_relationship:
      type: object
      description: Denotes the relationship between specified businesses.
      allOf:
      - required:
        - additional_data
        - from_business_id
        - to_business_id
      - $ref: '#/components/schemas/patch_business_business_owner_relationship'
    business_id:
      type: string
      description: The unique identifier of a business
      format: uuid
      example: a826a11c-fe50-4797-969d-1e9624bed562
    business_id1:
      type: string
      description: |
        Unique ID for the business. Exactly one of `business_id` or `person_id` must be set.
      format: uuid
      example: 3b64667d-a1cd-4221-b51d-5ee661df373d
    business_id2:
      type: string
      description: |
        Unique ID for the business. Exactly one of `business_id` or `person_id` must be set.
      format: uuid
      example: 7087a6a6-706e-4007-88d5-3e8134e0675d
    business_id3:
      type: string
      description: |
        Unique ID for the business. Exactly one of `business_id` or `person_id` must be set.
      format: uuid
      example: 718e95ce-a36c-48b3-857b-1ae68ebb92c1
    business_id4:
      type: string
      description: |
        Unique ID for the business. Exactly one of `business_id` or `person_id` must be set.
      format: uuid
      example: 327458c4-d742-4b70-9176-f4bbcbbb42fe
    business_list:
      allOf:
      - required:
        - businesses
        type: object
        properties:
          businesses:
            type: array
            description: Array of businesses.
            items:
              $ref: '#/components/schemas/business'
      - $ref: '#/components/schemas/paginated_response'
    business1:
      title: Business
      type: object
      properties:
        creation_time:
          type: string
          format: date-time
        ein:
          type: string
        email:
          type: string
        entity_name:
          type: string
        formation_date:
          type: string
          format: date
        formation_state:
          type: string
        id:
          type: string
          format: uuid
        last_updated_time:
          type: string
          format: date-time
        phone_number:
          type: string
        status:
          type: string
        structure:
          type: string
        trade_names:
          type: array
          items:
            type: string
        verification_last_run:
          type: string
          format: date-time
        verification_status:
          type: string
    calculation_method:
      type: string
      enum:
      - COMPOUNDED_MONTHLY
    card_acceptor_model:
      type: object
      properties:
        address:
          maxLength: 255
          minLength: 0
          type: string
        city:
          maxLength: 40
          minLength: 0
          type: string
        country:
          type: string
        ecommerce_security_level_indicator:
          type: string
        mcc:
          maxLength: 5
          minLength: 0
          type: string
        name:
          maxLength: 50
          minLength: 0
          type: string
        partial_approval_capable:
          type: boolean
          default: false
        state:
          type: string
        zip:
          maxLength: 10
          minLength: 0
          type: string
      example:
        address: address
        city: city
        country: country
        ecommerce_security_level_indicator: ecommerce_security_level_indicator
        mcc: mcc
        name: name
        partial_approval_capable: false
        state: state
        zip: zip
    card_activation_request:
      required:
      - activation_code
      - customer_id
      type: object
      properties:
        activation_code:
          type: string
          description: An activation code provided with the card required to prove
            possession of the card
        customer_id:
          type: string
          description: The ID of the customer for which card is being activated
          format: uuid
          example: 29b106d0-8201-48a9-a517-40c9c01a01e2
    card_brand:
      type: string
      description: The brand of a card product
      enum:
      - MASTERCARD
      - VISA
    card_category:
      type: string
      description: The category of the card
      enum:
      - CONSUMER
      - COMMERCIAL
    card_change:
      required:
      - change_type
      - channel
      - id
      - state
      - updated_at
      - updated_by
      type: object
      properties:
        change_type:
          $ref: '#/components/schemas/change_type'
        channel:
          $ref: '#/components/schemas/change_channel'
        id:
          type: string
          description: Unique token
          format: uuid
          readOnly: true
          example: 7457d1bd-4f6d-4078-8cf9-2c12001df2c9
        memo:
          $ref: '#/components/schemas/card_status_reason_memo'
        reason:
          $ref: '#/components/schemas/card_status_reason_code'
        state:
          $ref: '#/components/schemas/card_change_state'
        updated_at:
          type: string
          description: Date of change
          format: date-time
          readOnly: true
        updated_by:
          type: string
          description: "ID of user who initiated the change, if done via Synctera\
            \ Admin System"
      description: Card change details
    card_change_state:
      oneOf:
      - $ref: '#/components/schemas/card_fulfillment_status'
      - $ref: '#/components/schemas/card_status'
      - $ref: '#/components/schemas/card_pin_status'
    card_changes_list:
      allOf:
      - required:
        - changes
        type: object
        properties:
          changes:
            type: array
            description: List of changes in descending chronological order
            items:
              $ref: '#/components/schemas/card_change'
      - $ref: '#/components/schemas/paginated_response'
    card_edit_request:
      type: object
      properties:
        card_status:
          $ref: '#/components/schemas/card_status_request'
        customer_id:
          type: string
          description: The ID of the customer to whom the card will be issued
          format: uuid
          example: 78329460-42d1-4058-b7cd-0219e159b9c1
        emboss_name:
          $ref: '#/components/schemas/emboss_name'
        memo:
          $ref: '#/components/schemas/card_status_reason_memo'
        metadata:
          $ref: '#/components/schemas/card_metadata'
        reason:
          $ref: '#/components/schemas/card_status_reason_code'
    card_format:
      required:
      - form
      type: object
      properties:
        form:
          type: string
          description: PHYSICAL or VIRTUAL.
          enum:
          - PHYSICAL
          - VIRTUAL
    card_fulfillment_status:
      type: string
      description: The status indicating the state of the card issuance
      enum:
      - ISSUED
      - REISSUED
      - ORDERED
      - REJECTED
      - REORDERED
      - SHIPPED
      - DIGITALLY_PRESENTED
    card_id:
      type: string
      description: The unique identifier of a card
      format: uuid
      example: 8f2edf2c-3346-4242-a5ba-c91a300a1d45
    card_image_details:
      required:
      - card_product_id
      - customer_id
      - id
      - status
      properties:
        card_product_id:
          $ref: '#/components/schemas/card_product_id'
        customer_id:
          $ref: '#/components/schemas/customer_id1'
        id:
          $ref: '#/components/schemas/card_image_id'
        rejection_memo:
          type: string
        rejection_reason:
          $ref: '#/components/schemas/card_image_rejection_reason'
        status:
          $ref: '#/components/schemas/card_image_status'
      example:
        card_product_id: c88a1c5f-67b5-4ebd-a833-202c7ae80c87
        rejection_memo: rejection_memo
        rejection_reason: COPYRIGHT
        id: ea4bd0d6-bca9-4037-b683-6bef686b46f5
        customer_id: 37a054b8-fbdb-44c6-ae20-091f94ada475
        status: NOT_UPLOADED
    card_image_details_list:
      allOf:
      - required:
        - images
        type: object
        properties:
          images:
            type: array
            description: Array of image details
            items:
              $ref: '#/components/schemas/card_image_details'
      - $ref: '#/components/schemas/paginated_response'
    card_image_id:
      type: string
      description: The unique identifier of a card image
      format: uuid
      example: ea4bd0d6-bca9-4037-b683-6bef686b46f5
    card_image_mode:
      type: string
      description: |
        The image mode of a card product. If the card product supports custom card images, this value determines how the images will be handled during card issuance. REQUIRED means that cards issued with this card product must have the ID of an image that has been uploaded. Note that the image does not necessarily have to have been approved prior to the issuance request. This mode is currently disabled. REQUIRED_APPROVED_FIRST means that cards issued with this card product must have the ID of an image that has been uploaded and approved.
      enum:
      - REQUIRED
      - REQUIRED_APPROVED_FIRST
    card_image_rejection_reason:
      type: string
      description: The category of reason that a card image was rejected
      enum:
      - COPYRIGHT
      - TRADEMARK
      - BRANDED
      - PROMOTIONAL
      - INAPPROPRIATE
      - OTHER
    card_image_status:
      type: string
      description: The status of a custom card image
      enum:
      - NOT_UPLOADED
      - UNREVIEWED
      - APPROVED
      - REJECTED
    card_issuance_request:
      type: object
      discriminator:
        propertyName: Form
        mapping:
          PHYSICAL: '#/components/schemas/physical_card_issuance_request'
          VIRTUAL: '#/components/schemas/virtual_card_issuance_request'
      oneOf:
      - $ref: '#/components/schemas/physical_card_issuance_request'
      - $ref: '#/components/schemas/virtual_card_issuance_request'
    card_list_response:
      allOf:
      - required:
        - cards
        type: object
        properties:
          cards:
            type: array
            description: Array of Cards
            items:
              $ref: '#/components/schemas/card_response'
      - $ref: '#/components/schemas/paginated_response'
    card_metadata:
      type: object
      additionalProperties:
        type: string
      description: Additional data to include in the request structured as key-value
        pairs
      x-schema-name: card_metadata
    card_options:
      type: object
      properties:
        billing_address:
          $ref: '#/components/schemas/billing_address'
        card_present:
          type: boolean
          default: false
        cvv:
          maxLength: 3
          minLength: 0
          type: string
        expiration:
          maxLength: 4
          minLength: 4
          type: string
    card_pin:
      type: object
      properties:
        pin:
          type: string
          description: The new PIN
    card_pin_status:
      type: string
      description: The status of the card PIN
      readOnly: true
      enum:
      - SET
      - CHANGED
    card_product:
      description: Card Product
      allOf:
      - $ref: '#/components/schemas/card_format'
      - required:
        - active
        - card_program_id
        - name
        - start_date
        type: object
        properties:
          active:
            type: boolean
            description: Indicates whether the Card Product is active
          card_program_id:
            type: string
            description: Card Program ID
            format: uuid
            example: 9d65691a-cf44-47c5-84b1-b494f9bd96b0
          color:
            pattern: "^[0-9A-F]{6}$"
            type: string
            description: Color code for dynamic card elements such as PAN and card
              holder name
          creation_time:
            type: string
            description: The timestamp representing when the Card Product was created
            format: date-time
            readOnly: true
          digital_wallet_tokenization:
            $ref: '#/components/schemas/digital_wallet_tokenization'
          end_date:
            type: string
            description: The time when the Card Product is decommissioned
            format: date-time
          gateway_id:
            type: string
            description: "Gateway ID, used if the Card Product is utilizing FinTech\
              \ authorization flow"
            format: uuid
            example: c48e19d1-9b55-4c8f-aa78-ee1c98d37798
          id:
            type: string
            description: Card Product ID
            format: uuid
            readOnly: true
            example: bec32d76-464e-40d1-bcbf-9d10ff7992dc
          image:
            type: boolean
            description: Indicates whether or not there is an overlay image of the
              card product available
          image_mode:
            $ref: '#/components/schemas/card_image_mode'
          last_modified_time:
            type: string
            description: The timestamp representing when the Card Product was last
              modified
            format: date-time
            readOnly: true
          name:
            maxLength: 40
            minLength: 1
            type: string
            description: The name of the Card Product
          orientation:
            type: string
            description: Card orientation
            enum:
            - HORIZONTAL
            - VERTICAL
          package_id:
            maxLength: 50
            minLength: 1
            type: string
            description: Card fulfillment provider’s package ID
          physical_card_format:
            $ref: '#/components/schemas/physical_card_format'
          return_address:
            $ref: '#/components/schemas/shipping'
          start_date:
            type: string
            description: The time when the Card Product goes live
            format: date-time
          txn_enhancer:
            $ref: '#/components/schemas/txn_enhancer'
    card_product_id:
      type: string
      description: The unique identifier of a cards product
      format: uuid
      example: c88a1c5f-67b5-4ebd-a833-202c7ae80c87
    card_product_internal:
      description: Card Product Internal
      allOf:
      - $ref: '#/components/schemas/card_product'
      - required:
        - account_range_id
        - auto_allocate_range
        - bank_id
        - bin_id
        - funding_source_id
        - partner_id
        type: object
        properties:
          account_range_id:
            type: string
            description: Account Range ID
            format: uuid
            example: bb77b12a-bf1b-4c0a-8374-86dc37c86ac8
          auto_allocate_range:
            type: boolean
            description: Identifies whether a new account range will be automatically
              allocated
          bank_id:
            type: integer
            description: Bank ID
          bin_id:
            type: string
            description: BIN ID
            format: uuid
            example: 95038801-9230-480c-ab25-12bdb04ed7f4
          funding_source_id:
            type: string
            description: Funding Source ID
            format: uuid
            example: 66b341a7-c403-47dd-90fa-bc41bfbd37f0
          partner_id:
            type: integer
            description: Partner ID
    card_product_list_response:
      allOf:
      - required:
        - card_products
        type: object
        properties:
          card_products:
            type: array
            description: Array of Card Products
            items:
              $ref: '#/components/schemas/card_product_response'
      - $ref: '#/components/schemas/paginated_response'
    card_product_response:
      required:
      - active
      - card_program_id
      - creation_time
      - digital_wallet_tokenization
      - end_date
      - form
      - id
      - last_modified_time
      - name
      - start_date
      allOf:
      - $ref: '#/components/schemas/card_product'
    card_product_type:
      type: string
      description: The type of the card product
      enum:
      - DEBIT
      - CREDIT
      - PREPAID
    card_product_update_request:
      type: object
      properties:
        digital_wallet_tokenization:
          $ref: '#/components/schemas/digital_wallet_tokenization'
      additionalProperties: false
    card_program:
      required:
      - bank_id
      - card_brand
      - card_category
      - card_product_type
      - name
      - partner_id
      type: object
      properties:
        active:
          type: boolean
          description: indicates whether program is active
        bank_id:
          type: integer
          description: The ID of the bank partner works with within this program
        card_brand:
          $ref: '#/components/schemas/card_brand'
        card_category:
          $ref: '#/components/schemas/card_category'
        card_product_type:
          $ref: '#/components/schemas/card_product_type'
        creation_time:
          type: string
          description: The timestamp representing when the program was created
          format: date-time
          readOnly: true
        end_date:
          type: string
          description: The time when program became inactive
          format: date-time
        id:
          type: string
          description: Program ID
          format: uuid
          readOnly: true
          example: 5ede6d61-8028-46ae-84bd-bac62bce0b4b
        last_modified_time:
          type: string
          description: The timestamp representing when the program was last modified
          format: date-time
          readOnly: true
        name:
          type: string
          description: Program name
        partner_id:
          type: integer
          description: The ID of the partner program belongs to
        start_date:
          type: string
          description: The time when program becomes active
          format: date-time
    card_program_id:
      type: string
      description: The unique identifier of a cards program
      format: uuid
      example: f913b366-4540-4b36-8246-68a6a0563fc9
    card_program_response:
      required:
      - active
      - bank_id
      - card_brand
      - card_category
      - card_product_type
      - creation_time
      - end_date
      - id
      - last_modified_time
      - name
      - partner_id
      - start_date
      allOf:
      - $ref: '#/components/schemas/card_program'
    card_program_response_list:
      allOf:
      - required:
        - programs
        type: object
        properties:
          programs:
            type: array
            description: Array of Card Programs
            items:
              $ref: '#/components/schemas/card_program_response'
      - $ref: '#/components/schemas/paginated_response'
    card_program_update_request:
      type: object
      properties:
        card_brand:
          $ref: '#/components/schemas/card_brand'
        card_category:
          $ref: '#/components/schemas/card_category'
        card_product_type:
          $ref: '#/components/schemas/card_product_type'
        end_date:
          type: string
          description: The time when program became inactive
          format: date-time
        name:
          type: string
          description: Program name
        start_date:
          type: string
          description: The time when program becomes active
          format: date-time
      additionalProperties: false
    card_response:
      discriminator:
        propertyName: Form
        mapping:
          PHYSICAL: '#/components/schemas/physical_card_response'
          VIRTUAL: '#/components/schemas/virtual_card_response'
      oneOf:
      - $ref: '#/components/schemas/physical_card_response'
      - $ref: '#/components/schemas/virtual_card_response'
    card_status:
      type: string
      description: The status indicating the card lifecycle state
      enum:
      - ACTIVE
      - UNACTIVATED
      - SUSPENDED
      - TERMINATED
      - IMAGE_PENDING
      - IMAGE_REJECTED
    card_status_object:
      title: Status
      required:
      - card_status
      type: object
      properties:
        card_status:
          $ref: '#/components/schemas/card_status'
        memo:
          $ref: '#/components/schemas/card_status_reason_memo'
        status_reason:
          $ref: '#/components/schemas/card_status_reason_code'
      description: The status of the card
    card_status_reason_code:
      type: string
      description: |
        The reason for the card status

        Code | Description
        --- | ---
        NEW | Card activated
        REQ | Requested by you
        INA | Dormant
        UNK | Invalid shipping address
        NEG | Negative account balance
        REV | Account under review
        SUS | Suspicious activity
        OUT | Activity outside program parameters
        FRD | Confirmed fraud
        MAT | Matched with an OFAC list
        LOS | Card reported lost
        CLO | Card was cloned
        COM | Account or card was compromised
        TMP | Awaiting customer confirmation
        PRC | Initiated by Processor
        ISS | Initiated by Issuer
        EXP | Card expired
        KYC | Failed KYC
        INF | Information was validated
        ACT | Account activity was validated
        AUX | Initiated by a third party
        PIN | PIN try limit reached
        STO | Card reported stolen
        ADD | Address issue
        NAM | Name issue
        SSN | SSN issue
        DOB | DOB issue
        EML | Email issue
        PHO | Phone issue
        FUL | Account/fulfillment mismatch
        OTH | Other
      enum:
      - NEW
      - REQ
      - INA
      - UNK
      - NEG
      - REV
      - SUS
      - OUT
      - FRD
      - MAT
      - LOS
      - CLO
      - COM
      - TMP
      - PRC
      - ISS
      - EXP
      - KYC
      - INF
      - ACT
      - AUX
      - PIN
      - STO
      - ADD
      - NAM
      - SSN
      - DOB
      - EML
      - PHO
      - FUL
      - OTH
    card_status_reason_memo:
      maxLength: 255
      type: string
      description: Additional details about the reason for the status change
    card_status_request:
      type: string
      description: The status indicating the card lifecycle state
      enum:
      - ACTIVE
      - SUSPENDED
      - TERMINATED
    card_widget_url_response:
      type: object
      properties:
        url:
          type: string
          format: uri
      description: A URL for activate card and set pin widgets
      example:
        url: http://example.com/aeiou
    change_channel:
      type: string
      description: How the change was submitted
      enum:
      - API
      - ADMIN
      - SYSTEM
      - FRAUD
    change_type:
      type: string
      description: The category of card change
      enum:
      - STATUS
      - FULFILLMENT
      - PIN
    clearing_model:
      required:
      - amount
      - original_transaction_id
      type: object
      properties:
        amount:
          type: integer
          description: The amount of the transaction in the smallest whole denomination
            of the applicable currency (eg. For USD use cents)
        card_acceptor:
          $ref: '#/components/schemas/card_acceptor_model'
        force_post:
          type: boolean
          default: false
        is_refund:
          type: boolean
          default: false
        mid:
          maxLength: 50
          minLength: 1
          type: string
        network_fees:
          type: array
          items:
            $ref: '#/components/schemas/network_fee_model'
        original_transaction_id:
          type: string
          format: uuid
      example:
        amount: 80
        card_acceptor:
          address: address
          city: city
          country: country
          ecommerce_security_level_indicator: ecommerce_security_level_indicator
          mcc: mcc
          name: name
          partial_approval_capable: false
          state: state
          zip: zip
        force_post: false
        is_refund: false
        mid: mid
        network_fees:
        - amount: 123
          credit_debit: C
          type: ISSUER_FEE
        - amount: 123
          credit_debit: C
          type: ISSUER_FEE
        original_transaction_id: original_transaction_id
    client_token:
      title: Client Token
      type: object
      properties:
        client_token:
          type: string
          example: 759bf3b8-8d4b-47bf-ae43-a8e43194651b
      description: "A short-lived, one-time token used for accessing client PINs/PANs"
      example:
        client_token: 759bf3b8-8d4b-47bf-ae43-a8e43194651b
    contest_ach:
      required:
      - type
      type: object
      properties:
        type:
          type: string
          enum:
          - contested_misrouted
          - contested_untimely
          - contested_timely_original
          - contested_corrected
          - contested_not_duplicate
          - contested_no_errors
          - contested_non_acceptance
      description: Contested return
    country_code:
      maxLength: 2
      minLength: 2
      type: string
      description: ISO-3166-1 Alpha-2 country code
      example: VI
    create_card_image_request:
      required:
      - card_product_id
      - customer_id
      type: object
      properties:
        card_product_id:
          $ref: '#/components/schemas/card_product_id'
        customer_id:
          $ref: '#/components/schemas/customer_id1'
    create_gateway_request:
      required:
      - url
      type: object
      properties:
        active:
          type: boolean
          description: Current status of the Authorization gateway
          default: true
        custom_headers:
          $ref: '#/components/schemas/gateway_custom_headers'
        url:
          maxLength: 1000
          type: string
          description: URL of the Authorization gateway
          format: uri
    create_webhook_request:
      allOf:
      - $ref: '#/components/schemas/webhook_request'
      - required:
        - config
        - events
        - name
        type: object
    currency_code:
      maxLength: 3
      minLength: 3
      type: string
      description: ISO 4217  Alpha-3 currency code
      example: USD
    custom_headers:
      type: object
      properties:
        my_header_name_1:
          type: string
        my_header_name_2:
          type: string
        my_header_name_3:
          type: string
    customer:
      title: Customer
      type: object
      description: Details of a customer
      allOf:
      - required:
        - status
        properties:
          dob:
            type: string
            description: Customer's date of birth in RFC 3339 full-date format (YYYY-MM-DD)
            format: date
            example: 2000-01-01
          first_name:
            type: string
            description: Customer's first name
            example: Trent
          last_name:
            type: string
            description: Customer's last name
            example: Bashirian
          status:
            type: string
            description: Customer's status
            enum:
            - ACTIVE
            - ESCHEAT
            - DECEASED
            - DENIED
            - DORMANT
            - FROZEN
            - INACTIVE
            - PROSPECT
            - SANCTION
      - $ref: '#/components/schemas/base_person'
    customer_alias:
      title: Customer Alias
      type: object
      properties:
        alias_info:
          type: object
        alias_name:
          type: string
        alias_source:
          type: string
        alias_type:
          type: string
        customer_alias_id:
          type: string
          format: uuid
        customer_id:
          type: string
          format: uuid
      description: Represents a customer's alias
    customer_alias_list:
      allOf:
      - required:
        - customer_alias
        type: object
        properties:
          customer_alias:
            type: array
            description: Array of customer alias
            items:
              $ref: '#/components/schemas/customer_alias'
    customer_id:
      type: string
      format: uuid
      example: 6f43f73d-08b9-426c-afcd-233ce7cb5994
    customer_id1:
      type: string
      description: The unique identifier of a customer
      format: uuid
      example: 37a054b8-fbdb-44c6-ae20-091f94ada475
    customer_in_path:
      type: object
      discriminator:
        propertyName: Status
        mapping:
          ACTIVE: '#/components/schemas/customer'
          DECEASED: '#/components/schemas/customer'
          DENIED: '#/components/schemas/customer'
          DORMANT: '#/components/schemas/customer'
          ESCHEAT: '#/components/schemas/customer'
          FROZEN: '#/components/schemas/customer'
          INACTIVE: '#/components/schemas/customer'
          PROSPECT: '#/components/schemas/prospect'
          SANCTION: '#/components/schemas/customer'
      oneOf:
      - $ref: '#/components/schemas/customer'
      - $ref: '#/components/schemas/prospect'
    customer_kyc_status:
      type: string
      description: Customer's KYC status
      enum:
      - UNVERIFIED
      - REVIEW
      - PROVIDER_FAILURE
      - ACCEPTED
      - REJECTED
      - PROVISIONAL
    customer_list:
      allOf:
      - required:
        - customers
        type: object
        properties:
          customers:
            type: array
            description: Array of Customers
            items:
              $ref: '#/components/schemas/customer_in_path'
      - $ref: '#/components/schemas/paginated_response'
    customer_type:
      title: Customer Type
      type: string
      description: Customer type
      readOnly: true
      enum:
      - BUSINESS
      - PERSONAL
    customer_verification:
      title: PersonVerification
      required:
      - customer_consent
      - verification_type
      type: object
      properties:
        customer_consent:
          type: boolean
          description: |
            Whether this customer has consented to a KYC check.
        customer_ip_address:
          pattern: "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
          type: string
          description: IP address of the customer being verified.
          example: 121.24.215.6
        document_id:
          type: string
          description: |
            The ID of the uploaded government-issued identification document provided by the Socure SDK.
          example: 1ab2c3de-fg45-6789-a01b-23c45678defg
        verification_type:
          type: array
          description: List of possible checks to run on a customer.
          items:
            $ref: '#/components/schemas/verification_type'
      example:
        customer_consent: true
        customer_ip_address: 66.152.213.183
        verification_type:
        - kyc
    customer_verification_result:
      title: CustomerVerificationResult
      required:
      - result
      - verification_time
      - verification_type
      type: object
      properties:
        id:
          type: string
          description: Unique ID for this verification result.
          format: uuid
          readOnly: true
          example: 38350da4-5f2f-49ce-8ddd-130637140be9
        issues:
          type: array
          description: |
            List of potential problems found. These are subject to change.
          readOnly: true
          deprecated: true
          items:
            type: string
            example: "R186: Global Watchlist sources selected are correlated with\
              \ the input identifiers"
        raw_response:
          $ref: '#/components/schemas/raw_response'
        result:
          type: string
          description: The determination of this verification.
          example: ACCEPTED
          enum:
          - ACCEPTED
          - REJECTED
          - REVIEW
          - PROVIDER_FAILURE
          - PROVISIONAL
        vendor_info:
          $ref: '#/components/schemas/verification_vendor_info'
        verification_time:
          type: string
          description: The date and time the verification was completed.
          format: date-time
        verification_type:
          $ref: '#/components/schemas/verification_type'
      description: Verification result
      example:
        result: ACCEPTED
        verification_time: 2000-01-23T04:56:07.000+00:00
        verification_type: kyc
        id: 38350da4-5f2f-49ce-8ddd-130637140be9
        raw_response:
          provider: SOCURE
          raw_data: "{}"
        vendor_info: ""
        issues:
        - "R186: Global Watchlist sources selected are correlated with the input identifiers"
        - "R186: Global Watchlist sources selected are correlated with the input identifiers"
    customer_verification_result_list:
      allOf:
      - required:
        - verifications
        type: object
        properties:
          verifications:
            type: array
            description: Array of verification results.
            items:
              $ref: '#/components/schemas/customer_verification_result'
      - $ref: '#/components/schemas/paginated_response'
    customer_verify_response:
      allOf:
      - required:
        - kyc_status
        - verifications
        type: object
        properties:
          kyc_status:
            $ref: '#/components/schemas/customer_kyc_status'
          verifications:
            type: array
            description: Array of verification results.
            items:
              $ref: '#/components/schemas/customer_verification_result'
      - $ref: '#/components/schemas/paginated_response'
    dc_sign:
      type: string
      description: The `dc_sign` represents the direction money was moved.
      enum:
      - debit
      - credit
    debit_network:
      type: object
      properties:
        active:
          type: boolean
          description: indicates whether debit network is active
        creation_time:
          type: string
          description: The timestamp representing when the debit network was created
          format: date-time
          readOnly: true
        end_date:
          type: string
          description: The time when debit network became inactive
          format: date-time
        id:
          type: string
          description: Debit Network ID
          format: uuid
          readOnly: true
          example: 99e49c20-6e0c-48ab-81c2-8a8ca7ccc839
        last_modified_time:
          type: string
          description: The timestamp representing when the debit network was last
            modified
          format: date-time
          readOnly: true
        name:
          type: string
          description: The name describing the debit network
        start_date:
          type: string
          description: The time when debit network goes live
          format: date-time
    debit_network_create_request:
      required:
      - name
      allOf:
      - $ref: '#/components/schemas/debit_network'
    debit_network_id:
      type: string
      description: The unique identifier of a debit network
      format: uuid
      example: acdc6bd7-5c79-4739-b898-a95a21cac1b4
    debit_network_response:
      required:
      - active
      - creation_time
      - id
      - last_modified_time
      - name
      allOf:
      - $ref: '#/components/schemas/debit_network'
    debit_network_response_list:
      allOf:
      - required:
        - debit_networks
        type: object
        properties:
          debit_networks:
            type: array
            description: Array of debit networks
            items:
              $ref: '#/components/schemas/debit_network_response'
    delete_response:
      title: Deleted Object
      type: object
      properties:
        id:
          type: string
          description: Object ID
          format: uuid
        resource:
          type: string
          description: The resource name
      description: Deleted object information
      example:
        resource: resource
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
    deposit:
      title: Remote Check Deposit
      required:
      - account_id
      - back_image_id
      - check_amount
      - date_captured
      - date_processed
      - deposit_amount
      - deposit_currency
      - front_image_id
      - id
      - status
      - transaction_id
      - vendor_info
      type: object
      properties:
        account_id:
          type: string
          description: The ID of the account
          format: uuid
          example: 605deb43-f8d5-466d-bf10-dc558b632588
        back_image_id:
          type: string
          description: ID of the uploaded image of the back of the check
          format: uuid
          example: da2b02b8-1f21-4f3a-b2e0-41eb8ccd8254
        business_id:
          $ref: '#/components/schemas/business_id3'
        check_amount:
          minimum: 1
          type: integer
          description: Amount on check in ISO 4217 minor currency units
          example: 8445
        creation_time:
          type: string
          format: date-time
          readOnly: true
          example: 2022-01-18T17:54:12Z
        date_captured:
          type: string
          description: "Date the deposit was captured, in RFC 3339 format"
          format: date-time
          readOnly: true
          example: 2022-01-02T03:04:05.678Z
        date_processed:
          type: string
          description: "Date the deposit was processed, in RFC 3339 format"
          format: date-time
          readOnly: true
          example: 2022-01-02T03:04:05.678Z
        deposit_amount:
          type: integer
          description: Amount deposited in ISO 4217 minor currency units
          readOnly: true
          example: 4391
        deposit_currency:
          type: string
          description: ISO 4217 currency code for the deposit amount
          example: USD
        front_image_id:
          type: string
          description: ID of the uploaded image of the front of the check
          format: uuid
          example: 654cb103-14a6-43de-a76f-7458f267d467
        id:
          type: string
          description: Remote Check Deposit ID
          format: uuid
          readOnly: true
          example: 6bc8921a-7ece-4d00-9c74-cbe27ff6a066
        last_updated_time:
          type: string
          format: date-time
          readOnly: true
          example: 2022-01-18T17:54:12Z
        metadata:
          $ref: '#/components/schemas/metadata'
        person_id:
          $ref: '#/components/schemas/person_id'
        status:
          type: string
          description: The status of the deposit
          readOnly: true
          enum:
          - SUBMITTED
          - PENDING
          - FAILED
          - REJECTED
        transaction_id:
          type: string
          description: The ID of the transaction associated with this deposit
          format: uuid
          readOnly: true
          example: 2d4ff386-adb9-42cc-90ae-8eb82c62702b
        vendor_info:
          $ref: '#/components/schemas/vendor_info1'
      description: Deposit using remote deposit capture
      example:
        creation_time: 2022-01-18T17:54:12Z
        transaction_id: 2d4ff386-adb9-42cc-90ae-8eb82c62702b
        deposit_amount: 4391
        metadata: {}
        deposit_currency: USD
        front_image_id: 654cb103-14a6-43de-a76f-7458f267d467
        date_captured: 2022-01-02T03:04:05.678Z
        vendor_info: ""
        account_id: 605deb43-f8d5-466d-bf10-dc558b632588
        back_image_id: da2b02b8-1f21-4f3a-b2e0-41eb8ccd8254
        last_updated_time: 2022-01-18T17:54:12Z
        check_amount: 8445
        id: 6bc8921a-7ece-4d00-9c74-cbe27ff6a066
        date_processed: 2022-01-02T03:04:05.678Z
        business_id: 718e95ce-a36c-48b3-857b-1ae68ebb92c1
        person_id: 7efcb465-9e96-473d-aad2-d4e9dcb204cf
        status: SUBMITTED
    deposit_feedback:
      title: Remote Check Deposit feedback
      type: object
      properties:
        feedback:
          type: string
          description: The value of the feedback for the deposit transaction
          enum:
          - APPROVE
          - REJECT
      description: Approve or reject deposit transactions
    deposit_list:
      allOf:
      - required:
        - deposits
        type: object
        properties:
          deposits:
            type: array
            description: Array of  Remote Check Deposits
            items:
              $ref: '#/components/schemas/deposit'
      - $ref: '#/components/schemas/paginated_response'
    detail:
      type: object
      properties:
        description:
          type: string
          description: Human-readable description explaining the result.
          example: Email address is correlated with the individual's name
        label:
          type: string
          description: Human-readable version of the category.
          example: Email
        result:
          type: string
          description: |
            The result of the individual check. One of the following:
            * `PASS` – the check passed contributing to a positive outcome (or accepted verification result).
            * `WARN` – the results of the check were inconclusive and might require review.
            * `FAIL` – the check failed and might result in a failing outcome (or rejected verification_result).
          example: PASS
          enum:
          - PASS
          - WARN
          - FAIL
      description: An object containing information about an individual check performed.
      readOnly: true
    details:
      type: array
      description: |
        A list of individual checks done as part of the due diligence process  for the verification type.
      readOnly: true
      items:
        $ref: '#/components/schemas/detail'
      x-schema-name: details
    device_type:
      type: string
      description: The type of device into which the digital wallet token will be
        provisioned.
      enum:
      - MOBILE_PHONE
      - WATCH
      - TABLET
    digital_wallet_token_address_verification:
      type: object
      properties:
        validate:
          type: boolean
          example: false
    digital_wallet_token_edit_request:
      required:
      - token_status
      type: object
      properties:
        token_status:
          type: string
          description: The status indicating the digital wallet token lifecycle state
          enum:
          - ACTIVE
          - SUSPENDED
          - TERMINATED
    digital_wallet_token_id:
      type: string
      description: The unique identifier of a digital wallet token
      format: string
    digital_wallet_token_response:
      type: object
      properties:
        approved_time:
          type: string
          format: date-time
        card_id:
          type: string
          description: Card ID of the Digital wallet Token
          format: uuid
          example: c6eaab14-4f71-4370-8625-8df3d9307804
        device_id:
          maxLength: 124
          type: string
          description: The user’s Android device ID; the device’s unique identifier.
        device_type:
          type: string
          description: Type of the device where the Digital Wallet Token is used in
          enum:
          - MOBILE_PHONE
          - WATCH
          - TABLET
          - MOBILE_PHONE_OR_TABLET
          - VEHICLE
          - APPLIANCE
          - LAPTOP
          - GAMING_DEVICE
          - UNKNOWN
        id:
          type: string
          description: Digital Wallet Token ID
          format: uuid
          example: 475ea745-e775-49d3-96a5-812d4a766317
        last_modified_time:
          type: string
          format: date-time
        requested_time:
          type: string
          format: date-time
        state:
          $ref: '#/components/schemas/digital_wallet_token_state'
        type:
          type: string
          description: Type of the Digital Wallet
          enum:
          - APPLE_PAY
          - ANDROID_PAY
          - SAMSUNG_PAY
      example:
        requested_time: 2000-01-23T04:56:07.000+00:00
        last_modified_time: 2000-01-23T04:56:07.000+00:00
        device_id: device_id
        approved_time: 2000-01-23T04:56:07.000+00:00
        device_type: MOBILE_PHONE
        id: 475ea745-e775-49d3-96a5-812d4a766317
        state: REQUESTED
        type: APPLE_PAY
        card_id: c6eaab14-4f71-4370-8625-8df3d9307804
    digital_wallet_token_state:
      type: string
      description: Current status of the Digital Wallet Token
      enum:
      - REQUESTED
      - REQUEST_DECLINED
      - ACTIVE
      - SUSPENDED
      - TERMINATED
    digital_wallet_tokenization:
      type: object
      properties:
        provisioning_controls:
          $ref: '#/components/schemas/provisioning_controls'
    disclosure:
      type: object
      description: Represents a disclosure.
      allOf:
      - required:
        - disclosure_date
        - event_type
        - type
        - version
      - $ref: '#/components/schemas/base_disclosure'
    disclosure_list:
      allOf:
      - required:
        - disclosures
        type: object
        properties:
          disclosures:
            type: array
            description: Array of disclosures.
            items:
              $ref: '#/components/schemas/disclosure'
      - $ref: '#/components/schemas/paginated_response'
    disclosure_response:
      title: List of Customer Disclosures
      type: object
      properties:
        disclosures:
          type: array
          description: List of the customer's disclosures
          items:
            $ref: '#/components/schemas/disclosure1'
      description: Represents all customer disclosures
      example:
        disclosures:
        - creation_time: 2021-05-01T23:59:59Z
          event_type: VIEWED
          last_updated_time: 2021-05-01T23:59:59Z
          id: 3bc9a6be-36a2-4121-9c7f-338e14923e00
          type: REG_DD
          version: v1.1
          timestamp: 2021-05-01T23:59:59Z
        - creation_time: 2021-05-01T23:59:59Z
          event_type: VIEWED
          last_updated_time: 2021-05-01T23:59:59Z
          id: 3bc9a6be-36a2-4121-9c7f-338e14923e00
          type: REG_DD
          version: v1.1
          timestamp: 2021-05-01T23:59:59Z
    disclosure_type:
      type: string
      description: |
        Describes the regulatory requirement that triggered the disclosure.
        One of the following:
        * `REG_DD` –
            US regulation that implements the Truth in Savings Act,
            to inform customers about the terms and rules for a deposit account.
        * `KYC_DATA_COLLECTION` –
            Document advising the customer that you will collect their personal information
            (name, date of birth, tax ID, etc.)
            and will be validating their information against external data/documentation.
        * `REG_E` –
            US regulation that implements the Electronic Funds Transfer Act:
            covers liability for electronic transactions,
            disputes for fraudulent or unrecognized electronic transactions,
            and consent for electronic debits from a consumer's account.
        * `REG_CC` –
            US regulation that implements the Expedited Funds Availability Act:
            describes standards for when a financial institution
            makes funds available in a deposit account.
        * `E_SIGN` –
            US law with rules around electronic agreements/documents/disclosures:
            used to obtain consent from consumers to receive electronic communications
            (agreements, disclosures, statements, etc) about their accounts.
        * `PRIVACY_NOTICE` –
            Document that tells customers what is done with their non-public information,
            who it is shared with, how is is secured,
            and how they can opt out of it being shared beyond Synctera.
        * `TERMS_AND_CONDITIONS` –
            A detailed agreement between you and the consumer for the
            structure, terms, fees, charges, rates of the product or service,
            and the rules for the relationship between you and the consumer.
      enum:
      - REG_DD
      - KYC_DATA_COLLECTION
      - REG_E
      - REG_CC
      - E_SIGN
      - PRIVACY_NOTICE
      - TERMS_AND_CONDITIONS
    disclosure1:
      title: Disclosure
      required:
      - event_type
      - timestamp
      - type
      - version
      type: object
      properties:
        creation_time:
          type: string
          format: date-time
          readOnly: true
          example: 2021-05-01T23:59:59Z
        event_type:
          type: string
          example: VIEWED
          enum:
          - DISPLAYED
          - VIEWED
          - ACKNOWLEDGED
        id:
          type: string
          description: Disclosure ID
          format: uuid
          example: 3bc9a6be-36a2-4121-9c7f-338e14923e00
        last_updated_time:
          type: string
          format: date-time
          readOnly: true
          example: 2021-05-01T23:59:59Z
        timestamp:
          type: string
          description: Date of disclosure
          format: date-time
          example: 2021-05-01T23:59:59Z
        type:
          type: string
          description: Disclosure Type
          example: REG_DD
          enum:
          - REG_DD
          - KYC_DATA_COLLECTION
          - REG_E
          - REG_CC
          - E_SIGN
          - PRIVACY_NOTICE
          - TERMS_AND_CONDITIONS
        version:
          type: string
          description: Disclosure Version
          example: v1.1
      description: Represents a disclosure
      example:
        creation_time: 2021-05-01T23:59:59Z
        event_type: VIEWED
        last_updated_time: 2021-05-01T23:59:59Z
        id: 3bc9a6be-36a2-4121-9c7f-338e14923e00
        type: REG_DD
        version: v1.1
        timestamp: 2021-05-01T23:59:59Z
    dishonor_ach:
      required:
      - type
      type: object
      properties:
        field_errors:
          type: array
          items:
            type: string
            enum:
            - account_number
            - original_trace_number
            - amount
            - identification_number
            - transaction_code
            - company_identification
            - effective_date
        type:
          type: string
          enum:
          - dishonored_misrouted
          - dishonored_erroneous_debit
          - dishonored_duplicate
          - dishonored_untimely
          - dishonored_field_errors
          - dishonored_not_requested
      description: Dishonored return
    emboss_name:
      required:
      - line_1
      type: object
      properties:
        line_1:
          type: string
          description: line 1
          example: Edgar Denesik
        line_2:
          type: string
          description: line 2
          example: Mohr - Braun
      description: "The customer details to emboss on the card - Defaults to customer\
        \ first and last name. Is limited to 21 characters. Valid characters are A-Z,\
        \ a-z, 0-9, space ( ), period (.), comma (,), forward slash (/), hyphen (-),\
        \ ampersand (&), single quote (')."
    employment:
      title: Customer employment record
      required:
      - employer_name
      type: object
      properties:
        employer_name:
          type: string
          description: Name of customer's employer.
          example: "ABC, Inc."
        employment_from:
          type: string
          description: First day of employment.
          format: date-time
          example: 2016-05-11T00:00:00Z
        employment_hours:
          maximum: 80
          minimum: 0
          type: number
          description: Number of hours spent per week working for specified employment.
          format: float
          example: 37.5
        employment_income:
          type: integer
          description: Annual income in cents.
          example: 5000000
        employment_income_currency:
          type: string
          description: |
            The 3-letter alphabetic ISO 4217 code for the currency in which the employee was paid.
          example: USD
        employment_info:
          type: object
          description: |
            A collection of arbitrary key-value pairs providing additional information about this employment relationship.
        employment_occupation:
          type: string
          description: "Customer's work title, profession, or field."
          example: clerk
        employment_to:
          type: string
          description: Last day of employment.
          format: date-time
          example: 2018-11-19T00:00:00Z
        id:
          type: string
          description: Unique ID for this employment relationship.
          format: uuid
          readOnly: true
      description: |
        A period of time in which a customer is (was) employed by a particular employer.
      example:
        employment_to: 2018-11-19T00:00:00Z
        employment_occupation: clerk
        employment_from: 2016-05-11T00:00:00Z
        employment_income: 5000000
        employment_hours: 37.5
        employment_income_currency: USD
        employer_name: "ABC, Inc."
        employment_info: {}
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
    employment_list:
      allOf:
      - required:
        - employment
        type: object
        properties:
          employment:
            type: array
            description: Array of customer employment records.
            items:
              $ref: '#/components/schemas/employment'
      - $ref: '#/components/schemas/paginated_response'
    environment:
      type: string
      description: Indicates which environment the workspace belongs to
      enum:
      - SANDBOX
      - LIVE_TESTING
      - PROD_LITE
      - PROD
    error:
      title: Standard error response (RFC 7807 problem report)
      type: object
      properties:
        detail:
          type: string
          description: a human-readable string explaining this particular error
          example: "missing required fields: first_name, dob"
        status:
          type: integer
          description: the HTTP status code for this response
          example: 400
        title:
          type: string
          description: a human-readable string for this general category of error
          example: Bad Request Body
        type:
          type: string
          description: a URI that identifies this general category of error
          example: https://dev.synctera.com/errors/bad-request-body
    event:
      title: Webhook event
      type: object
      properties:
        event_resource:
          type: string
          description: |
            Json string of object associated with the event. For example, if your event is ACCOUNT.CREATED, You can refer to Acccount to parse the account event to obtain the ID, status etc.
        event_resource_changed_fields:
          type: string
          description: |
            Json string of object associated with the event related to a resource change. This only contains those fields that have value changed on the event, and the field values are prior to the resource change event.
        event_time:
          type: string
          description: Timestamp of the current event raised
          format: date-time
        id:
          type: string
          description: Unique event ID of the webhook request. Use event endpoints
            to get more event summary data
          format: uuid
          readOnly: true
        metadata:
          maxLength: 1024
          type: string
          description: Metadata that stored in the webhook subscription
        response_history:
          type: array
          description: Response history of the webhook request
          items:
            $ref: '#/components/schemas/response_history_item'
        status:
          type: string
          description: Current event status. Failing event will keep retry until it
            is purged.
          enum:
          - RUNNING
          - SUCCESS
          - RETRYING
        type:
          $ref: '#/components/schemas/event_type_explicit'
        url:
          maxLength: 1024
          type: string
          description: URL that the current event will be sent to
        webhook_id:
          type: string
          description: Webhook the current event belongs to
          format: uuid
      description: Webhook event object
      example:
        metadata: metadata
        response_history:
        - sent_time: 2000-01-23T04:56:07.000+00:00
          code: 0
          response_body: response_body
          response_time: 2000-01-23T04:56:07.000+00:00
        - sent_time: 2000-01-23T04:56:07.000+00:00
          code: 0
          response_body: response_body
          response_time: 2000-01-23T04:56:07.000+00:00
        webhook_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        event_resource_changed_fields: event_resource_changed_fields
        event_resource: event_resource
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        type: ACCOUNT.CREATED
        event_time: 2000-01-23T04:56:07.000+00:00
        url: url
        status: RUNNING
    event_list:
      allOf:
      - required:
        - event_list
        type: object
        properties:
          event_list:
            type: array
            description: Array of events
            items:
              $ref: '#/components/schemas/event'
      - $ref: '#/components/schemas/paginated_response'
    event_resend:
      required:
      - event_id
      - event_type
      type: object
      properties:
        event_id:
          type: string
          description: id of the event notification you want to resend
          format: uuid
          example: 70ebadaa-5c06-41a6-9abc-1d4733f67261
        event_type:
          $ref: '#/components/schemas/event_type'
    event_trigger:
      title: Webhook event trigger
      type: object
      properties:
        event_resource:
          type: string
          description: |
            Json string of object associated with the event. For example, if your event is ACCOUNT.CREATED, You can refer to Acccount to parse the account event to obtain the ID, status etc.
          deprecated: true
        event_resource_changed_fields:
          type: string
          description: |
            Json string of object associated with the event related to a resource change. This only contains those fields that have value changed on the event, and the field values are prior to the resource change event.
          deprecated: true
        event_time:
          type: string
          description: Timestamp of the current event raised
          format: date-time
        id:
          type: string
          description: Unique event ID of the webhook request. Use event endpoints
            to get more event summary data
          format: uuid
          readOnly: true
        metadata:
          maxLength: 1024
          type: string
          description: Metadata that stored in the webhook subscription
          deprecated: true
        response_history:
          type: array
          description: Response history of the webhook request
          deprecated: true
          items:
            $ref: '#/components/schemas/response_history_item'
        status:
          type: string
          description: Current event status. Failing event will keep retry until it
            is purged.
          deprecated: true
          enum:
          - RUNNING
          - SUCCESS
          - RETRYING
        type:
          $ref: '#/components/schemas/event_type_explicit'
        url:
          maxLength: 1024
          type: string
          description: URL that the current event will be sent to
          deprecated: true
        webhook_id:
          type: string
          description: Webhook the current event belongs to
          format: uuid
          deprecated: true
      description: "Webhook event object that will be returned after triggering the\
        \ given event. Only id, type and event_time will have value."
      example:
        metadata: metadata
        response_history:
        - sent_time: 2000-01-23T04:56:07.000+00:00
          code: 0
          response_body: response_body
          response_time: 2000-01-23T04:56:07.000+00:00
        - sent_time: 2000-01-23T04:56:07.000+00:00
          code: 0
          response_body: response_body
          response_time: 2000-01-23T04:56:07.000+00:00
        webhook_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        event_resource_changed_fields: event_resource_changed_fields
        event_resource: event_resource
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        type: ACCOUNT.CREATED
        event_time: 2000-01-23T04:56:07.000+00:00
        url: url
        status: RUNNING
    event_type:
      type: string
      description: The reason for issuing/re-issuing a card
      enum:
      - usertransition
      - businesstransition
      - cardtransition
      - transaction
      - digitalwallettokentransition
      - chargebacktransition
      - commandomodetransition
      - casetransition
      - directdeposittransition
      - banktransfertransition
    event_type_explicit:
      type: string
      description: All the webhook event types
      enum:
      - ACCOUNT.CREATED
      - ACCOUNT.UPDATED
      - CARD.UPDATED
      - CARD.IMAGE.UPDATED
      - CUSTOMER.UPDATED
      - CUSTOMER.KYC_OUTCOME.UPDATED
      - BUSINESS.VERIFICATION_OUTCOME.UPDATED
      - PERSON.VERIFICATION_OUTCOME.UPDATED
      - INTEREST.MONTHLY_PAYOUT
      - INTERNAL_TRANSFER.SUCCEEDED
      - TRANSACTION.POSTED.CREATED
      - TRANSACTION.POSTED.UPDATED
      - TRANSACTION.PENDING.CREATED
      - TRANSACTION.PENDING.UPDATED
      - CARD.DIGITALWALLETTOKEN.CREATED
      - CARD.DIGITALWALLETTOKEN.UPDATED
      - PAYMENT_SCHEDULE.CREATED
      - PAYMENT_SCHEDULE.UPDATED
      - PAYMENT_SCHEDULE.PAYMENT.CREATED
      - STATEMENT.CREATED
      - EXTERNAL_CARD.CREATED
    event_type_wildcard:
      type: string
      enum:
      - ACCOUNT.*
      - CARD.*
      - CUSTOMER.*
      - BUSINESS.*
      - PERSON.*
      - INTEREST.*
      - INTERNAL_TRANSFER.*
      - TRANSACTION.*
      - PAYMENT_SCHEDULE.*
      - STATEMENT.*
      - EXTERNAL_CARD.*
    event_type1:
      oneOf:
      - $ref: '#/components/schemas/event_type_explicit'
      - $ref: '#/components/schemas/event_type_wildcard'
    ext_account_customer_type:
      type: string
      description: |
        The type of customer in the external financial institution. _Not_ necessarily the customer type on Synctera's platform: a business customer might link to the owner's personal account at an external financial institution.
      enum:
      - PERSONAL
      - BUSINESS
    external_account:
      title: External account
      required:
      - account_identifiers
      - account_owner_names
      - creation_time
      - id
      - last_updated_time
      - routing_identifiers
      - status
      - type
      - verification
      type: object
      properties:
        account_identifiers:
          $ref: '#/components/schemas/account_identifiers'
        account_owner_names:
          type: array
          description: |
            The names of the account owners. Values may be masked, in which case the array will be empty.
          items:
            type: string
            example: Norman Walsh PhD
        business_id:
          type: string
          description: |
            The identifier for the business customer associated with this external account. Exactly one of `business_id` or `customer_id` will be returned.
          format: uuid
          example: 2752e077-14f5-4caf-8d38-361c50a53873
        creation_time:
          type: string
          format: date-time
          example: 2022-01-01T00:00:00Z
        customer_id:
          type: string
          description: |
            The identifier for the personal customer associated with this external account. Exactly one of `customer_id` or `business_id` will be returned.
          format: uuid
          example: aac579e0-e6ff-4053-a137-33fb1d77ea88
        id:
          type: string
          description: External account unique identifier
          format: uuid
          readOnly: true
          example: 3aeb2292-c681-4037-b716-655226548c2a
        last_updated_time:
          type: string
          format: date-time
          example: 2022-01-01T00:00:00Z
        metadata:
          type: object
          description: User-supplied JSON format metadata.
        name:
          type: string
          description: The official name of the account
          example: Plaid Checking
        nickname:
          type: string
          description: A user-meaningful name for the account
          nullable: true
          example: Auto Loan Account
        routing_identifiers:
          $ref: '#/components/schemas/account_routing'
        status:
          type: string
          description: The current state of the account
          enum:
          - ACTIVE
          - CLOSED
        type:
          type: string
          description: The type of the account
          enum:
          - CHECKING
          - SAVINGS
          - CREDIT_CARD
          - MONEY_MARKET
          - INVESTMENT_529
          - OTHER
        vendor_data:
          $ref: '#/components/schemas/external_account_vendor_data'
        vendor_info:
          $ref: '#/components/schemas/vendor_info'
        verification:
          $ref: '#/components/schemas/account_verification'
      example:
        creation_time: 2022-01-01T00:00:00Z
        metadata: {}
        routing_identifiers:
          eft_routing_number: "02101140"
          swift_code: CHASUS3AXXX
          bank_countries:
          - US
          - US
          bank_name: Chase
          wire_routing_number: "756392185"
          ach_routing_number: "756392185"
        vendor_data:
          account_number_mask: account_number_mask
          institution_id: institution_id
        type: CHECKING
        vendor_info: ""
        account_identifiers:
          number: "78277121"
          iban: FR4116409654593F22958471597
        last_updated_time: 2022-01-01T00:00:00Z
        name: Plaid Checking
        nickname: Auto Loan Account
        account_owner_names:
        - Norman Walsh PhD
        - Norman Walsh PhD
        id: 3aeb2292-c681-4037-b716-655226548c2a
        customer_id: aac579e0-e6ff-4053-a137-33fb1d77ea88
        business_id: 2752e077-14f5-4caf-8d38-361c50a53873
        verification: ""
        status: ACTIVE
    external_account_access_token:
      required:
      - vendor_institution_id
      - vendor_public_token
      type: object
      properties:
        business_id:
          type: string
          description: |
            The identifier for the business customer associated with this external account. Exactly one of `business_id` or `customer_id` must be specified.
          format: uuid
          example: f25edc1e-6df2-4afe-bac8-e94659d80142
        customer_id:
          type: string
          description: |
            The identifier for the personal customer associated with this external account. Exactly one of `customer_id` or `business_id` must be specified.
          format: uuid
        request_id:
          type: string
          description: "A unique identifier for the request, which can be used for\
            \ troubleshooting"
          readOnly: true
        vendor_access_token:
          type: string
          description: The access token associated with the Item data is being requested
            for.
          readOnly: true
        vendor_customer_id:
          type: string
          description: An alias for `customer_id` (deprecated).
          format: uuid
          x-status: deprecated
        vendor_institution_id:
          minLength: 1
          type: string
          description: |
            The ID of the institution the access token is requested for
        vendor_public_token:
          type: string
          description: |
            The user's public token obtained from successful link login.
      example:
        vendor_customer_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        vendor_access_token: vendor_access_token
        vendor_institution_id: vendor_institution_id
        customer_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        business_id: f25edc1e-6df2-4afe-bac8-e94659d80142
        request_id: request_id
        vendor_public_token: vendor_public_token
    external_account_balance:
      title: External Account Balance
      required:
      - currency
      type: object
      properties:
        available:
          minimum: 0
          type: integer
          description: The available balance of the account
          format: int64
          nullable: true
        currency:
          type: string
          description: ISO 4217 alphabetic currency code
          example: KYD
        current:
          minimum: 0
          type: integer
          description: The current balance of the account
          format: int64
          nullable: true
        limit:
          minimum: 0
          type: integer
          description: The limit on the balance amount
          format: int64
          nullable: true
      example:
        current: 0
        available: 0
        limit: 0
        currency: KYD
    external_account_link_token:
      required:
      - client_name
      - country_codes
      - language
      - type
      type: object
      properties:
        business_id:
          type: string
          description: |
            The identifier for the business customer associated with this external account. Exactly one of `business_id` or `customer_id` must be specified.
          format: uuid
          example: ed927161-e054-481a-82e8-f6c8629d1ff8
        client_name:
          type: string
          description: "The name of your application, as it should be displayed in\
            \ Link. Maximum length of 30 characters."
        country_codes:
          minItems: 1
          type: array
          description: Country codes in the ISO-3166-1 alpha-2 country code standard.
          items:
            type: string
            enum:
            - US
        customer_id:
          type: string
          description: |
            The identifier for the personal customer associated with this external account. Exactly one of `customer_id` or `business_id` must be specified.
          format: uuid
          example: c4a95613-398b-40f3-ade3-86dc502c3c80
        expiration:
          type: string
          description: The expiration date for the link_token. Expires in 4 hours.
          format: date-time
          readOnly: true
        language:
          type: string
          description: |
            The language that corresponds to the link token. For Plaid, see their [documentation](https://plaid.com/docs/api/tokens/#link-token-create-request-language) for a list of allowed values.
          enum:
          - EN
          - FR
          - ES
          - NL
          - DE
        link_customization_name:
          type: string
          description: |
            The name of the Link customization from the Plaid Dashboard to be applied to Link. If not specified, the default customization will be used. When using a Link customization, the language in the customization must match the language selected via the language parameter, and the countries in the customization should match the country codes selected via country_codes.
        link_token:
          type: string
          description: |
            A link_token, which can be supplied to Link in order to initialize it and receive a public_token, which can be exchanged for an access_token.
          readOnly: true
        redirect_uri:
          type: string
          description: |
            A URI indicating the destination where a user should be forwarded after completing the Link flow; used to support OAuth authentication flows when launching Link in the browser or via a webview.
        request_id:
          type: string
          description: "A unique identifier for the request, which can be used for\
            \ troubleshooting."
          readOnly: true
        sdk_type:
          type: string
          description: Describes the environment of the client code running a vendor-supplied
            SDK
          enum:
          - WEB
          - IOS
          - ANDROID
          default: WEB
        type:
          type: string
          description: "The type of the link token. DEPOSITORY for checking and savings\
            \ accounts, CREDIT for credit card type accounts."
          enum:
          - DEPOSITORY
          - CREDIT
          - INVESTMENT
          - MICRO_DEPOSIT
        vendor_access_token:
          type: string
          description: The access token associated with the Item data is being requested
            for.
        vendor_institution_id:
          minLength: 1
          type: string
          description: |
            The ID of the institution the access token is requested for. If present the link token will be created in an update mode.
        verify_owner:
          type: boolean
          description: |
            If true, Synctera will attempt to verify that the external account owner is the same as the customer by comparing external account data to customer data. At least 2 of the following fields must match: name, phone number, email, address. Verification is disabled by default.
          default: false
      example:
        sdk_type: WEB
        link_token: link_token
        link_customization_name: link_customization_name
        language: EN
        type: DEPOSITORY
        verify_owner: false
        vendor_access_token: vendor_access_token
        country_codes:
        - US
        - US
        expiration: 2000-01-23T04:56:07.000+00:00
        redirect_uri: redirect_uri
        vendor_institution_id: vendor_institution_id
        customer_id: c4a95613-398b-40f3-ade3-86dc502c3c80
        business_id: ed927161-e054-481a-82e8-f6c8629d1ff8
        client_name: client_name
        request_id: request_id
    external_account_transaction:
      type: object
      properties:
        amount:
          type: integer
          description: Transaction amount. Number in cents. E.g. 1000 represents $10.00
          format: int64
        authorized_date:
          type: string
          description: Date that the transaction is authorized. ISO 8601 format (
            YYYY-MM-DD ).
          format: date
          nullable: true
        category:
          type: array
          description: Category of the transaction
          items:
            type: string
        check_number:
          type: string
          description: Check number of the transaction. This field will be null if
            not a check transaction.
        currency:
          type: string
          description: ISO 4217 alphabetic currency code
          example: USD
        date:
          type: string
          description: |
            For pending transactions, this represents the date of the transaction occurred; for posted transactions, this represents the date of the transaction posted. ISO 8601 format ( YYYY-MM-DD ).
          format: date
        is_pending:
          type: boolean
          description: Indicates the transaction is pending or unsettled if true.
        merchant_name:
          type: string
          description: Merchant name of the transaction
          example: Fancy store
        payment_channel:
          type: string
          description: channel used to make a payment
          enum:
          - IN_STORE
          - ONLINE
          - OTHER
          x-enumDescriptions:
          - IN_STORE: In store transaction.
          - ONLINE: Online transaction.
          - OTHER: "Transactions that relate to banks, e.g. fees or deposits."
        payment_method:
          type: string
          description: "Transfer type of the transaction, e.g. ACH"
        transaction_id:
          type: string
          description: case-sensitive transaction ID
      example:
        date: 2000-01-23
        transaction_id: transaction_id
        amount: 0
        check_number: check_number
        payment_channel: IN_STORE
        merchant_name: Fancy store
        currency: USD
        category:
        - category
        - category
        authorized_date: 2000-01-23
        payment_method: payment_method
        is_pending: true
    external_account_vendor_data:
      type: object
      properties:
        account_number_mask:
          type: string
          description: |
            The last alphanumeric characters of an account's official account number. Note that the mask may be non-unique between accounts, and it may also not match the mask that the bank displays to the user.
        institution_id:
          type: string
          description: The ID of the institution external account belongs
      example:
        account_number_mask: account_number_mask
        institution_id: institution_id
    external_account_vendor_values:
      type: string
      description: |
        The vendor selected for the operation.
      enum:
      - PLAID
      - FINICITY
    external_accounts_list:
      allOf:
      - required:
        - external_accounts
        type: object
        properties:
          external_accounts:
            type: array
            description: Array of external accounts
            items:
              $ref: '#/components/schemas/external_account'
      - $ref: '#/components/schemas/paginated_response'
    external_accounts_transaction_list:
      required:
      - transactions
      type: object
      properties:
        transactions:
          type: array
          description: Array of transactions of a given external account
          items:
            $ref: '#/components/schemas/external_account_transaction'
      example:
        transactions:
        - date: 2000-01-23
          transaction_id: transaction_id
          amount: 0
          check_number: check_number
          payment_channel: IN_STORE
          merchant_name: Fancy store
          currency: USD
          category:
          - category
          - category
          authorized_date: 2000-01-23
          payment_method: payment_method
          is_pending: true
        - date: 2000-01-23
          transaction_id: transaction_id
          amount: 0
          check_number: check_number
          payment_channel: IN_STORE
          merchant_name: Fancy store
          currency: USD
          category:
          - category
          - category
          authorized_date: 2000-01-23
          payment_method: payment_method
          is_pending: true
    external_card_id:
      type: string
      description: The unique identifier of external card
      format: uuid
      example: f901ffe9-8f62-4347-b3d0-421ffc091729
    external_card_list_response:
      allOf:
      - required:
        - external_cards
        type: object
        properties:
          external_cards:
            type: array
            description: Array of External Cards
            items:
              $ref: '#/components/schemas/external_card_response'
      - $ref: '#/components/schemas/paginated_response'
    external_card_request:
      required:
      - customer_id
      - token
      type: object
      properties:
        business_id:
          $ref: '#/components/schemas/business_id'
        customer_id:
          $ref: '#/components/schemas/customer_id1'
        token:
          type: string
          description: The token that was returned via tokenization iframe
    external_card_response:
      required:
      - currency
      - customer_id
      - expiration_month
      - expiration_year
      - id
      - last_four
      - name
      type: object
      properties:
        created_time:
          type: string
          format: date-time
          example: 2020-01-01T00:00:00Z
        currency:
          $ref: '#/components/schemas/currency_code'
        customer_id:
          $ref: '#/components/schemas/customer_id1'
        expiration_month:
          type: string
          readOnly: true
          example: "06"
        expiration_year:
          type: string
          readOnly: true
          example: "25"
        id:
          type: string
          description: External card ID
        last_four:
          type: string
          description: The last 4 digits of the card PAN
          readOnly: true
          example: "1234"
        last_modified_time:
          type: string
          format: date-time
          example: 2020-01-01T00:00:00Z
        name:
          type: string
          description: The external card holder name
          example: Jean Valjean
        verifications:
          $ref: '#/components/schemas/external_card_verifications'
      example:
        created_time: 2020-01-01T00:00:00Z
        expiration_year: "25"
        last_modified_time: 2020-01-01T00:00:00Z
        last_four: "1234"
        expiration_month: "06"
        name: Jean Valjean
        currency: USD
        id: id
        customer_id: 37a054b8-fbdb-44c6-ae20-091f94ada475
        verifications:
          push_funds_block_indicator: true
          cvv2_result: VERIFIED
          online_gambling_block_indicator: true
          state: SUCCEEDED
          card_type: CREDIT
          processor: MASTERCARD_V1
          address_verification_results: VERIFIED
          fast_funds_indicator: true
    external_card_verifications:
      type: object
      properties:
        address_verification_results:
          type: string
          description: |
            Address verification results

            Status | Description
            --- | ---
            VERIFIED | Address verified
            NOT_VERIFIED | Address not verified
            ADDRESS_NO_MATCH | Postal/ZIP match, street addresses do not match or street address not included in request
          enum:
          - VERIFIED
          - NOT_VERIFIED
          - ADDRESS_NO_MATCH
        card_type:
          type: string
          description: "Indicates whether the external card is credit, debit, prepaid,\
            \ deferred debit, or charge."
          enum:
          - CREDIT
          - DEBIT
          - CHARGE_PAID
          - PREPAID
          - DEFERRED_DEBIT
        cvv2_result:
          type: string
          description: "Card Verification Value results\n\nStatus | Description\n\
            --- | ---\nVERIFIED | CVV and expiration dates verified\nINCORRECT | Either\
            \ CVV or expiration date is incorrect\nNOT_SUPPORTED | \tIssuer does not\
            \ participate in CVV2 service\n"
          enum:
          - VERIFIED
          - INCORRECT
          - NOT_SUPPORTED
        fast_funds_indicator:
          type: boolean
          description: "Indicates if card is Fast Funds eligible (i.e. if the funds\
            \ will settle in 30 mins or less). If not eligible, typically funds will\
            \ settle within 2 business days."
        online_gambling_block_indicator:
          type: boolean
          description: Indicates if the card can receive push-payments for online
            gambling payouts.
        processor:
          type: string
          description: The name of the processor
          example: MASTERCARD_V1
          enum:
          - VISA_V1
          - MASTERCARD_V1
        push_funds_block_indicator:
          type: boolean
          description: Indicates if the associated card can receive push-to-card disbursements.
        state:
          type: string
          enum:
          - SUCCEEDED
          - FAILED
      description: "Verify card passed AVS and CVV checks in order to use PULL transfer.\
        \ Verify card is eligible to receive push-to-card disbursements. For example,\
        \ the inquiry_details object will contain a push_funds_block_indicator attribute\
        \ that indicates if it is eligible for push-to-card disbursements."
      example:
        push_funds_block_indicator: true
        cvv2_result: VERIFIED
        online_gambling_block_indicator: true
        state: SUCCEEDED
        card_type: CREDIT
        processor: MASTERCARD_V1
        address_verification_results: VERIFIED
        fast_funds_indicator: true
    external_payment_date:
      required:
      - day
      - month
      - year
      type: object
      properties:
        day:
          type: integer
          description: Day of birth
        month:
          type: integer
          description: Month of birth
        year:
          type: integer
          description: Year of birth
      description: Principal’s date of birth
    fee:
      required:
      - amount
      - currency
      - fee_type
      - product_type
      type: object
      properties:
        amount:
          type: integer
          description: Fee amount
          format: int64
        currency:
          pattern: "^[A-Z]{3}$"
          type: string
          description: Fee currency code in ISO 4217
        fee_type:
          type: string
          description: Fee type
          enum:
          - MONTHLY_FEE
          - ANNUAL_FEE
          - ATM_WITHDRWAL_FEE
          - OVERDRAFT_FEE
          - ACH_FEE
          - WIRE_FEE
        id:
          type: string
          description: Fee ID
          format: uuid
          readOnly: true
        product_type:
          type: string
          enum:
          - INTEREST
          - FEE
    financial_institution:
      title: Financial Institution
      type: object
      properties:
        legal_address:
          $ref: '#/components/schemas/address2'
        name:
          type: string
        phone_number:
          type: string
    financial_request_model:
      required:
      - amount
      - card_acceptor
      - card_id
      - mid
      type: object
      properties:
        amount:
          type: integer
          description: The amount of the transaction in the smallest whole denomination
            of the applicable currency (eg. For USD use cents)
        card_acceptor:
          $ref: '#/components/schemas/card_acceptor_model'
        card_id:
          type: string
          format: uuid
        cash_back_amount:
          type: integer
          description: Cash back amount in the smallest whole denomination of the
            applicable currency (eg. For USD use cents)
        is_pre_auth:
          type: boolean
          default: false
        mid:
          maxLength: 50
          minLength: 1
          type: string
        pin:
          maxLength: 15
          minLength: 1
          type: string
        transaction_options:
          $ref: '#/components/schemas/transaction_options'
    finicity_account_verification:
      title: Information specific to Finicity verification
      allOf:
      - $ref: '#/components/schemas/base_account_verification'
    form:
      type: string
      description: PHYSICAL or VIRTUAL.
      enum:
      - PHYSICAL
      - VIRTUAL
    funding_source:
      type: object
      properties:
        id:
          type: string
          description: Funding Source ID
          format: uuid
          readOnly: true
          example: 390eff1e-2197-4030-baaf-72d64545c170
        name:
          type: string
          description: Funding Source Name
          readOnly: true
        url:
          type: string
          description: Funding Source URL
          readOnly: true
    funding_source_response:
      required:
      - id
      - name
      - url
      allOf:
      - $ref: '#/components/schemas/funding_source'
    funding_source_response_list:
      required:
      - funding_sources
      type: object
      properties:
        funding_sources:
          type: array
          description: Array of funding sources
          items:
            $ref: '#/components/schemas/funding_source_response'
    gateway_custom_headers:
      type: object
      additionalProperties:
        type: string
      description: Custom Headers of the Authorization gateway
      x-schema-name: gateway_custom_headers
    gateway_id:
      type: string
      description: The unique identifier of an Authorization gateway config
      format: string
    gateway_list_response:
      allOf:
      - type: object
        properties:
          gateways:
            type: array
            description: Array of Authorization gateway configuration
            items:
              $ref: '#/components/schemas/gateway_response'
      - $ref: '#/components/schemas/paginated_response'
    gateway_response:
      required:
      - active
      - creation_time
      - id
      - last_modified_time
      - url
      type: object
      properties:
        active:
          type: boolean
          description: Current status of the Authorization gateway
        creation_time:
          type: string
          description: The timestamp representing when the gateway config request
            was made
          format: date-time
          readOnly: true
        custom_headers:
          $ref: '#/components/schemas/gateway_custom_headers'
        id:
          type: string
          description: Gateway ID
          format: uuid
          example: d4641790-928a-4aef-8784-3a7dcc00cf88
        last_modified_time:
          type: string
          description: The timestamp representing when the gateway config was last
            modified at
          format: date-time
          readOnly: true
        url:
          maxLength: 1000
          type: string
          description: URL of the Authorization gateway
          format: uri
    get_viral_loop_waitlists:
      type: object
      properties:
        lead_count:
          minimum: 0
          type: integer
          description: total number of leads/people on the waitlist
          readOnly: true
      description: Get Viral Loop Waitlists
    google_digital_wallet_provision_request:
      required:
      - device_id
      - device_type
      - provisioning_app_version
      - wallet_account_id
      type: object
      properties:
        device_id:
          maxLength: 24
          type: string
          description: The user’s Android device ID; the device’s unique identifier.
        device_type:
          $ref: '#/components/schemas/device_type'
        provisioning_app_version:
          $ref: '#/components/schemas/provisioning_app_version'
        wallet_account_id:
          maxLength: 50
          type: string
          description: The user’s Google wallet account ID.
    google_digital_wallet_provision_response:
      type: object
      properties:
        card_id:
          $ref: '#/components/schemas/card_id'
        created_time:
          type: string
          format: date-time
        last_modified_time:
          type: string
          format: date-time
        push_tokenize_request_data:
          $ref: '#/components/schemas/push_tokenize_request_data'
      example:
        created_time: 2000-01-23T04:56:07.000+00:00
        last_modified_time: 2000-01-23T04:56:07.000+00:00
        push_tokenize_request_data:
          token_service_provider: token_service_provider
          opaque_payment_card: opaque_payment_card
          user_address:
            country_code: TG
            city: Port Shawn
            address_line_1: 2010 Schowalter Parks
            address_line_2: Apt. 479
            state: CO
            postal_code: "49633"
          display_name: display_name
          last_digits: last_digits
          network: mastercard
        card_id: 8f2edf2c-3346-4242-a5ba-c91a300a1d45
    hold_data:
      required:
      - amount
      - availability_time
      type: object
      properties:
        amount:
          type: integer
        availability_time:
          type: string
          format: date-time
      example:
        amount: 0
        availability_time: 2000-01-23T04:56:07.000+00:00
    id:
      type: string
      description: The unique identifier for this resource.
      format: uuid
      readOnly: true
      example: 49bb492c-842f-4723-95cd-bc28edf1a13c
    id_list_query_schema:
      type: array
      example: "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157"
      items:
        type: string
        format: uuid
      x-schema-name: id_list_query_schema
    in_app_provisioning:
      type: object
      properties:
        address_verification:
          $ref: '#/components/schemas/digital_wallet_token_address_verification'
        enabled:
          type: boolean
          example: false
          default: false
    ingestion_status:
      title: Reconciliation Ingestion Status Values
      type: string
      description: Reconciliation ingestion status values
      enum:
      - IN_PROCESS
      - COMPLETED
      - FAILED
    interest:
      required:
      - accrual_payout_schedule
      - calculation_method
      - product_type
      - rates
      type: object
      properties:
        accrual_payout_schedule:
          $ref: '#/components/schemas/accrual_payout_schedule'
        calculation_method:
          $ref: '#/components/schemas/calculation_method'
        description:
          type: string
          description: User provided description for the current interest.
          example: The rate is designed for high interest saving account.
        id:
          type: string
          description: Interest ID
          format: uuid
          readOnly: true
        product_type:
          type: string
          enum:
          - INTEREST
          - FEE
        rates:
          $ref: '#/components/schemas/rates'
    internal_account:
      required:
      - currency
      - status
      type: object
      properties:
        account_number:
          maxLength: 17
          minLength: 14
          type: string
          description: Generated internal account number
          readOnly: true
        balances:
          type: array
          description: A list of balances for internal account based on different
            type
          readOnly: true
          items:
            $ref: '#/components/schemas/balance'
        bank_routing:
          maxLength: 9
          type: string
          description: Bank routing number
          readOnly: true
        creation_time:
          type: string
          description: The date and time the resource was created.
          format: date-time
          readOnly: true
          example: 2021-06-14T11:23:41Z
        currency:
          pattern: "^[A-Z]{3}$"
          type: string
          description: Account currency or account settlement currency. ISO 4217 alphabetic
            currency code.
          example: LAK
        description:
          type: string
          description: A user provided description for the current account
        gl_type:
          type: string
          description: Whether the account will represent assets or liabilities
          enum:
          - ASSET
          - LIABILITY
        id:
          type: string
          description: Generated ID for internal account
          format: uuid
          readOnly: true
        is_system_acc:
          type: boolean
          description: Is a system-controlled internal account
          default: false
        last_updated_time:
          type: string
          description: The date and time the resource was last updated.
          format: date-time
          readOnly: true
          example: 2022-01-18T17:54:12Z
        status:
          type: string
          enum:
          - ACTIVE
      example:
        creation_time: 2021-06-14T11:23:41Z
        account_number: account_number
        balances:
        - balance: 311
          type: ACCOUNT_BALANCE
        - balance: 311
          type: ACCOUNT_BALANCE
        last_updated_time: 2022-01-18T17:54:12Z
        description: description
        is_system_acc: false
        bank_routing: bank_routing
        currency: LAK
        gl_type: ASSET
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        status: ACTIVE
    internal_account_patch:
      type: object
      properties:
        description:
          type: string
          description: A user provided description for the current account
    internal_accounts_list:
      allOf:
      - required:
        - internal_accounts
        type: object
        properties:
          internal_accounts:
            type: array
            description: Array of internal accounts
            items:
              $ref: '#/components/schemas/internal_account'
      - $ref: '#/components/schemas/paginated_response'
    internal_transfer:
      required:
      - amount
      - currency
      - type
      type: object
      properties:
        amount:
          minimum: 1
          type: integer
          description: The amount (in cents) to transfer from originating account
            to receiving account.
        currency:
          type: string
          description: ISO 4217 alphabetic currency code of the transfer amount
          example: USD
        memo:
          type: string
          description: A short note to the recipient
        metadata:
          type: object
          description: Arbitrary key-value metadata to associate with the transaction
        originating_account_alias:
          type: string
          description: An alias representing a GL account to debit. This is alternative
            to specifying by account id
          example: ach_suspense
        originating_account_customer_id:
          type: string
          description: The customer id of the owner of the originating account.
          format: uuid
        originating_account_id:
          type: string
          description: The UUID of the account being debited
          format: uuid
        receiving_account_alias:
          type: string
          description: An alias representing a GL account to credit. This is an alternative
            to specifying by account id
          example: ach_suspense
        receiving_account_customer_id:
          type: string
          description: The customer id of the owner of the receiving account. Only
            required when type is "outgoing_remittance"
          format: uuid
        receiving_account_id:
          type: string
          description: The UUID of the account being credited
          format: uuid
        type:
          type: string
          description: The desired transaction type to use for this transfer
          enum:
          - INTEREST_PAYOUT
          - ACCOUNT_TO_ACCOUNT
          - MANUAL_ADJUSTMENT
          - MANUAL_ADJUSTMENT_REVERSAL
          - TRANSFER_FEE
          - TRANSFER_FEE_REVERSAL
          - OUTGOING_INTERNATIONAL_REMITTANCE
          - OUTGOING_INTERNATIONAL_REMITTANCE_REVERSAL
          - SIGN_UP_BONUS
          - ACH_CREDIT_SWEEP
          - ACH_DEBIT_SWEEP
          - FEE
          - CASHBACK
          - SUBSCRIPTION_FEE
          - PROMOTIONAL_CREDIT
          - INCOMING_WIRE
      example:
        amount: 1025
        currency: USD
        originating_account_id: de24d308-7ca5-4aaf-9f7c-524158ab458e
        receiving_account_id: 15ac3d92-aac9-4bdf-998f-56b0e67da46b
        type: ACCOUNT_TO_ACCOUNT
    internal_transfer_instruction:
      required:
      - request
      - type
      type: object
      properties:
        request:
          $ref: '#/components/schemas/internal_transfer'
        type:
          type: string
          enum:
          - INTERNAL_TRANSFER
    internal_transfer_response:
      allOf:
      - $ref: '#/components/schemas/internal_transfer'
      - required:
        - id
        type: object
        properties:
          id:
            type: string
            description: The transaction id associated with the transfer
            format: uuid
    is_customer:
      type: boolean
      description: True for personal and business customers with a direct relationship
        with the fintech or bank.
      example: true
    manual_account_verification:
      title: Information specific to Manual verification
      allOf:
      - $ref: '#/components/schemas/base_account_verification'
    manual_entry:
      type: object
      properties:
        address_verification:
          $ref: '#/components/schemas/digital_wallet_token_address_verification'
        enabled:
          type: boolean
          example: false
          default: false
    master_disclosure:
      type: object
      description: |
        Represents a document that must be shown to every party who is subject  to a particular regulatory requirement (the _disclosure type_). The  master disclosure record is the same for all such customers.
      allOf:
      - required:
        - type
        - version
      - $ref: '#/components/schemas/base_master_disclosure'
    master_disclosure_list:
      allOf:
      - required:
        - master_disclosures
        type: object
        properties:
          master_disclosures:
            type: array
            description: Array of master disclosures.
            items:
              $ref: '#/components/schemas/master_disclosure'
      - $ref: '#/components/schemas/paginated_response'
    metadata:
      type: object
      description: |
        Optional field to store additional information about the resource. Intended to be used by the integrator to store non-sensitive data.
    minimum_payment:
      type: object
      description: |
        The scheme for calculating the minimum payment due for outstanding balances in a billing period.
      discriminator:
        propertyName: Type_
        mapping:
          RATE_OR_AMOUNT: '#/components/schemas/minimum_payment_rate_or_amount'
      oneOf:
      - $ref: '#/components/schemas/minimum_payment_rate_or_amount'
    minimum_payment_rate_or_amount:
      required:
      - min_amount
      - rate
      - type
      type: object
      properties:
        min_amount:
          type: integer
          description: |
            The maximum amount to charge as a minimum payment, in cents. For example, to set the maximum to $30, set this value to 3000.
          format: int64
        rate:
          type: integer
          description: |
            The percentage of the balance to use, in basis points. For example, to set 12.5% of the balance, set this value to 1250.
        type:
          $ref: '#/components/schemas/minimum_payment_type'
    minimum_payment_type:
      type: string
      enum:
      - RATE_OR_AMOUNT
      x-enumDescriptions:
        RATE_OR_AMOUNT: |
          Describes a minimum payment scheme where the amount calculated is either a portion of the balance due, or a fixed, maximum amount, whichever is lesser. For example, if set to 1.00% and $30, the minimum payment will be calculated as 1.00% of the balance, but only up to a maximum of $30.
    network_fee_model:
      required:
      - amount
      - type
      type: object
      properties:
        amount:
          type: integer
          description: The amount of the fee in the smallest whole denomination of
            the applicable currency (eg. For USD use cents)
        credit_debit:
          type: string
          description: C = credit; D = debit
          enum:
          - C
          - D
        type:
          type: string
          enum:
          - ISSUER_FEE
          - SWITCH_FEE
          - PINDEBIT_ASSOC_FEE
          - ACQUIRER_FEE
          - INTERCHANGE_FEE
          - CUR_CONV_CARDHOLDER_FEE
          - CUR_CONV_ISSUER_FEE
          - CROSS_BORDER_ISSUER_FEE
      example:
        amount: 123
        credit_debit: C
        type: ISSUER_FEE
    original_credit_request_model:
      required:
      - amount
      - card_id
      - mid
      - type
      type: object
      properties:
        amount:
          type: integer
          description: The amount of the transaction in the smallest whole denomination
            of the applicable currency (eg. For USD use cents)
        card_acceptor:
          $ref: '#/components/schemas/card_acceptor_model'
        card_id:
          type: string
          format: uuid
        mid:
          maxLength: 50
          minLength: 1
          type: string
        screening_score:
          type: string
        sender_data:
          $ref: '#/components/schemas/original_credit_sender_data'
        transactionPurpose:
          type: string
        type:
          type: string
          enum:
          - account_to_account
          - person_to_person
          - prepaid
          - wallet_transfer
          - money_transfer_by_bank
          - business_to_business
          - disbursement
          - government_disbursement
          - gambling_payout
          - loyalty
          - merchant_disbursement
          - online_gambling_payout
          - pension_disbursement
          - prepaid_loads
          - card_bill_payment
          - bill_payment
          - cash_claim
          - cash_in
          - cash_out
          - mobile_air_time_payment
          - money_transfer_by_merchant
          - face_to_face_merchant_payment
          - government_payment
          - payments_goods_services
    original_credit_sender_data:
      required:
      - funding_source
      type: object
      properties:
        funding_source:
          type: string
          enum:
          - credit
          - debit
          - prepaid
          - deposit_account
          - cash
          - mobile_money_payment
          - non_visa_credit
        sender_account_number:
          type: string
        sender_account_type:
          type: string
          enum:
          - other
          - rtn_bank_account
          - iban
          - card_account
          - email
          - phone_number
          - bank_account_number_and_identification_code
          - wallet_id
          - social_network_id
        sender_address:
          type: string
        sender_city:
          type: string
        sender_country:
          type: string
        sender_name:
          type: string
        sender_reference_number:
          type: string
        sender_state:
          type: string
        transaction_purpose:
          type: string
          enum:
          - family_support
          - labor_transfers
          - travel
          - education
          - medical_treatment
          - emergency_need
          - savings
          - gifts
          - other
          - salary
          - lending
          - crypto_currency
        unique_transaction_reference_number:
          maxLength: 17
          minLength: 1
          type: string
    originating_account_id:
      type: string
      description: The unique identifier of an originating account
      format: uuid
      example: e85e7aeb-712d-4e9c-b2eb-d65fce19507b
    outgoing_ach:
      required:
      - account_no
      - amount
      - bank_id
      - effective_date
      - external_id
      - id
      - is_same_day
      - memo
      - partner_id
      - source_account_no
      - status
      - trace_no
      type: object
      properties:
        account_name:
          type: string
          description: Receiving account name
          example: Bruce Wayne
        account_no:
          type: string
          description: Receiving account number
          example: "122455799"
        amount:
          type: integer
          description: Transaction amount in cents
          example: 1560
        bank_id:
          type: integer
          example: 1
        effective_date:
          type: string
          description: Effective date of the transaction
          format: date
          example: 2022-03-25
        external_id:
          type: string
          description: Transaction ID in the ledger
          format: uuid
          example: 17f880a4-541b-4545-81ce-8a2d1baa427b
        hold:
          $ref: '#/components/schemas/hold_data'
        id:
          type: string
          format: uuid
          example: 0a3fa9bb-2628-48d5-876a-a78ed32ebcab
        is_same_day:
          type: boolean
          description: Was initiated as same-day ACH transaction
        memo:
          type: string
        partner_id:
          type: integer
          example: 2
        reference_info:
          type: string
          description: Transaction reference info
        source_account_name:
          type: string
          description: Originating account name
          example: Thomas Anderson
        source_account_no:
          type: string
          description: Originating account number
          example: "123638791329"
        status:
          type: string
          enum:
          - PENDING
          - CANCELED
          - COMPLETE
        trace_no:
          type: string
          description: Trace number of the transaction
          example: "123456780000069"
      description: Represents an Outgoing ACH transaction.
      example:
        source_account_no: "123638791329"
        amount: 1560
        source_account_name: Thomas Anderson
        is_same_day: true
        memo: memo
        external_id: 17f880a4-541b-4545-81ce-8a2d1baa427b
        trace_no: "123456780000069"
        account_no: "122455799"
        hold:
          amount: 0
          availability_time: 2000-01-23T04:56:07.000+00:00
        partner_id: 2
        bank_id: 1
        account_name: Bruce Wayne
        effective_date: 2022-03-25T00:00:00.000+00:00
        reference_info: reference_info
        id: 0a3fa9bb-2628-48d5-876a-a78ed32ebcab
        status: PENDING
    outgoing_ach_list:
      allOf:
      - required:
        - transactions
        type: object
        properties:
          transactions:
            type: array
            description: Array of outgoing ACH transactions.
            items:
              $ref: '#/components/schemas/outgoing_ach'
      - $ref: '#/components/schemas/paginated_response'
    outgoing_ach_patch:
      type: object
      properties:
        funds_availability_time:
          type: string
          format: date-time
        status:
          type: string
          enum:
          - CANCELED
      description: Outgoing ACH update request
    outgoing_ach_request:
      title: Outgoing ACH requests
      required:
      - amount
      - currency
      - customer_id
      - dc_sign
      - originating_account_id
      - receiving_account_id
      type: object
      properties:
        amount:
          type: integer
          description: Amount to transfer in ISO 4217 minor currency units
          example: 607
        company_entry_description:
          maxLength: 10
          type: string
          description: Company entry description ACH field. Originator inserts this
            field's value to provide the Receiver with a description of the entry's
            purpose.
          example: PAYROLL
        currency:
          type: string
          description: ISO 4217 alphabetic currency code of the transfer amount
          example: USD
        customer_id:
          type: string
          description: The customer's unique identifier
          format: uuid
          example: bd6fb05d-a0ba-4105-b280-51afdbc09e02
        dc_sign:
          type: string
          description: The type of transaction (debit or credit). A debit is a transfer
            in and a credit is a transfer out of the originating account
          example: debit
          enum:
          - debit
          - credit
        effective_date:
          type: string
          description: Effective date transaction proccesses (is_same_day needs to
            be false or not present at all)
          format: date
          example: 2022-03-18
        external_data:
          type: object
          description: Additional transfer metadata structured as key-value pairs
        final_customer_id:
          type: string
          description: ID of the international customer that receives the final remittance
            transfer (required for OFAC enabled payments)
          format: uuid
        hold:
          $ref: '#/components/schemas/ach_request_hold_data'
        id:
          type: string
          format: uuid
          readOnly: true
          example: 91babe8c-b088-4808-8775-90aef82b5864
        is_same_day:
          type: boolean
          description: Send as same day ACH transaction (use only is_same_day without
            specific effective_date)
        memo:
          type: string
          description: Memo for the payment
        originating_account_id:
          type: string
          description: The unique identifier for an originating account
          format: uuid
          example: ced6ad36-d1cd-4e73-90f5-11a07331406b
        receiving_account_id:
          type: string
          description: The unique identifier for an receiving account
          format: uuid
          example: f48a96a4-3921-4e11-a062-270697d24bec
        reference_info:
          type: string
          description: Will be sent to the ACH network and maps to Addenda record
            05 - the recipient bank will receive this info
          example: Tempore atque et cum.
        risk:
          $ref: '#/components/schemas/risk_data'
      description: Create an outgoing ACH
    paginated_response:
      title: Paginated List response
      type: object
      properties:
        next_page_token:
          type: string
          description: "If returned, use the next_page_token to query for the next\
            \ page of results. Not returned if there are no more rows."
          example: xm17l05jmm
    patch_account_product:
      type: object
      discriminator:
        propertyName: ProductType
        mapping:
          FEE: '#/components/schemas/fee'
          INTEREST: '#/components/schemas/patch_interest'
      oneOf:
      - $ref: '#/components/schemas/patch_interest'
      - $ref: '#/components/schemas/fee'
    patch_accounts_request_account_identifiers:
      title: Identifiers for the account
      type: object
      properties:
        number:
          minLength: 1
          type: string
          description: |
            The account number.
          example: "49554071"
    patch_accounts_request_routing_identifiers:
      title: Identifiers for the bank
      type: object
      properties:
        ach_routing_number:
          minLength: 1
          type: string
          description: |
            The routing number used for US ACH payments. On write, Synctera will store the entire routing number; on read, we only return the last 4 characters.
          example: "756392185"
        bank_name:
          minLength: 1
          type: string
          description: The name of the bank managing the account
          example: Chase
    patch_business:
      type: object
      description: Represents a business customer.
      allOf:
      - $ref: '#/components/schemas/base'
    patch_business_business_owner_relationship:
      type: object
      description: Denotes the relationship between specified businesses.
      allOf:
      - required:
        - relationship_type
        properties:
          additional_data:
            $ref: '#/components/schemas/additional_owner_data'
          creation_time:
            type: string
            description: The date and time the resource was created.
            format: date-time
            readOnly: true
            example: 2021-06-14T11:23:41Z
          from_business_id:
            type: string
            description: |
              Unique ID for the subject business.
            format: uuid
            example: e7e5bac3-3dcb-4c1e-aad9-d2d27f6473f5
          id:
            type: string
            description: Relationship unique identifier.
            format: uuid
            readOnly: true
            example: 0fddaecc-0541-4b9b-83b4-e3f2cbc0558e
          last_updated_time:
            type: string
            description: The date and time the resource was last updated.
            format: date-time
            readOnly: true
            example: 2022-01-18T17:54:12Z
          metadata:
            $ref: '#/components/schemas/metadata'
          relationship_type:
            type: string
            description: |
              The relationship type. One of the following:
              * `BENEFICIAL_OWNER_OF` – a person who directly or indirectly owns a portion of the business.
              * `MANAGING_PERSON_OF` – a person who is an officer, director, or other notable person of an organization.
              * `OWNER_OF` – a business with ownership of another business.
            format: enum
            example: BENEFICIAL_OWNER_OF
            enum:
            - BENEFICIAL_OWNER_OF
            - MANAGING_PERSON_OF
            - OWNER_OF
          to_business_id:
            type: string
            description: |
              Unique ID for the related business.
            format: uuid
            example: 2c5ffaf3-0c44-4a13-89d6-9202071f55a0
    patch_customer:
      title: Customer
      type: object
      properties:
        dob:
          type: string
          description: Customer's date of birth in RFC 3339 full-date format (YYYY-MM-DD)
          format: date
          example: 2000-01-01
        email:
          type: string
          description: Customer's email
          example: Torrance.Rogahn14@yahoo.com
        first_name:
          type: string
          description: Customer's first name
          example: Pamela
        last_name:
          type: string
          description: Customer's last name
          example: Heller
        legal_address:
          $ref: '#/components/schemas/address'
        metadata:
          type: object
          description: User-supplied JSON format metadata. Do not use to store PII.
        middle_name:
          type: string
          description: Customer's middle name
          example: b
        phone_number:
          pattern: "^\\+[1-9]\\d{1,14}$"
          type: string
          description: Customer's mobile phone number with country code in E.164 format.
            Must have a valid country code. Area code and local phone number are not
            validated.
          example: +14374570680
        shipping_address:
          $ref: '#/components/schemas/address'
        ssn:
          type: string
          description: "Customer's full tax ID eg SSN formatted with hyphens. This\
            \ optional parameter is required when running KYC on a customer. Must\
            \ be compiled with ^\\d{3}-\\d{2}-\\d{4}$. Response contains the last\
            \ 4 digits only (e.g. 6789)."
          example: 545-94-1534
        status:
          type: string
          description: Customer's status
          enum:
          - ACTIVE
          - ESCHEAT
          - DECEASED
          - DENIED
          - DORMANT
          - FROZEN
          - INACTIVE
          - PROSPECT
          - SANCTION
      description: Customer object for patch purpose. All fields are optional
    patch_external_account:
      type: object
      properties:
        account_identifiers:
          $ref: '#/components/schemas/patch_accounts_request_account_identifiers'
        account_owner_names:
          type: array
          description: The names of the account owners.
          items:
            type: string
            example: Ricardo DuBuque
        nickname:
          minLength: 1
          type: string
          description: A user-meaningful name for the account
          example: Checking Account
        routing_identifiers:
          $ref: '#/components/schemas/patch_accounts_request_routing_identifiers'
        type:
          type: string
          description: The type of the account
          enum:
          - CHECKING
          - SAVINGS
        verification:
          $ref: '#/components/schemas/account_verification'
    patch_interest:
      required:
      - product_type
      type: object
      properties:
        accrual_payout_schedule:
          $ref: '#/components/schemas/accrual_payout_schedule'
        calculation_method:
          $ref: '#/components/schemas/calculation_method'
        description:
          type: string
          description: User provided description for the current interest.
          example: The rate is designed for high interest saving account.
        id:
          type: string
          description: Interest ID
          format: uuid
          readOnly: true
        product_type:
          type: string
          enum:
          - INTEREST
        rates:
          $ref: '#/components/schemas/rates'
    patch_payment_schedule:
      type: object
      properties:
        status:
          type: string
          description: Target payment schedule status
          enum:
          - CANCELLED
      description: Patch request for payment schedule
    patch_person:
      type: object
      description: Person object for patch purpose.
      allOf:
      - $ref: '#/components/schemas/base_person1'
    patch_person_business_owner_relationship:
      type: object
      description: Denotes the relationship between specified business and person.
      allOf:
      - required:
        - relationship_type
        properties:
          additional_data:
            $ref: '#/components/schemas/additional_owner_data'
          creation_time:
            type: string
            description: The date and time the resource was created.
            format: date-time
            readOnly: true
            example: 2021-06-14T11:23:41Z
          from_person_id:
            type: string
            description: |
              Unique ID for the subject person.
            format: uuid
            example: f453c989-c302-4b7d-835c-fc1e33f5e704
          id:
            type: string
            description: Relationship unique identifier.
            format: uuid
            readOnly: true
            example: 394f57f3-3966-461b-9032-7684791611f1
          last_updated_time:
            type: string
            description: The date and time the resource was last updated.
            format: date-time
            readOnly: true
            example: 2022-01-18T17:54:12Z
          metadata:
            $ref: '#/components/schemas/metadata'
          relationship_type:
            type: string
            description: |
              The relationship type. One of the following:
              * `BENEFICIAL_OWNER_OF` – a person who directly or indirectly owns a portion of the business.
              * `MANAGING_PERSON_OF` – a person who is an officer, director, or other notable person of an organization.
              * `OWNER_OF` – a business with ownership of another business.
            format: enum
            example: BENEFICIAL_OWNER_OF
            enum:
            - BENEFICIAL_OWNER_OF
            - MANAGING_PERSON_OF
            - OWNER_OF
          to_business_id:
            type: string
            description: |
              Unique ID for the related business.
            format: uuid
            example: 8b1f30b2-27f7-420d-9564-c6805e5cdfa6
    patch_person_business_relationship:
      type: object
      description: Denotes the relationship between specified person and business.
      allOf:
      - required:
        - relationship_type
        properties:
          additional_data:
            $ref: '#/components/schemas/additional_data'
          creation_time:
            type: string
            description: The date and time the resource was created.
            format: date-time
            readOnly: true
            example: 2021-06-14T11:23:41Z
          from_person_id:
            type: string
            description: |
              Unique ID for the subject person.
            format: uuid
            example: 207c6992-7e1e-4d17-a00f-fea3a51f5ab0
          id:
            type: string
            description: Relationship unique identifier.
            format: uuid
            readOnly: true
            example: 19135bb4-1a9a-4ad9-829c-762274004324
          last_updated_time:
            type: string
            description: The date and time the resource was last updated.
            format: date-time
            readOnly: true
            example: 2022-01-18T17:54:12Z
          metadata:
            $ref: '#/components/schemas/metadata'
          relationship_type:
            type: string
            description: |
              The relationship type. One of the following:
              * `BENEFICIAL_OWNER_OF` – a person who directly or indirectly owns a portion of the business.
              * `MANAGING_PERSON_OF` – a person who is an officer, director, or other notable person of an organization.
              * `OWNER_OF` – a business with ownership of another business.
            format: enum
            example: BENEFICIAL_OWNER_OF
            enum:
            - BENEFICIAL_OWNER_OF
            - MANAGING_PERSON_OF
            - OWNER_OF
          to_business_id:
            type: string
            description: |
              Unique ID for the related business.
            format: uuid
            example: 4ac8f243-70e9-4af0-a2bc-77f6307d866b
    patch_relationship_in:
      type: object
      discriminator:
        propertyName: RelationshipType
        mapping:
          BENEFICIAL_OWNER_OF: '#/components/schemas/patch_person_business_owner_relationship'
          MANAGING_PERSON_OF: '#/components/schemas/patch_person_business_relationship'
          OWNER_OF: '#/components/schemas/patch_business_business_owner_relationship'
      oneOf:
      - $ref: '#/components/schemas/patch_person_business_relationship'
      - $ref: '#/components/schemas/patch_person_business_owner_relationship'
      - $ref: '#/components/schemas/patch_business_business_owner_relationship'
    payment:
      type: object
      properties:
        description:
          type: string
          description: User provided description for the payment schedule
        error_details:
          $ref: '#/components/schemas/payment_error_details'
        id:
          type: string
          description: Payment ID
          format: uuid
        metadata:
          type: object
          description: User provided JSON format data for the payment schedule
        payment_date:
          $ref: '#/components/schemas/payment_date'
        payment_instruction:
          $ref: '#/components/schemas/payment_instruction'
        payment_schedule_id:
          type: string
          description: ID of the payment schedule that executed this payment
          format: uuid
        status:
          $ref: '#/components/schemas/payment_status'
        transaction_id:
          type: string
          description: Transaction ID. It will be included only when status is COMPLETED
          format: uuid
      description: Executed payment
    payment_date:
      required:
      - execution_date
      - scheduled_date
      type: object
      properties:
        execution_date:
          type: string
          description: Execution date for the next payment
          format: date
        scheduled_date:
          type: string
          description: Scheduled date for the next payment
          format: date
      readOnly: true
      example:
        execution_date: 2000-01-23
        scheduled_date: 2000-01-23
    payment_error_details:
      type: object
      properties:
        code:
          type: string
        details:
          type: string
      description: Payment error details. It will be included only when status is
        ERROR
    payment_instruction:
      discriminator:
        propertyName: Type_
        mapping:
          ACH: '#/components/schemas/ach_instruction'
          INTERNAL_TRANSFER: '#/components/schemas/internal_transfer_instruction'
      oneOf:
      - $ref: '#/components/schemas/ach_instruction'
      - $ref: '#/components/schemas/internal_transfer_instruction'
    payment_list:
      allOf:
      - required:
        - payments
        type: object
        properties:
          payments:
            type: array
            description: Array of payments
            items:
              $ref: '#/components/schemas/payment'
      - $ref: '#/components/schemas/paginated_response'
    payment_schedule:
      required:
      - description
      - payment_instruction
      - schedule
      type: object
      properties:
        description:
          type: string
          description: User provided description for the payment schedule
        id:
          type: string
          description: Payment schedule ID
          format: uuid
          readOnly: true
        metadata:
          type: object
          description: User provided JSON format data
        next_payment_date:
          $ref: '#/components/schemas/payment_date'
        payment_instruction:
          $ref: '#/components/schemas/payment_instruction'
        schedule:
          $ref: '#/components/schemas/schedule_config'
        status:
          $ref: '#/components/schemas/payment_schedule_status'
      description: Payment schedule
      example:
        schedule:
          end_date: 2000-01-23
          count: 1
          interval: 221
          frequency: DAILY
          start_date: 2000-01-23
        metadata: {}
        description: description
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        payment_instruction: ""
        next_payment_date:
          execution_date: 2000-01-23
          scheduled_date: 2000-01-23
        status: ACTIVE
    payment_schedule_list:
      allOf:
      - required:
        - payment_schedules
        type: object
        properties:
          payment_schedules:
            type: array
            description: Array of payment schedules.
            items:
              $ref: '#/components/schemas/payment_schedule'
      - $ref: '#/components/schemas/paginated_response'
    payment_schedule_status:
      type: string
      description: |
        Status of the payment schedule.
      readOnly: true
      enum:
      - ACTIVE
      - EXPIRED
      - CANCELLED
      x-enumDescriptions:
      - ACTIVE: Payment schedule will run the next payment
      - EXPIRED: Payment schedule has completed all the payments
      - CANCELLED: Payment schedule has cancelled all the future payments
    payment_status:
      type: string
      description: Payment request status
      enum:
      - COMPLETED
      - ERROR
    pending_transaction:
      title: A pending transaction
      required:
      - account_id
      - account_no
      - created
      - data
      - id
      - idemkey
      - reference_id
      - tenant
      - updated
      - uuid
      type: object
      properties:
        account_id:
          type: string
          description: The account id associated with the hold
          example: 990e8a9f-ced7-4eb2-8056-89cffebfc5ed
        account_no:
          type: string
          description: The account number associated with the hold
        created:
          type: string
          description: The creation date of the hold
          format: date-time
        data:
          $ref: '#/components/schemas/pending_transaction_data'
        id:
          type: integer
        idemkey:
          type: string
          description: The idempotency key used when initially creating this hold.
          format: uuid
        reference_id:
          type: string
          description: An external ID provided by the payment network to represent
            this transaction.
          nullable: true
        tenant:
          type: string
          description: "The tenant associated with this hold, in the form \"<bankid>_<partnerid>\""
        updated:
          type: string
          description: The date the hold was last update
          format: date-time
        uuid:
          type: string
          description: The unique identifier of the hold transaction.
          format: uuid
      example:
        account_id: 990e8a9f-ced7-4eb2-8056-89cffebfc5ed
        data:
          transaction_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          reason: reason
          amount: 0
          external_data: {}
          was_partial: true
          avail_balance: 6
          memo: memo
          history:
          - data:
              reason: reason
              amount: 0
              external_data: {}
              was_partial: true
              avail_balance: 5
              user_data: {}
              type: type
              network: network
              dc_sign: null
              force_post: true
              expires_at: 2000-01-23T04:56:07.000+00:00
              balance: 2
              subtype: subtype
              total_amount: 0
              effective_date: 2000-01-23T04:56:07.000+00:00
              currency: currency
              req_amount: 0
              risk_info: {}
              operation: hold_new
              status: PENDING
            created: 2000-01-23T04:56:07.000+00:00
            idemkey: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            id: 3
            account_no: account_no
            updated: 2000-01-23T04:56:07.000+00:00
            uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            tenant: tenant
          - data:
              reason: reason
              amount: 0
              external_data: {}
              was_partial: true
              avail_balance: 5
              user_data: {}
              type: type
              network: network
              dc_sign: null
              force_post: true
              expires_at: 2000-01-23T04:56:07.000+00:00
              balance: 2
              subtype: subtype
              total_amount: 0
              effective_date: 2000-01-23T04:56:07.000+00:00
              currency: currency
              req_amount: 0
              risk_info: {}
              operation: hold_new
              status: PENDING
            created: 2000-01-23T04:56:07.000+00:00
            idemkey: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            id: 3
            account_no: account_no
            updated: 2000-01-23T04:56:07.000+00:00
            uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            tenant: tenant
          user_data: {}
          type: type
          network: network
          dc_sign: debit
          force_post: true
          expires_at: 2000-01-23T04:56:07.000+00:00
          balance: 1
          subtype: subtype
          total_amount: 0
          effective_date: 2000-01-23T04:56:07.000+00:00
          currency: currency
          req_amount: 0
          risk_info: {}
          operation: hold_new
          status: PENDING
        reference_id: reference_id
        created: 2000-01-23T04:56:07.000+00:00
        idemkey: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        id: 7
        account_no: account_no
        updated: 2000-01-23T04:56:07.000+00:00
        uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        tenant: tenant
    pending_transaction_data:
      required:
      - amount
      - avail_balance
      - balance
      - currency
      - dc_sign
      - effective_date
      - expires_at
      - external_data
      - force_post
      - history
      - memo
      - network
      - operation
      - reason
      - req_amount
      - risk_info
      - status
      - subtype
      - total_amount
      - type
      - user_data
      - was_partial
      type: object
      properties:
        amount:
          minimum: 0
          type: integer
          description: The amount of the hold.
        avail_balance:
          type: integer
          description: The account "available balance" at the time this hold was created
        balance:
          type: integer
          description: The account balance at the time this hold was created
        currency:
          type: string
          description: ISO 4217 alphabetic currency code of the transfer amount
        dc_sign:
          $ref: '#/components/schemas/dc_sign'
        effective_date:
          type: string
          description: The effective date of the transaction once it gets posted
          format: date-time
        expires_at:
          type: string
          description: The date that at which this hold is no longer valid.
          format: date-time
        external_data:
          type: object
          description: an unstructured json blob representing additional transaction
            information supplied by the integrator.
          nullable: true
        force_post:
          type: boolean
          description: Whether or not the hold was forced (spending controls ignored)
        history:
          type: array
          description: "An array representing any previous states of the hold, if\
            \ it has been modified (For example, increasing or decreasing the hold\
            \ amount)."
          items:
            $ref: '#/components/schemas/pending_transaction_history'
        memo:
          type: string
        network:
          type: string
          description: The network this transaction is associated with
        operation:
          type: string
          enum:
          - hold_new
          - hold_increase
          - hold_decrease
          - hold_replace
          - hold_decline
          - hold_cancel
          - hold_post
        reason:
          type: string
          description: "If a hold has been declined or modified, this will include\
            \ the reason."
        req_amount:
          minimum: 0
          type: integer
          description: "The requested amount, in the case of hold modifications."
        risk_info:
          type: object
          description: Information received by the transaction risk/fraud service
            related to this transaction
          nullable: true
        status:
          type: string
          description: The status of the hold.
          enum:
          - PENDING
          - REPLACED
          - DECLINED
          - RELEASED
          - PARTCLEARD
          - EXPIRED
          - CLEARED
          - INTERNAL_ERROR
        subtype:
          type: string
          description: "The specific transaction type. For example, for `ach`, this\
            \ may be \"outgoing_debit\"."
        total_amount:
          minimum: 0
          type: integer
          description: The total amount of the hold. This may be different than `amount`
            in the case where a hold increase or decrease was requested.
        transaction_id:
          type: string
          description: "The uuid of the transaction that this pending transaction\
            \ originated from, if any. This is primary used when a transaction \"\
            posts\", but a subset of the amount reserved until a future settlement\
            \ date."
          format: uuid
        type:
          type: string
          description: "The general type of transaction. For example, \"card\" or\
            \ \"ach\"."
        user_data:
          type: object
          description: An unstructured JSON blob representing additional transaction
            information specific to each payment rail.
          nullable: true
        was_partial:
          type: boolean
          description: Does this hold represent a partial debit (or credit)?
      example:
        transaction_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        reason: reason
        amount: 0
        external_data: {}
        was_partial: true
        avail_balance: 6
        memo: memo
        history:
        - data:
            reason: reason
            amount: 0
            external_data: {}
            was_partial: true
            avail_balance: 5
            user_data: {}
            type: type
            network: network
            dc_sign: null
            force_post: true
            expires_at: 2000-01-23T04:56:07.000+00:00
            balance: 2
            subtype: subtype
            total_amount: 0
            effective_date: 2000-01-23T04:56:07.000+00:00
            currency: currency
            req_amount: 0
            risk_info: {}
            operation: hold_new
            status: PENDING
          created: 2000-01-23T04:56:07.000+00:00
          idemkey: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          id: 3
          account_no: account_no
          updated: 2000-01-23T04:56:07.000+00:00
          uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          tenant: tenant
        - data:
            reason: reason
            amount: 0
            external_data: {}
            was_partial: true
            avail_balance: 5
            user_data: {}
            type: type
            network: network
            dc_sign: null
            force_post: true
            expires_at: 2000-01-23T04:56:07.000+00:00
            balance: 2
            subtype: subtype
            total_amount: 0
            effective_date: 2000-01-23T04:56:07.000+00:00
            currency: currency
            req_amount: 0
            risk_info: {}
            operation: hold_new
            status: PENDING
          created: 2000-01-23T04:56:07.000+00:00
          idemkey: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          id: 3
          account_no: account_no
          updated: 2000-01-23T04:56:07.000+00:00
          uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          tenant: tenant
        user_data: {}
        type: type
        network: network
        dc_sign: debit
        force_post: true
        expires_at: 2000-01-23T04:56:07.000+00:00
        balance: 1
        subtype: subtype
        total_amount: 0
        effective_date: 2000-01-23T04:56:07.000+00:00
        currency: currency
        req_amount: 0
        risk_info: {}
        operation: hold_new
        status: PENDING
    pending_transaction_history:
      title: A pending transaction
      required:
      - account_no
      - created
      - data
      - id
      - idemkey
      - tenant
      - updated
      - uuid
      type: object
      properties:
        account_no:
          type: string
          description: The account number associated with the hold
        created:
          type: string
          description: The creation date of the hold
          format: date-time
        data:
          $ref: '#/components/schemas/pending_transaction_history_data'
        id:
          type: integer
        idemkey:
          type: string
          description: The idempotency key used when initially creating this transaction.
          format: uuid
        tenant:
          type: string
          description: "The tenant associated with this transaction, in the form \"\
            <bankid>_<partnerid>\""
        updated:
          type: string
          description: The date the hold was last update
          format: date-time
        uuid:
          type: string
          description: The unique identifier of the hold.
          format: uuid
      example:
        data:
          reason: reason
          amount: 0
          external_data: {}
          was_partial: true
          avail_balance: 5
          user_data: {}
          type: type
          network: network
          dc_sign: null
          force_post: true
          expires_at: 2000-01-23T04:56:07.000+00:00
          balance: 2
          subtype: subtype
          total_amount: 0
          effective_date: 2000-01-23T04:56:07.000+00:00
          currency: currency
          req_amount: 0
          risk_info: {}
          operation: hold_new
          status: PENDING
        created: 2000-01-23T04:56:07.000+00:00
        idemkey: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        id: 3
        account_no: account_no
        updated: 2000-01-23T04:56:07.000+00:00
        uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        tenant: tenant
    pending_transaction_history_data:
      required:
      - amount
      - avail_balance
      - balance
      - currency
      - dc_sign
      - effective_date
      - expires_at
      - external_data
      - force_post
      - history
      - network
      - operation
      - reason
      - req_amount
      - risk_info
      - status
      - subtype
      - total_amount
      - type
      - user_data
      - was_partial
      type: object
      properties:
        amount:
          minimum: 0
          type: integer
          description: The amount of the hold.
        avail_balance:
          type: integer
          description: The account "available balance" at the time this hold was created
        balance:
          type: integer
          description: The account balance at the time this hold was created
        currency:
          type: string
          description: ISO 4217 alphabetic currency code of the transfer amount
        dc_sign:
          $ref: '#/components/schemas/dc_sign'
        effective_date:
          type: string
          description: The effective date of the transaction once it gets posted
          format: date-time
        expires_at:
          type: string
          description: The date that at which this hold is no longer valid.
          format: date-time
        external_data:
          type: object
          description: an unstructured json blob representing additional transaction
            information supplied by the integrator.
          nullable: true
        force_post:
          type: boolean
          description: Whether or not the hold was forced (spending controls ignored)
        network:
          type: string
          description: The network this transaction is associated with
        operation:
          type: string
          enum:
          - hold_new
          - hold_increase
          - hold_decrease
          - hold_replace
          - hold_decline
          - hold_cancel
          - hold_post
        reason:
          type: string
          description: "If a hold has been declined or modified, this will include\
            \ the reason."
        req_amount:
          minimum: 0
          type: integer
          description: "The requested amount, in the case of hold modifications."
        risk_info:
          type: object
          description: Information received by the transaction risk/fraud service
            related to this transaction
          nullable: true
        status:
          type: string
          description: The status of the hold.
          enum:
          - PENDING
          - REPLACED
          - DECLINED
          - RELEASED
          - PARTCLEARD
          - EXPIRED
          - CLEARED
          - INTERNAL_ERROR
        subtype:
          type: string
          description: "The specific transaction type. For example, for `ach`, this\
            \ may be \"outgoing_debit\"."
        total_amount:
          minimum: 0
          type: integer
          description: The total amount of the hold. This may be different than `amount`
            in the case where a hold increase or decrease was requested.
        type:
          type: string
          description: "The general type of transaction. For example, \"card\" or\
            \ \"ach\"."
        user_data:
          type: object
          description: An unstructured JSON blob representing additional transaction
            information specific to each payment rail.
          nullable: true
        was_partial:
          type: boolean
          description: Does this hold represent a partial debit (or credit)?
      example:
        reason: reason
        amount: 0
        external_data: {}
        was_partial: true
        avail_balance: 5
        user_data: {}
        type: type
        network: network
        dc_sign: null
        force_post: true
        expires_at: 2000-01-23T04:56:07.000+00:00
        balance: 2
        subtype: subtype
        total_amount: 0
        effective_date: 2000-01-23T04:56:07.000+00:00
        currency: currency
        req_amount: 0
        risk_info: {}
        operation: hold_new
        status: PENDING
    pending_transactions:
      title: Pending Transactions Response
      required:
      - next_page_token
      - result
      type: object
      properties:
        next_page_token:
          type: string
          description: "If returned, use the next_page_token to query for the next\
            \ page of results. Not returned if there are no more rows."
          nullable: true
        result:
          type: array
          description: List of pending transactions
          items:
            $ref: '#/components/schemas/pending_transaction'
      example:
        result:
        - account_id: 990e8a9f-ced7-4eb2-8056-89cffebfc5ed
          data:
            transaction_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            reason: reason
            amount: 0
            external_data: {}
            was_partial: true
            avail_balance: 6
            memo: memo
            history:
            - data:
                reason: reason
                amount: 0
                external_data: {}
                was_partial: true
                avail_balance: 5
                user_data: {}
                type: type
                network: network
                dc_sign: null
                force_post: true
                expires_at: 2000-01-23T04:56:07.000+00:00
                balance: 2
                subtype: subtype
                total_amount: 0
                effective_date: 2000-01-23T04:56:07.000+00:00
                currency: currency
                req_amount: 0
                risk_info: {}
                operation: hold_new
                status: PENDING
              created: 2000-01-23T04:56:07.000+00:00
              idemkey: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
              id: 3
              account_no: account_no
              updated: 2000-01-23T04:56:07.000+00:00
              uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
              tenant: tenant
            - data:
                reason: reason
                amount: 0
                external_data: {}
                was_partial: true
                avail_balance: 5
                user_data: {}
                type: type
                network: network
                dc_sign: null
                force_post: true
                expires_at: 2000-01-23T04:56:07.000+00:00
                balance: 2
                subtype: subtype
                total_amount: 0
                effective_date: 2000-01-23T04:56:07.000+00:00
                currency: currency
                req_amount: 0
                risk_info: {}
                operation: hold_new
                status: PENDING
              created: 2000-01-23T04:56:07.000+00:00
              idemkey: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
              id: 3
              account_no: account_no
              updated: 2000-01-23T04:56:07.000+00:00
              uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
              tenant: tenant
            user_data: {}
            type: type
            network: network
            dc_sign: debit
            force_post: true
            expires_at: 2000-01-23T04:56:07.000+00:00
            balance: 1
            subtype: subtype
            total_amount: 0
            effective_date: 2000-01-23T04:56:07.000+00:00
            currency: currency
            req_amount: 0
            risk_info: {}
            operation: hold_new
            status: PENDING
          reference_id: reference_id
          created: 2000-01-23T04:56:07.000+00:00
          idemkey: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          id: 7
          account_no: account_no
          updated: 2000-01-23T04:56:07.000+00:00
          uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          tenant: tenant
        - account_id: 990e8a9f-ced7-4eb2-8056-89cffebfc5ed
          data:
            transaction_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            reason: reason
            amount: 0
            external_data: {}
            was_partial: true
            avail_balance: 6
            memo: memo
            history:
            - data:
                reason: reason
                amount: 0
                external_data: {}
                was_partial: true
                avail_balance: 5
                user_data: {}
                type: type
                network: network
                dc_sign: null
                force_post: true
                expires_at: 2000-01-23T04:56:07.000+00:00
                balance: 2
                subtype: subtype
                total_amount: 0
                effective_date: 2000-01-23T04:56:07.000+00:00
                currency: currency
                req_amount: 0
                risk_info: {}
                operation: hold_new
                status: PENDING
              created: 2000-01-23T04:56:07.000+00:00
              idemkey: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
              id: 3
              account_no: account_no
              updated: 2000-01-23T04:56:07.000+00:00
              uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
              tenant: tenant
            - data:
                reason: reason
                amount: 0
                external_data: {}
                was_partial: true
                avail_balance: 5
                user_data: {}
                type: type
                network: network
                dc_sign: null
                force_post: true
                expires_at: 2000-01-23T04:56:07.000+00:00
                balance: 2
                subtype: subtype
                total_amount: 0
                effective_date: 2000-01-23T04:56:07.000+00:00
                currency: currency
                req_amount: 0
                risk_info: {}
                operation: hold_new
                status: PENDING
              created: 2000-01-23T04:56:07.000+00:00
              idemkey: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
              id: 3
              account_no: account_no
              updated: 2000-01-23T04:56:07.000+00:00
              uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
              tenant: tenant
            user_data: {}
            type: type
            network: network
            dc_sign: debit
            force_post: true
            expires_at: 2000-01-23T04:56:07.000+00:00
            balance: 1
            subtype: subtype
            total_amount: 0
            effective_date: 2000-01-23T04:56:07.000+00:00
            currency: currency
            req_amount: 0
            risk_info: {}
            operation: hold_new
            status: PENDING
          reference_id: reference_id
          created: 2000-01-23T04:56:07.000+00:00
          idemkey: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          id: 7
          account_no: account_no
          updated: 2000-01-23T04:56:07.000+00:00
          uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          tenant: tenant
        next_page_token: next_page_token
    person:
      type: object
      description: Details of a person.
      allOf:
      - required:
        - is_customer
        - status
      - $ref: '#/components/schemas/base_person1'
    person_business_owner_relationship:
      type: object
      description: Denotes the relationship between specified person and business.
      allOf:
      - required:
        - additional_data
        - from_person_id
        - to_business_id
      - $ref: '#/components/schemas/patch_person_business_owner_relationship'
    person_business_relationship:
      type: object
      description: Denotes the relationship between specified person and business.
      allOf:
      - required:
        - additional_data
        - from_person_id
        - to_business_id
      - $ref: '#/components/schemas/patch_person_business_relationship'
    person_id:
      type: string
      description: |
        Unique ID for the person. Exactly one of `person_id` or `business_id` must be set.
      format: uuid
      example: 7efcb465-9e96-473d-aad2-d4e9dcb204cf
    person_list:
      allOf:
      - required:
        - persons
        type: object
        properties:
          persons:
            type: array
            description: Array of persons.
            items:
              $ref: '#/components/schemas/person'
      - $ref: '#/components/schemas/paginated_response'
    person1:
      title: Person
      type: object
      properties:
        creation_time:
          type: string
          format: date-time
        first_name:
          type: string
        id:
          type: string
          format: uuid
        last_name:
          type: string
        last_updated_time:
          type: string
          format: date-time
        middle_name:
          type: string
        relationship_type:
          type: string
    physical_card:
      title: Physical Card
      description: Details pertaining to issuing a new physical card
      allOf:
      - $ref: '#/components/schemas/base_card'
      - type: object
        properties:
          card_image_id:
            type: string
            description: The ID of the custom card image used for this card
            format: uuid
            example: 1496b399-04c2-4e53-9d88-329e4732850d
          is_pin_set:
            type: boolean
            description: indicates whether a pin has been set on the card
            readOnly: true
            example: false
            default: false
          shipping:
            $ref: '#/components/schemas/shipping'
    physical_card_format:
      type: string
      description: The format of a physical card product
      enum:
      - MAGNETIC_STRIPE
      - CHIP
      - CONTACT
      - CONTACTLESS
      - PHYSICAL_COMBO
    physical_card_issuance_request:
      example:
        account_id: d60a7246-34a8-48c9-9282-e695b1262b9a
        card_product_id: 6dec954d-f073-47e9-afc9-2a8b26f6efa4
        customer_id: cac88c0c-0e64-4981-9c1f-2d327bef7dfd
        form: PHYSICAL
        type: DEBIT
      allOf:
      - $ref: '#/components/schemas/physical_card'
      - required:
        - account_id
        - card_product_id
        - customer_id
        - form
        - type
        type: object
    physical_card_plus_status:
      allOf:
      - $ref: '#/components/schemas/physical_card'
      - $ref: '#/components/schemas/physical_card_response_status'
    physical_card_response:
      allOf:
      - $ref: '#/components/schemas/physical_card_plus_status'
      - required:
        - account_id
        - card_brand
        - card_product_id
        - creation_time
        - customer_id
        - emboss_name
        - form
        - id
        - physical_card_format
        - shipping
        - type
        type: object
        properties:
          physical_card_format:
            $ref: '#/components/schemas/physical_card_format'
    physical_card_response_status:
      allOf:
      - $ref: '#/components/schemas/card_status_object'
      - required:
        - card_fulfillment_status
        - card_status
        - status_reason
        type: object
        properties:
          card_fulfillment_status:
            $ref: '#/components/schemas/card_fulfillment_status'
          tracking_number:
            type: string
            description: The tracking number
            readOnly: true
            example: "41991234567890123456"
    ping_response:
      required:
      - webhook_status
      type: object
      properties:
        webhook_status:
          type: string
          description: status of webhook endpoint
          example: alive
    plaid_account_verification:
      title: Information specific to Plaid verification
      allOf:
      - $ref: '#/components/schemas/base_account_verification'
    posted_transaction:
      title: A posted transaction
      required:
      - created
      - data
      - effective_date
      - id
      - idemkey
      - info_only
      - lead_mode
      - posted_date
      - reference_id
      - status
      - subtype
      - tenant
      - type
      - updated
      - uuid
      type: object
      properties:
        created:
          type: string
          description: The creation date of the transaction
          format: date-time
        data:
          $ref: '#/components/schemas/posted_transaction_data'
        effective_date:
          type: string
          description: "The \"effective date\" of a transaction. This may be earlier\
            \ than posted_date in some cases (for example, a transaction that occurs\
            \ on a Saturday may not be posted until the following Monday, but would\
            \ have an effective date of Saturday)"
          format: date-time
        id:
          type: integer
        idemkey:
          type: string
          description: The idempotency key used when initially creating this transaction.
          example: 369c0195-a5a9-4d68-bd44-953e5c835059
        info_only:
          type: boolean
          description: Whether or not this transaction represents a purely informational
            operation or an actual money movement
        lead_mode:
          type: boolean
          description: Whether or not this transaction was created operating in "lead
            ledger" mode
        posted_date:
          type: string
          description: The date the transaction was posted. This is the date any money
            is considered to be added or removed from an account.
          format: date-time
        reference_id:
          type: string
          description: An external ID provided by the payment network to represent
            this transaction. This will always be null for internal transfers.
          nullable: true
        status:
          type: string
        subtype:
          type: string
          description: "The specific transaction type. For example, for `ach`, this\
            \ may be \"outgoing_debit\"."
        tenant:
          type: string
          description: "The tenant associated with this transaction, in the form \"\
            <bankid>_<partnerid>\""
        type:
          type: string
          description: "The general type of transaction. For example, \"card\" or\
            \ \"ach\"."
        updated:
          type: string
          description: The date the transaction was last updated
          format: date-time
        uuid:
          type: string
          description: The unique identifier of the transaction.
          format: uuid
      example:
        lead_mode: true
        data:
          metadata: {}
          external_data: {}
          original_trx: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          hold_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          memo: memo
          risk_info: {}
          user_data: {}
          lines:
          - amount: 0
            is_primary: true
            created: 2000-01-23T04:56:07.000+00:00
            related_line: 5
            is_offset: true
            available_balance: 6
            account_no: account_no
            uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            network: network
            dc_sign: debit
            account_id: 842dfacd-0b2c-476a-a43b-e1c5dabc2fe6
            balance: 1
            is_gl_acc: true
            meta: {}
            currency: currency
            updated: 2000-01-23T04:56:07.000+00:00
            seq: 5
            tenant: tenant
            is_fee: true
          - amount: 0
            is_primary: true
            created: 2000-01-23T04:56:07.000+00:00
            related_line: 5
            is_offset: true
            available_balance: 6
            account_no: account_no
            uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            network: network
            dc_sign: debit
            account_id: 842dfacd-0b2c-476a-a43b-e1c5dabc2fe6
            balance: 1
            is_gl_acc: true
            meta: {}
            currency: currency
            updated: 2000-01-23T04:56:07.000+00:00
            seq: 5
            tenant: tenant
            is_fee: true
        reference_id: reference_id
        created: 2000-01-23T04:56:07.000+00:00
        idemkey: 369c0195-a5a9-4d68-bd44-953e5c835059
        type: type
        uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        subtype: subtype
        effective_date: 2000-01-23T04:56:07.000+00:00
        info_only: true
        id: 2
        updated: 2000-01-23T04:56:07.000+00:00
        posted_date: 2000-01-23T04:56:07.000+00:00
        tenant: tenant
        status: status
    posted_transaction_data:
      required:
      - external_data
      - lines
      - memo
      - metadata
      - risk_info
      - user_data
      type: object
      properties:
        external_data:
          type: object
          description: an unstructured json blob representing additional transaction
            information supplied by the integrator.
          nullable: true
        hold_id:
          type: string
          description: "The uuid of the hold (pending transaction) that this transaction\
            \ originated from, if any."
          format: uuid
        lines:
          type: array
          description: "The set of accounting entries associated with this transaction.\
            \ For example, a debit to a customer account will have a corresponding\
            \ credit in a general ledger account."
          items:
            $ref: '#/components/schemas/transaction_line1'
        memo:
          type: string
        metadata:
          type: object
          nullable: true
        original_trx:
          type: string
          description: The "original" transaction that this transaction is related
            to. This is only populated in the case of reversed transactions.
          format: uuid
        risk_info:
          type: object
          description: Information received by the transaction risk/fraud service
            related to this transaction
          nullable: true
        user_data:
          type: object
          description: An unstructured JSON blob representing additional transaction
            information specific to each payment rail.
          nullable: true
      example:
        metadata: {}
        external_data: {}
        original_trx: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        hold_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        memo: memo
        risk_info: {}
        user_data: {}
        lines:
        - amount: 0
          is_primary: true
          created: 2000-01-23T04:56:07.000+00:00
          related_line: 5
          is_offset: true
          available_balance: 6
          account_no: account_no
          uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          network: network
          dc_sign: debit
          account_id: 842dfacd-0b2c-476a-a43b-e1c5dabc2fe6
          balance: 1
          is_gl_acc: true
          meta: {}
          currency: currency
          updated: 2000-01-23T04:56:07.000+00:00
          seq: 5
          tenant: tenant
          is_fee: true
        - amount: 0
          is_primary: true
          created: 2000-01-23T04:56:07.000+00:00
          related_line: 5
          is_offset: true
          available_balance: 6
          account_no: account_no
          uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          network: network
          dc_sign: debit
          account_id: 842dfacd-0b2c-476a-a43b-e1c5dabc2fe6
          balance: 1
          is_gl_acc: true
          meta: {}
          currency: currency
          updated: 2000-01-23T04:56:07.000+00:00
          seq: 5
          tenant: tenant
          is_fee: true
    posted_transactions:
      title: Posted Transactions Response
      required:
      - next_page_token
      - result
      type: object
      properties:
        next_page_token:
          type: string
          description: "If returned, use the next_page_token to query for the next\
            \ page of results. Not returned if there are no more rows."
          nullable: true
        result:
          type: array
          description: List of posted transactions
          items:
            $ref: '#/components/schemas/posted_transaction'
      example:
        result:
        - lead_mode: true
          data:
            metadata: {}
            external_data: {}
            original_trx: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            hold_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            memo: memo
            risk_info: {}
            user_data: {}
            lines:
            - amount: 0
              is_primary: true
              created: 2000-01-23T04:56:07.000+00:00
              related_line: 5
              is_offset: true
              available_balance: 6
              account_no: account_no
              uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
              network: network
              dc_sign: debit
              account_id: 842dfacd-0b2c-476a-a43b-e1c5dabc2fe6
              balance: 1
              is_gl_acc: true
              meta: {}
              currency: currency
              updated: 2000-01-23T04:56:07.000+00:00
              seq: 5
              tenant: tenant
              is_fee: true
            - amount: 0
              is_primary: true
              created: 2000-01-23T04:56:07.000+00:00
              related_line: 5
              is_offset: true
              available_balance: 6
              account_no: account_no
              uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
              network: network
              dc_sign: debit
              account_id: 842dfacd-0b2c-476a-a43b-e1c5dabc2fe6
              balance: 1
              is_gl_acc: true
              meta: {}
              currency: currency
              updated: 2000-01-23T04:56:07.000+00:00
              seq: 5
              tenant: tenant
              is_fee: true
          reference_id: reference_id
          created: 2000-01-23T04:56:07.000+00:00
          idemkey: 369c0195-a5a9-4d68-bd44-953e5c835059
          type: type
          uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          subtype: subtype
          effective_date: 2000-01-23T04:56:07.000+00:00
          info_only: true
          id: 2
          updated: 2000-01-23T04:56:07.000+00:00
          posted_date: 2000-01-23T04:56:07.000+00:00
          tenant: tenant
          status: status
        - lead_mode: true
          data:
            metadata: {}
            external_data: {}
            original_trx: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            hold_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            memo: memo
            risk_info: {}
            user_data: {}
            lines:
            - amount: 0
              is_primary: true
              created: 2000-01-23T04:56:07.000+00:00
              related_line: 5
              is_offset: true
              available_balance: 6
              account_no: account_no
              uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
              network: network
              dc_sign: debit
              account_id: 842dfacd-0b2c-476a-a43b-e1c5dabc2fe6
              balance: 1
              is_gl_acc: true
              meta: {}
              currency: currency
              updated: 2000-01-23T04:56:07.000+00:00
              seq: 5
              tenant: tenant
              is_fee: true
            - amount: 0
              is_primary: true
              created: 2000-01-23T04:56:07.000+00:00
              related_line: 5
              is_offset: true
              available_balance: 6
              account_no: account_no
              uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
              network: network
              dc_sign: debit
              account_id: 842dfacd-0b2c-476a-a43b-e1c5dabc2fe6
              balance: 1
              is_gl_acc: true
              meta: {}
              currency: currency
              updated: 2000-01-23T04:56:07.000+00:00
              seq: 5
              tenant: tenant
              is_fee: true
          reference_id: reference_id
          created: 2000-01-23T04:56:07.000+00:00
          idemkey: 369c0195-a5a9-4d68-bd44-953e5c835059
          type: type
          uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          subtype: subtype
          effective_date: 2000-01-23T04:56:07.000+00:00
          info_only: true
          id: 2
          updated: 2000-01-23T04:56:07.000+00:00
          posted_date: 2000-01-23T04:56:07.000+00:00
          tenant: tenant
          status: status
        next_page_token: next_page_token
    prefill_request:
      properties:
        ssn_filled:
          type: boolean
          description: "If true, the person's SSN was successfully populated."
          readOnly: true
          example: true
        ssn_last4:
          type: string
          description: Last four digits of person's Social Security number (SSN).
          example: "4271"
      example:
        ssn_last4: "4271"
        ssn_filled: true
    prospect:
      title: Customer
      type: object
      description: A prospect has a unique identifier. It can be upgrade to a customer
        with required information
      allOf:
      - required:
        - status
        properties:
          dob:
            type: string
            description: Customer's date of birth in RFC 3339 full-date format (YYYY-MM-DD)
            format: date
            example: 2000-01-01
          first_name:
            type: string
            description: Customer's first name
            example: Rahul
          last_name:
            type: string
            description: Customer's last name
            example: Adams
          status:
            type: string
            description: Customer's status
            enum:
            - ACTIVE
            - ESCHEAT
            - DECEASED
            - DENIED
            - DORMANT
            - FROZEN
            - INACTIVE
            - PROSPECT
            - SANCTION
      - $ref: '#/components/schemas/base_person'
    prospect_editable:
      title: Prospect
      type: object
      properties:
        first_name:
          type: string
          description: First Name
          example: John
        last_name:
          type: string
          description: Last Name
          example: Smith
        metadata:
          type: string
          description: Client supplied json metadata to be stored with the prospect
          example: "{'foo':'bar'}"
        source:
          type: string
          description: Source of prospect
          example: email
        status:
          $ref: '#/components/schemas/prospect_status'
    prospect_status:
      type: string
      description: Status of the prospect
      enum:
      - CREATED
      - VERIFIED
      - ADMITTED
      - WITHDRAWN
      x-enumDescriptions:
      - CREATED: a newly created prospect that has not yet been verified
      - VERIFIED: "a prospect that has been verified, e.g. the full name was collected,\
          \ email address was validated, the prospect clicked on a verification link\
          \ in an email, etc."
      - ADMITTED: a prospect that has been converted into a customer
      - WITHDRAWN: a prospect that is no longer interested in becoming a customer
    prospect1:
      title: Prospect
      allOf:
      - required:
        - email
        type: object
        properties:
          creation_time:
            type: string
            description: Creation time
            format: date-time
            readOnly: true
          email:
            type: string
            description: Email
            format: email
            example: someone@example.com
          email_validation:
            type: string
            readOnly: true
            enum:
            - PENDING
            - VALID
            - INVALID
            x-enumDescriptions:
            - PENDING: email address is pending for validation
            - VALID: valid email address
            - INVALID: invalid email address
          id:
            type: string
            description: Prospect ID
            format: uuid
            readOnly: true
          last_updated_time:
            type: string
            description: Most recent updated time
            format: date-time
            readOnly: true
          points:
            type: integer
            description: Number of referral points
            example: 100
          recaptcha_token:
            type: string
            description: A token used to verify the user is not a robot
            writeOnly: true
            x-external: false
          referral_code:
            type: string
            description: Referral code
            readOnly: true
            example: BJDD302M
          referred_by:
            type: string
            description: UUID of the referrer
            format: uuid
            readOnly: true
          referred_by_code:
            type: string
            description: Referral code of the referrer
            example: 1v3atj3z
          referred_prospects:
            type: integer
            description: Number of people this prospect referred
            readOnly: true
          vendor_info:
            $ref: '#/components/schemas/vendor_info'
          verification_token:
            type: string
            description: Verification token sent to prospect
            readOnly: true
            example: ABD37C31
          waitlist_id:
            type: string
            description: Waitlist ID
            format: uuid
            readOnly: true
          waitlist_position:
            type: integer
            description: Prospect's number in the waitlist
            nullable: true
            readOnly: true
            example: 1
      - $ref: '#/components/schemas/prospect_editable'
    prospects_list:
      title: Prospects List
      allOf:
      - required:
        - prospects
        type: object
        properties:
          prospects:
            type: array
            description: Array of Prospects
            items:
              $ref: '#/components/schemas/prospect1'
      - $ref: '#/components/schemas/paginated_response'
    provider_type:
      type: string
      description: Name of the organization that provided this data.
      example: SOCURE
      enum:
      - IDOLOGY
      - SOCURE
    provisioning_app_version:
      maxLength: 50
      type: string
      description: Version of the application making the provisioning request.
    provisioning_controls:
      type: object
      properties:
        in_app_provisioning:
          $ref: '#/components/schemas/in_app_provisioning'
        manual_entry:
          $ref: '#/components/schemas/manual_entry'
        wallet_provider_card_on_file:
          $ref: '#/components/schemas/wallet_provider_card_on_file'
    push_tokenize_request_data:
      type: object
      properties:
        display_name:
          type: string
        last_digits:
          type: string
        network:
          type: string
          example: mastercard
        opaque_payment_card:
          type: string
        token_service_provider:
          type: string
        user_address:
          $ref: '#/components/schemas/address1'
      example:
        token_service_provider: token_service_provider
        opaque_payment_card: opaque_payment_card
        user_address:
          country_code: TG
          city: Port Shawn
          address_line_1: 2010 Schowalter Parks
          address_line_2: Apt. 479
          state: CO
          postal_code: "49633"
        display_name: display_name
        last_digits: last_digits
        network: mastercard
    quickstart_t10:
      required:
      - bank_id
      - partner_id
      type: object
      properties:
        bank_id:
          type: integer
          description: The ID of the bank partner works with within this program
        partner_id:
          type: integer
          description: The ID of the partner
    quickstart_t10_response:
      required:
      - card_products
      - card_program
      type: object
      properties:
        card_products:
          maxItems: 3
          minItems: 3
          type: array
          description: Array of card products created
          items:
            $ref: '#/components/schemas/card_product_response'
        card_program:
          $ref: '#/components/schemas/card_program_response'
      description: T-10 cards config details
    rate_details:
      required:
      - accrual_period
      - rate
      - valid_from
      type: object
      properties:
        accrual_period:
          type: string
          enum:
          - DAILY
          - MONTHLY
        rate:
          type: integer
          description: Rate in basis points. E.g. 5 represents 0.05%
          format: int32
        valid_from:
          type: string
          description: Rate effective start date. Inclusive.
          format: date
        valid_to:
          type: string
          description: Rate effective end date. Exclusive.
          format: date
    rates:
      type: array
      description: |
        A list of interest rate. Date intervals between valid_from and valid_to expect to have no overlap.
      items:
        $ref: '#/components/schemas/rate_details'
      x-schema-name: rates
    raw_response:
      title: Raw response from providers.
      type: object
      properties:
        provider:
          $ref: '#/components/schemas/provider_type'
        raw_data:
          type: string
          description: "Raw data from an external provider, as a JSON string."
          example: "{}"
      example:
        provider: SOCURE
        raw_data: "{}"
      deprecated: true
    recipient_name:
      required:
      - first_name
      - last_name
      type: object
      properties:
        first_name:
          type: string
          example: Jose
        last_name:
          type: string
          example: Kuhn
        middle_name:
          type: string
          example: b
      description: The name of the recipient to whom the card will be shipped
    reconciliation:
      title: Reconciliation
      required:
      - file_name
      - id
      - ingestion_status
      type: object
      properties:
        file_name:
          type: string
          description: Filename of the data to be reconciled
          readOnly: true
          example: kzjjjilezoug03
        id:
          type: string
          description: Reconciliation ID
          format: uuid
          readOnly: true
          example: f9ce6cf7-63b8-4ade-9876-e302cdc74780
        ingestion_status:
          $ref: '#/components/schemas/ingestion_status'
      description: Reconciliation
      example:
        file_name: kzjjjilezoug03
        id: f9ce6cf7-63b8-4ade-9876-e302cdc74780
        ingestion_status: IN_PROCESS
    reconciliation_input:
      title: Reconciliation Input
      required:
      - byte_data
      - file_name
      type: object
      properties:
        byte_data:
          type: string
          description: Base64url encoded image
          format: byte
        file_name:
          type: string
          description: Filename of the data to be reconciled
          example: hyw45xh2rgkgk0
      description: Input data for a reconciliation
    reconciliation_list:
      allOf:
      - required:
        - reconciliations
        type: object
        properties:
          reconciliations:
            type: array
            description: Array of reconciliations
            items:
              $ref: '#/components/schemas/reconciliation'
      - $ref: '#/components/schemas/paginated_response'
    relationship:
      title: Account Relationship
      required:
      - relationship_type
      type: object
      properties:
        business_id:
          type: string
          description: Business associated with the current account
          format: uuid
        customer_id:
          type: string
          description: Personal customer associated with the current account.
          format: uuid
        id:
          type: string
          description: ID of account relationship
          format: uuid
          readOnly: true
        person_id:
          type: string
          description: Person associated with the current account. This attribute
            is deprecated and will be removed in a future API version. Use customer_id
            instead.
          format: uuid
          deprecated: true
        relationship_type:
          $ref: '#/components/schemas/account_relationship_type'
      description: "The relationship of the account and the customer/business. Either\
        \ customer_id OR business_id must be specified, but not both."
      example:
        relationship_type: ACCOUNT_HOLDER
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        customer_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        business_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        person_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
    relationship_in:
      type: object
      discriminator:
        propertyName: RelationshipType
        mapping:
          BENEFICIAL_OWNER_OF: '#/components/schemas/person_business_owner_relationship'
          MANAGING_PERSON_OF: '#/components/schemas/person_business_relationship'
          OWNER_OF: '#/components/schemas/business_business_owner_relationship'
      oneOf:
      - $ref: '#/components/schemas/person_business_relationship'
      - $ref: '#/components/schemas/person_business_owner_relationship'
      - $ref: '#/components/schemas/business_business_owner_relationship'
    relationship_list:
      allOf:
      - required:
        - relationships
        type: object
        properties:
          relationships:
            type: array
            description: Array of relationships
            items:
              $ref: '#/components/schemas/relationship'
      - $ref: '#/components/schemas/paginated_response'
    relationship_role:
      title: Relationship Role
      type: string
      description: "CUSTODIAN - Related party is the custodian e.g. the parent, BENEFICIARY\
        \ - Related party is the beneficiary e.g. the dependent, PARTNER - Related\
        \ party is the partner"
      example: CUSTODIAN
      enum:
      - CUSTODIAN
      - BENEFICIARY
      - PARTNER
    relationship1:
      title: Relationship
      required:
      - id
      - relationship_role
      type: object
      properties:
        id:
          type: string
          description: ID of related entity
          format: uuid
          example: fa6cceb1-245d-4b08-8e9e-648c01621aba
        relationship_role:
          $ref: '#/components/schemas/relationship_role'
    relationships_list:
      allOf:
      - required:
        - relationships
        type: object
        properties:
          relationships:
            type: array
            description: Array of business/person relationships.
            items:
              $ref: '#/components/schemas/relationship_in'
      - $ref: '#/components/schemas/paginated_response'
    resend_response:
      type: object
      properties:
        body:
          type: string
          description: response of the event notification
          example: usertransition response
    response_history_item:
      title: Response history
      type: object
      properties:
        code:
          type: integer
          description: Response code from the request
        response_body:
          type: string
          description: Response body from the request(Length more than 1024 will be
            trimmed)
        response_time:
          type: string
          description: Timestamp that the response is received
          format: date-time
        sent_time:
          type: string
          description: Timestamp that the request is sent
          format: date-time
      description: Response history object of the webhook request
      example:
        sent_time: 2000-01-23T04:56:07.000+00:00
        code: 0
        response_body: response_body
        response_time: 2000-01-23T04:56:07.000+00:00
    return_ach:
      required:
      - type
      type: object
      properties:
        type:
          type: string
          enum:
          - insufficient_funds
          - acc_closed
          - acc_not_found
          - acc_invalid
          - unauthorized_corp_debit
          - return_requested
          - auth_revoked
          - payment_stopped
          - uncollected_funds
          - unauthorized_debit
          - failed_terms
          - account_sold
          - acc_frozen
          - fields_not_processable
          - improper_effective_date
          - non_transaction_account
          - credit_refused
          - duplicate_transaction
          - corp_receiver_unauthorized
          - permissible_return
          - source_document_presented
          - source_document_stop_payment
          - improper_source_document
          - state_law_affecting_acceptance
          - ineligible_or_improper_entry
          - item_stop_payment
      description: Regular return
    reversal_model:
      required:
      - amount
      - original_transaction_id
      type: object
      properties:
        amount:
          type: integer
          description: The amount of the transaction in the smallest whole denomination
            of the applicable currency (eg. For USD use cents)
        find_original_window_days:
          type: integer
          format: int32
        is_advice:
          type: boolean
          default: false
        network_fees:
          type: array
          items:
            $ref: '#/components/schemas/network_fee_model'
        original_transaction_id:
          type: string
          format: uuid
      example:
        amount: 80
        find_original_window_days: 6
        is_advice: false
        network_fees:
        - amount: 123
          credit_debit: C
          type: ISSUER_FEE
        - amount: 123
          credit_debit: C
          type: ISSUER_FEE
        original_transaction_id: original_transaction_id
    risk_data:
      type: object
      properties:
        client_ip:
          type: string
          description: Client IP
    risk_rating:
      title: Customer Risk Rating
      type: object
      properties:
        configuration_id:
          type: string
          description: The risk configuration id used in risk score calculation
          format: uuid
          readOnly: true
        id:
          type: string
          description: Risk rating ID
          format: uuid
          readOnly: true
        next_review:
          type: string
          description: The next review date where customer risk will be calculated
          format: date-time
        risk_level:
          type: string
          description: A textual representation of the customer risk score
          enum:
          - low
          - medium
          - high
        risk_review:
          type: string
          description: The date the customer risk rating was calculated
          format: date-time
          readOnly: true
        risk_score:
          type: number
          description: The cumulative score of all risk rating fields
          format: float
      description: Represents a customer's risk profile
      example:
        risk_level: low
        risk_score: 0.8008282
        risk_review: 2000-01-23T04:56:07.000+00:00
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        configuration_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        next_review: 2000-01-23T04:56:07.000+00:00
    risk_rating_list:
      allOf:
      - required:
        - risk_ratings
        type: object
        properties:
          risk_ratings:
            type: array
            description: Array of customer risk ratings
            items:
              $ref: '#/components/schemas/risk_rating'
      - $ref: '#/components/schemas/paginated_response'
    savings_summary:
      title: Saving Summary
      type: object
      properties:
        apy:
          type: number
          format: float
      description: A summary of the accrued interest for the saving account in the
        current period
    schedule_config:
      required:
      - frequency
      - interval
      - start_date
      type: object
      properties:
        count:
          minimum: 1
          type: integer
          description: Number of times to recur. Exactly one of end_date or count
            must be provided
          format: int32
        end_date:
          type: string
          description: End date of the schedule (exclusive). Exactly one of end_date
            or count must be provided
          format: date
        frequency:
          type: string
          enum:
          - DAILY
          - WEEKLY
          - MONTHLY
        interval:
          maximum: 366
          minimum: 1
          type: integer
          description: "Interval between recurrences, e.g. interval = 2 with frequency\
            \ = WEEKLY means every other week."
        start_date:
          type: string
          description: Start date of the schedule (inclusive)
          format: date
      description: Payment schedule recurrence configuration
      example:
        end_date: 2000-01-23
        count: 1
        interval: 221
        frequency: DAILY
        start_date: 2000-01-23
    shipping:
      type: object
      properties:
        address:
          $ref: '#/components/schemas/address1'
        care_of_line:
          type: string
          description: The name of the person to send in care of
        is_expedited_fulfillment:
          type: boolean
          description: Is the shipment expedited
          example: true
          default: false
        method:
          type: string
          description: The shipping method
          example: LOCAL_MAIL
          enum:
          - LOCAL_MAIL
          - TWO_DAY
          - OVERNIGHT
          - INTERNATIONAL
          default: LOCAL_MAIL
        phone_number:
          pattern: "^\\+[1-9]\\d{1,14}$"
          type: string
          description: The phone number of the recipient
          example: "34921173659"
        recipient_name:
          $ref: '#/components/schemas/recipient_name'
      description: Details about the shipping method. If supplied this will override
        the default shipping address of the customer or account.
    simulate_card_fulfillment:
      required:
      - card_fulfillment_status
      type: object
      properties:
        card_fulfillment_status:
          $ref: '#/components/schemas/card_fulfillment_status'
      example:
        card_fulfillment_status: ISSUED
    simulation_response_model:
      type: object
    single_use_token_request:
      required:
      - account_id
      - customer_id
      type: object
      properties:
        account_id:
          type: string
          description: The ID of the account to which the token will be linked
          format: uuid
          example: dd227f31-7fdf-4eb4-ab0a-0fa7eca1a56b
        customer_id:
          type: string
          description: The ID of the customer to whom the token will be issued
          format: uuid
          example: 7f32f8c4-691a-4586-b0c4-9fc172f019ab
    single_use_token_response:
      required:
      - expires
      type: object
      properties:
        customer_account_mapping_id:
          type: string
        expires:
          type: string
          description: yyyy-MM-ddTHH:mm:ssZ
          format: date-time
        token:
          type: string
      example:
        customer_account_mapping_id: user_token
        expires: 2000-01-23T04:56:07.000+00:00
        token: token
    socure_event_body:
      required:
      - environmentName
      - event
      - id
      type: object
      properties:
        environmentName:
          type: string
          description: Environment the event belongs to
        event:
          $ref: '#/components/schemas/socure_watchlist_result'
        id:
          type: string
          description: Unique identifier for the monitoring event
    socure_global_watchlist:
      required:
      - matches
      type: object
      properties:
        matches:
          $ref: '#/components/schemas/socure_matches'
        reasonCodes:
          type: array
          description: Array of reason codes
          items:
            $ref: '#/components/schemas/socure_reason_code'
    socure_match:
      required:
      - entityId
      - status
      type: object
      properties:
        comments:
          $ref: '#/components/schemas/socure_match_comments'
        entityId:
          type: string
        matchFields:
          type: array
          items:
            type: string
        sourceUrls:
          type: array
          items:
            type: string
        status:
          type: string
    socure_match_list:
      type: array
      description: Array of socure matches
      items:
        $ref: '#/components/schemas/socure_match'
      x-schema-name: socure_match_list
    socure_matches:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/socure_match_list'
      description: Contains key-value pair of the Source list name and an array of
        details about that match.
      x-schema-name: socure_matches
    socure_reason_code:
      type: string
      description: Applicable reason code for the transaction.
    socure_watchlist_result:
      required:
      - referenceId
      type: object
      properties:
        globalWatchlist:
          $ref: '#/components/schemas/socure_global_watchlist'
        referenceId:
          type: string
          description: A 36 character reference ID included with every ID+ response.
      description: |
        Encapsulates the relationship between a person and any number of watchlists. That is, this tells you which watchlists a person is believed to be on (there might be false positives for similar names).
    spending_limit_with_time:
      type: object
      properties:
        amount:
          minimum: 0
          type: integer
          description: Maximum amount allowed within the time range. Unit in cents.
          format: int64
        transactions:
          minimum: 0
          type: integer
          description: Maximum number of transactions allowed within the time range
          format: int64
      description: Limit over a specific time period.
      example:
        amount: 0
        transactions: 0
    spending_limits:
      type: object
      properties:
        day:
          $ref: '#/components/schemas/spending_limit_with_time'
        description:
          type: string
          description: User provided description on the spending limits
        lifetime:
          $ref: '#/components/schemas/spending_limit_with_time'
        month:
          $ref: '#/components/schemas/spending_limit_with_time'
        transaction:
          $ref: '#/components/schemas/spending_limits_transaction'
        week:
          $ref: '#/components/schemas/spending_limit_with_time'
      description: Account spending limits
      example:
        week: null
        month: null
        lifetime: null
        description: description
        day:
          amount: 0
          transactions: 0
        transaction:
          amount: 0
    ssn_source:
      type: string
      description: |
        Describes the collection method for the customer's SSN:
        * `MANUAL` – the full 9 digits of the customer's SSN was collected.
        * `PREFILL` – the customer's SSN was collected using SSN Prefill.
      readOnly: true
      enum:
      - MANUAL
      - PREFILL
    statement:
      title: Statement
      allOf:
      - $ref: '#/components/schemas/statement_summary'
      - type: object
        properties:
          account_summary:
            $ref: '#/components/schemas/account_summary'
          authorized_signer:
            type: array
            readOnly: true
            items:
              $ref: '#/components/schemas/person1'
          disclosure:
            type: string
          joint_account_holders:
            type: array
            readOnly: true
            items:
              $ref: '#/components/schemas/person1'
          primary_account_holder_business:
            $ref: '#/components/schemas/business1'
          primary_account_holder_personal:
            $ref: '#/components/schemas/person1'
          savings_summary:
            $ref: '#/components/schemas/savings_summary'
          transactions:
            type: array
            items:
              $ref: '#/components/schemas/transaction'
    statement_list:
      title: Statement List
      allOf:
      - required:
        - statements
        type: object
        properties:
          statements:
            type: array
            description: Array of statements
            items:
              $ref: '#/components/schemas/statement_summary'
      - $ref: '#/components/schemas/paginated_response'
    statement_summary:
      title: Statement
      type: object
      properties:
        account_id:
          type: string
          description: The unique identifier of the account the statement belongs
            to
          format: uuid
          readOnly: true
        due_date:
          type: string
          description: The limit date when the due amount indicated on the statement
            should be paid
          format: date
          readOnly: true
        end_date:
          type: string
          description: The date indicating the ending of the time interval covered
            by the statement
          format: date
          readOnly: true
        id:
          type: string
          description: statement ID
          format: uuid
          readOnly: true
        issue_date:
          type: string
          description: The date when the statement has been issued
          format: date
          readOnly: true
        start_date:
          type: string
          description: The date indicating the begining of the time interval covered
            by the statement
          format: date
          readOnly: true
    status:
      title: Account Status
      type: string
      description: |
        The status of the account
      enum:
      - APPLICATION_SUBMITTED
      - FAILED_KYC
      - ACCOUNT_NOT_DESIRED
      - ACTIVE_OR_DISBURSED
      - CLOSED
      - SUSPENDED
      - CHARGED_OFF
      - ACCOUNT_NEVER_ACTIVE
      - ACTIVATED_NOT_DISBURSED
      - AWAITING_FIXING
      - IN_CLOSING
      - RESTRICTED
      - DELINQUENT
    status1:
      type: string
      description: |
        Status of the person. One of the following:
        * `ACTIVE` – is an integrator defined status.  Integrators should set a person to active if they believe the person to be qualified for conducting business.  Synctera will combine this status with other statuses such a verification to determine if the person is eligible for specific actions such as initiating transactions or issuing a card.
        * `DECEASED` – person is deceased.
        * `DENIED` – customer was turned down.
        * `DORMANT` – person is no longer active.
        * `ESCHEAT` – person's assets are abandoned and are property of the state.
        * `FROZEN` – person's actions are blocked for security, legal, or other reasons.
        * `INACTIVE` – an inactive status indicating that the person is no longer active.
        * `PROSPECT` – a potential customer, used for information-gathering and disclosures.
        * `SANCTION` – person is on a sanctions list and should be carefully monitored.
      example: ACTIVE
      enum:
      - ACTIVE
      - DECEASED
      - DENIED
      - DORMANT
      - ESCHEAT
      - FROZEN
      - INACTIVE
      - PROSPECT
      - SANCTION
    template_fields:
      type: object
      discriminator:
        propertyName: AccountType
        mapping:
          CHECKING: '#/components/schemas/template_fields_depository'
          LINE_OF_CREDIT: '#/components/schemas/template_fields_line_of_credit'
          SAVING: '#/components/schemas/template_fields_depository'
      oneOf:
      - $ref: '#/components/schemas/template_fields_depository'
      - $ref: '#/components/schemas/template_fields_line_of_credit'
    template_fields_depository:
      type: object
      allOf:
      - $ref: '#/components/schemas/base_template_fields'
      - properties:
          balance_ceiling:
            $ref: '#/components/schemas/balance_ceiling'
          balance_floor:
            $ref: '#/components/schemas/balance_floor'
          fee_product_ids:
            type: array
            description: A list of fee resources from account product that new accounts
              will associate with
            items:
              type: string
              format: uuid
          interest_product_id:
            type: string
            description: Interest from account product that new accounts will associate
              with
            format: uuid
          is_ach_enabled:
            type: boolean
            description: Enable ACH transaction.
            default: false
          is_card_enabled:
            type: boolean
            description: Enable card transaction.
            default: false
          is_p2p_enabled:
            type: boolean
            description: Enable P2P transaction.
            default: false
          is_wire_enabled:
            type: boolean
            description: Enable wire transaction.
            default: false
          overdraft_limit:
            minimum: 0
            type: integer
            description: Account's overdraft limit. Default is 0. Unit in cents.
            format: int64
          spending_limits:
            $ref: '#/components/schemas/spending_limits'
    template_fields_generic_response:
      required:
      - account_type
      - bank_country
      - currency
      type: object
      properties:
        account_type:
          $ref: '#/components/schemas/account_type'
        balance_ceiling:
          $ref: '#/components/schemas/balance_ceiling'
        balance_floor:
          $ref: '#/components/schemas/balance_floor'
        bank_country:
          pattern: "^[A-Z]{2,3}$"
          type: string
          description: Bank country of the account
          example: US
        billing_period:
          $ref: '#/components/schemas/billing_period'
        chargeoff_period:
          minimum: 0
          type: integer
          description: |
            The number of days an account can stay delinquent before marking an account as charged-off.
          default: 90
        currency:
          pattern: "^[A-Z]{3}$"
          type: string
          description: Account currency. ISO 4217 alphabetic currency code
          example: USD
        delinquency_period:
          minimum: 0
          type: integer
          description: |
            The number of days past the due date to wait for a minimum payment before marking an account as delinquent.
          default: 30
        fee_product_ids:
          type: array
          description: A list of fee resources from account product that new accounts
            will associate with
          items:
            type: string
            format: uuid
        grace_period:
          minimum: 0
          type: integer
          description: |
            The number of days past the billing period to allow for payment before it is considered due. This directly infers the due date for a payment.
          default: 30
        interest_product_id:
          type: string
          description: Interest from account product that new accounts will associate
            with
          format: uuid
        is_ach_enabled:
          type: boolean
          description: Enable ACH transaction on ledger.
          default: false
        is_card_enabled:
          type: boolean
          description: Enable card transaction on ledger.
          default: false
        is_p2p_enabled:
          type: boolean
          description: Enable P2P transaction on ledger.
          default: false
        is_wire_enabled:
          type: boolean
          description: Enable wire transaction on ledger.
          default: false
        minimum_payment:
          $ref: '#/components/schemas/minimum_payment'
        overdraft_limit:
          minimum: 0
          type: integer
          description: Account's overdraft limit. Default is 0. Unit in cents.
          format: int64
        spending_limits:
          $ref: '#/components/schemas/spending_limits'
      example:
        billing_period:
          frequency: ANNUALLY
          start_date: 2000-01-23T04:56:07.000+00:00
        account_type: account_type
        interest_product_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        overdraft_limit: 0
        fee_product_ids:
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        is_wire_enabled: false
        is_ach_enabled: false
        bank_country: US
        balance_ceiling:
          balance: 0
          linked_account_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          overflow_account_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        balance_floor:
          balance: 6
          linked_account_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          overdraft_account_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        chargeoff_period: 0
        is_p2p_enabled: false
        grace_period: 0
        is_card_enabled: false
        delinquency_period: 0
        minimum_payment: ""
        spending_limits:
          week: null
          month: null
          lifetime: null
          description: description
          day:
            amount: 0
            transactions: 0
          transaction:
            amount: 0
        currency: USD
    template_fields_line_of_credit:
      type: object
      allOf:
      - $ref: '#/components/schemas/base_template_fields'
      - required:
        - minimum_payment
        properties:
          chargeoff_period:
            minimum: 0
            type: integer
            description: |
              The number of days an account can stay delinquent before marking an account as charged-off.
            default: 90
          delinquency_period:
            minimum: 0
            type: integer
            description: |
              The number of days past the due date to wait for a minimum payment before marking an account as delinquent.
            default: 30
          grace_period:
            minimum: 0
            type: integer
            description: |
              The number of days past the billing period to allow for payment before it is considered due. This directly infers the due date for a payment.
            default: 30
          minimum_payment:
            $ref: '#/components/schemas/minimum_payment'
    template_list:
      allOf:
      - required:
        - account_templates
        type: object
        properties:
          account_templates:
            type: array
            description: Array of account templates
            items:
              $ref: '#/components/schemas/account_template_response'
      - $ref: '#/components/schemas/paginated_response'
    token_list:
      type: object
      properties:
        digital_wallet_tokens:
          type: array
          description: Array of Digital Wallet Token information of a Card
          items:
            $ref: '#/components/schemas/digital_wallet_token_response'
    token_list_response:
      required:
      - digital_wallet_tokens
      allOf:
      - $ref: '#/components/schemas/token_list'
      - $ref: '#/components/schemas/paginated_response'
    transaction:
      title: A posted transaction
      required:
      - data
      - effective_date
      - id
      - posted_date
      - status
      - subtype
      - type
      - uuid
      type: object
      properties:
        data:
          $ref: '#/components/schemas/transaction_data'
        effective_date:
          type: string
          description: "The \"effective date\" of a transaction. This may be earlier\
            \ than posted_date in some cases (for example, a transaction that occurs\
            \ on a Saturday may not be posted until the following Monday, but would\
            \ have an effective date of Saturday)"
          format: date-time
        id:
          type: integer
        posted_date:
          type: string
          description: The date the transaction was posted. This is the date any money
            is considered to be added or removed from an account.
          format: date-time
        status:
          type: string
        subtype:
          type: string
          description: "The specific transaction type. For example, for `ach`, this\
            \ may be \"outgoing_debit\"."
        type:
          type: string
          description: "The general type of transaction. For example, \"card\" or\
            \ \"ach\"."
        uuid:
          type: string
          description: The unique identifier of the transaction.
          format: uuid
    transaction_data:
      required:
      - lines
      - memo
      type: object
      properties:
        external_data:
          type: object
          description: an unstructured json blob representing additional transaction
            information supplied by the integrator.
        lines:
          type: array
          description: "The set of accounting entries associated with this transaction.\
            \ For example, a debit to a customer account will have a corresponding\
            \ credit in a general ledger account."
          items:
            $ref: '#/components/schemas/transaction_line'
        memo:
          type: string
        metadata:
          type: object
    transaction_line:
      required:
      - account_id
      - account_no
      - amount
      - currency
      - dc_sign
      - uuid
      type: object
      properties:
        account_id:
          type: string
          description: The account uuid associated with this transaction line
          example: 80cb6620-0555-451c-a603-fce72f360dc4
        account_no:
          type: string
          description: The account number associated with this transaction line
        amount:
          type: integer
          description: The amount (in cents) of the transaction
        currency:
          type: string
          description: ISO 4217 alphabetic currency code of the transfer amount
        dc_sign:
          $ref: '#/components/schemas/dc_sign'
        uuid:
          type: string
          format: uuid
    transaction_line1:
      required:
      - account_id
      - account_no
      - amount
      - available_balance
      - balance
      - created
      - currency
      - dc_sign
      - is_fee
      - is_gl_acc
      - is_offset
      - is_primary
      - meta
      - network
      - related_line
      - seq
      - tenant
      - updated
      - uuid
      type: object
      properties:
        account_id:
          type: string
          description: The account uuid associated with this transaction line
          example: 842dfacd-0b2c-476a-a43b-e1c5dabc2fe6
        account_no:
          type: string
          description: The account number associated with this transaction line
        amount:
          type: integer
          description: The amount (in cents) of the transaction
        available_balance:
          type: integer
          description: The account "available balance" at the point in time this transaction
            was posted
        balance:
          type: integer
          description: The account balance at the point in time this transaction was
            posted
        created:
          type: string
          description: The creation date of the transaction
          format: date-time
        currency:
          type: string
          description: ISO 4217 alphabetic currency code of the transfer amount
        dc_sign:
          $ref: '#/components/schemas/dc_sign'
        is_fee:
          type: boolean
          description: Whether or not this line is considered a fee
        is_gl_acc:
          type: boolean
          description: Whether or not this line represents a GL account
        is_offset:
          type: boolean
          description: Whether or not this line is considered the "offset" line
        is_primary:
          type: boolean
          description: Whether or not this line is considered the "primary" line
        meta:
          type: object
          nullable: true
        network:
          type: string
          description: The network this transaction is associated with
        related_line:
          type: integer
        seq:
          type: integer
        tenant:
          type: string
          description: "The tenant associated with this transaction, in the form \"\
            <bankid>_<partnerid>\""
        updated:
          type: string
          description: The creation date of the transaction
          format: date-time
        uuid:
          type: string
          format: uuid
      example:
        amount: 0
        is_primary: true
        created: 2000-01-23T04:56:07.000+00:00
        related_line: 5
        is_offset: true
        available_balance: 6
        account_no: account_no
        uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        network: network
        dc_sign: debit
        account_id: 842dfacd-0b2c-476a-a43b-e1c5dabc2fe6
        balance: 1
        is_gl_acc: true
        meta: {}
        currency: currency
        updated: 2000-01-23T04:56:07.000+00:00
        seq: 5
        tenant: tenant
        is_fee: true
    transaction_options:
      type: object
      properties:
        additional_data:
          type: string
        card_expiration_date_yymm:
          type: string
        database_transaction_timeout:
          type: integer
          format: int32
        encryption_key_id:
          type: string
        is_async:
          type: boolean
          default: false
        pre_auth_time_limit:
          type: string
        send_expiration_date:
          type: boolean
          default: false
        send_track_data:
          type: boolean
          default: false
        transaction_id:
          type: string
        transaction_timeout_threshold_seconds:
          type: integer
          format: int64
    transfer_list_response:
      allOf:
      - required:
        - external_transfers
        type: object
        properties:
          external_transfers:
            type: array
            description: Array of External transfer
            items:
              $ref: '#/components/schemas/transfer_response'
      - $ref: '#/components/schemas/paginated_response'
    transfer_request:
      required:
      - amount
      - currency
      - external_card_id
      - originating_account_id
      - type
      type: object
      properties:
        amount:
          type: integer
          description: Amount of the transfer in cents
        currency:
          $ref: '#/components/schemas/currency_code'
        external_card_id:
          type: string
          description: The ID of the external card from/to which the transfer will
            be initiated/received
          format: uuid
          example: b542b637-ce49-4be6-a26d-973f050985b9
        originating_account_id:
          type: string
          description: The ID of the account to which the transfer will be initiated/received
          format: uuid
          example: d3b3de70-661d-4c72-be44-3ca8d696d969
        type:
          $ref: '#/components/schemas/transfer_type'
      description: Push to card or pull from card
    transfer_response:
      required:
      - account_id
      - amount
      - country_code
      - created_time
      - currency
      - customer_id
      - id
      - last_modified_time
      - status
      - type
      type: object
      properties:
        account_id:
          type: string
          description: The ID of the account to which the card will be linked
          format: uuid
          example: a44eaeb7-bc5a-4bbc-a85a-e5a259aa7858
        amount:
          type: integer
          description: Amount of the transfer in cents
        country_code:
          type: string
          description: ISO-3166-1 Alpha-2 country code
          example: US
        created_time:
          type: string
          format: date-time
          example: 2020-01-01T00:00:00Z
        currency:
          $ref: '#/components/schemas/currency_code'
        customer_id:
          type: string
          description: The ID of the customer for which card is being activated
          format: uuid
          example: ed05cd8d-f063-4c1c-8c31-d600a54ed7a6
        id:
          type: string
          description: The id of the transfer
        last_modified_time:
          type: string
          format: date-time
          example: 2020-01-01T00:00:00Z
        status:
          type: string
          description: The status of the transfer
          enum:
          - SUCCEEDED
          - PENDING
          - FAILED
        transaction_id:
          type: string
          description: The transaction ID
          format: uuid
        type:
          $ref: '#/components/schemas/transfer_type'
      example:
        transaction_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        country_code: US
        created_time: 2020-01-01T00:00:00Z
        amount: 0
        account_id: a44eaeb7-bc5a-4bbc-a85a-e5a259aa7858
        last_modified_time: 2020-01-01T00:00:00Z
        currency: USD
        id: id
        customer_id: ed05cd8d-f063-4c1c-8c31-d600a54ed7a6
        type: PULL
        status: SUCCEEDED
    transfer_type:
      type: string
      description: |
        Type of operation for transfer.

        Type | Description
        --- | ---
        PUSH | Push fund to the external card from the account_id
        PULL | Pull funds from the external card to the account_id.
      example: PULL
      enum:
      - PULL
      - PUSH
    txn_enhancer:
      type: string
      description: whether to use a transaction enhancer and/or which vendor to use
      example: NONE
      enum:
      - NONE
      - MX
      default: NONE
    update_card_image_request:
      required:
      - status
      type: object
      properties:
        rejection_memo:
          type: string
        rejection_reason:
          $ref: '#/components/schemas/card_image_rejection_reason'
        status:
          $ref: '#/components/schemas/card_image_status'
    update_gateway_request:
      type: object
      properties:
        active:
          type: boolean
          description: Current status of the Authorization gateway
        custom_headers:
          $ref: '#/components/schemas/gateway_custom_headers'
        url:
          maxLength: 1000
          type: string
          description: URL of the Authorization gateway
          format: uri
    update_transfer:
      title: Change Status
      type: object
      properties:
        status:
          type: string
          description: Field value must be set to CANCELED
          example: CANCELED
          enum:
          - CANCELED
    vendor_info:
      title: Vendor Info
      type: object
      description: |
        The information provided to Synctera from the vendor. Interpretation of this object is up to the client.
      discriminator:
        propertyName: ContentType
        mapping:
          application/json: '#/components/schemas/vendor_json'
          text/xml: '#/components/schemas/vendor_xml'
      oneOf:
      - $ref: '#/components/schemas/vendor_json'
      - $ref: '#/components/schemas/vendor_xml'
    vendor_info1:
      title: Vendor Info
      type: object
      description: |
        The information provided to Synctera from the vendor. Interpretation of this object is up to the client.
      readOnly: true
      discriminator:
        propertyName: ContentType
        mapping:
          application/json: '#/components/schemas/vendor_json'
          text/xml: '#/components/schemas/vendor_xml'
      oneOf:
      - $ref: '#/components/schemas/vendor_json'
      - $ref: '#/components/schemas/vendor_xml'
    vendor_json:
      required:
      - content_type
      - json
      - vendor
      properties:
        content_type:
          type: string
          description: Describes the content-type encoding received from the vendor
          enum:
          - application/json
        json:
          type: object
          description: Data representation in JSON
        vendor:
          type: string
          example: SOCURE
    vendor_xml:
      required:
      - content_type
      - vendor
      - xml
      properties:
        content_type:
          type: string
          description: Describes the content-type encoding received from the vendor
          enum:
          - text/xml
        vendor:
          type: string
          example: IDOLOGY
        xml:
          type: string
          description: Data representaion in XML
    verification:
      type: object
      description: Verification result.
      allOf:
      - required:
        - result
        - verification_time
        - verification_type
      - type: object
        properties:
          business_id:
            $ref: '#/components/schemas/business_id4'
          creation_time:
            type: string
            description: The date and time the resource was created.
            format: date-time
            readOnly: true
            example: 2021-06-14T11:23:41Z
          details:
            $ref: '#/components/schemas/details'
          id:
            type: string
            description: Unique ID for this verification result.
            format: uuid
            readOnly: true
            example: fdbc1bef-fe4f-45b1-884d-fbfb595821d3
          last_updated_time:
            type: string
            description: The date and time the resource was last updated.
            format: date-time
            readOnly: true
            example: 2022-01-18T17:54:12Z
          metadata:
            $ref: '#/components/schemas/metadata'
          person_id:
            $ref: '#/components/schemas/person_id'
          result:
            $ref: '#/components/schemas/verification_result'
          vendor_info:
            $ref: '#/components/schemas/vendor_info'
          verification_time:
            type: string
            description: The date and time the verification was completed.
            format: date-time
          verification_type:
            $ref: '#/components/schemas/verification_type1'
    verification_list:
      allOf:
      - required:
        - verifications
        type: object
        properties:
          verifications:
            type: array
            description: Array of verification results.
            items:
              $ref: '#/components/schemas/verification'
      - $ref: '#/components/schemas/paginated_response'
    verification_request:
      type: object
      example:
        customer_consent: true
        customer_ip_address: 235.2.7.2
        person_id: 1bb26bcb-0e1b-4060-972d-80891332aae2
      allOf:
      - required:
        - customer_consent
      - properties:
          business_id:
            $ref: '#/components/schemas/business_id4'
          customer_consent:
            type: boolean
            description: Whether this customer has consented to be verified.
          customer_ip_address:
            pattern: "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
            type: string
            description: The customer's IP address.
            example: 44.94.73.252
          document_id:
            type: string
            description: |
              The ID of the uploaded government-issued identification document provided by the Socure SDK.
            example: 1ab2c3de-fg45-6789-a01b-23c45678defg
          person_id:
            $ref: '#/components/schemas/person_id'
    verification_result:
      type: string
      description: |
        The determination of this verification. One of the following:
        * `PENDING` – verification is in progress for this customer.
        * `PROVISIONAL` – partially verified or verified with restrictions.
        * `ACCEPTED` – the customer has been verified.
        * `REVIEW` – verification has run and issues have been identified and require review.
        * `VENDOR_ERROR` – verification did not successfully run due to an unexpected error or failure.
        * `REJECTED` – the customer was rejected and should not be allowed to take certain actions e.g., open an account.
      example: ACCEPTED
      enum:
      - PENDING
      - PROVISIONAL
      - ACCEPTED
      - REVIEW
      - VENDOR_ERROR
      - REJECTED
    verification_status:
      type: string
      description: |
        The result of a KYC/KYB verification. One of the following:
        * `UNVERIFIED` – verification has not been completed for this customer.
        * `PENDING` – verification is in progress for this customer.
        * `PROVISIONAL` – partially verified or verified with restrictions.
        * `ACCEPTED` – the customer has been verified.
        * `REVIEW` – verification has run and issues have been identified and require review.
        * `REJECTED` – the customer was rejected and should not be allowed to take certain actions e.g., open an account.
      readOnly: true
      example: ACCEPTED
      enum:
      - UNVERIFIED
      - PENDING
      - PROVISIONAL
      - ACCEPTED
      - REVIEW
      - REJECTED
    verification_type:
      type: string
      description: The type of check run on the customer.
      example: kyc
      enum:
      - fraud
      - synthetic
      - emailrisk
      - phonerisk
      - addressrisk
      - kyc
      - social
      - watchliststandard
      - watchlistpremier
      - watchlistplus
      - documentverification
      - alertlist
      - decision
    verification_type1:
      type: string
      description: |
        The verification run on the customer. One the following:
          * `IDENTITY` – verify that the information provided is associated with the identity of a real person or business.
          * `WATCHLIST` – checks watchlists for known fraud, money laundering, and other suspicious activity.
          * `RELATED_ENTITIES` – represents dependent verification checks for related parties (e.g. all beneficial owners must pass KYC for a business to pass KYB).
          * `MANUAL_REVIEW` – represents the outcome of a manual review of the verification done on a party (note: overrides the outcome of other verification types).
      example: IDENTITY
      enum:
      - IDENTITY
      - WATCHLIST
      - RELATED_ENTITIES
      - MANUAL_REVIEW
    verification_vendor_info:
      type: object
      description: |
        The information provided to Synctera from the vendor. Interpretation of this object is up to the client.
      discriminator:
        propertyName: ContentType
        mapping:
          application/json: '#/components/schemas/verification_vendor_json'
          text/xml: '#/components/schemas/verification_vendor_xml'
      oneOf:
      - $ref: '#/components/schemas/verification_vendor_json'
      - $ref: '#/components/schemas/verification_vendor_xml'
    verification_vendor_info_detail:
      type: object
      properties:
        code:
          type: string
          description: Vendor specific code.
          example: R186
        description:
          type: string
          description: Description of vendor specific code.
          example: Global Watchlist sources selected are correlated with the input
            identifiers
    verification_vendor_json:
      required:
      - content_type
      - json
      - vendor
      properties:
        content_type:
          type: string
          description: Describes the content-type encoding received from the vendor.
          enum:
          - application/json
        details:
          type: array
          description: Array of vendor specific information.
          readOnly: true
          items:
            $ref: '#/components/schemas/verification_vendor_info_detail'
        json:
          type: object
          description: Data representation in JSON.
        vendor:
          type: string
          description: Name of the vendor used.
          example: SOCURE
    verification_vendor_xml:
      required:
      - content_type
      - vendor
      - xml
      properties:
        content_type:
          type: string
          description: Describes the content-type encoding received from the vendor.
          enum:
          - text/xml
        details:
          type: array
          description: Array of vendor specific information.
          readOnly: true
          items:
            $ref: '#/components/schemas/verification_vendor_info_detail'
        vendor:
          type: string
          description: Name of the vendor used.
          example: IDOLOGY
        xml:
          type: string
          description: Data representaion in XML.
    verify_response:
      allOf:
      - required:
        - verification_status
        - verifications
        type: object
        properties:
          verification_status:
            $ref: '#/components/schemas/verification_status'
          verifications:
            type: array
            description: Array of verification results.
            items:
              $ref: '#/components/schemas/verification'
      - $ref: '#/components/schemas/paginated_response'
    version:
      pattern: "^[0-9]+\\.[0-9]+$"
      type: string
      description: Version of the disclosure document.
      example: "1.0"
    viral_loop_waitlists:
      required:
      - id
      - viral_loop_api_token
      type: object
      properties:
        bank_id:
          type: integer
          description: Bank ID
          readOnly: true
        creation_time:
          type: string
          description: Creation time
          format: date-time
          readOnly: true
        id:
          type: string
          description: Viral Loop Waitlist ID
          format: uuid
          readOnly: true
        last_updated_time:
          type: string
          description: Most recent updated time
          format: date-time
          readOnly: true
        lead_count:
          minimum: 0
          type: integer
          description: Total number of leads/people on the waitlist
          readOnly: true
        partner_id:
          type: integer
          description: Partner ID
          readOnly: true
        viral_loop_api_token:
          minLength: 5
          type: string
          description: viral loop api token
          writeOnly: true
      description: Viral Loop Waitlists
    virtual_card:
      title: Virtual Card
      description: A virtual card
      allOf:
      - $ref: '#/components/schemas/base_card'
    virtual_card_issuance_request:
      example:
        account_id: ed8fdcaa-357c-41c7-b0fd-3cf20301c7c5
        card_product_id: 6c89aea0-4bbb-47c7-ab58-17d1af05e6b2
        customer_id: 2f2e167f-a0de-4e40-a6eb-1baf61593fd2
        form: VIRTUAL
        type: DEBIT
      allOf:
      - $ref: '#/components/schemas/virtual_card'
      - required:
        - account_id
        - card_product_id
        - customer_id
        - form
        - type
        type: object
    virtual_card_plus_status:
      allOf:
      - $ref: '#/components/schemas/virtual_card'
      - $ref: '#/components/schemas/virtual_card_response_status'
    virtual_card_response:
      allOf:
      - $ref: '#/components/schemas/virtual_card_plus_status'
      - required:
        - account_id
        - card_brand
        - card_product_id
        - creation_time
        - customer_id
        - emboss_name
        - expiration_month
        - expiration_year
        - form
        - id
        - last_four
        - type
        type: object
    virtual_card_response_status:
      allOf:
      - $ref: '#/components/schemas/card_status_object'
      - required:
        - card_status
        - status_reason
        type: object
    waitlist:
      title: Waitlist
      allOf:
      - required:
        - increment
        - waitlist_name
        type: object
        properties:
          creation_time:
            type: string
            description: Creation time
            format: date-time
            readOnly: true
          id:
            type: string
            description: Waitlist ID
            format: uuid
            readOnly: true
          last_updated_time:
            type: string
            description: Most recent updated time
            format: date-time
            readOnly: true
          num_admitted:
            type: integer
            description: Current number of prospects in this waitlist with a status
              of admitted
            readOnly: true
            example: 100
          num_created:
            type: integer
            description: Current number of prospects in this waitlist with a status
              of created
            readOnly: true
            example: 100
          num_prospects:
            type: integer
            description: "Current number of prospects in this waitlist, in any state"
            readOnly: true
            example: 1000
          num_verified:
            type: integer
            description: Current number of prospects in this waitlist with a status
              of verified
            readOnly: true
            example: 700
          num_withdrawn:
            type: integer
            description: Current number of prospects in this waitlist with a status
              of withdrawn
            readOnly: true
            example: 100
        description: Waitlist
      - $ref: '#/components/schemas/waitlist_editable'
    waitlist_analytics:
      title: Waitlist Analytics
      type: object
      properties:
        admitted:
          type: integer
          description: Total number of prospects that were admitted on the given day
          readOnly: true
          example: 100
        created:
          type: integer
          description: Total number of prospects that signed up on the given day
          readOnly: true
          example: 103
        date:
          type: string
          description: Date
          readOnly: true
          example: 2021-05-17
        deleted:
          type: integer
          description: Total number of prospects that were deleted on the given day
          readOnly: true
          example: 2
        verified:
          type: integer
          description: Total number of prospects that were verified on the given day
          readOnly: true
          example: 50
        withdrawn:
          type: integer
          description: Total number of prospects that were withdrawn on the given
            day
          readOnly: true
          example: 5
      description: Daily Waitlist Analytics
    waitlist_analytics_list:
      title: Waitlist Analytics List
      required:
      - waitlist_analytics
      type: object
      properties:
        waitlist_analytics:
          type: array
          description: Array of Waitlist Analytics
          items:
            $ref: '#/components/schemas/waitlist_analytics'
    waitlist_editable:
      title: Waitlist
      type: object
      properties:
        description:
          type: string
          description: Waitlist Name
          example: New Account Type Waitlist
        increment:
          type: integer
          description: Number of points earned per verified referral
          example: 10
        max_prospects:
          type: integer
          description: "Max number of prospects allowed on this waitlist. Default\
            \ is 10,000,000."
          example: 2000
        waitlist_name:
          type: string
          description: Waitlist Name
          example: My Waitlist
      description: Waitlist fields that can be specified in a PATCH operation
    waitlists_list:
      title: Waitlist List
      required:
      - waitlists
      type: object
      allOf:
      - required:
        - waitlists
        type: object
        properties:
          waitlists:
            type: array
            description: Array of Waitlists
            items:
              $ref: '#/components/schemas/waitlist'
      - $ref: '#/components/schemas/paginated_response'
    wallet_provider_card_on_file:
      type: object
      properties:
        address_verification:
          $ref: '#/components/schemas/digital_wallet_token_address_verification'
        enabled:
          type: boolean
          example: false
          default: false
    watchlist_alert:
      required:
      - status
      type: object
      properties:
        created:
          type: string
          description: When this alert was created
          format: date-time
        id:
          type: string
          description: Unique identifier for this alert
          format: uuid
        provider_info:
          type: object
          description: |
            The information provided to Synctera that triggered this alert, as an arbitrary JSON object. Interpretation of this object is up to the client.
        provider_subject_id:
          type: string
          description: The id of the provider subject for this alert
        provider_subscription_id:
          type: string
          description: The id of the provider subscription for this alert
        provider_watchlist_name:
          type: string
          description: The name of the provider for this alert
        status:
          type: string
          description: The status of this alert
          enum:
          - ACTIVE
          - SUPPRESSED
        urls:
          type: array
          description: |
            Where to get more information about this alert (according to our third-party data provider).
          items:
            type: string
        vendor_info:
          $ref: '#/components/schemas/vendor_info'
      example:
        provider_watchlist_name: provider_watchlist_name
        urls:
        - urls
        - urls
        created: 2000-01-23T04:56:07.000+00:00
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        provider_subject_id: provider_subject_id
        provider_subscription_id: provider_subscription_id
        vendor_info: ""
        provider_info: {}
        status: ACTIVE
    watchlist_alert_list:
      allOf:
      - required:
        - alerts
        type: object
        properties:
          alerts:
            type: array
            items:
              $ref: '#/components/schemas/watchlist_alert'
      - $ref: '#/components/schemas/paginated_response'
    watchlist_subscription:
      required:
      - customer_consent
      type: object
      properties:
        auto_renew:
          type: boolean
          description: |
            Whether this subscription should automatically renew when the subscription period is over (default: vendor-dependent).
        created:
          type: string
          description: When this subscription was created
          format: date-time
        customer_consent:
          type: boolean
          description: |
            Whether this customer has consented to being enrolled for watchlist monitoring
        id:
          type: string
          description: Unique identifier for this subscription
          format: uuid
        period_end:
          type: string
          description: The date when monitoring of this individual should end.
          format: date
        period_start:
          type: string
          description: "The date when monitoring of this individual should begin (default:\
            \ today)."
          format: date
        provider_subscription_id:
          type: string
          description: External provider subscription id
        status:
          type: string
          enum:
          - ACTIVE
          - INACTIVE
      example:
        period_end: 2000-01-23
        auto_renew: true
        period_start: 2000-01-23
        created: 2000-01-23T04:56:07.000+00:00
        customer_consent: true
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        provider_subscription_id: provider_subscription_id
        status: ACTIVE
    watchlist_subscription_list:
      allOf:
      - required:
        - subscriptions
        type: object
        properties:
          subscriptions:
            type: array
            items:
              $ref: '#/components/schemas/watchlist_subscription'
      - $ref: '#/components/schemas/paginated_response'
    watchlist_suppress:
      required:
      - provider_subject_id
      - provider_subscription_id
      - status
      type: object
      properties:
        provider_subject_id:
          type: string
          description: |
            The id of the subject (person) for whom future alerts should be suppressed.
        provider_subscription_id:
          type: string
          description: |
            The provider's id for the subscription that caused the alert(s) that are being suppressed.
        status:
          type: string
          description: The status of this suppression
          enum:
          - SUPPRESS
          - UNSUPPRESS
    webhook:
      title: Webhook
      required:
      - enabled_events
      - is_enabled
      - url
      type: object
      properties:
        description:
          type: string
          description: A description of what the webhook is used for
        enabled_events:
          type: array
          description: A list of the events that will trigger the webhook
          items:
            $ref: '#/components/schemas/event_type1'
        id:
          type: string
          description: The unique ID of the webhook
          format: uuid
          readOnly: true
        is_enabled:
          type: boolean
          description: Set the webhook to be enabled or disabled
        last_updated:
          type: string
          description: Timestamp that this webhook was created or the last time any
            field was changed
          format: date-time
          readOnly: true
        metadata:
          maxLength: 1024
          type: string
          description: Additional information stored to the webhook
        url:
          maxLength: 1000
          type: string
          description: URL that the webhook will send request to
          format: uri
      description: Webhook object
      example:
        is_enabled: true
        last_updated: 2000-01-23T04:56:07.000+00:00
        metadata: metadata
        enabled_events:
        - ""
        - ""
        description: description
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        url: http://example.com/aeiou
    webhook_config:
      type: object
      properties:
        custom_header:
          $ref: '#/components/schemas/custom_headers'
        password:
          type: string
          description: password for access webhook endpoint
        url:
          type: string
          description: url of webhook endpoint
        username:
          type: string
          description: username for access webhook endpoint
    webhook_event:
      type: string
      description: name of the event
    webhook_list:
      allOf:
      - required:
        - webhooks
        type: object
        properties:
          webhooks:
            type: array
            description: Array of webhooks
            items:
              $ref: '#/components/schemas/webhook'
      - $ref: '#/components/schemas/paginated_response'
    webhook_request:
      type: object
      properties:
        active:
          type: boolean
          description: indicates whether webhook is active
        config:
          $ref: '#/components/schemas/webhook_config'
        events:
          type: array
          description: "list of webhook events, use * to receive all notifications"
          items:
            $ref: '#/components/schemas/webhook_event'
        id:
          type: string
          description: id of the webhook
          format: uuid
          example: 54e75c86-58d4-4ffc-aa2f-33f50f785026
        name:
          type: string
          description: name of the webhook
    webhook_response:
      allOf:
      - $ref: '#/components/schemas/webhook_request'
      - type: object
        properties:
          creation_time:
            type: string
            description: The timestamp representing when the webhook request was made
            format: date-time
            readOnly: true
          last_modified_time:
            type: string
            description: The timestamp representing when the webhook was last modified
            format: date-time
            readOnly: true
    widget_type:
      type: string
      description: The widget type
      enum:
      - set_pin
      - activate_card
    wire:
      title: Wire
      required:
      - amount
      - creation_time
      - currency
      - customer_id
      - id
      - last_updated_time
      - originating_account_id
      - receiving_account_id
      - sender_reference_id
      - status
      - transaction_id
      type: object
      properties:
        amount:
          type: integer
          description: Transfer amount in cents ($100 would be 10000)
          example: 10000
        bank_message:
          type: string
          description: Instructions intended for the financial institutions that are
            processing the wire.
        creation_time:
          type: string
          format: date-time
          readOnly: true
        currency:
          type: string
          description: 3-character currency code
          example: USD
        customer_id:
          type: string
          description: The customer UUID representing the person initiating the Wire
            transfer
          format: uuid
          example: 07f346df-618b-49b2-bd85-75f714ddd565
        id:
          type: string
          description: wire ID
          format: uuid
          readOnly: true
        last_updated_time:
          type: string
          format: date-time
          readOnly: true
        originating_account_id:
          type: string
          description: Sender account ID
          format: uuid
          example: eb271075-1b57-457d-8209-bda0994553d9
        receiving_account_id:
          type: string
          description: The external account uuid representing the recipient of the
            wire.
          format: uuid
          example: 33e2a2f2-8491-4093-8fe2-2ded51f926b7
        recipient_message:
          type: string
          description: Information from the originator to the beneficiary (recipient).
        sender_reference_id:
          type: string
          description: Sender's id associated with fedwire transfer
          readOnly: true
          example: 9F564A6124E65
        status:
          type: string
          description: The current status of the transfer
          readOnly: true
          example: PENDING
          enum:
          - PENDING
          - COMPLETED
          - CANCELED
          - DECLINED
        transaction_id:
          type: string
          description: ID of the resulting transaction resource
          format: uuid
          readOnly: true
      example:
        creation_time: 2000-01-23T04:56:07.000+00:00
        transaction_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        amount: 10000
        originating_account_id: eb271075-1b57-457d-8209-bda0994553d9
        receiving_account_id: 33e2a2f2-8491-4093-8fe2-2ded51f926b7
        bank_message: bank_message
        sender_reference_id: 9F564A6124E65
        last_updated_time: 2000-01-23T04:56:07.000+00:00
        recipient_message: recipient_message
        currency: USD
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        customer_id: 07f346df-618b-49b2-bd85-75f714ddd565
        status: PENDING
    wire_list:
      title: Wire List
      allOf:
      - required:
        - wires
        type: object
        properties:
          wires:
            type: array
            description: Array of wires
            items:
              $ref: '#/components/schemas/wire'
      - $ref: '#/components/schemas/paginated_response'
    wire_request:
      title: Wire payment request payload
      required:
      - amount
      - currency
      - customer_id
      - originating_account_id
      - receiving_account_id
      type: object
      properties:
        amount:
          type: integer
          description: Transfer amount in cents ($100 would be 10000)
          example: 10000
        bank_message:
          maxLength: 210
          type: string
          description: Instructions intended for the financial institutions that are
            processing the wire.
        currency:
          type: string
          description: 3-character currency code
          example: USD
          enum:
          - USD
        customer_id:
          type: string
          description: The customer UUID representing the person initiating the Wire
            transfer
          format: uuid
          example: 6a403707-795c-4c74-a406-ee19f32a2a5a
        metadata:
          type: object
          description: Additional transfer metadata structured as key-value pairs
        originating_account_id:
          type: string
          description: Sender account ID
          format: uuid
          example: ba2d8305-b38b-4cf9-ae86-066b4ccbc52b
        receiving_account_id:
          type: string
          description: The external account uuid representing the recipient of the
            wire.
          format: uuid
          example: c0698ffe-c383-49ea-a8dc-44bf4b514e4e
        recipient_message:
          maxLength: 140
          type: string
          description: Information from the originator to the beneficiary (recipient).
    withdrawal_request_model:
      required:
      - amount
      - card_id
      - mid
      type: object
      properties:
        account_type:
          type: string
          enum:
          - checking
          - savings
          - credit
        amount:
          type: integer
          description: The amount of the transaction in the smallest whole denomination
            of the applicable currency (eg. For USD use cents)
        card_acceptor:
          $ref: '#/components/schemas/card_acceptor_model'
        card_id:
          type: string
          format: uuid
        mid:
          maxLength: 50
          minLength: 1
          type: string
        pin:
          maxLength: 15
          minLength: 1
          type: string
    workspace:
      title: Workspace access for given user
      required:
      - bank_id
      - bank_name
      - environment
      - partner_id
      - partner_name
      - rank
      - verification_status
      type: object
      properties:
        bank_id:
          type: integer
          description: Bank ID
        bank_name:
          type: string
          description: First Name
        environment:
          $ref: '#/components/schemas/environment'
        partner_id:
          type: integer
          description: Partner ID
        partner_name:
          type: string
          description: Last Name
        rank:
          type: integer
          description: |
            Each workspace has a rank. The highest-ranked (lowest numerical value) workspace is
            intended to be presented first within its environment.
        verification_status:
          type: string
          enum:
          - UNVERIFIED
          - PENDING
          - PROVISIONAL
          - ACCEPTED
          - REVIEW
          - REJECTED
    workspace_list:
      allOf:
      - required:
        - workspaces
        type: object
        properties:
          workspaces:
            type: array
            description: Array of Workspaces.
            items:
              $ref: '#/components/schemas/workspace'
    inline_response_200:
      type: object
      properties:
        barcode:
          type: string
          description: Barcode of the card
      example:
        barcode: barcode
    webhooks_secret_body:
      type: object
      properties:
        is_rolling_secret:
          type: boolean
          description: Set true to let the current secret expire in the next 24 hours.
            Set false to let the current secret expire immediately.
    inline_response_200_1:
      type: object
      properties:
        delete_at:
          type: string
          description: Timestamp that the old secret is delete
          format: date-time
        secret:
          maxLength: 64
          minLength: 64
          type: string
          description: Generated secret. Do not share. This secret will be used to
            verify that webhook requests were sent from Synctera.
      example:
        delete_at: 2000-01-23T04:56:07.000+00:00
        secret: secret
    inline_response_201:
      type: object
      properties:
        secret:
          maxLength: 64
          minLength: 64
          type: string
          description: Generated secret. Do not share. This secret will be used to
            verify that webhook requests were sent from Synctera.
      example:
        secret: secret
    webhooks_trigger_body:
      type: object
      properties:
        event:
          $ref: '#/components/schemas/event_type1'
    account_summary_balance_ceiling:
      type: object
      properties:
        balance:
          type: integer
          description: Maximum balance in the account's currency. Unit in cents.
          format: int64
      example: null
    account_summary_balance_floor:
      type: object
      properties:
        balance:
          type: integer
          description: Minimum balance in the account's currency. Unit in cents.
          format: int64
      example: null
    socure_match_comments:
      type: object
      properties:
        relatedURL:
          type: array
          items:
            type: string
      example: null
    spending_limits_transaction:
      type: object
      properties:
        amount:
          minimum: 0
          type: integer
          description: Maximum amount allowed. Unit in cents.
          format: int64
      description: Individual transaction limit
      example:
        amount: 0
  responses:
    account_closed:
      description: Account has been closed
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/error'
    already_exists:
      description: Resource already exists error
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/error'
    bad_request:
      description: BadRequest
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/error'
    delete_response:
      description: Resource has been deleted
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/delete_response'
    forbidden:
      description: Forbidden error
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/error'
    internal_server_error:
      description: Internal server error
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/error'
    not_found:
      description: Resource not found
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/error'
    unauthorized:
      description: Unauthorized
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/error'
    unprocessable_entity:
      description: Unprocessable entity request response
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/error'
  parameters:
    account_id_path:
      name: account_id
      in: path
      description: Unique identifier for the account.
      required: true
      style: simple
      explode: false
      schema:
        type: string
        format: uuid
        example: 12dbc24c-3cfc-46dc-a164-0977434afabf
    account_id_query:
      name: id
      in: query
      description: |
        Account ID(s). Multiple IDs can be provided as a comma-separated list.
      required: false
      style: form
      explode: false
      schema:
        $ref: '#/components/schemas/account_id_query_schema'
      x-external: true
    account_id_query1:
      name: account_id
      in: query
      required: false
      style: form
      explode: true
      schema:
        $ref: '#/components/schemas/account_id'
      x-external: true
    account_id_query2:
      name: account_id
      in: query
      description: Originating account IDs. Multiple IDs can be provided as a comma-separated
        list.
      required: false
      style: form
      explode: false
      schema:
        $ref: '#/components/schemas/id_list_query_schema'
      x-external: true
    account_id1:
      name: account_id
      in: query
      description: The account's unique identifier provided by Synctera
      required: true
      style: form
      explode: true
      schema:
        type: string
        format: uuid
        example: e4b92656-ef1e-41f5-a85f-af09346611c0
      x-external: true
    account_id2:
      name: account_id
      in: query
      description: Account ID
      required: false
      style: form
      explode: true
      schema:
        type: string
        format: uuid
        example: d6201244-02d1-493e-87f6-a3391527abfc
      x-external: true
    account_no:
      name: account_no
      in: query
      description: Account number
      required: false
      style: form
      explode: true
      schema:
        type: string
      x-external: true
    account_number:
      name: account_number
      in: query
      description: |
        Account number(s). Multiple account numbers can be provided as a comma-separated list.
        When only a single account number is provided, any * characters in the string are wildcards, and match any characters.
      required: false
      style: form
      explode: false
      schema:
        type: array
        example: "2345678108180014864"
        items:
          type: string
      x-external: true
    account_range_id:
      name: account_range_id
      in: path
      required: true
      style: simple
      explode: false
      schema:
        $ref: '#/components/schemas/account_range_id'
    account_sort_by_query:
      name: sort_by
      in: query
      description: |
        Specifies the sort order for the returned accounts.
      required: false
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
          enum:
          - account_number:asc
          - account_number:desc
          - account_type:asc
          - account_type:desc
          - first_name:asc
          - first_name:desc
          - last_name:asc
          - last_name:desc
      x-external: true
    alert_id:
      name: alert_id
      in: path
      description: Unique identifier for this watchlist alert.
      required: true
      style: simple
      explode: false
      schema:
        type: string
        format: uuid
        example: ff23b9d0-4e64-4b98-9f4a-3591ed08121a
    application_id_path:
      name: application_id
      in: path
      description: Unique identifier for the application.
      required: true
      style: simple
      explode: false
      schema:
        type: string
        format: uuid
        example: 4d463562-87b0-40bf-ba3f-7b52833f4898
    application_status:
      name: status
      in: query
      description: |
        Status of the credit application
      required: false
      style: form
      explode: true
      schema:
        $ref: '#/components/schemas/application_status'
      x-external: true
    bin_id:
      name: bin_id
      in: path
      required: true
      style: simple
      explode: false
      schema:
        $ref: '#/components/schemas/bin_id'
    business_id_path:
      name: business_id
      in: path
      description: Business's unique identifier.
      required: true
      style: simple
      explode: false
      schema:
        type: string
        format: uuid
        example: 2e3304dc-a1c2-427e-ac5a-a2586a95ce1f
    business_id_query:
      name: business_id
      in: query
      description: |
        Unique identifier for the business. Multiple IDs can be provided as a comma-separated list.
      required: false
      style: form
      explode: false
      schema:
        type: array
        example: "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157"
        items:
          type: string
          format: uuid
      x-external: true
    business_id_query_array:
      name: business_id
      in: query
      description: "A list of business unique identifiers, with a comma separating\
        \ any values."
      required: false
      style: form
      explode: false
      schema:
        type: array
        items:
          $ref: '#/components/schemas/business_id2'
      x-external: true
    business_sort_by_query:
      name: sort_by
      in: query
      description: |
        Specifies the sort order for the returned businesses.
      required: false
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
          enum:
          - entity_name:asc
          - entity_name:desc
      x-external: true
    card_brand_query:
      name: card_brand
      in: query
      description: The brand of a card product
      required: false
      style: form
      explode: true
      schema:
        $ref: '#/components/schemas/card_brand'
      x-external: true
    card_id:
      name: card_id
      in: path
      required: true
      style: simple
      explode: false
      schema:
        $ref: '#/components/schemas/card_id'
    card_id_query:
      name: card_id
      in: query
      required: false
      style: form
      explode: true
      schema:
        $ref: '#/components/schemas/card_id'
      x-external: true
    card_image_id:
      name: card_image_id
      in: path
      required: true
      style: simple
      explode: false
      schema:
        $ref: '#/components/schemas/card_image_id'
    card_product_id:
      name: card_product_id
      in: path
      required: true
      style: simple
      explode: false
      schema:
        $ref: '#/components/schemas/card_product_id'
    card_product_id_query:
      name: card_product_id
      in: query
      required: false
      style: form
      explode: true
      schema:
        $ref: '#/components/schemas/card_product_id'
      x-external: true
    card_program_id:
      name: card_program_id
      in: path
      required: true
      style: simple
      explode: false
      schema:
        $ref: '#/components/schemas/card_program_id'
    card_sort_by_query:
      name: sort_by
      in: query
      description: |
        Specifies the sort order for the returned cards.
      required: false
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
          enum:
          - account_id:asc
          - account_id:desc
          - customer_id:asc
          - customer_id:desc
          - card_product_id:asc
          - card_product_id:desc
          - last_four:asc
          - last_four:desc
          - card_type:asc
          - card_type:desc
          - card_brand:asc
          - card_brand:desc
          - expiration_date:asc
          - expiration_date:desc
          - form:asc
          - form:desc
          - card_status:asc
          - card_status:desc
      x-external: true
    card_status_query:
      name: card_status
      in: query
      description: The status of a card
      required: false
      style: form
      explode: true
      schema:
        $ref: '#/components/schemas/card_status'
      x-external: true
    card_type_query:
      name: card_type
      in: query
      description: Indicates the type of card
      required: false
      style: form
      explode: true
      schema:
        type: string
        enum:
        - DEBIT
      x-external: true
    customer_id:
      name: customer_id
      in: query
      required: false
      style: form
      explode: true
      schema:
        type: string
        format: uuid
        example: 21b74a02-b7c7-49f4-a497-98ba5cbedb27
      x-external: true
    customer_id_path:
      name: customer_id
      in: path
      description: The customer's unique identifier
      required: true
      style: simple
      explode: false
      schema:
        $ref: '#/components/schemas/customer_id'
    customer_id_query:
      name: customer_id
      in: query
      required: false
      style: form
      explode: true
      schema:
        $ref: '#/components/schemas/customer_id1'
      x-external: true
    customer_id_query_array:
      name: customer_id
      in: query
      description: "A list of customer unique identifiers, with a comma separating\
        \ any values."
      required: false
      style: form
      explode: false
      schema:
        type: array
        items:
          $ref: '#/components/schemas/customer_id'
      x-external: true
    customer_id_query_array1:
      name: customer_id
      in: query
      required: false
      style: form
      explode: false
      schema:
        type: array
        items:
          $ref: '#/components/schemas/customer_id1'
      x-external: true
    customer_id_query_one:
      name: customer_id
      in: query
      description: The customer's unique identifier
      required: false
      deprecated: true
      style: form
      explode: true
      schema:
        $ref: '#/components/schemas/customer_id'
      x-external: true
    customer_id_query_required:
      name: customer_id
      in: query
      required: true
      style: form
      explode: true
      schema:
        $ref: '#/components/schemas/customer_id1'
      x-external: true
    customer_id_query1:
      name: customer_id
      in: query
      description: The IDs of customers who created the payment schedules. Multiple
        IDs can be provided as a comma-separated list.
      required: false
      style: form
      explode: false
      schema:
        $ref: '#/components/schemas/id_list_query_schema'
      x-external: true
    customer_sort_by_query:
      name: sort_by
      in: query
      description: |
        Specifies the sort order for the returned customers.
      required: false
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
          enum:
          - creation_time:asc
          - creation_time:desc
          - last_updated_time:asc
          - last_updated_time:desc
          - first_name:asc
          - first_name:desc
          - last_name:asc
          - last_name:desc
      x-external: true
    customer_type:
      name: customer_type
      in: query
      description: |
        Customer type of the account, BUSINESS or PERSONAL
      required: false
      style: form
      explode: true
      schema:
        $ref: '#/components/schemas/customer_type'
      x-external: true
    debit_network_id:
      name: debit_network_id
      in: path
      required: true
      style: simple
      explode: false
      schema:
        $ref: '#/components/schemas/debit_network_id'
    deposit_id_path:
      name: deposit_id
      in: path
      description: ID of a deposit for a remote deposit capture
      required: true
      style: simple
      explode: false
      schema:
        type: string
        format: uuid
        example: 3b601be1-1c91-4136-bca8-6754cc78f713
    digital_wallet_token_id:
      name: digital_wallet_token_id
      in: path
      required: true
      style: simple
      explode: false
      schema:
        $ref: '#/components/schemas/digital_wallet_token_id'
    digital_wallet_token_state_query:
      name: token_state
      in: query
      description: The status of the Digital Wallet Token
      required: false
      style: form
      explode: true
      schema:
        $ref: '#/components/schemas/digital_wallet_token_state'
      x-external: true
    disclosure_id:
      name: disclosure_id
      in: path
      description: The unique identifier for the disclosure.
      required: true
      style: simple
      explode: false
      schema:
        type: string
        format: uuid
        example: 1985f769-dd31-4128-95db-f765355e6631
    email:
      name: email
      in: query
      required: false
      style: form
      explode: true
      schema:
        type: string
        description: "Only return resources where the email field matches the specified\
          \ string. Any * characters in the string are wildcards, and match any characters."
        example: john.doe@example.com
      x-external: true
    emboss_name_query:
      name: emboss_name
      in: query
      description: emboss name
      required: false
      style: form
      explode: true
      schema:
        type: string
      x-external: true
    employment_id:
      name: employment_id
      in: path
      description: Unique ID for the employment record.
      required: true
      style: simple
      explode: false
      schema:
        type: string
        format: uuid
        example: 3fa12d3f-6436-482c-a8a1-d65e9761dc2d
    entity_name:
      name: entity_name
      in: query
      required: false
      style: form
      explode: true
      schema:
        type: string
        description: "Only return resources where the `entity_name` field matches\
          \ the specified string. Any `*` characters in the string are wildcards,\
          \ and match any characters."
        example: Apex Corporation
      x-external: true
    expiration_date_query:
      name: expiration_date
      in: query
      description: The date representing when the card would expire at
      required: false
      style: form
      explode: true
      schema:
        type: string
        format: date
        example: 2006-01-02
      x-external: true
    external_account_id:
      name: external_account_id
      in: path
      description: External Account ID
      required: true
      style: simple
      explode: false
      schema:
        type: string
        format: uuid
        example: dd8cd509-ce52-4990-8f84-316558e68e9a
    external_card_id:
      name: external_card_id
      in: path
      description: The unique identifier of an external card
      required: true
      style: simple
      explode: false
      schema:
        type: string
        format: uuid
        example: 4675ebf0-0691-4a2b-b1db-7ca6f4ff9ec5
    external_card_id_query:
      name: external_card_id
      in: query
      required: false
      style: form
      explode: true
      schema:
        $ref: '#/components/schemas/external_card_id'
      x-external: true
    external_transfer_type_query:
      name: type
      in: query
      description: The type of an external transfer
      required: false
      style: form
      explode: true
      schema:
        $ref: '#/components/schemas/transfer_type'
      x-external: true
    first_name:
      name: first_name
      in: query
      required: false
      style: form
      explode: true
      schema:
        type: string
        description: "Only return resources where the first_name field matches the\
          \ specified string. Any * characters in the string are wildcards, and match\
          \ any characters."
        example: Alice
      x-external: true
    form_query:
      name: form
      in: query
      description: The format of the card
      required: false
      style: form
      explode: true
      schema:
        $ref: '#/components/schemas/form'
      x-external: true
    from_business_id_query:
      name: from_business_id
      in: query
      description: |
        Unique identifier for the business. Multiple IDs can be provided as a comma-separated list.
      required: false
      style: form
      explode: false
      schema:
        type: array
        example: "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157"
        items:
          type: string
          format: uuid
      x-external: true
    from_date:
      name: from_date
      in: query
      description: Only display transactions with a posting date greater than from_date
      required: false
      style: form
      explode: true
      schema:
        type: string
        format: date
      x-external: true
    from_person_id_query:
      name: from_person_id
      in: query
      description: |
        Unique identifier for the person. Multiple IDs can be provided as a comma-separated list.
      required: false
      style: form
      explode: false
      schema:
        type: array
        example: "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157"
        items:
          type: string
          format: uuid
      x-external: true
    gateway_id:
      name: gateway_id
      in: path
      required: true
      style: simple
      explode: false
      schema:
        $ref: '#/components/schemas/gateway_id'
    id:
      name: id
      in: query
      description: Unique resource identifier
      required: false
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
          format: uuid
          example: 63ea71cb-7f86-44c1-956b-77f6cbd6ecf7
      x-external: true
    id_query:
      name: id
      in: query
      description: |
        Unique identifier for the business. Multiple IDs can be provided as a comma-separated list.
      required: false
      style: form
      explode: false
      schema:
        type: array
        example: "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157"
        items:
          type: string
          format: uuid
      x-external: true
    id_query1:
      name: id
      in: query
      description: IDs. Multiple IDs can be provided as a comma-separated list.
      required: false
      style: form
      explode: false
      schema:
        $ref: '#/components/schemas/id_list_query_schema'
      x-external: true
    id_query2:
      name: id
      in: query
      description: |
        Unique identifier for the resource. Multiple IDs can be provided as a comma-separated list.
      required: false
      style: form
      explode: false
      schema:
        type: array
        example: "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157"
        items:
          type: string
          format: uuid
      x-external: true
    id_query3:
      name: id
      in: query
      description: |
        Unique identifier for the resource. Multiple IDs can be provided as a comma-separated list.
      required: false
      style: form
      explode: false
      schema:
        type: array
        example: "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157"
        items:
          type: string
          format: uuid
      x-external: true
    id1:
      name: id
      in: path
      description: Transaction ID
      required: true
      style: simple
      explode: false
      schema:
        type: string
        format: uuid
        example: 411e5190-c495-4344-9fb5-0a3c7bab0345
    idempotency_key:
      name: Idempotency-Key
      in: header
      description: An idempotency key is an arbitrary unique value generated by client
        to detect subsequent retries of the same request. It is recommended that a
        UUID or a similar random identifier be used as an idempotency key
      required: false
      style: simple
      explode: false
      schema:
        type: string
        example: 81026fb3-d06c-4b37-80da-2b17b4749a3f
      x-external: true
    include_history:
      name: include_history
      in: query
      description: "If true, include old (inactive) records as well."
      required: false
      style: form
      explode: true
      schema:
        type: boolean
        default: false
      x-external: true
    interest_product_id_query:
      name: interest_product_id
      in: query
      description: Interest product ID that accounts associate with. Multiple IDs
        can be provided as a comma-separated list.
      required: false
      style: form
      explode: true
      schema:
        type: string
      x-external: true
    internal_account_id_path:
      name: internal_account_id
      in: path
      description: Unique identifier for the internal account.
      required: true
      style: simple
      explode: false
      schema:
        type: string
        format: uuid
        example: 69c8bfb7-a0ab-4b55-9f2b-6d8065d71220
    internal_account_id_query:
      name: id
      in: query
      description: |
        Internal account ID(s). Multiple IDs can be provided as a comma-separated list.
      required: false
      style: form
      explode: false
      schema:
        $ref: '#/components/schemas/account_id_query_schema'
      x-external: true
    is_customer:
      name: is_customer
      in: query
      description: "If true, show only customers. If false, show non-customer parties."
      required: false
      style: form
      explode: true
      schema:
        type: boolean
      x-external: true
    last_four_query:
      name: last_four
      in: query
      description: The last 4 digits of the card PAN
      required: false
      style: form
      explode: true
      schema:
        pattern: "^\\d{4}$"
        type: string
        example: "1234"
      x-external: true
    last_name:
      name: last_name
      in: query
      required: false
      style: form
      explode: true
      schema:
        type: string
        description: "Only return resources where the last_name field matches the\
          \ specified string. Any * characters in the string are wildcards, and match\
          \ any characters."
        example: Smith
      x-external: true
    limit:
      name: limit
      in: query
      required: false
      style: form
      explode: true
      schema:
        minimum: 1
        type: integer
        description: |
          Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
        example: 100
        default: 100
      x-external: true
    linked_account_id_query:
      name: linked_account_id
      in: query
      description: |
        Return only resources that are linked to the specified backing account in balance_floor or balance_ceiling. Multiple IDs can be provided as a comma-separated list.
      required: false
      style: form
      explode: false
      schema:
        $ref: '#/components/schemas/account_id_query_schema'
      x-external: true
    max_age:
      name: max_age
      in: query
      description: |
        Optional relative age of a balance in seconds. If the balance is older than the requested seconds it will fail. This field is optional for most financial institutions, but required for some, so you should probably send it.
      required: false
      style: form
      explode: true
      schema:
        minimum: 1
        type: integer
        format: int64
        example: 861
      x-external: true
    originating_account_id:
      name: originating_account_id
      in: query
      required: false
      style: form
      explode: true
      schema:
        type: string
        format: uuid
        example: f122e6f2-ba88-4a5d-9084-350bba5f27e1
      x-external: true
    originating_account_id_query_array:
      name: originating_account_id
      in: query
      required: false
      style: form
      explode: false
      schema:
        type: array
        items:
          $ref: '#/components/schemas/originating_account_id'
      x-external: true
    overdraft_account_id_query:
      name: overdraft_account_id
      in: query
      description: |
        Overdraft account ID(s). Multiple IDs can be provided as a comma-separated list.
        This parameter is deprecated and will be removed in a future API version. Use linked_account_id instead.
      required: false
      deprecated: true
      style: form
      explode: false
      schema:
        $ref: '#/components/schemas/account_id_query_schema'
      x-external: true
    overflow_account_id_query:
      name: overflow_account_id
      in: query
      description: |
        Overflow account ID(s). Multiple IDs can be provided as a comma-separated list.
        This parameter is deprecated and will be removed in a future API version. Use linked_account_id instead.
      required: false
      deprecated: true
      style: form
      explode: false
      schema:
        $ref: '#/components/schemas/account_id_query_schema'
      x-external: true
    page_token:
      name: page_token
      in: query
      required: false
      style: form
      explode: true
      schema:
        type: string
        description: "Optional pagination token to be provided to retrieve subsequent\
          \ pages, returned from previous get"
        example: xwsfu1mkaq
      x-external: true
    payment_schedule_id_query:
      name: schedule_id
      in: query
      description: Payment schedule IDs. Multiple IDs can be provided as a comma-separated
        list.
      required: false
      style: form
      explode: false
      schema:
        $ref: '#/components/schemas/id_list_query_schema'
      x-external: true
    person_id_path:
      name: person_id
      in: path
      description: Person's unique identifier.
      required: true
      style: simple
      explode: false
      schema:
        type: string
        format: uuid
        example: 322d7fc5-938e-4bff-87fb-064a09a0672f
    person_id_query:
      name: person_id
      in: query
      description: |
        Unique identifier for the person. Multiple IDs can be provided as a comma-separated list.
      required: false
      style: form
      explode: false
      schema:
        type: array
        example: "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157"
        items:
          type: string
          format: uuid
      x-external: true
    person_sort_by_query:
      name: sort_by
      in: query
      description: |
        Specifies the sort order for the returned persons.
      required: false
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
          enum:
          - first_name:asc
          - first_name:desc
          - last_name:asc
          - last_name:desc
          - creation_time:asc
          - creation_time:desc
          - last_updated_time:asc
          - last_updated_time:desc
      x-external: true
    phone_number:
      name: phone_number
      in: query
      required: false
      style: form
      explode: true
      schema:
        type: string
        description: "Only return resources where the phone_number field matches the\
          \ specified string. Phone numbers use the E.164 format e.g. +19178675309.\
          \ Any * characters in the string are wildcards, and match any characters."
        example: +12065550100
      x-external: true
    postal_code_query:
      name: postal_code
      in: query
      description: The postal code of a card user
      required: false
      style: form
      explode: true
      schema:
        type: string
        example: "49633"
      x-external: true
    product_id:
      name: product_id
      in: path
      description: Account Product ID
      required: true
      style: simple
      explode: false
      schema:
        type: string
        format: uuid
        example: 0175dfc6-250f-4245-9360-17d3682b943a
    prospect_id:
      name: prospect_id
      in: path
      description: The unique identifier of a prospect on the waitlist
      required: true
      style: simple
      explode: false
      schema:
        type: string
        format: uuid
    receiving_account_id:
      name: receiving_account_id
      in: query
      required: false
      style: form
      explode: true
      schema:
        type: string
        format: uuid
        example: 251ee435-8230-48cb-8a71-b11a43dcf497
      x-external: true
    reconciliation_id:
      name: reconciliation_id
      in: path
      description: Reconciliation id
      required: true
      style: simple
      explode: false
      schema:
        type: string
        format: uuid
        example: b8522850-d4de-4906-9cf1-b472066bf4b2
    relationship_id:
      name: relationship_id
      in: path
      description: Relationship ID of the account associate with the account entity
      required: true
      style: simple
      explode: false
      schema:
        type: string
        format: uuid
        example: 491b33fd-182c-4f0b-90d4-f2f929bbb6d9
    relationship_id1:
      name: relationship_id
      in: path
      description: Relationship ID.
      required: true
      style: simple
      explode: false
      schema:
        type: string
        format: uuid
        example: 95a2e06d-83ab-458b-b3b8-962941411ee6
    relationship_type:
      name: relationship_type
      in: query
      description: |
        The relationship type. Any of the following:
        * `BENEFICIAL_OWNER_OF` – a person who directly or indirectly owns a portion of the business.
        * `MANAGING_PERSON_OF` – a person who is an officer, director, or other notable person of an organization.
        * `OWNER_OF` – a business with ownership of another business.
      required: false
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
          format: enum
          example: BENEFICIAL_OWNER_OF
          enum:
          - BENEFICIAL_OWNER_OF
          - MANAGING_PERSON_OF
          - OWNER_OF
      x-external: true
    result_query:
      name: result
      in: query
      description: |
        The result of the verification that was run on the party.  Multiple values can be provided as a comma-separated list.
      required: false
      style: form
      explode: false
      schema:
        type: array
        items:
          $ref: '#/components/schemas/verification_result'
      x-external: true
    risk_rating_id:
      name: risk_rating_id
      in: path
      description: Risk Rating ID
      required: true
      style: simple
      explode: false
      schema:
        type: string
        format: uuid
        example: 2c0b200c-7b43-4110-83f4-79370103ded8
    schedule_id_path:
      name: payment_schedule_id
      in: path
      description: Payment schedule ID
      required: true
      style: simple
      explode: false
      schema:
        type: string
        format: uuid
    ssn_last_4:
      name: ssn_last_4
      in: query
      required: false
      style: form
      explode: true
      schema:
        maxLength: 4
        minLength: 4
        type: string
        description: Only return resources where the last 4 characters of the SSN
          match the specified value.
        example: "6789"
      x-external: true
    statement_id:
      name: statement_id
      in: path
      description: The unique identifier of a statement
      required: true
      style: simple
      explode: false
      schema:
        type: string
        format: uuid
        example: 6917767f-50b9-475e-91c0-ed7d1efc8e13
      x-external: true
    status:
      name: status
      in: query
      required: false
      style: form
      explode: true
      schema:
        $ref: '#/components/schemas/status'
      x-external: true
    status1:
      name: status
      in: query
      required: false
      style: form
      explode: true
      schema:
        type: string
        description: |
          Status of the business. One of the following:
          * `PROSPECT` – a potential customer, used for information-gathering and disclosures.
          * `ACTIVE` –  is an integrator defined status.  Integrators should set a business to active if they believe the person to be qualified for conducting business.  Synctera will combine this status with other statuses such a verification to determine if the business is eligible for specific actions such as initiating transactions or issuing a card.
          * `FROZEN` – business's actions are blocked for security, legal, or other reasons.
          * `SANCTION` – business is on a sanctions list and should be carefully monitored.
          * `DISSOLVED` – an inactive status indicating a business entity has filed articles of dissolution or a certificate of termination to terminate its existence.
          * `CANCELLED` – an inactive status indicating that a business entity has filed a cancellation or has failed to file its periodic report after notice of forfeiture of its rights to do business.
          * `SUSPENDED` – an inactive status indicating that the business entity has lost the right to operate in it's registered jurisdiction.
          * `MERGED` – an inactive status indicating that the business entity has terminated existence by merging into another entity.
          * `INACTIVE` – an inactive status indicating that the business entity is no longer active.
          * `CONVERTED` – An inactive status indicating that the business entity has been converted to another type of business entity in the same jurisdiction.
        enum:
        - PROSPECT
        - ACTIVE
        - FROZEN
        - SANCTION
        - DISSOLVED
        - CANCELLED
        - SUSPENDED
        - MERGED
        - INACTIVE
        - CONVERTED
      x-external: true
    status2:
      name: status
      in: query
      required: false
      style: form
      explode: true
      schema:
        type: string
        description: Only return resources where with the specified status.
        example: ACTIVE
        enum:
        - ACTIVE
        - DECEASED
        - DENIED
        - DORMANT
        - ESCHEAT
        - FROZEN
        - INACTIVE
        - PROSPECT
        - SANCTION
      x-external: true
    status3:
      name: status
      in: query
      required: false
      style: form
      explode: true
      schema:
        $ref: '#/components/schemas/status1'
      x-external: true
    status4:
      name: status
      in: query
      description: The status of the transaction
      required: false
      style: form
      explode: true
      schema:
        type: string
        default: PENDING
      x-external: true
    status6:
      name: status
      in: query
      required: false
      style: form
      explode: true
      schema:
        type: string
        description: Optional query parameter that can be use to filter the list of
          returned wires by transfer status
        example: PENDING
        enum:
        - PENDING
        - COMPLETED
        - CANCELLED
      x-external: true
    subscription_id:
      name: subscription_id
      in: path
      description: Watchlist monitoring subscription ID
      required: true
      style: simple
      explode: false
      schema:
        type: string
        format: uuid
        example: 1558a413-6b1c-45e0-8da0-386ae5b46b75
    subtype:
      name: subtype
      in: query
      description: Only display transactions matching the given subtype
      required: false
      style: form
      explode: true
      schema:
        type: string
      x-external: true
    template_id:
      name: template_id
      in: path
      description: Account Template ID
      required: true
      style: simple
      explode: false
      schema:
        type: string
        format: uuid
        example: 858f5a31-2723-452d-9cdc-b2c01d40d9dd
    to_business_id_query:
      name: to_business_id
      in: query
      description: |
        Unique identifier for the business. Multiple IDs can be provided as a comma-separated list.
      required: false
      style: form
      explode: false
      schema:
        type: array
        example: "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157"
        items:
          type: string
          format: uuid
      x-external: true
    to_date:
      name: to_date
      in: query
      description: Only display transactions with a posting date less than or equal
        to to_date
      required: false
      style: form
      explode: true
      schema:
        type: string
        format: date
      x-external: true
    transaction_id:
      name: transaction_id
      in: path
      description: Transaction ID in the ledger
      required: true
      style: simple
      explode: false
      schema:
        type: string
        format: uuid
        example: 25ae35db-92b9-4b74-82d9-140a07eece71
    transaction_id1:
      name: transaction_id
      in: query
      description: Only display holds linked to the provided transaction id
      required: false
      style: form
      explode: true
      schema:
        type: string
        format: uuid
        example: 1dac8580-6815-4c9f-be84-ac5518a46832
      x-external: true
    transfer_id:
      name: transfer_id
      in: path
      description: The unique identifier of a transfer
      required: true
      style: simple
      explode: false
      schema:
        type: string
        format: uuid
        example: ddcacaa4-e0e4-4652-ae9f-5ef7f1b7d7e1
    type:
      name: type
      in: query
      description: Only display transactions matching the given type
      required: false
      style: form
      explode: true
      schema:
        type: string
      x-external: true
    vendor_id:
      name: vendor_id
      in: path
      description: Vendor ID
      required: true
      style: simple
      explode: false
      schema:
        type: string
        format: string
    verification_id:
      name: verification_id
      in: path
      description: Unique identifier for the verification.
      required: true
      style: simple
      explode: false
      schema:
        type: string
        format: uuid
        example: 72aad5e2-302a-4683-8d33-2510afae6eab
    verification_id1:
      name: verification_id
      in: path
      description: Verification's unique identifier.
      required: true
      style: simple
      explode: false
      schema:
        type: string
        format: uuid
        example: 0cf88729-42fe-482d-904f-2f0508252858
    verification_type_query:
      name: verification_type
      in: query
      description: |
        The type of verification run. Multiple values can be provided as a comma-separated list.
      required: false
      style: form
      explode: false
      schema:
        type: array
        items:
          $ref: '#/components/schemas/verification_type1'
      x-external: true
    waitlist_id:
      name: waitlist_id
      in: path
      description: The unique identifier of a waitlist
      required: true
      style: simple
      explode: false
      schema:
        type: string
        format: uuid
    webhook_id:
      name: webhook_id
      in: path
      description: The unique identifier of a webhook
      required: true
      style: simple
      explode: false
      schema:
        type: string
        format: uuid
        example: cc89a467-e868-4281-b015-d95830a312eb
    webhook_id1:
      name: webhook_id
      in: path
      description: Webhook ID
      required: true
      style: simple
      explode: false
      schema:
        type: string
        format: uuid
        example: 1b7767fe-7dcd-43d5-85cf-c4392bb3e830
    wire_id:
      name: wire_id
      in: path
      description: The unique identifier of a wire
      required: true
      style: simple
      explode: false
      schema:
        type: string
        format: uuid
        example: 50653b5a-fba5-4e95-aef3-819414206d61
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: api_key
x-readme:
  explorer-enabled: true
  proxy-enabled: true
  samples-enabled: true
