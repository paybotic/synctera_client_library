openapi: 3.0.3
info:
  description: "<h2>Let's build something great.</h2><p>Welcome to the official reference\
    \ documentation for Synctera APIs. Our APIs are the best way to automate your\
    \ company's banking needs and are designed to be easy to understand and implement.</p><p>We're\
    \ continuously growing this library and what you see here is just the start, but\
    \ if you need something specific or have a question, <a class='text-blue-600'\
    \ href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact\
    \ us</a>.</p>"
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  title: Synctera API
  version: 0.69.0
servers:
- description: Sandbox (no real world financial impact)
  url: https://api-sandbox.synctera.com/v0
- description: Production
  url: https://api.synctera.com/v0
security:
- bearerAuth: []
tags:
- description: Lookup merchant information
  name: Merchants
- description: Requests to generate simulated webhooks
  name: Card Webhook Simulations
- description: Simulate receiving ACH transactions and returns
  name: ACH Transaction Simulations
- description: Requests to link and manage External Cards
  name: External Cards
- description: |
    The disclosures resource is used to track the status of disclosures and
    ensure that all parties have been shown the necessary disclosures to meet
    regulatory obligations.
  name: Disclosures
- description: Requests to initiate customer verification.
  name: KYC Verification (deprecated)
- description: Request to create and manage users
  name: Users
- description: See balance history
  name: BalanceHistory
- description: |
    The External Account resource is used for managing links to accounts
    that operate outside of the Synctera ecosystem.
  name: External Accounts
- description: "Requests to create and manage account products, including fees, interest."
  name: Account Products
- description: Requests to create and manage webhooks
  name: Webhooks
- description: Create and manage documents.
  name: Documents
- description: Create and manage same currency and multi-currency international wire
    transfers
  name: International Wires (alpha)
- description: Requests for transaction risk detection
  name: Transaction risk
- description: Request to create and manage cash_pickups
  name: Cash Pickups (alpha)
- description: Request to create and manage party groups and party group members
  name: Party Groups
- description: Requests to manage monitoring subscriptions and alerts for customers.
  name: Monitoring
- description: Requests to search and manage compliance searches
  name: Compliance Searches
- description: Requests to create and manage customers
  name: Customers
- description: |
    The internal account resource is used for managing links to internal
    accounts where the funds are managed by integrators.
  name: Internal Accounts
- description: Create and manage spending controls
  name: Spend Controls
- description: Retrieve user identity information
  name: Identity
- description: Requests to manage banks
  name: Banks
- description: |
    The Disclosures resource is used to track the status of disclosures and
    ensure that customers have been shown the necessary disclosures to meet
    regulatory obligations.
  name: Disclosures (deprecated)
- description: Create and manage wire transfers
  name: Wires
- description: Requests to issue and manage Cards
  name: Cards
- description: "Request to enroll, renew, or cancel watchlist monitors"
  name: Watchlist (deprecated)
- description: Endpoints for modifying or fetching posting dates
  name: Posting Dates
- description: Request to create and manage accounts
  name: Accounts
- description: Requests to create and perform administrative functions
  name: Admin
- description: Requests to create and manage notes
  name: Notes
- description: Account Template
  name: Account Templates
- description: |
    A natural person (individual human) that is relevant to the Synctera platform in some way: e.g. a personal customer or a director/officer/owner of a business.
  name: Persons
- description: |
    Represents the relationships between parties. A relationship can exist between personal customers, business customers, or non-customer persons/organizations.
  name: Relationships
- description: |
    A legal entity (corporation, partnership, etc.) that is relevant to the Synctera platform in some way: a business customer or some other organization that has an ownership share in such a business customer.
  name: Businesses
- description: Request to create and manage payment_schedules
  name: Cronut
- description: Requests to manage partners
  name: Partners
- description: Request to create and manage deposits using remote deposit capture
  name: Remote Check Deposit
- description: Requests to create and manage API keys
  name: API Keys
- description: Requests to create and manage ban rules
  name: Ban Rules
- description: Admin API for Middesk configuration using the tenants API keys.
  name: Middesk
- description: Request to create and manage exclusions
  name: Stately
- description: Request to create and manage partner configurations
  name: Quickstart
- description: Create and manage transactions
  name: Transactions
- description: Request to create and manage rdc configurations
  name: RDC Config
- description: Create and manage holds
  name: Hold
- description: Requests to create and manage roles
  name: Roles
- description: Simulate receiving Wire transactions and returns
  name: Wire Transaction Simulations
- description: Requests to create licenses
  name: Licenses
- description: Configure vendor secrets for egress requests
  name: Egress Gateway Vendor Secret CRUD API
- description: Create and manage payments
  name: ACH
- description: Create and manage tenant configurations
  name: Tenant Configs
- description: Create and manage sweep configurations
  name: Configs
- description: |
    Represents the compliance rules that are used to verify certain kinds of money movement.
  name: Compliance Rules
- description: Configure webhook secrets for egress requests
  name: Egress Gateway Webhook Secret CRUD API
- description: Create and manage EFT Canada transfers
  name: EFT Canada (alpha)
- description: Create and manage transactions
  name: Transactions (internal)
- description: History
  name: History
- description: Requests to generate simulated transactions
  name: Card Transaction Simulations
- description: Requests to initiate customer verification.
  name: KYC/KYB Verifications
- description: Request to create and manage waitlists
  name: Waitlist
paths:
  /accounts:
    get:
      description: Get paginated list of Accounts associated
      operationId: listAccounts
      parameters:
      - description: |
          Nickname of the account
        explode: true
        in: query
        name: nickname
        required: false
        schema:
          type: string
        style: form
      - description: |
          Account number(s). Multiple account numbers can be provided as a comma-separated list.
          When only a single account number is provided, any * characters in the string are wildcards, and match any characters.
        explode: false
        in: query
        name: account_number
        required: false
        schema:
          example: "2345678108180014864"
          items:
            type: string
          type: array
        style: form
      - explode: true
        in: query
        name: last_name
        required: false
        schema:
          description: "Only return resources where the last_name field matches the\
            \ specified string. Any * characters in the string are wildcards, and\
            \ match any characters."
          example: Smith
          type: string
        style: form
      - explode: true
        in: query
        name: status
        required: false
        schema:
          $ref: '#/components/schemas/status'
        style: form
      - explode: true
        in: query
        name: first_name
        required: false
        schema:
          description: "Only return resources where the first_name or chosen_name\
            \ field matches the specified string. Any * characters in the string are\
            \ wildcards, and match any characters."
          example: Alice
          type: string
        style: form
      - deprecated: true
        description: |
          Overflow account ID(s). Multiple IDs can be provided as a comma-separated list.
          This parameter is deprecated and will be removed in a future API version. Use linked_account_id instead.
        explode: false
        in: query
        name: overflow_account_id
        required: false
        schema:
          example: "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157"
          items:
            format: uuid
            type: string
          type: array
        style: form
      - description: |
          The type of the account
        explode: true
        in: query
        name: account_type
        required: false
        schema:
          $ref: '#/components/schemas/account_type'
        style: form
      - description: |
          Unique identifier for the business. Multiple IDs can be provided as a comma-separated list.
        explode: false
        in: query
        name: business_id
        required: false
        schema:
          example: "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157"
          items:
            format: uuid
            type: string
          type: array
        style: form
      - deprecated: true
        description: |
          Overdraft account ID(s). Multiple IDs can be provided as a comma-separated list.
          This parameter is deprecated and will be removed in a future API version. Use linked_account_id instead.
        explode: false
        in: query
        name: overdraft_account_id
        required: false
        schema:
          example: "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157"
          items:
            format: uuid
            type: string
          type: array
        style: form
      - description: |
          Spend Control ID(s). Multiple IDs can be provided as a comma-separated list.
          Return only resources that use the specified Spend Controls.
        explode: false
        in: query
        name: spend_control_ids
        required: false
        schema:
          $ref: '#/components/schemas/spend_control_ids'
        style: form
      - explode: true
        in: query
        name: page_token
        required: false
        schema:
          description: "Optional pagination token to be provided to retrieve subsequent\
            \ pages, returned from previous get"
          example: a8937a0d
          type: string
        style: form
      - description: |
          Unique identifier for the person. Multiple IDs can be provided as a comma-separated list.
        explode: false
        in: query
        name: person_id
        required: false
        schema:
          example: "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157"
          items:
            format: uuid
            type: string
          type: array
        style: form
      - description: |
          Customer type of the account, BUSINESS or PERSONAL
        explode: true
        in: query
        name: customer_type
        required: false
        schema:
          $ref: '#/components/schemas/customer_type'
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          description: |
            Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
          example: 100
          minimum: 1
          type: integer
        style: form
      - deprecated: true
        description: The customer's unique identifier
        explode: true
        in: query
        name: customer_id
        required: false
        schema:
          $ref: '#/components/schemas/customer_id'
        style: form
      - description: Interest product ID that accounts associate with. Multiple IDs
          can be provided as a comma-separated list.
        explode: true
        in: query
        name: interest_product_id
        required: false
        schema:
          type: string
        style: form
      - description: |
          Return only resources that are linked to the specified backing account in balance_floor or balance_ceiling. Multiple IDs can be provided as a comma-separated list.
        explode: false
        in: query
        name: linked_account_id
        required: false
        schema:
          example: "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157"
          items:
            format: uuid
            type: string
          type: array
        style: form
      - description: |
          Account ID(s). Multiple IDs can be provided as a comma-separated list.
        explode: false
        in: query
        name: id
        required: false
        schema:
          example: "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157"
          items:
            format: uuid
            type: string
          type: array
        style: form
      - description: |
          Specifies the sort order for the returned accounts.
        explode: false
        in: query
        name: sort_by
        required: false
        schema:
          items:
            enum:
            - account_number:asc
            - account_number:desc
            - account_type:asc
            - account_type:desc
            - first_name:asc
            - first_name:desc
            - last_name:asc
            - last_name:desc
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/account_list'
          description: List of accounts
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: List accounts
      tags:
      - Accounts
      x-external: true
    post:
      description: |
        Creates an account copying values from account template into the account resource.  Any fields defined as part of account creation will overwrite the ones provided from the account template.

        Required fields:
          - relationships
      operationId: createAccount
      parameters:
      - description: "An idempotency key is an arbitrary unique value generated by\
          \ client to detect subsequent retries of the same request. It is recommended\
          \ that a UUID or a similar random identifier be used as an idempotency key.\
          \ A different key must be used for each request, unless it is a retry."
        explode: false
        in: header
        name: Idempotency-Key
        required: false
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/account_creation'
        description: Account to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/account_generic_response'
          description: Created account
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "422":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unprocessable entity request response
      summary: Create an account
      tags:
      - Accounts
      x-external: true
    summary: Accounts
  /accounts/products:
    get:
      description: |
        List account Products
      operationId: listAccountResourceProducts
      parameters:
      - description: Date range filtering for type INTEREST. All rates in interest
          resource have to have valid_to earlier or equal to end_date.
        explode: true
        in: query
        name: end_date
        required: false
        schema:
          format: date
          type: string
        style: form
      - explode: true
        in: query
        name: page_token
        required: false
        schema:
          description: "Optional pagination token to be provided to retrieve subsequent\
            \ pages, returned from previous get"
          example: a8937a0d
          type: string
        style: form
      - description: Type of account product
        explode: true
        in: query
        name: product_type
        required: true
        schema:
          enum:
          - FEE
          - INTEREST
          type: string
        style: form
      - description: ID of account product. Multiple IDs can be provided as a comma-separated
          list.
        explode: true
        in: query
        name: id
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          description: |
            Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
          example: 100
          minimum: 1
          type: integer
        style: form
      - description: Date range filtering for type INTEREST. All rates in interest
          resource have to have valid_from later or equal to start_date.
        explode: true
        in: query
        name: start_date
        required: false
        schema:
          format: date
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/account_product_list'
          description: List of account products
      summary: List account products
      tags:
      - Accounts
      x-external: true
    post:
      description: |
        Create an account product. Rates cannot be nil or empty.
      operationId: createAccountResourceProduct
      parameters:
      - description: "An idempotency key is an arbitrary unique value generated by\
          \ client to detect subsequent retries of the same request. It is recommended\
          \ that a UUID or a similar random identifier be used as an idempotency key.\
          \ A different key must be used for each request, unless it is a retry."
        explode: false
        in: header
        name: Idempotency-Key
        required: false
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/account_product'
        description: Account product to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/account_product'
          description: Account product created
      summary: Create an account product
      tags:
      - Accounts
      x-external: true
    summary: Account products
  /accounts/products/{product_id}:
    patch:
      description: |
        Patch account product. Rates requires at minimum 1 entry if specified.
      operationId: patchAccountProduct
      parameters:
      - description: Account Product ID
        explode: false
        in: path
        name: product_id
        required: true
        schema:
          example: 92113c51-e4ff-4e57-9558-08cab6b963dd
          format: uuid
          type: string
        style: simple
      - description: "An idempotency key is an arbitrary unique value generated by\
          \ client to detect subsequent retries of the same request. It is recommended\
          \ that a UUID or a similar random identifier be used as an idempotency key.\
          \ A different key must be used for each request, unless it is a retry."
        explode: false
        in: header
        name: Idempotency-Key
        required: false
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/patch_account_product'
        description: Account product fields to be patched
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/account_product'
          description: Updated account product
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
      summary: Patch account product
      tags:
      - Accounts
      x-external: true
    summary: Account products
  /accounts/templates:
    get:
      description: |
        List account templates
      operationId: listAccountTemplates
      parameters:
      - description: |
          The type of the account
        explode: true
        in: query
        name: account_type
        required: false
        schema:
          $ref: '#/components/schemas/account_type'
        style: form
      - explode: true
        in: query
        name: page_token
        required: false
        schema:
          description: "Optional pagination token to be provided to retrieve subsequent\
            \ pages, returned from previous get"
          example: a8937a0d
          type: string
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          description: |
            Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
          example: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/template_list'
          description: List of account templates
      summary: List account templates
      tags:
      - Accounts
      x-external: true
    post:
      description: |
        Create an account template. An account template is needed to create an account in a lead mode.
      operationId: createAccountTemplate
      parameters:
      - description: "An idempotency key is an arbitrary unique value generated by\
          \ client to detect subsequent retries of the same request. It is recommended\
          \ that a UUID or a similar random identifier be used as an idempotency key.\
          \ A different key must be used for each request, unless it is a retry."
        explode: false
        in: header
        name: Idempotency-Key
        required: false
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/account_template'
        description: Account template to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/account_template_response'
          description: Account template created
      summary: Create an account template
      tags:
      - Accounts
      x-external: true
    summary: Accounts
  /accounts/templates/{template_id}:
    delete:
      description: Delete account template
      operationId: DeleteAccountTemplate
      parameters:
      - description: Account Template ID
        explode: false
        in: path
        name: template_id
        required: true
        schema:
          example: a8943c51-e4ff-4e57-9558-08cab6b963c0
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/delete_response'
          description: Resource has been deleted
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
      summary: Delete account template
      tags:
      - Accounts
      x-external: true
    get:
      description: Get an account template
      operationId: getAccountTemplate
      parameters:
      - description: Account Template ID
        explode: false
        in: path
        name: template_id
        required: true
        schema:
          example: a8943c51-e4ff-4e57-9558-08cab6b963c0
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/account_template_response'
          description: Account Template
      summary: Get account template
      tags:
      - Accounts
      x-external: true
    put:
      description: |
        Update account template
      operationId: updateAccountTemplate
      parameters:
      - description: Account Template ID
        explode: false
        in: path
        name: template_id
        required: true
        schema:
          example: a8943c51-e4ff-4e57-9558-08cab6b963c0
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/account_template'
        description: Account template to update
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/account_template_response'
          description: Account template updated
      summary: Update account template
      tags:
      - Accounts
      x-external: true
    summary: account
  /accounts/{account_id}:
    get:
      description: Get an account
      operationId: getAccount
      parameters:
      - description: Unique identifier for the account.
        explode: false
        in: path
        name: account_id
        required: true
        schema:
          example: 57826c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/account_generic_response'
          description: Account
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "461":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Account has been closed
      summary: Get account
      tags:
      - Accounts
      x-external: true
    patch:
      description: |
        Patch account.

        Immutable fields:
          - account_number
          - account_type
          - account_template_id
          - customer_type

        Please note:
          - Other fields cannot be modified when access_status is FROZEN.
          - access_status has to be patched individually without other fields.
      operationId: patchAccount
      parameters:
      - description: "An idempotency key is an arbitrary unique value generated by\
          \ client to detect subsequent retries of the same request. It is recommended\
          \ that a UUID or a similar random identifier be used as an idempotency key.\
          \ A different key must be used for each request, unless it is a retry."
        explode: false
        in: header
        name: Idempotency-Key
        required: false
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          type: string
        style: simple
      - description: Unique identifier for the account.
        explode: false
        in: path
        name: account_id
        required: true
        schema:
          example: 57826c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/patch_account'
        description: Account fields to be patched
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/account_generic_response'
          description: Updated account
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "461":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Account has been closed
      summary: Patch account
      tags:
      - Accounts
      x-external: true
    put:
      deprecated: true
      description: |
        > Deprecated. Please use PATCH /v0/accounts. This route only supports types CHECKING and SAVING.

        Update account

        Shadow mode required fields:
          - account_number
          - status

        Lead mode required fields:
          - All fields are required.

        Please note:
          - access_status needs to be in ACTIVE.
          - PUT request cannot change access_status.
      operationId: updateAccount
      parameters:
      - description: Unique identifier for the account.
        explode: false
        in: path
        name: account_id
        required: true
        schema:
          example: 57826c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/update_account'
        description: Account to update
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/account_generic_response'
          description: Updated account
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "461":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Account has been closed
      summary: Update account
      tags:
      - Accounts
      x-external: true
    summary: account
  /accounts/{account_id}/relationships:
    get:
      description: List all customers of an account
      operationId: listAccountRelationship
      parameters:
      - explode: true
        in: query
        name: page_token
        required: false
        schema:
          description: "Optional pagination token to be provided to retrieve subsequent\
            \ pages, returned from previous get"
          example: a8937a0d
          type: string
        style: form
      - description: Unique identifier for the account.
        explode: false
        in: path
        name: account_id
        required: true
        schema:
          example: 57826c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        style: simple
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          description: |
            Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
          example: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/relationship_list'
          description: List of account relationships
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "461":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Account has been closed
      summary: List account relationships
      tags:
      - Accounts
      x-external: true
    post:
      description: Add a customer to an account
      operationId: createAccountRelationship
      parameters:
      - description: "An idempotency key is an arbitrary unique value generated by\
          \ client to detect subsequent retries of the same request. It is recommended\
          \ that a UUID or a similar random identifier be used as an idempotency key.\
          \ A different key must be used for each request, unless it is a retry."
        explode: false
        in: header
        name: Idempotency-Key
        required: false
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          type: string
        style: simple
      - description: Unique identifier for the account.
        explode: false
        in: path
        name: account_id
        required: true
        schema:
          example: 57826c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/relationship'
        description: Account relationship object
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/relationship_response'
          description: Account relationship object
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "461":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Account has been closed
      summary: Create account relationship
      tags:
      - Accounts
      x-external: true
    summary: Account Relationship
  /accounts/{account_id}/relationships/{relationship_id}:
    delete:
      description: Delete account relationship
      operationId: DeleteAccountRelationship
      parameters:
      - description: Relationship ID of the account associate with the account entity
        explode: false
        in: path
        name: relationship_id
        required: true
        schema:
          example: 1a582c51-e4ff-4e57-9558-08cab6b963aa
          format: uuid
          type: string
        style: simple
      - description: Unique identifier for the account.
        explode: false
        in: path
        name: account_id
        required: true
        schema:
          example: 57826c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/delete_response'
          description: Resource has been deleted
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "461":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Account has been closed
      summary: Delete account relationship
      tags:
      - Accounts
      x-external: true
    get:
      description: Get account relationship by ID
      operationId: getAccountRelationship
      parameters:
      - description: Relationship ID of the account associate with the account entity
        explode: false
        in: path
        name: relationship_id
        required: true
        schema:
          example: 1a582c51-e4ff-4e57-9558-08cab6b963aa
          format: uuid
          type: string
        style: simple
      - description: Unique identifier for the account.
        explode: false
        in: path
        name: account_id
        required: true
        schema:
          example: 57826c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/relationship_response'
          description: Account relationship
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "461":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Account has been closed
      summary: Get account relationship
      tags:
      - Accounts
      x-external: true
    put:
      description: Update account relationship. Only relationship_type can be updated.
        customer_id should not be modified.
      operationId: updateAccountRelationship
      parameters:
      - description: Relationship ID of the account associate with the account entity
        explode: false
        in: path
        name: relationship_id
        required: true
        schema:
          example: 1a582c51-e4ff-4e57-9558-08cab6b963aa
          format: uuid
          type: string
        style: simple
      - description: Unique identifier for the account.
        explode: false
        in: path
        name: account_id
        required: true
        schema:
          example: 57826c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/relationship'
        description: Account relationship to be updated
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/relationship_response'
          description: Updated account relationship
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "461":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Account has been closed
      summary: Update account relationship
      tags:
      - Accounts
      x-external: true
    summary: Account Relationship
  /ach:
    description: |
      The ACH object represents your sent ACH.
    get:
      description: List sent ACH transactions
      operationId: listTransactionsOut
      parameters:
      - explode: true
        in: query
        name: page_token
        required: false
        schema:
          description: "Optional pagination token to be provided to retrieve subsequent\
            \ pages, returned from previous get"
          example: a8937a0d
          type: string
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          description: |
            Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
          example: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/outgoing_ach_list'
          description: List of sent ACH transactions.
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: List sent ACH transactions
      tags:
      - ACH
      x-external: true
    post:
      description: |
        Send an ACH
      operationId: addTransactionOut
      parameters:
      - description: "An idempotency key is an arbitrary unique value generated by\
          \ client to detect subsequent retries of the same request. It is recommended\
          \ that a UUID or a similar random identifier be used as an idempotency key.\
          \ A different key must be used for each request, unless it is a retry."
        explode: false
        in: header
        name: Idempotency-Key
        required: false
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/outgoing_ach_request'
        description: Send ACH request
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/outgoing_ach'
          description: Sent ACH response
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "422":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unprocessable entity request response
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Send an ACH
      tags:
      - ACH
      x-external: true
    summary: Sent ACH
  /ach/transaction_simulations/receiving_return:
    post:
      description: Use to simulate receiving ACH return in test environments. Creates
        an incoming ACH file with a single return entry based on a previously created
        outgoing transaction. The file gets automatically processed.
      operationId: achReturnSimulation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ach_return_simulation_request'
        description: Incoming ACH return simulation
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ach_simulation_response'
          description: Simulated receiving ACH return
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Simulate receiving ACH return
      tags:
      - ACH Transaction Simulations
      x-external: true
    summary: Receiving ACH return simulation
  /ach/transaction_simulations/receiving_transaction:
    post:
      description: "Use to simulate receiving ACH transaction in test environments.\
        \ Creates an incoming ACH file with a single transaction, which gets automatically\
        \ processed."
      operationId: achTransactionSimulation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ach_transaction_simulation_request'
        description: Sent ACH request
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ach_simulation_response'
          description: Simulated receiving ACH transaction
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Simulate receiving ACH transaction
      tags:
      - ACH Transaction Simulations
      x-external: true
    summary: Receiving ACH simulation
  /ach/{transaction_id}:
    get:
      description: Get a single sent ACH transaction
      operationId: getTransactionOut
      parameters:
      - description: Transaction ID in the ledger
        explode: false
        in: path
        name: transaction_id
        required: true
        schema:
          example: b01db9c7-78f2-4a99-8aca-1231d32f9b96
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/outgoing_ach'
          description: Sent ACH transaction representation.
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Get a sent ACH transaction
      tags:
      - ACH
      x-external: true
    patch:
      description: Update a sent ACH transaction (either status or funds availability)
      operationId: patchTransactionOut
      parameters:
      - description: "An idempotency key is an arbitrary unique value generated by\
          \ client to detect subsequent retries of the same request. It is recommended\
          \ that a UUID or a similar random identifier be used as an idempotency key.\
          \ A different key must be used for each request, unless it is a retry."
        explode: false
        in: header
        name: Idempotency-Key
        required: false
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          type: string
        style: simple
      - description: Transaction ID in the ledger
        explode: false
        in: path
        name: transaction_id
        required: true
        schema:
          example: b01db9c7-78f2-4a99-8aca-1231d32f9b96
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/outgoing_ach_patch'
        description: Update sent ach transaction
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/outgoing_ach'
          description: Sent ACH transaction representation.
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "422":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unprocessable entity request response
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Update a sent ACH transaction
      tags:
      - ACH
      x-external: true
    summary: Sent ACH detail
  /businesses:
    get:
      description: Retrieves paginated list of businesses associated with the authorized
        requester.
      operationId: listBusinesses
      parameters:
      - explode: true
        in: query
        name: status
        required: false
        schema:
          description: |
            Status of the business. One of the following:
            * `PROSPECT` – a potential customer, used for information-gathering and disclosures.
            * `ACTIVE` –  is an integrator defined status.  Integrators should set a business to active if they believe the person to be qualified for conducting business.  Synctera will combine this status with other statuses such a verification to determine if the business is eligible for specific actions such as initiating transactions or issuing a card.
            * `FROZEN` – business's actions are blocked for security, legal, or other reasons.
            * `SANCTION` – business is on a sanctions list and should be carefully monitored.
            * `DISSOLVED` – an inactive status indicating a business entity has filed articles of dissolution or a certificate of termination to terminate its existence.
            * `CANCELLED` – an inactive status indicating that a business entity has filed a cancellation or has failed to file its periodic report after notice of forfeiture of its rights to do business.
            * `SUSPENDED` – an inactive status indicating that the business entity has lost the right to operate in it's registered jurisdiction.
            * `MERGED` – an inactive status indicating that the business entity has terminated existence by merging into another entity.
            * `INACTIVE` – an inactive status indicating that the business entity is no longer active.
            * `CONVERTED` – An inactive status indicating that the business entity has been converted to another type of business entity in the same jurisdiction.
          enum:
          - ACTIVE
          - CANCELLED
          - CONVERTED
          - DISSOLVED
          - FROZEN
          - INACTIVE
          - MERGED
          - PROSPECT
          - SANCTION
          - SUSPENDED
          type: string
        style: form
      - description: "If true, show only customers. If false, show non-customer parties."
        explode: true
        in: query
        name: is_customer
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Specifies the sort order for the returned businesses.
        explode: false
        in: query
        name: sort_by
        required: false
        schema:
          items:
            enum:
            - creation_time:asc
            - creation_time:desc
            - entity_name:asc
            - entity_name:desc
            - last_updated_time:asc
            - last_updated_time:desc
            type: string
          type: array
        style: form
      - description: |
          Filter on resources that have an account(s)
        explode: true
        in: query
        name: has_accounts
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Unique identifier for the business. Multiple IDs can be provided as a comma-separated list.
        explode: false
        in: query
        name: id
        required: false
        schema:
          example: "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157"
          items:
            format: uuid
            type: string
          type: array
        style: form
      - explode: true
        in: query
        name: phone_number
        required: false
        schema:
          description: "Only return resources where the phone_number field matches\
            \ the specified string. Phone numbers use the E.164 format e.g. +19178675309.\
            \ Any * characters in the string are wildcards, and match any characters."
          example: +12065550100
          type: string
        style: form
      - explode: true
        in: query
        name: page_token
        required: false
        schema:
          description: "Optional pagination token to be provided to retrieve subsequent\
            \ pages, returned from previous get"
          example: a8937a0d
          type: string
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          description: |
            Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
          example: 100
          minimum: 1
          type: integer
        style: form
      - explode: true
        in: query
        name: entity_name
        required: false
        schema:
          description: "Only return resources where the `entity_name` field matches\
            \ the specified string. Any `*` characters in the string are wildcards,\
            \ and match any characters."
          example: Apex Corporation
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/business_list'
          description: List of businesses.
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: List business
      tags:
      - Businesses
      x-external: true
      x-status: alpha
    post:
      description: |
        Create a business who may act as a customer or a related business. You can then verify the identity of this customer and associate them with other people and accounts.
      operationId: createBusiness
      parameters:
      - description: "An idempotency key is an arbitrary unique value generated by\
          \ client to detect subsequent retries of the same request. It is recommended\
          \ that a UUID or a similar random identifier be used as an idempotency key.\
          \ A different key must be used for each request, unless it is a retry."
        explode: false
        in: header
        name: Idempotency-Key
        required: false
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/business'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/business'
          description: The created business.
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "409":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource already exists error
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Create a business
      tags:
      - Businesses
      x-external: true
      x-status: alpha
    summary: Businesses
  /businesses/{business_id}:
    get:
      description: Get business by ID.
      operationId: getBusiness
      parameters:
      - description: Business's unique identifier.
        explode: false
        in: path
        name: business_id
        required: true
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/business'
          description: Business representation.
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Get business
      tags:
      - Businesses
      x-external: true
      x-status: alpha
    patch:
      description: Update business by ID.
      operationId: updateBusiness
      parameters:
      - description: "An idempotency key is an arbitrary unique value generated by\
          \ client to detect subsequent retries of the same request. It is recommended\
          \ that a UUID or a similar random identifier be used as an idempotency key.\
          \ A different key must be used for each request, unless it is a retry."
        explode: false
        in: header
        name: Idempotency-Key
        required: false
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          type: string
        style: simple
      - description: Business's unique identifier.
        explode: false
        in: path
        name: business_id
        required: true
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/patch_business'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/business'
          description: Updated business representation.
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Patch business
      tags:
      - Businesses
      x-external: true
      x-status: alpha
  /cards:
    description: |
      The Card object represents your customer's spending card.
    get:
      description: |
        List of cards matching query parameters
      operationId: listCards
      parameters:
      - description: The last 4 digits of the card PAN
        explode: true
        in: query
        name: last_four
        required: false
        schema:
          example: "1234"
          pattern: "^\\d{4}$"
          type: string
        style: form
      - description: The postal code of a card user
        explode: true
        in: query
        name: postal_code
        required: false
        schema:
          example: "49633"
          type: string
        style: form
      - explode: true
        in: query
        name: customer_id
        required: false
        schema:
          $ref: '#/components/schemas/customer_id1'
        style: form
      - description: The brand of a card product
        explode: true
        in: query
        name: card_brand
        required: false
        schema:
          $ref: '#/components/schemas/card_brand'
        style: form
      - description: emboss name
        explode: true
        in: query
        name: emboss_name
        required: false
        schema:
          type: string
        style: form
      - description: Indicates the type of card
        explode: true
        in: query
        name: card_type
        required: false
        schema:
          $ref: '#/components/schemas/card_type'
        style: form
      - description: The format of the card
        explode: true
        in: query
        name: form
        required: false
        schema:
          $ref: '#/components/schemas/form'
        style: form
      - explode: true
        in: query
        name: page_token
        required: false
        schema:
          description: "Optional pagination token to be provided to retrieve subsequent\
            \ pages, returned from previous get"
          example: a8937a0d
          type: string
        style: form
      - description: The status of a card
        explode: true
        in: query
        name: card_status
        required: false
        schema:
          $ref: '#/components/schemas/card_status'
        style: form
      - explode: true
        in: query
        name: card_product_id
        required: false
        schema:
          $ref: '#/components/schemas/card_product_id'
        style: form
      - description: Account ID(s). Multiple IDs can be provided as a comma-separated
          list.
        explode: false
        in: query
        name: account_id
        required: false
        schema:
          items:
            $ref: '#/components/schemas/account_id'
          type: array
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          description: |
            Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
          example: 100
          minimum: 1
          type: integer
        style: form
      - explode: true
        in: query
        name: barcode
        required: false
        schema:
          $ref: '#/components/schemas/barcode'
        style: form
      - description: The date representing when the card would expire at
        explode: true
        in: query
        name: expiration_date
        required: false
        schema:
          example: 2006-01-02
          format: date
          type: string
        style: form
      - description: |
          Specifies the sort order for the returned cards.
        explode: false
        in: query
        name: sort_by
        required: false
        schema:
          items:
            enum:
            - account_id:asc
            - account_id:desc
            - card_brand:asc
            - card_brand:desc
            - card_product_id:asc
            - card_product_id:desc
            - card_status:asc
            - card_status:desc
            - card_type:asc
            - card_type:desc
            - customer_id:asc
            - customer_id:desc
            - expiration_date:asc
            - expiration_date:desc
            - form:asc
            - form:desc
            - last_four:asc
            - last_four:desc
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/card_list_response'
          description: Cards
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "422":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unprocessable entity request response
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: List Cards
      tags:
      - Cards
      x-external: true
    post:
      description: |
        Issue or reissue a new card for a customer
      operationId: issueCard
      parameters:
      - description: "An idempotency key is an arbitrary unique value generated by\
          \ client to detect subsequent retries of the same request. It is recommended\
          \ that a UUID or a similar random identifier be used as an idempotency key.\
          \ A different key must be used for each request, unless it is a retry."
        explode: false
        in: header
        name: Idempotency-Key
        required: false
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/card_issuance_request'
        description: Card to issue
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/card_response'
          description: Card issued
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "422":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unprocessable entity request response
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Issue a Card
      tags:
      - Cards
      x-external: true
    summary: Cards
  /cards/activate:
    description: |
      Activate a card
    post:
      description: |
        Activate a card
      operationId: activateCard
      parameters:
      - description: "An idempotency key is an arbitrary unique value generated by\
          \ client to detect subsequent retries of the same request. It is recommended\
          \ that a UUID or a similar random identifier be used as an idempotency key.\
          \ A different key must be used for each request, unless it is a retry."
        explode: false
        in: header
        name: Idempotency-Key
        required: false
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/card_activation_request'
        description: Card activation code
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/card_response'
          description: Card activated successfully
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "422":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unprocessable entity request response
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Activate a card
      tags:
      - Cards
      x-external: true
    summary: Card Activation
  /cards/card_widget_url:
    get:
      description: |
        This endpoint returns a URL address of the specified widget for a given card
      operationId: getCardWidgetURL
      parameters:
      - description: The ID of the card (required for set PIN widget)
        explode: true
        in: query
        name: card_id
        required: false
        schema:
          $ref: '#/components/schemas/card_id'
        style: form
      - explode: true
        in: query
        name: account_id
        required: true
        schema:
          $ref: '#/components/schemas/account_id'
        style: form
      - explode: true
        in: query
        name: customer_id
        required: true
        schema:
          $ref: '#/components/schemas/customer_id1'
        style: form
      - description: The type of widget for which to construct the URL
        explode: true
        in: query
        name: widget_type
        required: true
        schema:
          $ref: '#/components/schemas/widget_type'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/card_widget_url_response'
          description: Card issued
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "422":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unprocessable entity request response
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Get card widget URL
      tags:
      - Cards
      x-external: true
    summary: Get Card Widget URL
  /cards/digital_wallet_tokens:
    get:
      description: |
        List Digital Wallet Tokens <br>NB: Digital wallet tokens cannot be created outside of production</br>
      operationId: listDigitalWalletTokens
      parameters:
      - explode: true
        in: query
        name: page_token
        required: false
        schema:
          description: "Optional pagination token to be provided to retrieve subsequent\
            \ pages, returned from previous get"
          example: a8937a0d
          type: string
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          description: |
            Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
          example: 100
          minimum: 1
          type: integer
        style: form
      - description: The status of the Digital Wallet Token
        explode: true
        in: query
        name: token_state
        required: false
        schema:
          $ref: '#/components/schemas/digital_wallet_token_state'
        style: form
      - explode: true
        in: query
        name: card_id
        required: false
        schema:
          $ref: '#/components/schemas/card_id'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/token_list_response'
          description: List of Digital Wallet Tokens of a card
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "422":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unprocessable entity request response
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: List Digital Wallet Tokens
      tags:
      - Digital Wallet Tokens
      x-external: true
  /cards/digital_wallet_tokens/{digital_wallet_token_id}:
    description: |
      The Digital Wallet token object represents your card's digital wallet token(s).
    get:
      description: |
        Get the details about the digital wallet token of a card <br>NB: Digital wallet tokens cannot be created outside of production</br>
      operationId: getDigitalWalletToken
      parameters:
      - explode: false
        in: path
        name: digital_wallet_token_id
        required: true
        schema:
          $ref: '#/components/schemas/digital_wallet_token_id'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/digital_wallet_token_response'
          description: Digital Wallet Token details
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "422":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unprocessable entity request response
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Get Digital Wallet Token
      tags:
      - Digital Wallet Tokens
      x-external: true
    patch:
      description: |
        The status of a digital wallet token can be updated as, ACTIVE to SUSPENDED, SUSPENDED to ACTIVE, ACTIVE to TERMINATED or SUSPENDED to TERMINATED.
      operationId: updateDigitalWalletTokenStatus
      parameters:
      - explode: false
        in: path
        name: digital_wallet_token_id
        required: true
        schema:
          $ref: '#/components/schemas/digital_wallet_token_id'
        style: simple
      - description: "An idempotency key is an arbitrary unique value generated by\
          \ client to detect subsequent retries of the same request. It is recommended\
          \ that a UUID or a similar random identifier be used as an idempotency key.\
          \ A different key must be used for each request, unless it is a retry."
        explode: false
        in: header
        name: Idempotency-Key
        required: false
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/digital_wallet_token_edit_request'
        description: Update Digital wallet token status
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/digital_wallet_token_response'
          description: Digital wallet token Status updated
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "422":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unprocessable entity request response
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Update Digital Wallet Token's life cycle status
      tags:
      - Digital Wallet Tokens
      x-external: true
    summary: Digital Wallet Token
  /cards/gateways:
    description: |
      The Gateway object represents the Authorization gateway configuration.
    get:
      description: |
        List of gateways matching query parameters
      operationId: listGateways
      parameters:
      - explode: true
        in: query
        name: page_token
        required: false
        schema:
          description: "Optional pagination token to be provided to retrieve subsequent\
            \ pages, returned from previous get"
          example: a8937a0d
          type: string
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          description: |
            Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
          example: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/gateway_list_response'
          description: Gateways
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "422":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unprocessable entity request response
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: List Gateways
      tags:
      - Cards
      x-external: true
    post:
      description: |
        Create a new Authorization Gateway Configuration
      operationId: createGateway
      parameters:
      - description: "An idempotency key is an arbitrary unique value generated by\
          \ client to detect subsequent retries of the same request. It is recommended\
          \ that a UUID or a similar random identifier be used as an idempotency key.\
          \ A different key must be used for each request, unless it is a retry."
        explode: false
        in: header
        name: Idempotency-Key
        required: false
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create_gateway_request'
        description: Create a new Authorization Gateway Configuration
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/gateway_response'
          description: New Authorization Gateway Configuration created
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "422":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unprocessable entity request response
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Create Gateway
      tags:
      - Cards
      x-external: true
    summary: Authorization Gateway Configuration
  /cards/gateways/{gateway_id}:
    description: |
      The Gateway object represents the Authorization gateway configuration.
    get:
      description: |
        Get the details of an Authorization Gateway that has been configured
      operationId: getGateway
      parameters:
      - explode: false
        in: path
        name: gateway_id
        required: true
        schema:
          $ref: '#/components/schemas/gateway_id'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/gateway_response'
          description: Gateway details
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "422":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unprocessable entity request response
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Get Gateway
      tags:
      - Cards
      x-external: true
    patch:
      description: |
        Update Authorization Gateway configuration
      operationId: updateGateway
      parameters:
      - explode: false
        in: path
        name: gateway_id
        required: true
        schema:
          $ref: '#/components/schemas/gateway_id'
        style: simple
      - description: "An idempotency key is an arbitrary unique value generated by\
          \ client to detect subsequent retries of the same request. It is recommended\
          \ that a UUID or a similar random identifier be used as an idempotency key.\
          \ A different key must be used for each request, unless it is a retry."
        explode: false
        in: header
        name: Idempotency-Key
        required: false
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/update_gateway_request'
        description: Gateway edits
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/gateway_response'
          description: Gateway Updated
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "422":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unprocessable entity request response
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Update Gateway
      tags:
      - Cards
      x-external: true
    summary: Authorization Gateway
  /cards/images:
    get:
      description: |
        List all card image details
      operationId: listCardImageDetails
      parameters:
      - explode: true
        in: query
        name: customer_id
        required: true
        schema:
          $ref: '#/components/schemas/customer_id1'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/card_image_details_list'
          description: List of details for images uploaded by the given customer
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: List Card Image Details
      tags:
      - Cards
      x-external: true
    post:
      description: |
        Create a card image entity. Note that this does not include the image data itself. You can upload the image data via a subsequent uploadCardImageData request using the ID created here.
      operationId: createCardImage
      parameters:
      - description: "An idempotency key is an arbitrary unique value generated by\
          \ client to detect subsequent retries of the same request. It is recommended\
          \ that a UUID or a similar random identifier be used as an idempotency key.\
          \ A different key must be used for each request, unless it is a retry."
        explode: false
        in: header
        name: Idempotency-Key
        required: false
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create_card_image_request'
        description: Details of the image to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/card_image_details'
          description: Card image entity created
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "422":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unprocessable entity request response
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Create Card Image
      tags:
      - Cards
      x-external: true
  /cards/images/{card_image_id}:
    get:
      description: Get card image details
      operationId: getCardImageDetails
      parameters:
      - explode: false
        in: path
        name: card_image_id
        required: true
        schema:
          $ref: '#/components/schemas/card_image_id'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/card_image_details'
          description: Details of the card image
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Get Card Image Details
      tags:
      - Cards
      x-external: true
    patch:
      description: Update card image details. The only detail that can be updated
        is the card status as APPROVED or REJECTED.
      operationId: updateCardImageDetails
      parameters:
      - description: "An idempotency key is an arbitrary unique value generated by\
          \ client to detect subsequent retries of the same request. It is recommended\
          \ that a UUID or a similar random identifier be used as an idempotency key.\
          \ A different key must be used for each request, unless it is a retry."
        explode: false
        in: header
        name: Idempotency-Key
        required: false
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          type: string
        style: simple
      - explode: false
        in: path
        name: card_image_id
        required: true
        schema:
          $ref: '#/components/schemas/card_image_id'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/update_card_image_request'
        description: Details of the image to create
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/card_image_details'
          description: Details of the card image
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Update Card Image Details
      tags:
      - Cards
      x-external: true
  /cards/images/{card_image_id}/data:
    get:
      description: Get card image data
      operationId: getCardImageData
      parameters:
      - explode: false
        in: path
        name: card_image_id
        required: true
        schema:
          $ref: '#/components/schemas/card_image_id'
        style: simple
      responses:
        "200":
          content:
            image/jpeg:
              schema:
                format: binary
                type: string
          description: Image data
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Get Card Image Data
      tags:
      - Cards
      x-external: true
    post:
      description: Upload card image data
      operationId: uploadCardImageData
      parameters:
      - description: "An idempotency key is an arbitrary unique value generated by\
          \ client to detect subsequent retries of the same request. It is recommended\
          \ that a UUID or a similar random identifier be used as an idempotency key.\
          \ A different key must be used for each request, unless it is a retry."
        explode: false
        in: header
        name: Idempotency-Key
        required: false
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          type: string
        style: simple
      - explode: false
        in: path
        name: card_image_id
        required: true
        schema:
          $ref: '#/components/schemas/card_image_id'
        style: simple
      requestBody:
        content:
          image/jpeg:
            schema:
              format: binary
              type: string
        description: Binary image data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/card_image_details'
          description: Card image data was successfully uploaded
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "422":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unprocessable entity request response
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Upload Card Image
      tags:
      - Cards
      x-external: true
  /cards/products:
    get:
      operationId: listCardProducts
      parameters:
      - description: The format of the card
        explode: true
        in: query
        name: form
        required: false
        schema:
          $ref: '#/components/schemas/form'
        style: form
      - explode: true
        in: query
        name: page_token
        required: false
        schema:
          description: "Optional pagination token to be provided to retrieve subsequent\
            \ pages, returned from previous get"
          example: a8937a0d
          type: string
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          description: |
            Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
          example: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/card_product_list_response'
          description: List of available Card Products
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: List Card Products
      tags:
      - Cards
      x-external: true
  /cards/single_use_token:
    post:
      description: |
        This endpoint returns a single-use access token. This type of token authorizes a single request to access API endpoints and data associated with a particular user
      operationId: getClientSingleUseToken
      parameters:
      - description: "An idempotency key is an arbitrary unique value generated by\
          \ client to detect subsequent retries of the same request. It is recommended\
          \ that a UUID or a similar random identifier be used as an idempotency key.\
          \ A different key must be used for each request, unless it is a retry."
        explode: false
        in: header
        name: Idempotency-Key
        required: false
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/single_use_token_request'
        description: User token details
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/single_use_token_response'
          description: Token Created
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "422":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unprocessable entity request response
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Get single-use token
      tags:
      - Cards
      x-external: true
    summary: Get Single-Use Token
  /cards/transaction_simulations/authorization:
    post:
      description: |
        Simulate an `authorization` type transaction by including the `card_token` and other authorization details in your request.
      operationId: simulateAuthorization
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/auth_request_model'
        description: Authorization details
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/simulation_response_model'
          description: Success
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Simulate authorization
      tags:
      - Card Transaction Simulations
      x-external: true
    summary: Simulate Authorization
  /cards/transaction_simulations/authorization/advice:
    post:
      description: |
        An authorization advice allows an amount to be decreased after the authorization. This endpoint allows you to simulate post-swipe adjustments.

        Simulate an `authorization.advice` type transaction by including the `original_transaction_token` and other authorization details in your request.
      operationId: simulateAuthorizationAdvice
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authorization_advice_model'
        description: Authorization advice details
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/simulation_response_model'
          description: Success
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Simulate authorization advice
      tags:
      - Card Transaction Simulations
      x-external: true
    summary: Simulate Authorization Advice
  /cards/transaction_simulations/clearing:
    post:
      description: |
        Simulate an `authorization.clearing` type transaction by including the `original_transaction_token` and `amount` in your request. To simulate a refund type transaction, set the `is_refund` field to true.
      operationId: simulateClearing
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/clearing_model'
        description: Transaction clearing or refund details
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/simulation_response_model'
          description: Success
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Simulate clearing or refund
      tags:
      - Card Transaction Simulations
      x-external: true
    summary: Simulate Clearing or Refund
  /cards/transaction_simulations/financial:
    post:
      description: |
        A "financial" is a transaction message class that includes ATM transactions, PIN-debit transactions, and balance inquiries.

        Simulate a `pindebit` type transaction by including the `card_token` and `amount` in your request.
      operationId: simulateFinancial
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/financial_request_model'
        description: Financial details
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/simulation_response_model'
          description: Success
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Simulate financial
      tags:
      - Card Transaction Simulations
      x-external: true
    summary: Simulate Financial
  /cards/transaction_simulations/financial/advice:
    post:
      description: |
        Simulate a financial advice by including the `original_transaction_token` and other authorization details in JSON format in the body of the request.
      operationId: simulateFinancialAdvice
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authorization_advice_model'
        description: Financial advice details
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/simulation_response_model'
          description: Success
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Simulate financial advice
      tags:
      - Card Transaction Simulations
      x-external: true
    summary: Simulate Financial Advice
  /cards/transaction_simulations/financial/balance_inquiry:
    post:
      description: |
        Simulate a `pindebit.balanceinquiry` type transaction by sending a POST request to the `/simulate/financial/balanceinquiry` endpoint.
      operationId: simulateBalanceInquiry
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/balance_inquiry_request_model'
        description: Balance inquiry details
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/simulation_response_model'
          description: Success
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Simulate balance inquiry
      tags:
      - Card Transaction Simulations
      x-external: true
    summary: Simulate Balance Inquiry
  /cards/transaction_simulations/financial/original_credit:
    post:
      description: |
        This Original Credit Transaction (OCT) enables the cardholder to receive funds on the specified card from an external source via the card network. Use this endpoint to simulate a transaction that is similar to a wire transfer and not linked to any purchase.

        Simulate an OCT by including the `card_token`, `amount`, `mid`, and `type` in your request.
      operationId: simulateOriginalCredit
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/original_credit_request_model'
        description: OCT details
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/simulation_response_model'
          description: Success
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Simulate OCT
      tags:
      - Card Transaction Simulations
      x-external: true
    summary: Simulate OCT
  /cards/transaction_simulations/financial/withdrawal:
    post:
      description: |
        Simulate a `pindebit.atm.withdrawal` type transaction by including the `card_token` and `amount` in your request.
      operationId: simulateWithdrawal
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/withdrawal_request_model'
        description: ATM withdrawal details
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/simulation_response_model'
          description: Success
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Simulate ATM withdrawal
      tags:
      - Card Transaction Simulations
      x-external: true
    summary: Simulate ATM Withdrawal
  /cards/transaction_simulations/reversal:
    post:
      description: |
        A reversal releases the hold that was placed on account funds by an authorization, thus returning the funds to the account.

        Simulate an `authorization.reversal` type transaction by including the `original_transaction_token` and `amount` in your request.
      operationId: simulateReversal
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/reversal_model'
        description: Reversal details
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/simulation_response_model'
          description: Success
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Simulate reversal
      tags:
      - Card Transaction Simulations
      x-external: true
    summary: Simulate Reversal
  /cards/{card_id}:
    description: |
      The Card object represents your customer's spending card.
    get:
      description: |
        Get the details about a card that has been issued
      operationId: getCard
      parameters:
      - explode: false
        in: path
        name: card_id
        required: true
        schema:
          $ref: '#/components/schemas/card_id'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/card_response'
          description: Card details
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "422":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unprocessable entity request response
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Get Card
      tags:
      - Cards
      x-external: true
    patch:
      description: |
        Integrators can update the card resource to change status, update shipping (if the card hasn't been shipped) or edit metadata.
      operationId: updateCard
      parameters:
      - explode: false
        in: path
        name: card_id
        required: true
        schema:
          $ref: '#/components/schemas/card_id'
        style: simple
      - description: "An idempotency key is an arbitrary unique value generated by\
          \ client to detect subsequent retries of the same request. It is recommended\
          \ that a UUID or a similar random identifier be used as an idempotency key.\
          \ A different key must be used for each request, unless it is a retry."
        explode: false
        in: header
        name: Idempotency-Key
        required: false
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/card_edit_request'
        description: Card edits
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/card_response'
          description: Card issued
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "422":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unprocessable entity request response
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Update Card
      tags:
      - Cards
      x-external: true
    summary: Cards
  /cards/{card_id}/barcodes:
    get:
      description: |
        This endpoint is for testing environment only to provide access to barcode of a test card
      operationId: getCardBarcode
      parameters:
      - explode: false
        in: path
        name: card_id
        required: true
        schema:
          $ref: '#/components/schemas/card_id'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getCardBarcode_200_response'
          description: Barcode
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "422":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unprocessable entity request response
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Get Card Barcode
      tags:
      - Cards
      x-external: true
    summary: Cards
  /cards/{card_id}/changes:
    get:
      description: |
        List card change history
      operationId: listChanges
      parameters:
      - explode: false
        in: path
        name: card_id
        required: true
        schema:
          $ref: '#/components/schemas/card_id'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/card_changes_list'
          description: List of card changes
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "422":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unprocessable entity request response
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: List Card Changes
      tags:
      - Cards
      x-external: true
  /cards/{card_id}/client_token:
    description: |
      Client access token for accessing privileged details about a card
    post:
      description: |
        Create a client access token for interacting with a card.  This token will be used on the client to identify the card for flows like viewing Full PAN or setting the PIN in a PCI compliant manner.
      operationId: getClientAccessToken
      parameters:
      - explode: false
        in: path
        name: card_id
        required: true
        schema:
          $ref: '#/components/schemas/card_id'
        style: simple
      - description: "An idempotency key is an arbitrary unique value generated by\
          \ client to detect subsequent retries of the same request. It is recommended\
          \ that a UUID or a similar random identifier be used as an idempotency key.\
          \ A different key must be used for each request, unless it is a retry."
        explode: false
        in: header
        name: Idempotency-Key
        required: false
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          type: string
        style: simple
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/client_token'
          description: Client token
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "422":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unprocessable entity request response
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Get a client token
      tags:
      - Cards
      x-external: true
    summary: Get Client Access Token
  /cards/{card_id}/digital_wallet_tokens/applepay:
    post:
      operationId: createDigitalWalletApple
      parameters:
      - explode: false
        in: path
        name: card_id
        required: true
        schema:
          $ref: '#/components/schemas/card_id'
        style: simple
      - description: "An idempotency key is an arbitrary unique value generated by\
          \ client to detect subsequent retries of the same request. It is recommended\
          \ that a UUID or a similar random identifier be used as an idempotency key.\
          \ A different key must be used for each request, unless it is a retry."
        explode: false
        in: header
        name: Idempotency-Key
        required: false
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/apple_digital_wallet_provision_request'
        description: |
          Request to provision digital wallet card data to pass to Apple Pay digital wallet.  <br>Cannot be used outside of production.</br>
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apple_digital_wallet_provision_response'
          description: Digital wallet token provision request data
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "422":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unprocessable entity request response
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Create digital wallet token provision request for Apple Pay
      tags:
      - Digital Wallet Tokens
      x-external: true
  /cards/{card_id}/digital_wallet_tokens/googlepay:
    post:
      operationId: createDigitalWalletGoogle
      parameters:
      - explode: false
        in: path
        name: card_id
        required: true
        schema:
          $ref: '#/components/schemas/card_id'
        style: simple
      - description: "An idempotency key is an arbitrary unique value generated by\
          \ client to detect subsequent retries of the same request. It is recommended\
          \ that a UUID or a similar random identifier be used as an idempotency key.\
          \ A different key must be used for each request, unless it is a retry."
        explode: false
        in: header
        name: Idempotency-Key
        required: false
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/google_digital_wallet_provision_request'
        description: |
          Request to provision digital wallet card data to pass to Google Pay digital wallet. <br>Cannot be used outside of production.</br>
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/google_digital_wallet_provision_response'
          description: Digital wallet token provision request data
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "422":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unprocessable entity request response
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Create digital wallet token provision request for Google Pay
      tags:
      - Digital Wallet Tokens
      x-external: true
  /cards/{card_id}/webhook_simulations/fulfillment:
    description: |
      Simulate card fulfillment event
    post:
      description: |
        This endpoint is for testing environment only to trigger a simulated change in card fulfillment status event
      operationId: simulateCardFulfillmentEvent
      parameters:
      - explode: false
        in: path
        name: card_id
        required: true
        schema:
          $ref: '#/components/schemas/card_id'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/simulate_card_fulfillment'
        description: Desired simulated fulfillment status change value
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/simulate_card_fulfillment'
          description: Simulated fulfillment status change value
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "422":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unprocessable entity request response
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Simulate Card Fulfillment Event
      tags:
      - Card Webhook Simulations
      x-external: true
    summary: Card Webhook Simulations
  /cash_pickups:
    get:
      description: Get paginated list of cash pickups
      operationId: listCashPickups
      parameters:
      - explode: true
        in: query
        name: page_token
        required: false
        schema:
          description: "Optional pagination token to be provided to retrieve subsequent\
            \ pages, returned from previous get"
          example: a8937a0d
          type: string
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          description: |
            Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
          example: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cash_pickup_list'
          description: List of cash pickups
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: List cash pickups
      tags:
      - Cash Pickups (alpha)
      x-external: true
    post:
      description: Create a cash pickup
      operationId: createCashPickup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/cash_pickup_post_request'
        description: cash pickup to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cash_pickup'
          description: Created cash pickup
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "409":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource already exists error
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Create a cash pickup
      tags:
      - Cash Pickups (alpha)
      x-external: true
    summary: CashPickups
  /cash_pickups/{cash_pickup_id}:
    get:
      description: Get a cash pickup
      operationId: getCashPickup
      parameters:
      - description: The unique identifier of a cash pickup
        explode: false
        in: path
        name: cash_pickup_id
        required: true
        schema:
          example: 1d2a39f5-e39b-4cd4-96a1-8727187469a9
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cash_pickup'
          description: cash pickup
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Get a cash pickup
      tags:
      - Cash Pickups (alpha)
      x-external: true
    patch:
      description: Update a cash pickup
      operationId: patchCashPickup
      parameters:
      - description: The unique identifier of a cash pickup
        explode: false
        in: path
        name: cash_pickup_id
        required: true
        schema:
          example: 1d2a39f5-e39b-4cd4-96a1-8727187469a9
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/cash_pickup_patch_request'
        description: cash pickup to update
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cash_pickup'
          description: Updated cash pickup
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Update a cash pickup
      tags:
      - Cash Pickups (alpha)
      x-external: true
    summary: CashPickups
  /customers:
    description: |
      The Customer object represents your customer's identity.  You can then verify the identity of this customer and associate them with other people and accounts
    get:
      description: Retrieves paginated list of Customers associated with the authorized
        requester
      operationId: listCustomers
      parameters:
      - description: |
          Filter on resources that have an account(s)
        explode: true
        in: query
        name: has_accounts
        required: false
        schema:
          type: boolean
        style: form
      - explode: true
        in: query
        name: ssn_last_4
        required: false
        schema:
          description: Only return resources where the last 4 characters of the SSN
            match the specified value.
          example: "6789"
          maxLength: 4
          minLength: 4
          type: string
        style: form
      - explode: true
        in: query
        name: last_name
        required: false
        schema:
          description: "Only return resources where the last_name field matches the\
            \ specified string. Any * characters in the string are wildcards, and\
            \ match any characters."
          example: Smith
          type: string
        style: form
      - explode: true
        in: query
        name: email
        required: false
        schema:
          description: "Only return resources where the email field matches the specified\
            \ string. Any * characters in the string are wildcards, and match any\
            \ characters."
          example: john.doe@example.com
          type: string
        style: form
      - explode: true
        in: query
        name: first_name
        required: false
        schema:
          description: "Only return resources where the first_name or chosen_name\
            \ field matches the specified string. Any * characters in the string are\
            \ wildcards, and match any characters."
          example: Alice
          type: string
        style: form
      - explode: true
        in: query
        name: status
        required: false
        schema:
          description: Only return resources where with the specified status.
          enum:
          - ACTIVE
          - DECEASED
          - DENIED
          - DORMANT
          - ESCHEAT
          - FROZEN
          - INACTIVE
          - PROSPECT
          - SANCTION
          example: ACTIVE
          type: string
        style: form
      - explode: true
        in: query
        name: phone_number
        required: false
        schema:
          description: "Only return resources where the phone_number field matches\
            \ the specified string. Phone numbers use the E.164 format e.g. +19178675309.\
            \ Any * characters in the string are wildcards, and match any characters."
          example: +12065550100
          type: string
        style: form
      - explode: true
        in: query
        name: page_token
        required: false
        schema:
          description: "Optional pagination token to be provided to retrieve subsequent\
            \ pages, returned from previous get"
          example: a8937a0d
          type: string
        style: form
      - description: Unique resource identifier
        explode: false
        in: query
        name: id
        required: false
        schema:
          items:
            example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
            format: uuid
            type: string
          type: array
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          description: |
            Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
          example: 100
          minimum: 1
          type: integer
        style: form
      - description: |
          Specifies the sort order for the returned customers.
        explode: false
        in: query
        name: sort_by
        required: false
        schema:
          items:
            enum:
            - creation_time:asc
            - creation_time:desc
            - first_name:asc
            - first_name:desc
            - last_name:asc
            - last_name:desc
            - last_updated_time:asc
            - last_updated_time:desc
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customer_list'
          description: List of customers
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: List Customers
      tags:
      - Customers
      x-external: true
    post:
      description: |
        The customer object represents your customer's identity. You can then verify the identity of this customer and associate them with other people and accounts.
        Note that if no shipping_address attribute is provided in the request, the shipping_address will be set to a copy of the legal_address.
      operationId: createCustomer
      parameters:
      - description: "An idempotency key is an arbitrary unique value generated by\
          \ client to detect subsequent retries of the same request. It is recommended\
          \ that a UUID or a similar random identifier be used as an idempotency key.\
          \ A different key must be used for each request, unless it is a retry."
        explode: false
        in: header
        name: Idempotency-Key
        required: false
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/customer_in_body'
        description: Customer to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customer_in_body'
          description: Created customer
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "409":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource already exists error
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Create a Customer
      tags:
      - Customers
      x-external: true
    summary: Customer
  /customers/{customer_id}:
    description: |
      This resource represents a customer.  Each customer is identified by a customer `ID`
    get:
      description: Get Customer based on ID
      operationId: getCustomer
      parameters:
      - description: The customer's unique identifier
        explode: false
        in: path
        name: customer_id
        required: true
        schema:
          $ref: '#/components/schemas/customer_id'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customer_in_body'
          description: Customer
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Get Customer
      tags:
      - Customers
      x-external: true
    patch:
      description: |
        Patch fields of customer based on ID
        Note that if:
          * legal address is provided in the request, AND
          * shipping_address is not provided in the request, AND
          * the customer resource does not have shipping_address
          then shipping_address will be set to a copy of the legal_address.
      operationId: patchCustomer
      parameters:
      - description: The customer's unique identifier
        explode: false
        in: path
        name: customer_id
        required: true
        schema:
          $ref: '#/components/schemas/customer_id'
        style: simple
      - description: "An idempotency key is an arbitrary unique value generated by\
          \ client to detect subsequent retries of the same request. It is recommended\
          \ that a UUID or a similar random identifier be used as an idempotency key.\
          \ A different key must be used for each request, unless it is a retry."
        explode: false
        in: header
        name: Idempotency-Key
        required: false
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/patch_customer'
        description: Customer to be patched
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customer_in_body'
          description: Patched customer
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Patch Customer
      tags:
      - Customers
      x-external: true
    put:
      description: |
        Update customer based on ID
        Note that if no shipping_address attribute is provided in the request, the shipping_address will be set to a copy of the legal_address.
      operationId: updateCustomer
      parameters:
      - description: The customer's unique identifier
        explode: false
        in: path
        name: customer_id
        required: true
        schema:
          $ref: '#/components/schemas/customer_id'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/customer_in_body'
        description: Customer to be updated
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customer_in_body'
          description: Updated customer
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Update Customer
      tags:
      - Customers
      x-external: true
    summary: Customer
  /customers/{customer_id}/disclosures:
    description: |
      Disclosures to be made to customers
    get:
      deprecated: true
      description: Retrieves paginated list of disclosures associated with the authorized
        requester
      operationId: listDisclosures1
      parameters:
      - description: The customer's unique identifier
        explode: false
        in: path
        name: customer_id
        required: true
        schema:
          $ref: '#/components/schemas/customer_id'
        style: simple
      - explode: true
        in: query
        name: page_token
        required: false
        schema:
          description: "Optional pagination token to be provided to retrieve subsequent\
            \ pages, returned from previous get"
          example: a8937a0d
          type: string
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          description: |
            Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
          example: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/disclosure_response'
          description: List of disclosures
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: List Disclosures
      tags:
      - Disclosures (deprecated)
      x-external: true
      x-status: deprecated
    post:
      deprecated: true
      description: |
        Disclosures to be made to customers
      operationId: createDisclosure1
      parameters:
      - description: The customer's unique identifier
        explode: false
        in: path
        name: customer_id
        required: true
        schema:
          $ref: '#/components/schemas/customer_id'
        style: simple
      - description: "An idempotency key is an arbitrary unique value generated by\
          \ client to detect subsequent retries of the same request. It is recommended\
          \ that a UUID or a similar random identifier be used as an idempotency key.\
          \ A different key must be used for each request, unless it is a retry."
        explode: false
        in: header
        name: Idempotency-Key
        required: false
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/disclosure1'
        description: Disclosure to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/disclosure1'
          description: Created disclosure
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Create a Disclosure
      tags:
      - Disclosures (deprecated)
      x-external: true
      x-status: deprecated
    summary: Disclosures
  /customers/{customer_id}/employment:
    get:
      description: |
        Get a list of customer's current employment records. To see historic employment pass the `include_history` flag.
      operationId: getAllCustomerEmployment
      parameters:
      - description: The customer's unique identifier
        explode: false
        in: path
        name: customer_id
        required: true
        schema:
          $ref: '#/components/schemas/customer_id'
        style: simple
      - description: "If true, include old (inactive) records as well."
        explode: true
        in: query
        name: include_history
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/employment_list'
          description: List of customer employment records.
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: List customer employment records
      tags:
      - Customers
      x-external: true
    post:
      description: Create a customer employment record.
      operationId: createCustomerEmployment
      parameters:
      - description: The customer's unique identifier
        explode: false
        in: path
        name: customer_id
        required: true
        schema:
          $ref: '#/components/schemas/customer_id'
        style: simple
      - description: "An idempotency key is an arbitrary unique value generated by\
          \ client to detect subsequent retries of the same request. It is recommended\
          \ that a UUID or a similar random identifier be used as an idempotency key.\
          \ A different key must be used for each request, unless it is a retry."
        explode: false
        in: header
        name: Idempotency-Key
        required: false
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/employment'
        description: Customer employment record to create.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/employment'
          description: Created customer employment record.
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Create employment record
      tags:
      - Customers
      x-external: true
    summary: Customer employment group operations
  /customers/{customer_id}/employment/{employment_id}:
    get:
      description: Get a single record of customer employment
      operationId: getPartyEmployment
      parameters:
      - description: Unique ID for the employment record.
        explode: false
        in: path
        name: employment_id
        required: true
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        style: simple
      - description: The customer's unique identifier
        explode: false
        in: path
        name: customer_id
        required: true
        schema:
          $ref: '#/components/schemas/customer_id'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/employment'
          description: Customer employment record.
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Get customer employment record
      tags:
      - Customers
      x-external: true
    put:
      description: Update a single record of customer employment.
      operationId: updatePartyEmployment
      parameters:
      - description: Unique ID for the employment record.
        explode: false
        in: path
        name: employment_id
        required: true
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        style: simple
      - description: The customer's unique identifier
        explode: false
        in: path
        name: customer_id
        required: true
        schema:
          $ref: '#/components/schemas/customer_id'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/employment'
        description: Customer employment to update.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/employment'
          description: Updated customer employment record
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Update customer employment record
      tags:
      - Customers
      x-external: true
    summary: Customer employment operations
  /customers/{customer_id}/risk_ratings:
    get:
      description: Get list of customer risk ratings
      operationId: getAllCustomerRiskRatings
      parameters:
      - description: The customer's unique identifier
        explode: false
        in: path
        name: customer_id
        required: true
        schema:
          $ref: '#/components/schemas/customer_id'
        style: simple
      - description: "If true, include old (inactive) records as well."
        explode: true
        in: query
        name: include_history
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/risk_rating_list'
          description: List of customer risk ratings
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: List customer risk ratings
      tags:
      - Customers
      x-external: true
    post:
      description: Create customer risk rating
      operationId: createCustomerRiskRating
      parameters:
      - description: The customer's unique identifier
        explode: false
        in: path
        name: customer_id
        required: true
        schema:
          $ref: '#/components/schemas/customer_id'
        style: simple
      - description: "An idempotency key is an arbitrary unique value generated by\
          \ client to detect subsequent retries of the same request. It is recommended\
          \ that a UUID or a similar random identifier be used as an idempotency key.\
          \ A different key must be used for each request, unless it is a retry."
        explode: false
        in: header
        name: Idempotency-Key
        required: false
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/risk_rating'
        description: |
          Create a customer risk rating. With a risk rating in request body, Synctera
          validates the data and saves it. With no request body, Synctera runs an
          automated risk analysis and saves the result.
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/risk_rating'
          description: Created risk rating
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Create customer risk rating
      tags:
      - Customers
      x-external: true
    summary: Risk Rating group operations
  /customers/{customer_id}/risk_ratings/{risk_rating_id}:
    get:
      description: Get a customer risk rating
      operationId: getCustomerRiskRating
      parameters:
      - description: The customer's unique identifier
        explode: false
        in: path
        name: customer_id
        required: true
        schema:
          $ref: '#/components/schemas/customer_id'
        style: simple
      - description: Risk Rating ID
        explode: false
        in: path
        name: risk_rating_id
        required: true
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/risk_rating'
          description: Customer risk rating of id
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Get customer risk rating
      tags:
      - Customers
      x-external: true
    summary: Risk Rating
  /customers/{customer_id}/verifications:
    get:
      deprecated: true
      description: |
        List verification results.

        This endpoint will be removed in API v1. Use `GET /v0/verifications?customer_id={customer_id}` instead.
      operationId: listVerifications
      parameters:
      - description: The customer's unique identifier
        explode: false
        in: path
        name: customer_id
        required: true
        schema:
          $ref: '#/components/schemas/customer_id'
        style: simple
      - description: "If true, include old (inactive) records as well."
        explode: true
        in: query
        name: include_history
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - explode: true
        in: query
        name: page_token
        required: false
        schema:
          description: "Optional pagination token to be provided to retrieve subsequent\
            \ pages, returned from previous get"
          example: a8937a0d
          type: string
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          description: |
            Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
          example: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customer_verification_result_list'
          description: List of customer verification results.
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: List verification results
      tags:
      - KYC Verification (deprecated)
      x-external: true
      x-status: deprecated
    post:
      deprecated: true
      description: |
        Create a verification result for a customer.
        This endpoint will be removed in API v1. Use `POST /v0/verifications` instead.
      operationId: createCustomerVerificationResult
      parameters:
      - description: The customer's unique identifier
        explode: false
        in: path
        name: customer_id
        required: true
        schema:
          $ref: '#/components/schemas/customer_id'
        style: simple
      - description: "An idempotency key is an arbitrary unique value generated by\
          \ client to detect subsequent retries of the same request. It is recommended\
          \ that a UUID or a similar random identifier be used as an idempotency key.\
          \ A different key must be used for each request, unless it is a retry."
        explode: false
        in: header
        name: Idempotency-Key
        required: false
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/customer_verification_result'
        description: Customer verification result to create.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customer_verification_result'
          description: Created customer verification result.
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Create a customer verification result
      tags:
      - KYC Verification (deprecated)
      x-external: true
      x-status: deprecated
  /customers/{customer_id}/verifications/{verification_id}:
    get:
      deprecated: true
      description: |
        Get verification result by ID.

        This endpoint will be removed in API v1. Use `GET /v0/verifications/{verification_id}` instead.
      operationId: getVerification
      parameters:
      - description: The customer's unique identifier
        explode: false
        in: path
        name: customer_id
        required: true
        schema:
          $ref: '#/components/schemas/customer_id'
        style: simple
      - description: Unique identifier for the verification.
        explode: false
        in: path
        name: verification_id
        required: true
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customer_verification_result'
          description: Verification result.
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Get verification result
      tags:
      - KYC Verification (deprecated)
      x-external: true
      x-status: deprecated
  /customers/{customer_id}/verify:
    post:
      deprecated: true
      description: |
        Initiate identity verification for a customer and run the specified identity checks.

        Verifying a personal customer requires that the following fields already be set:
        * `first_name`
        * `last_name`
        * `dob`
        * `email`
        * `phone_number`
        * `legal_address`
        * `ssn`

        This endpoint will be removed in API v1. Use `POST /v0/verifications/verify` instead.
      operationId: verifyCustomer
      parameters:
      - description: The customer's unique identifier
        explode: false
        in: path
        name: customer_id
        required: true
        schema:
          $ref: '#/components/schemas/customer_id'
        style: simple
      - description: "An idempotency key is an arbitrary unique value generated by\
          \ client to detect subsequent retries of the same request. It is recommended\
          \ that a UUID or a similar random identifier be used as an idempotency key.\
          \ A different key must be used for each request, unless it is a retry."
        explode: false
        in: header
        name: Idempotency-Key
        required: false
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/customer_verification'
        description: Customer verification request.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customer_verify_response'
          description: Customer verification result.
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Verify a customer's identity
      tags:
      - KYC Verification (deprecated)
      x-external: true
      x-status: deprecated
  /customers/{customer_id}/watchlists/alerts:
    description: |
      List, retrieve, or update watchlist alerts. **Deprecated:** use `/v0/monitoring/alerts`.
    get:
      deprecated: true
      operationId: listWatchlistAlerts
      parameters:
      - description: The customer's unique identifier
        explode: false
        in: path
        name: customer_id
        required: true
        schema:
          $ref: '#/components/schemas/customer_id'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/watchlist_alert_list'
          description: List of watchlist alerts
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: List watchlist monitoring alerts for a customer
      tags:
      - Watchlist (deprecated)
      x-external: true
      x-status: deprecated
    summary: Subscriptions to watchlist alerts
  /customers/{customer_id}/watchlists/alerts/{alert_id}:
    description: |
      Retrieve or update a single watchlist alert. **Deprecated:** use `/v0/monitoring/alerts/{alert_id}` instead.
    get:
      deprecated: true
      operationId: getWatchlistAlert
      parameters:
      - description: Unique identifier for this watchlist alert.
        explode: false
        in: path
        name: alert_id
        required: true
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        style: simple
      - description: The customer's unique identifier
        explode: false
        in: path
        name: customer_id
        required: true
        schema:
          $ref: '#/components/schemas/customer_id'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/watchlist_alert'
          description: A single watchlist alert
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Retrieve watchlist monitoring alert
      tags:
      - Watchlist (deprecated)
      x-external: true
      x-status: deprecated
    put:
      deprecated: true
      operationId: updateWatchlistAlert
      parameters:
      - description: Unique identifier for this watchlist alert.
        explode: false
        in: path
        name: alert_id
        required: true
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        style: simple
      - description: The customer's unique identifier
        explode: false
        in: path
        name: customer_id
        required: true
        schema:
          $ref: '#/components/schemas/customer_id'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/watchlist_alert'
        description: A watchlist body
        required: true
      responses:
        "200":
          description: Watchlist alert was updated
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Update watchlist alert
      tags:
      - Watchlist (deprecated)
      x-external: true
      x-status: deprecated
    summary: Retrieve or update a single watchlist alert.
  /customers/{customer_id}/watchlists/subscriptions:
    description: |
      Create, list, or retrieve watchlist subscriptions **Deprecated:** use `/v0/monitoring/subscriptions`
    get:
      deprecated: true
      operationId: listWatchlistSubscriptions
      parameters:
      - description: The customer's unique identifier
        explode: false
        in: path
        name: customer_id
        required: true
        schema:
          $ref: '#/components/schemas/customer_id'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/watchlist_subscription_list'
          description: List of watchlist subscriptions
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: List watchlist monitoring subscriptions for a customer
      tags:
      - Watchlist (deprecated)
      x-external: true
      x-status: deprecated
    post:
      deprecated: true
      operationId: watchlistSubscribe
      parameters:
      - description: The customer's unique identifier
        explode: false
        in: path
        name: customer_id
        required: true
        schema:
          $ref: '#/components/schemas/customer_id'
        style: simple
      - description: "An idempotency key is an arbitrary unique value generated by\
          \ client to detect subsequent retries of the same request. It is recommended\
          \ that a UUID or a similar random identifier be used as an idempotency key.\
          \ A different key must be used for each request, unless it is a retry."
        explode: false
        in: header
        name: Idempotency-Key
        required: false
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/watchlist_subscription'
        description: A watchlist subscription
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/watchlist_subscription'
          description: New watchlist subscription
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Subscribe a customer to watchlist monitoring
      tags:
      - Watchlist (deprecated)
      x-external: true
      x-status: deprecated
    summary: Subscriptions to watchlist monitoring
  /customers/{customer_id}/watchlists/subscriptions/{subscription_id}:
    description: |
      Retrieve or update a single watchlist subscription **Deprecated:** use `/v0/monitoring/subscriptions/{subscription_id}`.
    get:
      deprecated: true
      operationId: getWatchlistSubscription
      parameters:
      - description: Watchlist monitoring subscription ID
        explode: false
        in: path
        name: subscription_id
        required: true
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        style: simple
      - description: The customer's unique identifier
        explode: false
        in: path
        name: customer_id
        required: true
        schema:
          $ref: '#/components/schemas/customer_id'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/watchlist_subscription'
          description: A single watchlist subscription
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Retrieve watchlist monitoring subscription
      tags:
      - Watchlist (deprecated)
      x-external: true
      x-status: deprecated
    put:
      deprecated: true
      operationId: updateWatchlistSubscription
      parameters:
      - description: Watchlist monitoring subscription ID
        explode: false
        in: path
        name: subscription_id
        required: true
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        style: simple
      - description: The customer's unique identifier
        explode: false
        in: path
        name: customer_id
        required: true
        schema:
          $ref: '#/components/schemas/customer_id'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/watchlist_subscription'
        description: |
          Watchlist monitoring subscription to be updated. The only field that matters is `status`; all other fields are ignored.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/watchlist_subscription'
          description: Updated watchlist subscription
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Update watchlist monitoring subscription
      tags:
      - Watchlist (deprecated)
      x-external: true
      x-status: deprecated
    summary: Watchlist monitoring subscription
  /customers/{customer_id}/watchlists/suppressions:
    description: |
      Suppress or unsuppress current and future alerts for the given subject (person).
    post:
      deprecated: true
      operationId: suppressWatchlistEntityAlert
      parameters:
      - description: The customer's unique identifier
        explode: false
        in: path
        name: customer_id
        required: true
        schema:
          $ref: '#/components/schemas/customer_id'
        style: simple
      - description: "An idempotency key is an arbitrary unique value generated by\
          \ client to detect subsequent retries of the same request. It is recommended\
          \ that a UUID or a similar random identifier be used as an idempotency key.\
          \ A different key must be used for each request, unless it is a retry."
        explode: false
        in: header
        name: Idempotency-Key
        required: false
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/watchlist_suppress'
        description: A watchlist suppression object
        required: true
      responses:
        "200":
          description: Watchlist alerts belonging to entity was updated
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Suppress entity alert
      tags:
      - Watchlist (deprecated)
      x-external: true
      x-status: deprecated
    summary: Update suppression of watchlist alerts for one subject
  /disclosures:
    get:
      description: Retrieves paginated list of disclosures associated with the authorized
        requester.
      operationId: listDisclosures
      parameters:
      - description: |
          Unique identifier for the business. Multiple IDs can be provided as a comma-separated list.
        explode: false
        in: query
        name: business_id
        required: false
        schema:
          example: "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157"
          items:
            format: uuid
            type: string
          type: array
        style: form
      - explode: true
        in: query
        name: page_token
        required: false
        schema:
          description: "Optional pagination token to be provided to retrieve subsequent\
            \ pages, returned from previous get"
          example: a8937a0d
          type: string
        style: form
      - description: Unique resource identifier
        explode: false
        in: query
        name: id
        required: false
        schema:
          items:
            example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
            format: uuid
            type: string
          type: array
        style: form
      - description: |
          Unique identifier for the person. Multiple IDs can be provided as a comma-separated list.
        explode: false
        in: query
        name: person_id
        required: false
        schema:
          example: "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157"
          items:
            format: uuid
            type: string
          type: array
        style: form
      - description: |
          Return only disclosures that have the specified acknowledging_person_id. Multiple IDs can be provided as a comma-separated list.
        explode: false
        in: query
        name: acknowledging_person_id
        required: false
        schema:
          example: "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157"
          items:
            format: uuid
            type: string
          type: array
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          description: |
            Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
          example: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/disclosure_list'
          description: List of disclosures.
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: List disclosures
      tags:
      - Disclosures
      x-external: true
      x-status: alpha
    post:
      description: Record the fact that a regulatory document was disclosed to a customer.
      operationId: createDisclosure
      parameters:
      - description: "An idempotency key is an arbitrary unique value generated by\
          \ client to detect subsequent retries of the same request. It is recommended\
          \ that a UUID or a similar random identifier be used as an idempotency key.\
          \ A different key must be used for each request, unless it is a retry."
        explode: false
        in: header
        name: Idempotency-Key
        required: false
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/disclosure'
        description: Disclosure to create.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/disclosure'
          description: Created disclosure.
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Create disclosure record
      tags:
      - Disclosures
      x-external: true
      x-status: alpha
  /disclosures/{disclosure_id}:
    get:
      description: Get disclosure by ID.
      operationId: getDisclosure
      parameters:
      - description: The unique identifier for the disclosure.
        explode: false
        in: path
        name: disclosure_id
        required: true
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/disclosure'
          description: Disclosure representation.
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Get disclosure
      tags:
      - Disclosures
      x-external: true
      x-status: alpha
  /documents:
    get:
      description: "Returns a paginated list of documents (metadata only, not contents)."
      operationId: listDocuments
      parameters:
      - description: Return documents that are related to resources with the specified
          ID
        explode: true
        in: query
        name: related_resource_id
        required: false
        schema:
          example: b01db9c7-78f2-4a99-8aca-1231d32f9b96
          format: uuid
          type: string
        style: form
      - description: The type of documents
        explode: true
        in: query
        name: type
        required: false
        schema:
          $ref: '#/components/schemas/document_type'
        style: form
      - description: "Whether the file should be encrypted and access restricted,\
          \ e.g. if the file contains PII"
        explode: true
        in: query
        name: encryption
        required: false
        schema:
          enum:
          - NOT_REQUIRED
          - REQUIRED
          type: string
        style: form
      - explode: true
        in: query
        name: page_token
        required: false
        schema:
          description: "Optional pagination token to be provided to retrieve subsequent\
            \ pages, returned from previous get"
          example: a8937a0d
          type: string
        style: form
      - description: Unique resource identifier
        explode: false
        in: query
        name: id
        required: false
        schema:
          items:
            example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
            format: uuid
            type: string
          type: array
        style: form
      - description: Return documents that are related to resources of the specified
          type
        explode: true
        in: query
        name: related_resource_type
        required: false
        schema:
          $ref: '#/components/schemas/related_resource_type'
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          description: |
            Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
          example: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/document_list'
          description: List documents.
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: List documents
      tags:
      - Documents
      x-external: true
    post:
      description: |
        Docs
      operationId: createDocument
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/document_creation'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/document'
          description: Created document representation.
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "409":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource already exists error
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Create a document
      tags:
      - Documents
      x-external: true
    summary: Documents
  /documents/{document_id}:
    get:
      description: |
        Returns the document attributes. Use /documents/{document_id}/contents to get the contents.
      operationId: getDocument
      parameters:
      - description: The unique identifier of the document.
        explode: false
        in: path
        name: document_id
        required: true
        schema:
          example: b01db9c7-78f2-4a99-8aca-1231d32f9b96
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/document'
          description: The requested document.
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Get a document
      tags:
      - Documents
      x-external: true
    patch:
      description: Update attributes of the latest document version.
      operationId: updateDocument
      parameters:
      - description: The unique identifier of the document.
        explode: false
        in: path
        name: document_id
        required: true
        schema:
          example: b01db9c7-78f2-4a99-8aca-1231d32f9b96
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/patch_document'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/document'
          description: Updated document properties.
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Update a document
      tags:
      - Documents
      x-external: true
    summary: Document
  /documents/{document_id}/contents:
    get:
      description: Returns the bytes of the requested document.
      operationId: getDocumentContents
      parameters:
      - description: The unique identifier of the document.
        explode: false
        in: path
        name: document_id
        required: true
        schema:
          example: b01db9c7-78f2-4a99-8aca-1231d32f9b96
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            '*/*':
              schema:
                format: binary
                type: string
          description: The requested document.
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Get contents of latest document version
      tags:
      - Documents
      x-external: true
    summary: Document
  /documents/{document_id}/versions:
    post:
      description: |
        Docs
      operationId: createDocumentVersion
      parameters:
      - description: The unique identifier of the document.
        explode: false
        in: path
        name: document_id
        required: true
        schema:
          example: b01db9c7-78f2-4a99-8aca-1231d32f9b96
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/uprev_document'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/document'
          description: Created document representation.
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "409":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource already exists error
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Create a new document version
      tags:
      - Documents
      x-external: true
    summary: Documents
  /documents/{document_id}/versions/{document_version}:
    get:
      description: |
        Returns the document (attributes). Use /documents/{document_id}/versions/{version}/contents to get the contents.
      operationId: getDocumentVersion
      parameters:
      - description: The document version.
        explode: false
        in: path
        name: document_version
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      - description: The unique identifier of the document.
        explode: false
        in: path
        name: document_id
        required: true
        schema:
          example: b01db9c7-78f2-4a99-8aca-1231d32f9b96
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/document'
          description: The requested document.
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Get a document by version
      tags:
      - Documents
      x-external: true
    summary: Document
  /documents/{document_id}/versions/{document_version}/contents:
    get:
      description: Returns the bytes of the requested document.
      operationId: getDocumentVersionContents
      parameters:
      - description: The document version.
        explode: false
        in: path
        name: document_version
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      - description: The unique identifier of the document.
        explode: false
        in: path
        name: document_id
        required: true
        schema:
          example: b01db9c7-78f2-4a99-8aca-1231d32f9b96
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            '*/*':
              schema:
                format: binary
                type: string
          description: The requested document.
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Get document contents by version
      tags:
      - Documents
      x-external: true
    summary: Document
  /eft_ca:
    description: |
      The EFT Canada API allows you to create, retrieve, and update EFT Canada transfers.
    get:
      description: |
        Get all EFT Canada transfers
        > 🚧 Alpha > This is an Alpha spec-only endpoint. Feedback from the community is welcome. We may make breaking changes.
      operationId: getEFTCATransfers
      parameters:
      - description: EFT Canada Transfer ID
        explode: true
        in: query
        name: id
        required: false
        schema:
          type: string
        style: form
      - description: Is same day transfer
        explode: true
        in: query
        name: is_same_day
        required: false
        schema:
          type: boolean
        style: form
      - description: Network status of the transfer
        explode: true
        in: query
        name: network_status
        required: false
        schema:
          type: string
        style: form
      - description: Subtype of the transfer
        explode: true
        in: query
        name: subtype
        required: false
        schema:
          type: string
        style: form
      - description: To posting date of the transfer
        explode: true
        in: query
        name: to_posting_date
        required: false
        schema:
          type: string
        style: form
      - description: Minimum amount of the transfer
        explode: true
        in: query
        name: min_amount
        required: false
        schema:
          example: 100
          minimum: 1
          type: integer
        style: form
      - description: Originating account owner name
        explode: true
        in: query
        name: originating_account_owner_name
        required: false
        schema:
          type: string
        style: form
      - description: From effective date of the transfer
        explode: true
        in: query
        name: from_effective_date
        required: false
        schema:
          type: string
        style: form
      - description: Originating account number
        explode: true
        in: query
        name: originating_account_number
        required: false
        schema:
          example: "123456789"
          type: string
        style: form
      - description: Originating account ID
        explode: true
        in: query
        name: originating_account_id
        required: false
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          type: string
        style: form
      - description: Currency of the transfer
        explode: true
        in: query
        name: currency
        required: false
        schema:
          example: CAD
          type: string
        style: form
      - description: To effective date of the transfer
        explode: true
        in: query
        name: to_effective_date
        required: false
        schema:
          type: string
        style: form
      - description: DC sign of the transfer
        explode: true
        in: query
        name: dc_sign
        required: false
        schema:
          type: string
        style: form
      - description: Posting date of the transfer
        explode: true
        in: query
        name: posting_date
        required: false
        schema:
          type: string
        style: form
      - description: Effective date of the transfer
        explode: true
        in: query
        name: effective_date
        required: false
        schema:
          type: string
        style: form
      - description: Customer ID of the transfer
        explode: true
        in: query
        name: customer_id
        required: false
        schema:
          type: string
        style: form
      - description: Amount of the transfer
        explode: true
        in: query
        name: amount
        required: false
        schema:
          example: "100"
          type: string
        style: form
      - description: Destination account owner name
        explode: true
        in: query
        name: destination_account_owner_name
        required: false
        schema:
          example: Jane Joe
          type: string
        style: form
      - description: Reference ID of the transfer
        explode: true
        in: query
        name: reference_id
        required: false
        schema:
          type: string
        style: form
      - description: From posting date of the transfer
        explode: true
        in: query
        name: from_posting_date
        required: false
        schema:
          type: string
        style: form
      - description: Status of the transfer
        explode: true
        in: query
        name: status
        required: false
        schema:
          type: string
        style: form
      - description: Partner ID of the transfer
        explode: true
        in: query
        name: partner_id
        required: false
        schema:
          type: string
        style: form
      - description: Destination account ID
        explode: true
        in: query
        name: destination_account_id
        required: false
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          type: string
        style: form
      - description: Destination account number
        explode: true
        in: query
        name: destination_account_number
        required: false
        schema:
          example: "987654321"
          type: string
        style: form
      - description: Bank ID of the transfer
        explode: true
        in: query
        name: bank_id
        required: false
        schema:
          type: string
        style: form
      - description: Maximum amount of the transfer
        explode: true
        in: query
        name: max_amount
        required: false
        schema:
          example: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/eft_ca_list'
          description: Retrieve all EFT Canada transfers
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Get EFT Canada Transfers
      tags:
      - EFT Canada (alpha)
      x-alpha: true
      x-external: true
    post:
      description: |
        Create a new EFT Canada transfer
        > 🚧 Alpha > This is an Alpha spec-only endpoint. Feedback from the community is welcome. We may make breaking changes.
      operationId: createEFTCATransfer
      parameters:
      - description: "An idempotency key is an arbitrary unique value generated by\
          \ client to detect subsequent retries of the same request. It is recommended\
          \ that a UUID or a similar random identifier be used as an idempotency key.\
          \ A different key must be used for each request, unless it is a retry."
        explode: false
        in: header
        name: Idempotency-Key
        required: false
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/eft_ca_post'
        description: The EFT Canada transfer to be created.
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/eft_ca_response'
          description: Successful creation of an EFT Canada transfer
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "422":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unprocessable entity request response
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Create EFT Canada Transfer
      tags:
      - EFT Canada (alpha)
      x-alpha: true
      x-external: true
    summary: Eftilles
  /eft_ca/{id}:
    description: |
      The EFT Canada API allows you to create, retrieve, and update EFT Canada transfers.
    get:
      description: |
        Get a specific EFT Canada transfer
        > 🚧 Alpha > This is an Alpha spec-only endpoint. Feedback from the community is welcome. We may make breaking changes.
      operationId: getEFTCATransfer
      parameters:
      - description: EFT Canada Transfer ID
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/eft_ca_response'
          description: Retrieve a single EFT Canada transfer
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Get EFT Canada Transfer
      tags:
      - EFT Canada (alpha)
      x-alpha: true
      x-external: true
    patch:
      description: |
        To cancel a transfer, update the status to 'CANCELLED'. Only 'PENDING` transfers can be cancelled.
        > 🚧 Alpha > This is an Alpha spec-only endpoint. Feedback from the community is welcome. We may make breaking changes.
      operationId: patchEFTCATransfer
      parameters:
      - description: "An idempotency key is an arbitrary unique value generated by\
          \ client to detect subsequent retries of the same request. It is recommended\
          \ that a UUID or a similar random identifier be used as an idempotency key.\
          \ A different key must be used for each request, unless it is a retry."
        explode: false
        in: header
        name: Idempotency-Key
        required: false
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          type: string
        style: simple
      - description: EFT Canada Transfer ID
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/eft_ca_patch'
        description: Properties of the EFT Canada transfer to update.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/eft_ca_response'
          description: The updated EFT Canada transfer.
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "422":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unprocessable entity request response
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Update a EFT Canada Transfer
      tags:
      - EFT Canada (alpha)
      x-alpha: true
      x-external: true
    summary: Eftilles
  /eft_ca/{id}/return:
    description: |
      The EFT Canada API allows you to create, retrieve, and update EFT Canada transfers.
    post:
      description: |
        Trigger a return upon an existing transfer.
        > 🚧 Alpha > This is an Alpha spec-only endpoint. Feedback from the community is welcome. We may make breaking changes.
      operationId: returnEFTCATransfer
      parameters:
      - description: "An idempotency key is an arbitrary unique value generated by\
          \ client to detect subsequent retries of the same request. It is recommended\
          \ that a UUID or a similar random identifier be used as an idempotency key.\
          \ A different key must be used for each request, unless it is a retry."
        explode: false
        in: header
        name: Idempotency-Key
        required: false
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          type: string
        style: simple
      - description: EFT Canada Transfer ID
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/eft_ca_response'
          description: The created return transfer
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "422":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unprocessable entity request response
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Return an EFT Canada Transfer
      tags:
      - EFT Canada (alpha)
      x-alpha: true
      x-external: true
    summary: Eftilles
  /external_accounts:
    description: |
      The External Account resource is used for managing links to accounts that operate outside of the Synctera ecosystem.
    get:
      description: |
        Returns a list of all external accounts assigned to customers.
      operationId: listExternalAccounts
      parameters:
      - description: |
          External account ID(s). Multiple IDs can be provided as a comma-separated list.
        explode: false
        in: query
        name: id
        required: false
        schema:
          example: "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157"
          items:
            format: uuid
            type: string
          type: array
        style: form
      - description: "A list of customer unique identifiers, with a comma separating\
          \ any values."
        explode: false
        in: query
        name: customer_id
        required: false
        schema:
          items:
            $ref: '#/components/schemas/customer_id'
          type: array
        style: form
      - description: "If true, include old (inactive) records as well."
        explode: true
        in: query
        name: include_history
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - explode: true
        in: query
        name: page_token
        required: false
        schema:
          description: "Optional pagination token to be provided to retrieve subsequent\
            \ pages, returned from previous get"
          example: a8937a0d
          type: string
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          description: |
            Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
          example: 100
          minimum: 1
          type: integer
        style: form
      - description: "A list of business unique identifiers, with a comma separating\
          \ any values."
        explode: false
        in: query
        name: business_id
        required: false
        schema:
          items:
            $ref: '#/components/schemas/business_id2'
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/external_accounts_list'
          description: List of external accounts
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: List external accounts
      tags:
      - External Accounts
      x-external: true
    post:
      description: |
        Add an external account for a customer. The account will be created in an unverified state.
      operationId: addExternalAccounts
      parameters:
      - description: "An idempotency key is an arbitrary unique value generated by\
          \ client to detect subsequent retries of the same request. It is recommended\
          \ that a UUID or a similar random identifier be used as an idempotency key.\
          \ A different key must be used for each request, unless it is a retry."
        explode: false
        in: header
        name: Idempotency-Key
        required: false
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/add_accounts_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/external_account'
          description: The external account added.
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "409":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource already exists error
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Add an external account
      tags:
      - External Accounts
      x-external: true
    summary: External Accounts
  /external_accounts/access_tokens:
    description: |
      Create a permanent access token for an external account
    post:
      operationId: createAccessToken
      parameters:
      - description: "An idempotency key is an arbitrary unique value generated by\
          \ client to detect subsequent retries of the same request. It is recommended\
          \ that a UUID or a similar random identifier be used as an idempotency key.\
          \ A different key must be used for each request, unless it is a retry."
        explode: false
        in: header
        name: Idempotency-Key
        required: false
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/external_account_access_token'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/external_account_access_token'
          description: New verification link token
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Create a permanent access token for an external account
      tags:
      - External Accounts
      x-external: true
    summary: External account access token
  /external_accounts/add_vendor_accounts:
    description: |
      The External Account resource is used for managing links to accounts that operate outside of the Synctera ecosystem.
    post:
      description: |
        Add external accounts for a customer through an existing access token. The token must be valid, and the information on the accounts returned by the vendor must correspond to the customer. A success response for this route may include failures if an account could not be added, so it's important that the caller checks the response body.
      operationId: addVendorExternalAccounts
      parameters:
      - description: "An idempotency key is an arbitrary unique value generated by\
          \ client to detect subsequent retries of the same request. It is recommended\
          \ that a UUID or a similar random identifier be used as an idempotency key.\
          \ A different key must be used for each request, unless it is a retry."
        explode: false
        in: header
        name: Idempotency-Key
        required: false
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/add_vendor_accounts_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/add_vendor_accounts_response'
          description: |
            Result of adding accounts through the vendor.
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: "Add external accounts through a vendor, such as Plaid."
      tags:
      - External Accounts
      x-external: true
    summary: External Accounts
  /external_accounts/link_tokens:
    description: |
      Create a link token to verify an external account
    post:
      operationId: createVerificationLinkToken
      parameters:
      - description: "An idempotency key is an arbitrary unique value generated by\
          \ client to detect subsequent retries of the same request. It is recommended\
          \ that a UUID or a similar random identifier be used as an idempotency key.\
          \ A different key must be used for each request, unless it is a retry."
        explode: false
        in: header
        name: Idempotency-Key
        required: false
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/external_account_link_token'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/external_account_link_token'
          description: New verification link token
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Create a link token to verify an external account
      tags:
      - External Accounts
      x-external: true
    summary: External account verification link token
  /external_accounts/sync_vendor_accounts:
    description: |
      The External Account resource is used for managing links to accounts that operate outside of the Synctera ecosystem.
    post:
      description: |
        Sync external accounts for a customer through an existing access token. The token must be valid, and the information on the accounts returned by the vendor must correspond to the customer. A success response for this route may include failures if an account could not be added and deletions if the account is removed by the end user, so it's important that the caller checks the response body.
      operationId: syncVendorExternalAccounts
      parameters:
      - description: "An idempotency key is an arbitrary unique value generated by\
          \ client to detect subsequent retries of the same request. It is recommended\
          \ that a UUID or a similar random identifier be used as an idempotency key.\
          \ A different key must be used for each request, unless it is a retry."
        explode: false
        in: header
        name: Idempotency-Key
        required: false
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/add_vendor_accounts_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/add_vendor_accounts_response'
          description: |
            Result of syncing accounts through the vendor.
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: "Sync external accounts through a vendor, such as Plaid."
      tags:
      - External Accounts
      x-external: true
    summary: External Accounts
  /external_accounts/{external_account_id}:
    delete:
      description: |
        Deletes an external account, given an external account ID. If no accounts left, the access token to the financial institution will be removed
      operationId: deleteExternalAccount
      parameters:
      - description: External Account ID
        explode: false
        in: path
        name: external_account_id
        required: true
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/delete_response'
          description: Resource has been deleted
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "409":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource already exists error
        "422":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unprocessable entity request response
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Delete an external account
      tags:
      - External Accounts
      x-external: true
    description: |
      The External Account resource is used for managing links to accounts that operate outside of the Synctera ecosystem.
    get:
      description: |
        Returns an external account, given an external account ID.
      operationId: getExternalAccount
      parameters:
      - description: External Account ID
        explode: false
        in: path
        name: external_account_id
        required: true
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/external_account'
          description: The external account
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Get an external account
      tags:
      - External Accounts
      x-external: true
    patch:
      description: |
        Edits an unverified external account, given an external account ID.
      operationId: updateExternalAccount
      parameters:
      - description: External Account ID
        explode: false
        in: path
        name: external_account_id
        required: true
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        style: simple
      - description: "An idempotency key is an arbitrary unique value generated by\
          \ client to detect subsequent retries of the same request. It is recommended\
          \ that a UUID or a similar random identifier be used as an idempotency key.\
          \ A different key must be used for each request, unless it is a retry."
        explode: false
        in: header
        name: Idempotency-Key
        required: false
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/patch_external_account'
        description: External account to be updated
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/external_account'
          description: Updated external account
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "409":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource already exists error
        "422":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unprocessable entity request response
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Patch an external account
      tags:
      - External Accounts
      x-external: true
    summary: External Accounts
  /external_accounts/{external_account_id}/balance:
    description: |
      The External Account resource is used for managing links to accounts that operate outside of the Synctera ecosystem.
    get:
      description: |
        Given an external account ID, return the account balances in real time.

        The data returned by this endpoint is always fetched synchronously; it is not cached by Synctera.
        As a result, response latency is often high.
      operationId: getExternalAccountBalance
      parameters:
      - description: External Account ID
        explode: false
        in: path
        name: external_account_id
        required: true
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        style: simple
      - description: |
          Optional relative age of a balance in seconds. If the balance is older than the requested seconds it will fail. This field is optional for most financial institutions, but required for some, so you should probably send it.
        explode: true
        in: query
        name: max_age
        required: false
        schema:
          example: 600
          format: int64
          minimum: 0
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/external_account_balance'
          description: |
            A collection of fields that represent funds available in the account. The
            relationship between these fields is complex and can depend on geography and/or
            the external financial institution. You should not assume that all of these fields
            will be set, and you should not expect consistent results for different customers
            at different financial institutions.

            If you use Plaid as your backing vendor, see https://plaid.com/docs/api/products/balance/
            for precise details on when these fields are set and how they relate.
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Get external account balances
      tags:
      - External Accounts
      x-external: true
    summary: External Accounts
  /external_accounts/{external_account_id}/refresh_transactions:
    description: |
      The External Account resource is used for managing links to accounts that operate outside of the Synctera ecosystem.
    post:
      description: |
        Sync external accounts for a customer through an existing access token. The token must be valid. Accounts linked in the same auth session (having the same access token) will be synced together.
      operationId: externalAccountRefreshTransactions
      parameters:
      - description: External Account ID
        explode: false
        in: path
        name: external_account_id
        required: true
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        style: simple
      - description: Is External Account Restricted for Access
        explode: true
        in: query
        name: restricted
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Force a vendor refresh of the external account.
        explode: true
        in: query
        name: force_vendor_refresh
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/external_account_transaction_refresh_response'
          description: |
            Result of syncing accounts through the vendor.
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: "Sync external account transactions through a vendor, such as Plaid"
      tags:
      - External Accounts
      x-external: true
    summary: External Accounts
  /external_accounts/{external_account_id}/transactions:
    description: |
      The External Account resource is used for managing links to accounts that operate outside of the Synctera ecosystem.
    get:
      description: |
        Returns a list of transactions on from the external account, given an external account ID. Maximum 500 transctions will be returned.
      operationId: getExternalAccountTransactions
      parameters:
      - description: Date range filtering for transactions. Date is inclusive. Date
          must be in UTC.
        explode: true
        in: query
        name: start_date
        required: true
        schema:
          format: date
          type: string
        style: form
      - description: External Account ID
        explode: false
        in: path
        name: external_account_id
        required: true
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        style: simple
      - description: Date range filtering for transactions. Date is exclusive. Date
          must be in UTC.
        explode: true
        in: query
        name: end_date
        required: true
        schema:
          format: date
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/external_accounts_transaction_list'
          description: The external account
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "422":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unprocessable entity request response
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: List transactions of a given external account
      tags:
      - External Accounts
      x-external: true
    summary: External Accounts
  /external_cards:
    get:
      description: |
        Get a paginated list of External Cards
      operationId: listExternalCards
      parameters:
      - explode: true
        in: query
        name: customer_id
        required: false
        schema:
          $ref: '#/components/schemas/customer_id1'
        style: form
      - explode: true
        in: query
        name: business_id
        required: false
        schema:
          $ref: '#/components/schemas/business_id'
        style: form
      - explode: true
        in: query
        name: page_token
        required: false
        schema:
          description: "Optional pagination token to be provided to retrieve subsequent\
            \ pages, returned from previous get"
          example: a8937a0d
          type: string
        style: form
      - explode: true
        in: query
        name: status
        required: false
        schema:
          $ref: '#/components/schemas/external_card_status'
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          description: |
            Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
          example: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/external_card_list_response'
          description: External Card list
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "422":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unprocessable entity request response
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: List External Cards
      tags:
      - External Cards
      x-external: true
  /external_cards/authenticate_3ds:
    post:
      description: |
        > 🚧 Beta
        > This is a Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.

        Validates the results of an External Card Transfer 3DS authentication challenge.
      operationId: authenticate3DS
      parameters:
      - description: "An idempotency key is an arbitrary unique value generated by\
          \ client to detect subsequent retries of the same request. It is recommended\
          \ that a UUID or a similar random identifier be used as an idempotency key.\
          \ A different key must be used for each request, unless it is a retry."
        explode: false
        in: header
        name: Idempotency-Key
        required: false
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authenticate_3ds_request'
        description: Details of the External Card Transfer 3DS authentication challenge
          validation.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authenticate_3ds_response'
          description: External Card Transfer 3DS authentication challenge validation
            complete
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "422":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unprocessable entity request response
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Authenticate 3DS (beta)
      tags:
      - External Cards
      x-external: true
  /external_cards/initialize_3ds:
    post:
      description: |
        > 🚧 Beta
        > This is a Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.

        Initializes an External Card Transfer 3DS authentication.
      operationId: initialize3DS
      parameters:
      - description: "An idempotency key is an arbitrary unique value generated by\
          \ client to detect subsequent retries of the same request. It is recommended\
          \ that a UUID or a similar random identifier be used as an idempotency key.\
          \ A different key must be used for each request, unless it is a retry."
        explode: false
        in: header
        name: Idempotency-Key
        required: false
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/initialize_3ds_request'
        description: Details of the External Card Transfer 3DS authentication to initialize.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/initialize_3ds_response'
          description: External Card Transfer 3DS authentication initialized
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "422":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unprocessable entity request response
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Initialize 3DS (beta)
      tags:
      - External Cards
      x-external: true
  /external_cards/lookup_3ds:
    post:
      description: |
        > 🚧 Beta
        > This is a Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.

        Using device collection data, performs a lookup for an External Card Transfer 3DS authentication. The results will indicate whether the transfer is successfully authenticated or if a 3DS challenge is required.
      operationId: lookup3DS
      parameters:
      - description: "An idempotency key is an arbitrary unique value generated by\
          \ client to detect subsequent retries of the same request. It is recommended\
          \ that a UUID or a similar random identifier be used as an idempotency key.\
          \ A different key must be used for each request, unless it is a retry."
        explode: false
        in: header
        name: Idempotency-Key
        required: false
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/lookup_3ds_request'
        description: Details of the External Card Transfer 3DS authentication lookup.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lookup_3ds_response'
          description: External Card Transfer 3DS authentication lookup complete
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "422":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unprocessable entity request response
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Lookup 3DS (beta)
      tags:
      - External Cards
      x-external: true
  /external_cards/tokens:
    post:
      description: |
        Create an External Card from token. The token is obtained through the iFrame, along with cardholder name, which also must be provided. Cardholder name is matched against customer name.
      operationId: createExternalCardFromToken
      parameters:
      - description: "An idempotency key is an arbitrary unique value generated by\
          \ client to detect subsequent retries of the same request. It is recommended\
          \ that a UUID or a similar random identifier be used as an idempotency key.\
          \ A different key must be used for each request, unless it is a retry."
        explode: false
        in: header
        name: Idempotency-Key
        required: false
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/external_card_request'
        description: Details of the External Card to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/external_card_response'
          description: External Card created
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "422":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unprocessable entity request response
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Create External Card from token
      tags:
      - External Cards
      x-external: true
  /external_cards/transfers:
    get:
      description: |
        Get a paginated list of External Card Transfers
      operationId: listExternalCardTransfers
      parameters:
      - explode: false
        in: query
        name: customer_id
        required: false
        schema:
          items:
            $ref: '#/components/schemas/customer_id1'
          type: array
        style: form
      - description: The type of an external transfer
        explode: true
        in: query
        name: type
        required: false
        schema:
          $ref: '#/components/schemas/transfer_type'
        style: form
      - explode: false
        in: query
        name: originating_account_id
        required: false
        schema:
          items:
            $ref: '#/components/schemas/originating_account_id'
          type: array
        style: form
      - explode: true
        in: query
        name: external_card_id
        required: false
        schema:
          $ref: '#/components/schemas/external_card_id'
        style: form
      - explode: true
        in: query
        name: page_token
        required: false
        schema:
          description: "Optional pagination token to be provided to retrieve subsequent\
            \ pages, returned from previous get"
          example: a8937a0d
          type: string
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          description: |
            Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
          example: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/transfer_list_response'
          description: External Card Transfer list
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "422":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unprocessable entity request response
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: List External Card Transfers
      tags:
      - External Cards
      x-external: true
    post:
      description: |
        Create an External Card Transfer
      operationId: createExternalCardTransfer
      parameters:
      - description: "An idempotency key is an arbitrary unique value generated by\
          \ client to detect subsequent retries of the same request. It is recommended\
          \ that a UUID or a similar random identifier be used as an idempotency key.\
          \ A different key must be used for each request, unless it is a retry."
        explode: false
        in: header
        name: Idempotency-Key
        required: false
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/transfer_request'
        description: Details of the External Card Transfer to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/transfer_response'
          description: External Card Transfer created
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "422":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unprocessable entity request response
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Create External Card Transfer
      tags:
      - External Cards
      x-external: true
  /external_cards/transfers/{transfer_id}:
    get:
      description: |
        Get an External Card Transfer
      operationId: getExternalCardTransfer
      parameters:
      - description: The unique identifier of a transfer
        explode: false
        in: path
        name: transfer_id
        required: true
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/transfer_response'
          description: External Card Transfer details
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "422":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unprocessable entity request response
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Get External Card Transfer
      tags:
      - External Cards
      x-external: true
  /external_cards/transfers/{transfer_id}/reversals:
    post:
      description: |
        Create an External Card Transfer Reversal
      operationId: createExternalCardTransferReversal
      parameters:
      - description: The unique identifier of a transfer
        explode: false
        in: path
        name: transfer_id
        required: true
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        style: simple
      - description: "An idempotency key is an arbitrary unique value generated by\
          \ client to detect subsequent retries of the same request. It is recommended\
          \ that a UUID or a similar random identifier be used as an idempotency key.\
          \ A different key must be used for each request, unless it is a retry."
        explode: false
        in: header
        name: Idempotency-Key
        required: false
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/transfer_reversal_request'
        description: Details of the External Card Transfer Reversal to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/transfer_response'
          description: External Card Transfer Reversal created
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "422":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unprocessable entity request response
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Create External Card Transfer Reversal
      tags:
      - External Cards
      x-external: true
  /external_cards/{external_card_id}:
    delete:
      description: Delete an External Card
      operationId: deleteExternalCard
      parameters:
      - description: The unique identifier of an external card
        explode: false
        in: path
        name: external_card_id
        required: true
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/delete_response'
          description: Resource has been deleted
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "422":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unprocessable entity request response
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Delete External Card
      tags:
      - External Cards
      x-external: true
    get:
      description: |
        Get an External Card
      operationId: getExternalCard
      parameters:
      - description: The unique identifier of an external card
        explode: false
        in: path
        name: external_card_id
        required: true
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/external_card_response'
          description: External Card details
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "422":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unprocessable entity request response
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Get External Card
      tags:
      - External Cards
      x-external: true
    patch:
      description: |
        Update External Card data
      operationId: updateExternalCard
      parameters:
      - description: The unique identifier of an external card
        explode: false
        in: path
        name: external_card_id
        required: true
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/external_card_update_request'
        description: Fields to update
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/external_card_response'
          description: External Card details
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "422":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unprocessable entity request response
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Update External Card
      tags:
      - External Cards
      x-external: true
  /hold:
    get:
      description: |
        Get paginated list of holds matching the provided filters
      operationId: listHolds
      parameters:
      - description: Include transactions from sub-accounts when listing transactions
          for a given account
        explode: true
        in: query
        name: include_child_transactions
        required: false
        schema:
          type: boolean
        style: form
      - description: Only display transactions with a posting date greater than from_date
        explode: true
        in: query
        name: from_date
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: Only display transactions with a posting date less than or equal
          to to_date
        explode: true
        in: query
        name: to_date
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: Only display holds linked to the provided transaction id
        explode: true
        in: query
        name: transaction_id
        required: false
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        style: form
      - description: The status of the transaction
        explode: false
        in: query
        name: status
        required: false
        schema:
          example: "PENDING,PARTCLEARED"
          items:
            type: string
          type: array
        style: form
      - description: Only display transactions matching the given type
        explode: true
        in: query
        name: type
        required: false
        schema:
          type: string
        style: form
      - description: Account ID
        explode: true
        in: query
        name: account_id
        required: false
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        style: form
      - description: Transaction Idempotency Key(s). Multiple keys can be provided
          as a comma-separated list.
        explode: false
        in: query
        name: idempotency_key
        required: false
        schema:
          example: "ba313a66-cbb6-4bc3-aa37-6548448ecb32,cadb3dd1-feb0-42c3-b545-afbbfa99eb7f"
          items:
            type: string
          type: array
        style: form
      - description: Account number
        explode: true
        in: query
        name: account_no
        required: false
        schema:
          type: string
        style: form
      - description: Hide "JIT funding" transactions from results
        explode: true
        in: query
        name: exclude_jit_transactions
        required: false
        schema:
          type: boolean
        style: form
      - explode: true
        in: query
        name: page_token
        required: false
        schema:
          description: "Optional pagination token to be provided to retrieve subsequent\
            \ pages, returned from previous get"
          example: a8937a0d
          type: string
        style: form
      - description: Card ID
        explode: true
        in: query
        name: card_id
        required: false
        schema:
          example: 6dc0397d-1aba-4be9-9582-895a7a887d49
          format: uuid
          type: string
        style: form
      - description: Reference ID
        explode: true
        in: query
        name: reference_id
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          description: |
            Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
          example: 100
          minimum: 1
          type: integer
        style: form
      - description: Only display transactions matching the given subtype
        explode: true
        in: query
        name: subtype
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pending_transactions'
          description: Paginated list of holds
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "422":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unprocessable entity request response
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: List holds
      tags:
      - Hold
      x-external: true
    summary: Holds
  /hold/{id}:
    description: |
      A pending transaction represent a "hold" of a paricular amount on an account balance.
    get:
      description: |
        Get a pending transaction by its uuid
      operationId: getHold
      parameters:
      - description: Transaction ID
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 472341e0-ea3e-41a1-96bc-fd0185e1eac8
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pending_transaction'
          description: Pending Transaction
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "422":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unprocessable entity request response
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Get a pending transaction
      tags:
      - Hold
      x-external: true
    summary: Get pending transaction
  /internal_accounts:
    description: |
      The internal account resource is used for managing links to internal accounts where the funds are managed by integrators.
    get:
      description: |
        Returns a list of all internal accounts.
      operationId: listInternalAccounts
      parameters:
      - explode: true
        in: query
        name: page_token
        required: false
        schema:
          description: "Optional pagination token to be provided to retrieve subsequent\
            \ pages, returned from previous get"
          example: a8937a0d
          type: string
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          description: |
            Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
          example: 100
          minimum: 1
          type: integer
        style: form
      - description: |
          Internal account ID(s). Multiple IDs can be provided as a comma-separated list.
        explode: false
        in: query
        name: id
        required: false
        schema:
          example: "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157"
          items:
            format: uuid
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internal_accounts_list'
          description: List of internal accounts
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: List internal accounts
      tags:
      - Internal Accounts
      x-external: true
    post:
      description: |
        Add an internal account
      operationId: addInternalAccounts
      parameters:
      - description: "An idempotency key is an arbitrary unique value generated by\
          \ client to detect subsequent retries of the same request. It is recommended\
          \ that a UUID or a similar random identifier be used as an idempotency key.\
          \ A different key must be used for each request, unless it is a retry."
        explode: false
        in: header
        name: Idempotency-Key
        required: false
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/internal_account_post'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internal_account_response'
          description: The internal account added.
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "409":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource already exists error
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Add internal accounts
      tags:
      - Internal Accounts
      x-external: true
    summary: Internal Accounts
  /internal_accounts/{internal_account_id}:
    get:
      description: |
        Returns an internal account by id
      operationId: getInternalAccounts
      parameters:
      - description: Unique identifier for the internal account.
        explode: false
        in: path
        name: internal_account_id
        required: true
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internal_account_response'
          description: Internal Account
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Get internal account by id
      tags:
      - Internal Accounts
      x-external: true
    patch:
      description: |
        Patch internal account.
      operationId: patchInternalAccount
      parameters:
      - description: Unique identifier for the internal account.
        explode: false
        in: path
        name: internal_account_id
        required: true
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/internal_account_patch'
        description: Internal Account fields to be patched
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internal_account_response'
          description: Updated internal account
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "461":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Account has been closed
      summary: Patch internal account
      tags:
      - Internal Accounts
      x-external: true
    summary: Internal Accounts
  /international_wires:
    get:
      description: Get paginated list of international wires
      operationId: listInternationalWires
      parameters:
      - description: The status of the international wire transfer.
        explode: true
        in: query
        name: international_wire_status
        required: false
        schema:
          $ref: '#/components/schemas/international_wire_status'
        style: form
      - description: The unique identifier of the originating account.
        explode: true
        in: query
        name: originating_account_id
        required: false
        schema:
          example: b01db9c7-78f2-4a99-8aca-1231d32f9b96
          format: uuid
          type: string
        style: form
      - description: The unique identifier of a customer.
        explode: true
        in: query
        name: customer_id
        required: false
        schema:
          example: b01db9c7-78f2-4a99-8aca-1231d32f9b96
          format: uuid
          type: string
        style: form
      - description: The unique identifier of the receiving account.
        explode: true
        in: query
        name: receiving_account_id
        required: false
        schema:
          example: b01db9c7-78f2-4a99-8aca-1231d32f9b96
          format: uuid
          type: string
        style: form
      - explode: true
        in: query
        name: page_token
        required: false
        schema:
          description: "Optional pagination token to be provided to retrieve subsequent\
            \ pages, returned from previous get"
          example: a8937a0d
          type: string
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          description: |
            Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
          example: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/international_wire_list'
          description: List of international wires
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: List International Wires
      tags:
      - International Wires (alpha)
      x-external: true
      x-status: alpha
    post:
      description: "Create an international wire transfer. For now these need manual\
        \ approval and submission to the wire terminal by bank operations team. Created\
        \ wires will result in an auth, posting only happens when bank operations\
        \ team confirms the wire. The wire will be subsequently updated with the reference\
        \ ID and synctera case ID when the wire is submitted via the wire terminal.\
        \ Wire processing is subject to the bank's processing schedule. Cross currency\
        \ wires may only be available during certain hours of banking days."
      operationId: createInternationalWire
      parameters:
      - description: "An idempotency key is an arbitrary unique value generated by\
          \ client to detect subsequent retries of the same request. It is recommended\
          \ that a UUID or a similar random identifier be used as an idempotency key.\
          \ A different key must be used for each request, unless it is a retry."
        explode: false
        in: header
        name: Idempotency-Key
        required: false
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/international_wire_post'
        description: International wire transfer request
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/international_wire_response'
          description: Created international wire
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "422":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unprocessable entity request response
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Create an International Wire
      tags:
      - International Wires (alpha)
      x-external: true
      x-status: alpha
    summary: International Wire
  /international_wires/{wire_id}:
    get:
      description: Get an international wire by id
      operationId: getInternationalWire
      parameters:
      - description: The unique identifier of a wire transfer.
        explode: false
        in: path
        name: wire_id
        required: true
        schema:
          example: b01db9c7-78f2-4a99-8aca-1231d32f9b96
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/international_wire_response'
          description: International wire.
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Get an international wire by id
      tags:
      - International Wires (alpha)
      x-external: true
      x-status: alpha
    patch:
      description: Update an outgoing international wire. End customers can only cancel
        a wire while its status is still PENDING. All other updates must be done by
        Synctera operations team or bank operations team.
      operationId: patchInternationalWire
      parameters:
      - description: The unique identifier of a wire transfer.
        explode: false
        in: path
        name: wire_id
        required: true
        schema:
          example: b01db9c7-78f2-4a99-8aca-1231d32f9b96
          format: uuid
          type: string
        style: simple
      - description: "An idempotency key is an arbitrary unique value generated by\
          \ client to detect subsequent retries of the same request. It is recommended\
          \ that a UUID or a similar random identifier be used as an idempotency key.\
          \ A different key must be used for each request, unless it is a retry."
        explode: false
        in: header
        name: Idempotency-Key
        required: false
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/international_wire_patch'
        description: Instruction to update an international wire
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/international_wire_response'
          description: Updated international wire
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Update an international wire to various statuses
      tags:
      - International Wires (alpha)
      x-external: true
      x-status: alpha
    summary: International Wire
  /licenses:
    description: |
      License could be a business permit, like a cannabis business license for example.
    get:
      operationId: listLicenses
      parameters:
      - description: |
          Unique identifier for the business. Multiple IDs can be provided as a comma-separated list.
        explode: false
        in: query
        name: business_id
        required: false
        schema:
          example: "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157"
          items:
            format: uuid
            type: string
          type: array
        style: form
      - deprecated: true
        description: The customer's unique identifier
        explode: true
        in: query
        name: customer_id
        required: false
        schema:
          $ref: '#/components/schemas/customer_id'
        style: form
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/license_list'
          description: list of licenses
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: list licenses
      tags:
      - Licenses
      x-external: true
    post:
      description: |
        License represents a business permit that will be verified
      operationId: createLicenses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/post_license'
        description: license to be created
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response_license'
          description: Created license representation.
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Create a license and associate it with a business
      tags:
      - Licenses
      x-external: true
    summary: Licenses
  /licenses/{license_id}:
    description: |
      This resource represents a license record.
    get:
      description: Get license record by id
      operationId: getLicense
      parameters:
      - description: License record identifier
        explode: false
        in: path
        name: license_id
        required: true
        schema:
          example: ba4f84d7-fa20-4010-a573-0bbca57ab589
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response_license'
          description: license information
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Get license
      tags:
      - Licenses
      x-external: true
    patch:
      description: Update a License by ID.
      operationId: patchLicense
      parameters:
      - description: License record identifier
        explode: false
        in: path
        name: license_id
        required: true
        schema:
          example: ba4f84d7-fa20-4010-a573-0bbca57ab589
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/license_patch'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response_license'
          description: Updated License representation.
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Patch License
      tags:
      - Licenses
      x-external: true
    summary: Licenses
  /monitoring/alerts:
    get:
      operationId: listAlerts
      parameters:
      - description: |
          Unique identifier for the business. Multiple IDs can be provided as a comma-separated list.
        explode: false
        in: query
        name: business_id
        required: false
        schema:
          example: "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157"
          items:
            format: uuid
            type: string
          type: array
        style: form
      - explode: true
        in: query
        name: page_token
        required: false
        schema:
          description: "Optional pagination token to be provided to retrieve subsequent\
            \ pages, returned from previous get"
          example: a8937a0d
          type: string
        style: form
      - description: |
          Unique identifier for the resource. Multiple IDs can be provided as a comma-separated list.
        explode: false
        in: query
        name: id
        required: false
        schema:
          example: "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157"
          items:
            format: uuid
            type: string
          type: array
        style: form
      - description: |
          Unique identifier for the person. Multiple IDs can be provided as a comma-separated list.
        explode: false
        in: query
        name: person_id
        required: false
        schema:
          example: "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157"
          items:
            format: uuid
            type: string
          type: array
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          description: |
            Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
          example: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/monitoring_alert_list'
          description: List of alerts.
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: List monitoring alerts
      tags:
      - Monitoring
      x-external: true
      x-status: alpha
  /monitoring/alerts/{alert_id}:
    get:
      operationId: getAlert
      parameters:
      - description: Unique identifier for this monitoring alert.
        explode: false
        in: path
        name: alert_id
        required: true
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/monitoring_alert'
          description: A single monitoring alert.
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Retrieve a monitoring alert
      tags:
      - Monitoring
      x-external: true
      x-status: alpha
    patch:
      operationId: updateAlert
      parameters:
      - description: Unique identifier for this monitoring alert.
        explode: false
        in: path
        name: alert_id
        required: true
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/monitoring_alert'
        description: Monitoring alert to update.
        required: true
      responses:
        "200":
          description: Updated monitoring alert.
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Update a monitoring alert
      tags:
      - Monitoring
      x-external: true
      x-status: alpha
  /monitoring/subscriptions:
    get:
      operationId: listSubscriptions
      parameters:
      - description: |
          Unique identifier for the business. Multiple IDs can be provided as a comma-separated list.
        explode: false
        in: query
        name: business_id
        required: false
        schema:
          example: "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157"
          items:
            format: uuid
            type: string
          type: array
        style: form
      - explode: true
        in: query
        name: page_token
        required: false
        schema:
          description: "Optional pagination token to be provided to retrieve subsequent\
            \ pages, returned from previous get"
          example: a8937a0d
          type: string
        style: form
      - description: |
          Unique identifier for the resource. Multiple IDs can be provided as a comma-separated list.
        explode: false
        in: query
        name: id
        required: false
        schema:
          example: "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157"
          items:
            format: uuid
            type: string
          type: array
        style: form
      - description: |
          Unique identifier for the person. Multiple IDs can be provided as a comma-separated list.
        explode: false
        in: query
        name: person_id
        required: false
        schema:
          example: "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157"
          items:
            format: uuid
            type: string
          type: array
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          description: |
            Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
          example: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/monitoring_subscription_list'
          description: List of monitoring subscriptions.
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: List monitoring subscriptions
      tags:
      - Monitoring
      x-external: true
      x-status: alpha
    post:
      description: |
        This endpoint is rarely needed. Since August 2022, watchlist monitoring is automatically enabled for all businesses and customers who are verified (KYC/KYB) through Synctera's platform.
      operationId: createSubscription
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/monitoring_subscription'
        description: The monitoring subscription.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/monitoring_subscription'
          description: The new monitoring subscription.
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Subscribe a customer or business to monitoring
      tags:
      - Monitoring
      x-external: true
      x-status: alpha
  /monitoring/subscriptions/{subscription_id}:
    delete:
      operationId: deleteSubscription
      parameters:
      - description: Unique identifier for monitoring subscription.
        explode: false
        in: path
        name: subscription_id
        required: true
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/delete_response'
          description: Resource has been deleted
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Delete monitoring subscription
      tags:
      - Monitoring
      x-external: true
      x-status: alpha
    get:
      operationId: getSubscription
      parameters:
      - description: Unique identifier for monitoring subscription.
        explode: false
        in: path
        name: subscription_id
        required: true
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/monitoring_subscription'
          description: A single monitoring subscription.
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Retrieve monitoring subscription
      tags:
      - Monitoring
      x-external: true
      x-status: alpha
  /mx/merchants/{merchant_guid}:
    get:
      description: |
        Returns information about a particular merchant from MX, such as a logo, name, and website.
      operationId: mxReadMerchant
      parameters:
      - description: The unique id for a `merchant`.
        example: MCH-7ed79542-884d-2b1b-dd74-501c5cc9d25b
        explode: false
        in: path
        name: merchant_guid
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/merchant_response'
          description: Pending Transaction
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Get merchant from MX
      tags:
      - Merchants
      x-external: true
    summary: MX
  /notes:
    get:
      description: Get paginated list of notes
      operationId: listNotes
      parameters:
      - description: Only return notes that have a related resource with the specified
          ID.
        explode: false
        in: query
        name: related_resource_id
        required: false
        schema:
          example: "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157"
          items:
            type: string
          type: array
        style: form
      - explode: true
        in: query
        name: author_user_id
        required: false
        schema:
          description: Only return notes where the author user ID matches the specified
            string.
          example: 64438afd-fa20-4010-a573-2bbdca77cdb6
          format: uuid
          type: string
        style: form
      - description: |
          Return the note with the specified id. Multiple IDs can be provided as a comma-separated list.
        explode: false
        in: query
        name: id
        required: false
        schema:
          example: "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157"
          items:
            format: uuid
            type: string
          type: array
        style: form
      - description: Only return notes that have a related resource with the specified
          type.
        explode: true
        in: query
        name: related_resource_type
        required: false
        schema:
          $ref: '#/components/schemas/related_resource_type1'
        style: form
      - explode: true
        in: query
        name: page_token
        required: false
        schema:
          description: "Optional pagination token to be provided to retrieve subsequent\
            \ pages, returned from previous get"
          example: a8937a0d
          type: string
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          description: |
            Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
          example: 100
          minimum: 1
          type: integer
        style: form
      - explode: true
        in: query
        name: tenant
        required: false
        schema:
          description: Only return resources owned by the specified tenant
          example: abcdef_ghijkl
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/note_list'
          description: List of notes
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: List notes
      tags:
      - Notes
      x-external: true
    post:
      description: Create a note
      operationId: createNote
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/note_create'
        description: note to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/note_response'
          description: Created note
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "409":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource already exists error
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Create a note
      tags:
      - Notes
      x-external: true
    summary: Notes
  /notes/{note_id}:
    patch:
      description: Update a Note by ID.
      operationId: patchNote
      parameters:
      - description: The unique identifier of a note
        explode: false
        in: path
        name: note_id
        required: true
        schema:
          example: 64438afd-fa20-4010-a573-2bbdca77cdb6
          format: uuid
          type: string
        style: simple
      - description: "An idempotency key is an arbitrary unique value generated by\
          \ client to detect subsequent retries of the same request. It is recommended\
          \ that a UUID or a similar random identifier be used as an idempotency key.\
          \ A different key must be used for each request, unless it is a retry."
        explode: false
        in: header
        name: Idempotency-Key
        required: false
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          type: string
        style: simple
      - description: Only return notes that have a related resource with the specified
          type.
        explode: true
        in: query
        name: related_resource_type
        required: false
        schema:
          $ref: '#/components/schemas/related_resource_type1'
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/patch_note'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/note_response'
          description: Updated Note representation.
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Patch Note
      tags:
      - Notes
      x-external: true
  /payment_schedules:
    get:
      description: Get paginated list of payment schedules
      operationId: listPaymentSchedules
      parameters:
      - description: Originating account IDs. Multiple IDs can be provided as a comma-separated
          list.
        explode: false
        in: query
        name: account_id
        required: false
        schema:
          example: "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157"
          items:
            format: uuid
            type: string
          type: array
        style: form
      - description: IDs. Multiple IDs can be provided as a comma-separated list.
        explode: false
        in: query
        name: id
        required: false
        schema:
          example: "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157"
          items:
            format: uuid
            type: string
          type: array
        style: form
      - explode: true
        in: query
        name: page_token
        required: false
        schema:
          description: "Optional pagination token to be provided to retrieve subsequent\
            \ pages, returned from previous get"
          example: a8937a0d
          type: string
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          description: |
            Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
          example: 100
          minimum: 1
          type: integer
        style: form
      - description: The IDs of customers who created the payment schedules. Multiple
          IDs can be provided as a comma-separated list.
        explode: false
        in: query
        name: customer_id
        required: false
        schema:
          example: "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157"
          items:
            format: uuid
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/payment_schedule_list'
          description: List of payment schedules
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: List payment schedules
      tags:
      - PaymentSchedules
      x-external: true
    post:
      description: Create a payment schedule
      operationId: createPaymentSchedule
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/payment_schedule'
        description: payment schedule to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/payment_schedule'
          description: Created payment schedule
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "409":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource already exists error
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Create a payment schedule
      tags:
      - PaymentSchedules
      x-external: true
    summary: PaymentSchedules
  /payment_schedules/payments:
    get:
      description: Get paginated list of payments
      operationId: listPayments
      parameters:
      - description: Originating account IDs. Multiple IDs can be provided as a comma-separated
          list.
        explode: false
        in: query
        name: account_id
        required: false
        schema:
          example: "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157"
          items:
            format: uuid
            type: string
          type: array
        style: form
      - description: IDs. Multiple IDs can be provided as a comma-separated list.
        explode: false
        in: query
        name: id
        required: false
        schema:
          example: "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157"
          items:
            format: uuid
            type: string
          type: array
        style: form
      - explode: true
        in: query
        name: page_token
        required: false
        schema:
          description: "Optional pagination token to be provided to retrieve subsequent\
            \ pages, returned from previous get"
          example: a8937a0d
          type: string
        style: form
      - description: Payment schedule IDs. Multiple IDs can be provided as a comma-separated
          list.
        explode: false
        in: query
        name: schedule_id
        required: false
        schema:
          example: "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157"
          items:
            format: uuid
            type: string
          type: array
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          description: |
            Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
          example: 100
          minimum: 1
          type: integer
        style: form
      - description: The IDs of customers who created the payment schedules. Multiple
          IDs can be provided as a comma-separated list.
        explode: false
        in: query
        name: customer_id
        required: false
        schema:
          example: "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157"
          items:
            format: uuid
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/payment_list'
          description: List of payment schedules
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: List payments
      tags:
      - PaymentSchedules
      x-external: true
    summary: PaymentSchedules
  /payment_schedules/{payment_schedule_id}:
    patch:
      description: Update a payment schedule
      operationId: patchPaymentSchedule
      parameters:
      - description: Payment schedule ID
        explode: false
        in: path
        name: payment_schedule_id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/patch_payment_schedule'
        description: payment schedule to update
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/payment_schedule'
          description: Updated payment schedule
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "409":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource already exists error
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Update a payment schedule
      tags:
      - PaymentSchedules
      x-external: true
  /persons:
    get:
      description: Retrieves paginated list of persons associated with the authorized
        requester.
      operationId: listPersons
      parameters:
      - description: |
          Specifies the sort order for the returned persons.
        explode: false
        in: query
        name: sort_by
        required: false
        schema:
          items:
            enum:
            - creation_time:asc
            - creation_time:desc
            - first_name:asc
            - first_name:desc
            - last_name:asc
            - last_name:desc
            - last_updated_time:asc
            - last_updated_time:desc
            type: string
          type: array
        style: form
      - description: "If true, show only customers. If false, show non-customer parties."
        explode: true
        in: query
        name: is_customer
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Filter on resources that have an account(s)
        explode: true
        in: query
        name: has_accounts
        required: false
        schema:
          type: boolean
        style: form
      - explode: true
        in: query
        name: ssn_last_4
        required: false
        schema:
          description: Only return resources where the last 4 characters of the SSN
            match the specified value.
          example: "6789"
          maxLength: 4
          minLength: 4
          type: string
        style: form
      - description: |
          Unique identifier for the resource. Multiple IDs can be provided as a comma-separated list.
        explode: false
        in: query
        name: id
        required: false
        schema:
          example: "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157"
          items:
            format: uuid
            type: string
          type: array
        style: form
      - explode: true
        in: query
        name: last_name
        required: false
        schema:
          description: "Only return resources where the last_name field matches the\
            \ specified string. Any * characters in the string are wildcards, and\
            \ match any characters."
          example: Smith
          type: string
        style: form
      - explode: true
        in: query
        name: email
        required: false
        schema:
          description: "Only return resources where the email field matches the specified\
            \ string. Any * characters in the string are wildcards, and match any\
            \ characters."
          example: john.doe@example.com
          type: string
        style: form
      - explode: true
        in: query
        name: first_name
        required: false
        schema:
          description: "Only return resources where the first_name or chosen_name\
            \ field matches the specified string. Any * characters in the string are\
            \ wildcards, and match any characters."
          example: Alice
          type: string
        style: form
      - explode: true
        in: query
        name: status
        required: false
        schema:
          $ref: '#/components/schemas/status2'
        style: form
      - explode: true
        in: query
        name: phone_number
        required: false
        schema:
          description: "Only return resources where the phone_number field matches\
            \ the specified string. Phone numbers use the E.164 format e.g. +19178675309.\
            \ Any * characters in the string are wildcards, and match any characters."
          example: +12065550100
          type: string
        style: form
      - explode: true
        in: query
        name: page_token
        required: false
        schema:
          description: "Optional pagination token to be provided to retrieve subsequent\
            \ pages, returned from previous get"
          example: a8937a0d
          type: string
        style: form
      - description: |
          (alpha) Ban status of the person. Multiple values can be provided as a comma-seperated list of the following:
          * `ALLOWED` – person is not banned or suspended
          * `SUSPENDED` - person is suspended
          * `BANNED` – person is banned
        explode: false
        in: query
        name: ban_status
        required: false
        schema:
          items:
            $ref: '#/components/schemas/ban_status'
          type: array
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          description: |
            Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
          example: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/person_list'
          description: List of persons.
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: List persons
      tags:
      - Persons
      x-external: true
      x-status: alpha
    post:
      description: |
        Create a person who may act as a personal customer or a director/officer/owner of a business. You can then verify the identity of this customer and associate them with other people and accounts.
      operationId: createPerson
      parameters:
      - description: "An idempotency key is an arbitrary unique value generated by\
          \ client to detect subsequent retries of the same request. It is recommended\
          \ that a UUID or a similar random identifier be used as an idempotency key.\
          \ A different key must be used for each request, unless it is a retry."
        explode: false
        in: header
        name: Idempotency-Key
        required: false
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/post_person'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response_person'
          description: Created person representation.
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "409":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource already exists error
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Create a person
      tags:
      - Persons
      x-external: true
      x-status: alpha
    summary: Persons
  /persons/personal_ids:
    post:
      description: |
        > 🚧 Beta > This is an Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.
        Create a personal identifier, e.g. SSN, for this customer
      operationId: createPersonalId
      parameters:
      - description: "An idempotency key is an arbitrary unique value generated by\
          \ client to detect subsequent retries of the same request. It is recommended\
          \ that a UUID or a similar random identifier be used as an idempotency key.\
          \ A different key must be used for each request, unless it is a retry."
        explode: false
        in: header
        name: Idempotency-Key
        required: false
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/post_personal_id_w_cust'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response_personal_id_w_cust'
          description: Created personal identifier.
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Create a personal identifier (beta)
      tags:
      - Persons
      x-external: true
      x-status: alpha
    summary: Personal Identifiers
  /persons/personal_ids/{personal_id_id}:
    delete:
      description: |
        > 🚧 Beta > This is a Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.
        Delete personal identifier
      operationId: DeletePersonalId
      parameters:
      - description: UUID for a personal identifier.
        explode: false
        in: path
        name: personal_id_id
        required: true
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/delete_response'
          description: Resource has been deleted
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
      summary: Delete a personal identifier (beta)
      tags:
      - Persons
      x-external: true
    patch:
      description: |
        > 🚧 Beta > This is a Beta endpoint. Feedback from the community is welcome. We may make breaking changes to this endpoint.
        Update a personal identifier, e.g. SSN, for this customer
      operationId: updatePersonalId
      parameters:
      - description: UUID for a personal identifier.
        explode: false
        in: path
        name: personal_id_id
        required: true
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        style: simple
      - description: "An idempotency key is an arbitrary unique value generated by\
          \ client to detect subsequent retries of the same request. It is recommended\
          \ that a UUID or a similar random identifier be used as an idempotency key.\
          \ A different key must be used for each request, unless it is a retry."
        explode: false
        in: header
        name: Idempotency-Key
        required: false
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/patch_personal_id'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response_personal_id_w_cust'
          description: Created personal identifier.
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Update a personal identifier (beta)
      tags:
      - Persons
      x-external: true
    summary: Personal Identifiers
  /persons/{person_id}:
    get:
      description: Get person by ID.
      operationId: getPerson
      parameters:
      - description: Person's unique identifier.
        explode: false
        in: path
        name: person_id
        required: true
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response_person'
          description: Person representation.
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Get person
      tags:
      - Persons
      x-external: true
      x-status: alpha
    patch:
      description: Update person by ID.
      operationId: updatePerson
      parameters:
      - description: "An idempotency key is an arbitrary unique value generated by\
          \ client to detect subsequent retries of the same request. It is recommended\
          \ that a UUID or a similar random identifier be used as an idempotency key.\
          \ A different key must be used for each request, unless it is a retry."
        explode: false
        in: header
        name: Idempotency-Key
        required: false
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          type: string
        style: simple
      - description: Person's unique identifier.
        explode: false
        in: path
        name: person_id
        required: true
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/patch_person'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response_person'
          description: Updated person representation.
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Update person
      tags:
      - Persons
      x-external: true
      x-status: alpha
    summary: Persons
  /rdc/deposits:
    description: |
      The Remote Check Deposits collection represents all the deposits made using remote deposit capture associated with an account
    get:
      description: Retrieves a paginated list of the deposits made using remote deposit
        capture associated with an account
      operationId: listRdcDeposits
      parameters:
      - description: Unique identifier for the account.
        explode: true
        in: query
        name: account_id
        required: false
        schema:
          example: b01db9c7-78f2-4a99-8aca-1231d32f9b96
          format: uuid
          type: string
        style: form
      - explode: true
        in: query
        name: page_token
        required: false
        schema:
          description: "Optional pagination token to be provided to retrieve subsequent\
            \ pages, returned from previous get"
          example: a8937a0d
          type: string
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          description: |
            Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
          example: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deposit_list'
          description: List of deposits made with remote deposit capture
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
      summary: List Remote Check Deposits
      tags:
      - Remote Check Deposit (beta)
      x-external: true
    post:
      description: |
        Create a new deposit using remote deposit capture to an account
      operationId: createRdcDeposit
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/deposit_post'
        description: Attributes of the Remote Check Deposit to create
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deposit_get'
          description: Successful creation of a deposit using remote deposit capture
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
      summary: Create a Remote Check Deposit
      tags:
      - Remote Check Deposit (beta)
      x-external: true
    summary: Remote Check Deposits
  /rdc/deposits/{deposit_id}:
    description: |
      The Remote Check Deposit represents one deposit made using remote deposit capture associated with an account
    get:
      description: Retrieves one deposit made using remote deposit capture associated
        with an account
      operationId: getRdcDeposit
      parameters:
      - description: ID of a deposit for a remote deposit capture
        explode: false
        in: path
        name: deposit_id
        required: true
        schema:
          example: b01db9c7-78f2-4a99-8aca-1231d32f9b96
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deposit_get'
          description: Successful retrieval of a Remote Check Deposit
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
      summary: Get Remote Check Deposit
      tags:
      - Remote Check Deposit (beta)
      x-external: true
    summary: Remote Check Deposit by Id
  /relationships:
    get:
      description: Retrieves paginated list of relationships viewable by the authorized
        requester.
      operationId: listRelationships
      parameters:
      - description: |
          Unique identifier for the business. Multiple IDs can be provided as a comma-separated list.
        explode: false
        in: query
        name: to_business_id
        required: false
        schema:
          example: "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157"
          items:
            format: uuid
            type: string
          type: array
        style: form
      - description: |
          Unique identifier for the person. Multiple IDs can be provided as a comma-separated list.
        explode: false
        in: query
        name: from_person_id
        required: false
        schema:
          example: "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157"
          items:
            format: uuid
            type: string
          type: array
        style: form
      - description: |
          The relationship type, any of the following.  All direct businesses customers need at least one beneficial owner or controlling person.
          * `BENEFICIAL_OWNER_OF` – a person who directly or indirectly owns a portion of the business.
          * `MANAGING_PERSON_OF` – a person who is an officer, director, or controlling person of an organization.
          * `OWNER_OF` – a business with ownership of another business.
        explode: false
        in: query
        name: relationship_type
        required: false
        schema:
          items:
            enum:
            - BENEFICIAL_OWNER_OF
            - MANAGING_PERSON_OF
            - OWNER_OF
            - PAYER_PAYEE
            example: BENEFICIAL_OWNER_OF
            type: string
          type: array
        style: form
      - description: |
          Unique identifier for the business. Multiple IDs can be provided as a comma-separated list.
        explode: false
        in: query
        name: from_business_id
        required: false
        schema:
          example: "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157"
          items:
            format: uuid
            type: string
          type: array
        style: form
      - explode: true
        in: query
        name: page_token
        required: false
        schema:
          description: "Optional pagination token to be provided to retrieve subsequent\
            \ pages, returned from previous get"
          example: a8937a0d
          type: string
        style: form
      - description: Unique resource identifier
        explode: false
        in: query
        name: id
        required: false
        schema:
          items:
            example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
            format: uuid
            type: string
          type: array
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          description: |
            Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
          example: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/relationships_list'
          description: Relationship representation.
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: List relationships
      tags:
      - Relationships
      x-external: true
      x-status: alpha
    post:
      description: Create a party relationship.
      operationId: createRelationship
      parameters:
      - description: "An idempotency key is an arbitrary unique value generated by\
          \ client to detect subsequent retries of the same request. It is recommended\
          \ that a UUID or a similar random identifier be used as an idempotency key.\
          \ A different key must be used for each request, unless it is a retry."
        explode: false
        in: header
        name: Idempotency-Key
        required: false
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/relationship_in'
        description: Party relationship to create.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/relationship_in'
          description: Created relationship representation.
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "409":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource already exists error
        "422":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unprocessable entity request response
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Create a relationship
      tags:
      - Relationships
      x-external: true
      x-status: alpha
    summary: Relationships
  /relationships/{relationship_id}:
    delete:
      description: Delete party relationship by ID.
      operationId: deleteRelationship
      parameters:
      - description: Relationship ID.
        explode: false
        in: path
        name: relationship_id
        required: true
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/delete_response'
          description: Resource has been deleted
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Delete relationship
      tags:
      - Relationships
      x-external: true
      x-status: alpha
    get:
      description: Get relationship by ID.
      operationId: getRelationship
      parameters:
      - description: Relationship ID.
        explode: false
        in: path
        name: relationship_id
        required: true
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/relationship_in'
          description: Relationship representation.
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Get relationship
      tags:
      - Relationships
      x-external: true
      x-status: alpha
    patch:
      description: Update relationship by ID.
      operationId: updateRelationship
      parameters:
      - description: Relationship ID.
        explode: false
        in: path
        name: relationship_id
        required: true
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        style: simple
      - description: "An idempotency key is an arbitrary unique value generated by\
          \ client to detect subsequent retries of the same request. It is recommended\
          \ that a UUID or a similar random identifier be used as an idempotency key.\
          \ A different key must be used for each request, unless it is a retry."
        explode: false
        in: header
        name: Idempotency-Key
        required: false
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/patch_relationship_in'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/patch_relationship_in'
          description: Updated relationship representation.
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "409":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource already exists error
        "422":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unprocessable entity request response
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Update relationship
      tags:
      - Relationships
      x-external: true
      x-status: alpha
    summary: Relationship
  /spend_controls:
    get:
      description: |
        List spend controls
      operationId: listSpendControls
      parameters:
      - description: return results with an amount limit greater than or equal to
          this
        explode: true
        in: query
        name: amount_limit_gte
        required: false
        schema:
          minimum: 0
          type: integer
        style: form
      - description: return results with these comma-separated IDs
        explode: false
        in: query
        name: id
        required: false
        schema:
          example: "c833e6c6-5c15-4719-90e9-7a6682c483d3,ef17356c-69b0-446e-ae2f-72ab59eeb544"
          items:
            format: uuid
            type: string
          type: array
        style: form
      - description: return results with an amount limit less than or equal to this
        explode: true
        in: query
        name: amount_limit_lte
        required: false
        schema:
          minimum: 0
          type: integer
        style: form
      - description: return results that are associated with at least this many accounts
        explode: true
        in: query
        name: num_related_accounts_gte
        required: false
        schema:
          minimum: 0
          type: integer
        style: form
      - description: return results that are associated with this many accounts
        explode: true
        in: query
        name: num_related_accounts
        required: false
        schema:
          minimum: 0
          type: integer
        style: form
      - description: return results that are associated with at most this many accounts
        explode: true
        in: query
        name: num_related_accounts_lte
        required: false
        schema:
          minimum: 0
          type: integer
        style: form
      - description: |
          Specifies the sort order for returned Spend Controls.
        explode: false
        in: query
        name: sort_by
        required: false
        schema:
          items:
            enum:
            - amount_limit:asc
            - amount_limit:desc
            - is_active:asc
            - is_active:desc
            - last_modified_time:asc
            - last_modified_time:desc
            - name:asc
            - name:desc
            - num_related_accounts:asc
            - num_related_accounts:desc
            type: string
          type: array
        style: form
      - explode: true
        in: query
        name: payment_type
        required: false
        schema:
          $ref: '#/components/schemas/payment_type'
        style: form
      - description: return results that match this name
        explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: direction
        required: false
        schema:
          $ref: '#/components/schemas/spend_control_direction'
        style: form
      - description: return results that match this active status
        explode: true
        in: query
        name: is_active
        required: false
        schema:
          type: boolean
        style: form
      - description: return results matching this account ID
        explode: true
        in: query
        name: account_id
        required: false
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        style: form
      - description: return results matching this amount limit
        explode: true
        in: query
        name: amount_limit
        required: false
        schema:
          format: int64
          minimum: 0
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/spend_control_response_list'
          description: Spend control details
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "422":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unprocessable entity request response
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: List Spend Controls
      tags:
      - Spend Controls
      x-external: true
    post:
      description: |
        Create a spend control
      operationId: createSpendControl
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/spend_control'
        description: Details of the spend control to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/spend_control_response'
          description: Spend control details
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "422":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unprocessable entity request response
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Create Spend Control
      tags:
      - Spend Controls
      x-external: true
  /spend_controls/{spend_control_id}:
    get:
      description: |
        Get spend control
      operationId: getSpendControl
      parameters:
      - explode: false
        in: path
        name: spend_control_id
        required: true
        schema:
          $ref: '#/components/schemas/spend_control_id'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/spend_control_response'
          description: Spend control details
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "422":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unprocessable entity request response
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Get Spend Control
      tags:
      - Spend Controls
      x-external: true
    patch:
      description: |
        Update spend control
      operationId: updateSpendControl
      parameters:
      - explode: false
        in: path
        name: spend_control_id
        required: true
        schema:
          $ref: '#/components/schemas/spend_control_id'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/spend_control_update_request'
        description: Fields to update
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/spend_control_response'
          description: Spend control details
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "422":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unprocessable entity request response
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Update Spend Control
      tags:
      - Spend Controls
      x-external: true
  /statements:
    get:
      description: Gets a list of statement summaries for an account.
      operationId: listStatements
      parameters:
      - explode: true
        in: query
        name: page_token
        required: false
        schema:
          description: "Optional pagination token to be provided to retrieve subsequent\
            \ pages, returned from previous get"
          example: a8937a0d
          type: string
        style: form
      - description: The account's unique identifier provided by Synctera
        explode: true
        in: query
        name: account_id
        required: true
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          description: |
            Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
          example: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/statement_list'
          description: List of statements for a given account
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: List statements
      tags:
      - Statements
      x-external: true
    summary: Statements
  /statements/{statement_id}:
    get:
      description: Gets a full statement by its ID.
      operationId: getStatement
      parameters:
      - description: The unique identifier of a statement
        explode: false
        in: path
        name: statement_id
        required: true
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/statement'
          description: statement
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Get a statement
      tags:
      - Statements
      x-external: true
    summary: Statements
  /statements/{statement_id}/transactions:
    get:
      description: Gets the list of transactions for a statement's period.
      operationId: getStatementTransactions
      parameters:
      - description: The unique identifier of a statement
        explode: false
        in: path
        name: statement_id
        required: true
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        style: simple
      - explode: true
        in: query
        name: page_token
        required: false
        schema:
          description: "Optional pagination token to be provided to retrieve subsequent\
            \ pages, returned from previous get"
          example: a8937a0d
          type: string
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          description: |
            Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
          example: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/transaction_list'
          description: List of transactions for a given statement.
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Get a statement's transactions
      tags:
      - Statements
      x-external: true
    summary: Statements
  /transactions/internal_transfer:
    post:
      description: |-
        An internal transfer is an payment between two accounts within the same Fintech.

        By default, the payment is posted immediately. To indicate that you want to separate the authorization from the completion of the payment, use `capture_mode` = `MANUAL`. In that case, a separate call to update the status of the transfer will be required to complete the payment.
      operationId: createInternalTransfer
      parameters:
      - description: "An idempotency key is an arbitrary unique value generated by\
          \ client to detect subsequent retries of the same request. It is recommended\
          \ that a UUID or a similar random identifier be used as an idempotency key.\
          \ A different key must be used for each request, unless it is a retry."
        explode: false
        in: header
        name: Idempotency-Key
        required: false
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/internal_transfer'
        description: Internal transfer request body
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internal_transfer_response'
          description: Internal transfer response
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "422":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unprocessable entity request response
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Create an internal transfer
      tags:
      - Internal Transfer
      x-external: true
    summary: Initiate an internal account-to-account transfer
  /transactions/internal_transfer/{id}:
    description: Returns details about an internal transfer.
    get:
      description: Get an internal transfer auth by ID
      operationId: getInternalTransferByID
      parameters:
      - description: Transaction ID
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 472341e0-ea3e-41a1-96bc-fd0185e1eac8
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internal_transfer_response'
          description: Internal transfer response
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "422":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unprocessable entity request response
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Get an internal transfer
      tags:
      - Internal Transfer
      x-external: true
    patch:
      description: |-
        Update an internal transfer.

        This is only relevant when committing or cancelling an internal transfer authorization (created with `capture_mode` = `MANUAL`) that hasn't already been completed.
      operationId: updateInternalTransferByID
      parameters:
      - description: Transaction ID
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 472341e0-ea3e-41a1-96bc-fd0185e1eac8
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/internal_transfer_patch'
        description: Internal transfer request body
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internal_transfer_response'
          description: Internal transfer response
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "422":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unprocessable entity request response
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Update an internal transfer
      tags:
      - Internal Transfer
      x-external: true
    summary: Get an internal transfer by ID
  /transactions/pending:
    description: |
      Pending transactions represent a "hold" of a paricular amount on an account balance.
    get:
      description: |
        Get paginated list of pending transactions matching the provided filters
      operationId: listPendingTransactions
      parameters:
      - description: Include transactions from sub-accounts when listing transactions
          for a given account
        explode: true
        in: query
        name: include_child_transactions
        required: false
        schema:
          type: boolean
        style: form
      - description: Card ID
        explode: true
        in: query
        name: card_id
        required: false
        schema:
          example: 6dc0397d-1aba-4be9-9582-895a7a887d49
          format: uuid
          type: string
        style: form
      - description: Only display transactions matching the given type
        explode: true
        in: query
        name: type
        required: false
        schema:
          type: string
        style: form
      - description: Only display transactions with a posting date greater than from_date
        explode: true
        in: query
        name: from_date
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: Only display transactions with a posting date less than or equal
          to to_date
        explode: true
        in: query
        name: to_date
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: Only display holds linked to the provided transaction id
        explode: true
        in: query
        name: transaction_id
        required: false
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        style: form
      - description: The status of the transaction
        explode: false
        in: query
        name: status
        required: false
        schema:
          example: "PENDING,PARTCLEARED"
          items:
            type: string
          type: array
        style: form
      - description: Account ID
        explode: true
        in: query
        name: account_id
        required: false
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        style: form
      - description: Transaction Idempotency Key(s). Multiple keys can be provided
          as a comma-separated list.
        explode: false
        in: query
        name: idempotency_key
        required: false
        schema:
          example: "ba313a66-cbb6-4bc3-aa37-6548448ecb32,cadb3dd1-feb0-42c3-b545-afbbfa99eb7f"
          items:
            type: string
          type: array
        style: form
      - description: Account number
        explode: true
        in: query
        name: account_no
        required: false
        schema:
          type: string
        style: form
      - description: Hide "JIT funding" transactions from results
        explode: true
        in: query
        name: exclude_jit_transactions
        required: false
        schema:
          type: boolean
        style: form
      - explode: true
        in: query
        name: page_token
        required: false
        schema:
          description: "Optional pagination token to be provided to retrieve subsequent\
            \ pages, returned from previous get"
          example: a8937a0d
          type: string
        style: form
      - description: Reference ID
        explode: true
        in: query
        name: reference_id
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          description: |
            Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
          example: 100
          minimum: 1
          type: integer
        style: form
      - description: Only display transactions matching the given subtype
        explode: true
        in: query
        name: subtype
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pending_transactions'
          description: Paginated list of pending transactions
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "422":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unprocessable entity request response
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: List pending transactions
      tags:
      - Transactions
      x-external: true
    summary: List pending transactions
  /transactions/pending/{id}:
    description: |
      A pending transaction represent a "hold" of a paricular amount on an account balance.
    get:
      description: |
        Get a pending transaction by its uuid
      operationId: getPendingTransactionByID
      parameters:
      - description: Transaction ID
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 472341e0-ea3e-41a1-96bc-fd0185e1eac8
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pending_transaction'
          description: Pending Transaction
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "422":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unprocessable entity request response
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Get a pending transaction
      tags:
      - Transactions
      x-external: true
    summary: Get pending transaction
  /transactions/posted:
    description: |
      Posted transactions represent a completed money movement.
    get:
      description: |
        Get paginated list of posted transactions matching the provided filters
      operationId: listPostedTransactions
      parameters:
      - description: Include transactions from sub-accounts when listing transactions
          for a given account
        explode: true
        in: query
        name: include_child_transactions
        required: false
        schema:
          type: boolean
        style: form
      - description: Transaction UUID(s). Multiple UUIDs can be provided as a comma-separated
          list.
        explode: false
        in: query
        name: uuid
        required: false
        schema:
          example: "ba313a66-cbb6-4bc3-aa37-6548448ecb32,cadb3dd1-feb0-42c3-b545-afbbfa99eb7f"
          items:
            format: uuid
            type: string
          type: array
        style: form
      - description: Card ID
        explode: true
        in: query
        name: card_id
        required: false
        schema:
          example: 6dc0397d-1aba-4be9-9582-895a7a887d49
          format: uuid
          type: string
        style: form
      - description: Only display transactions matching the given type
        explode: true
        in: query
        name: type
        required: false
        schema:
          type: string
        style: form
      - description: Only display transactions with a posting date greater than from_date
        explode: true
        in: query
        name: from_date
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: Only display transactions with a posting date less than or equal
          to to_date
        explode: true
        in: query
        name: to_date
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: Account ID
        explode: true
        in: query
        name: account_id
        required: false
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        style: form
      - description: Transaction Idempotency Key(s). Multiple keys can be provided
          as a comma-separated list.
        explode: false
        in: query
        name: idempotency_key
        required: false
        schema:
          example: "ba313a66-cbb6-4bc3-aa37-6548448ecb32,cadb3dd1-feb0-42c3-b545-afbbfa99eb7f"
          items:
            type: string
          type: array
        style: form
      - description: Account number
        explode: true
        in: query
        name: account_no
        required: false
        schema:
          type: string
        style: form
      - description: Hide "JIT funding" transactions from results
        explode: true
        in: query
        name: exclude_jit_transactions
        required: false
        schema:
          type: boolean
        style: form
      - explode: true
        in: query
        name: page_token
        required: false
        schema:
          description: "Optional pagination token to be provided to retrieve subsequent\
            \ pages, returned from previous get"
          example: a8937a0d
          type: string
        style: form
      - description: Reference ID
        explode: true
        in: query
        name: reference_id
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          description: |
            Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
          example: 100
          minimum: 1
          type: integer
        style: form
      - description: Only display transactions matching the given subtype
        explode: true
        in: query
        name: subtype
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/posted_transactions'
          description: Paginated list of posted transactions
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "422":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unprocessable entity request response
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: List posted transactions
      tags:
      - Transactions
      x-external: true
    summary: List posted transactions
  /transactions/posted/{id}:
    description: |
      A posted transaction represents a completed money movement.
    get:
      description: |
        Get a posted transaction by its uuid
      operationId: getPostedTransactionByID
      parameters:
      - description: Transaction ID
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 472341e0-ea3e-41a1-96bc-fd0185e1eac8
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/posted_transaction'
          description: Posted Transaction
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "422":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unprocessable entity request response
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Get a posted transaction
      tags:
      - Transactions
      x-external: true
    summary: Get posted transaction
  /verifications:
    get:
      description: List customer verification results.
      operationId: listVerifications1
      parameters:
      - description: |
          The type of verification run. Multiple values can be provided as a comma-separated list.
        explode: false
        in: query
        name: verification_type
        required: false
        schema:
          items:
            $ref: '#/components/schemas/verification_type1'
          type: array
        style: form
      - description: |
          Unique identifier for the business. Multiple IDs can be provided as a comma-separated list.
        explode: false
        in: query
        name: business_id
        required: false
        schema:
          example: "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157"
          items:
            format: uuid
            type: string
          type: array
        style: form
      - description: "If true, include old (inactive) records as well."
        explode: true
        in: query
        name: include_history
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: |
          Unique identifier for the resource. Multiple IDs can be provided as a comma-separated list.
        explode: false
        in: query
        name: id
        required: false
        schema:
          example: "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157"
          items:
            format: uuid
            type: string
          type: array
        style: form
      - explode: true
        in: query
        name: page_token
        required: false
        schema:
          description: "Optional pagination token to be provided to retrieve subsequent\
            \ pages, returned from previous get"
          example: a8937a0d
          type: string
        style: form
      - description: |
          The result of the verification that was run on the party. Multiple values can be provided as a comma-separated list.
        explode: false
        in: query
        name: result
        required: false
        schema:
          items:
            $ref: '#/components/schemas/verification_result'
          type: array
        style: form
      - description: |
          Unique identifier for the person. Multiple IDs can be provided as a comma-separated list.
        explode: false
        in: query
        name: person_id
        required: false
        schema:
          example: "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157"
          items:
            format: uuid
            type: string
          type: array
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          description: |
            Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
          example: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/verification_list'
          description: List verifications.
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: List verifications
      tags:
      - KYC/KYB Verifications
      x-external: true
      x-status: alpha
    post:
      description: |
        Upload evidence of an externally performed KYC/KYB.  You may use your own KYC/KYB provider and upload evidence of that result to Synctera instead of using Synctera's providers.
      operationId: createVerification
      parameters:
      - description: "An idempotency key is an arbitrary unique value generated by\
          \ client to detect subsequent retries of the same request. It is recommended\
          \ that a UUID or a similar random identifier be used as an idempotency key.\
          \ A different key must be used for each request, unless it is a retry."
        explode: false
        in: header
        name: Idempotency-Key
        required: false
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/verification'
        description: Verification result to create.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/verification'
          description: Created verification.
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Create a verification
      tags:
      - KYC/KYB Verifications
      x-external: true
      x-status: alpha
  /verifications/adhoc:
    description: |
      Check if an individual is on any watchlists. Intended for use before a transfer payment, to ensure that the payee is not flagged.
    post:
      operationId: verifyAdHoc
      parameters:
      - description: "An idempotency key is an arbitrary unique value generated by\
          \ client to detect subsequent retries of the same request. It is recommended\
          \ that a UUID or a similar random identifier be used as an idempotency key.\
          \ A different key must be used for each request, unless it is a retry."
        explode: false
        in: header
        name: Idempotency-Key
        required: false
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/adhoc_verification_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/adhoc_verification_response'
          description: successful check
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Check if an individual is on any watchlists
      tags:
      - KYC/KYB Verifications
      x-external: true
    summary: Check if an individual is on any watchlists
  /verifications/verify:
    post:
      description: |
        Initiate identity verification and run the specified identity checks.

        Verifying a personal customer requires that the following fields already be set:
        * `first_name`
        * `last_name`
        * `dob`
        * `email`
        * `phone_number`
        * `legal_address`
        * `ssn`

        Verifying a business customer requires that the following fields already be set:
        * `entity_name`
        * `legal_address`
      operationId: verify
      parameters:
      - description: "An idempotency key is an arbitrary unique value generated by\
          \ client to detect subsequent retries of the same request. It is recommended\
          \ that a UUID or a similar random identifier be used as an idempotency key.\
          \ A different key must be used for each request, unless it is a retry."
        explode: false
        in: header
        name: Idempotency-Key
        required: false
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/verification_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/verify_response'
          description: Created identity request.
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Verify a customer's identity
      tags:
      - KYC/KYB Verifications
      x-external: true
      x-status: alpha
  /verifications/{verification_id}:
    get:
      description: Get customer verification result.
      operationId: getVerification1
      parameters:
      - description: Verification's unique identifier.
        explode: false
        in: path
        name: verification_id
        required: true
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/verification'
          description: Verification representation.
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Get verification
      tags:
      - KYC/KYB Verifications
      x-external: true
      x-status: alpha
  /webhook_secrets:
    delete:
      description: "Revoke the existing webhook secret. If this is called at the rolling\
        \ secret time, then both old and new secrets will be revoked"
      operationId: revokeSecret
      parameters:
      - explode: true
        in: query
        name: old_secret_only
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          description: Secret has been revoked
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Revoke the secret
      tags:
      - Webhooks
      x-external: true
    post:
      description: Create a webhook secret. The secret will be used to verify all
        subsequent webhook request signature.
      operationId: createSecret
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createSecret_201_response'
          description: Webhook secret response
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "409":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource already exists error
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Create a secret
      tags:
      - Webhooks
      x-external: true
    put:
      description: Replace an existing webhook secret immediately or as part of rotation.
        This new secret will be used to verify all subsequent webhook request signature.
      operationId: replaceSecret
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/replaceSecret_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/replaceSecret_200_response'
          description: Webhook secret response
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Replace an existing secret
      tags:
      - Webhooks
      x-external: true
  /webhooks:
    get:
      description: List all webhooks
      operationId: listWebhooks
      parameters:
      - explode: true
        in: query
        name: page_token
        required: false
        schema:
          description: "Optional pagination token to be provided to retrieve subsequent\
            \ pages, returned from previous get"
          example: a8937a0d
          type: string
        style: form
      - explode: true
        in: query
        name: is_enabled_only
        required: false
        schema:
          type: boolean
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          description: |
            Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
          example: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhook_list'
          description: List of webhooks
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: List webhooks
      tags:
      - Webhooks
      x-external: true
    post:
      callbacks:
        WebhookRequest:
          '{$request.body#/url}':
            post:
              operationId: webhookRequest_Post
              requestBody:
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/webhook_request_object'
                required: true
              responses:
                "200":
                  description: Your server returns this code if it accepts the webhook
                    request object
              summary: Send event details to integrator using registered URL
              x-callback-request: true
      description: Create a webhook
      operationId: createWebhook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook'
        description: Webhook to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhook'
          description: Created webhook
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Create a webhook
      tags:
      - Webhooks
      x-external: true
  /webhooks/trigger:
    post:
      description: Trigger an specific event for webhook testing purpose
      operationId: triggerEvent
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/triggerEvent_request'
        description: Provide an event type to trigger
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/event_trigger'
          description: Triggered webhook event
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Trigger an event
      tags:
      - Webhooks
      x-external: true
  /webhooks/{webhook_id}:
    delete:
      description: Delete a webhook
      operationId: deleteWebhook
      parameters:
      - description: Webhook ID
        explode: false
        in: path
        name: webhook_id
        required: true
        schema:
          example: b01db9c7-78f2-4a99-8aca-1231d32f9b96
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/delete_response'
          description: Resource has been deleted
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Delete a webhook
      tags:
      - Webhooks
      x-external: true
    get:
      description: Get a webhook
      operationId: getWebhook
      parameters:
      - description: Webhook ID
        explode: false
        in: path
        name: webhook_id
        required: true
        schema:
          example: b01db9c7-78f2-4a99-8aca-1231d32f9b96
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhook'
          description: Webhook
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Get a webhook
      tags:
      - Webhooks
      x-external: true
    put:
      description: Update a webhook
      operationId: updateWebhook
      parameters:
      - description: Webhook ID
        explode: false
        in: path
        name: webhook_id
        required: true
        schema:
          example: b01db9c7-78f2-4a99-8aca-1231d32f9b96
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook'
        description: Webhook to update
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhook'
          description: Created webhook
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Update a webhook
      tags:
      - Webhooks
      x-external: true
  /webhooks/{webhook_id}/events:
    get:
      description: List webhook events. This response will not associate with the
        event response history.
      operationId: listEvents
      parameters:
      - description: Start time of date-time range filtering for events. Date is inclusive
          and should be in UTC timezone 00:00:00.
        explode: true
        in: query
        name: start_time
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - deprecated: true
        description: End date of date range filtering for events. Date is inclusive
          and should be in UTC timezone 00:00:00.. end_date is alias of end_time and
          is deprecated. Please use end_time instead.
        explode: true
        in: query
        name: end_date
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: End time of date-time range filtering for events. Date is inclusive
          and should be in UTC timezone 00:00:00.
        explode: true
        in: query
        name: end_time
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Webhook ID
        explode: false
        in: path
        name: webhook_id
        required: true
        schema:
          example: b01db9c7-78f2-4a99-8aca-1231d32f9b96
          format: uuid
          type: string
        style: simple
      - explode: true
        in: query
        name: page_token
        required: false
        schema:
          description: "Optional pagination token to be provided to retrieve subsequent\
            \ pages, returned from previous get"
          example: a8937a0d
          type: string
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          description: |
            Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
          example: 100
          minimum: 1
          type: integer
        style: form
      - deprecated: true
        description: Start date of date range filtering for events. Date is inclusive
          and should be in UTC timezone 00:00:00.. start_date is alias of start_time
          and is deprecated. Please use start_time instead.
        explode: true
        in: query
        name: start_date
        required: false
        schema:
          format: date
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/event_list'
          description: List of webhook events
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: List webhook events
      tags:
      - Webhooks
      x-external: true
  /webhooks/{webhook_id}/events/{event_id}:
    get:
      description: Get webhook event by ID
      operationId: getEvent
      parameters:
      - description: Webhook event ID
        explode: false
        in: path
        name: event_id
        required: true
        schema:
          example: b01db9c7-78f2-4a99-8aca-1231d32f9b96
          format: uuid
          type: string
        style: simple
      - description: Webhook ID
        explode: false
        in: path
        name: webhook_id
        required: true
        schema:
          example: b01db9c7-78f2-4a99-8aca-1231d32f9b96
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/event'
          description: Webhook event
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Get webhook event
      tags:
      - Webhooks
      x-external: true
  /webhooks/{webhook_id}/events/{event_id}/resend:
    post:
      description: Resend a webhook event
      operationId: resendEvent
      parameters:
      - description: "Delay the event triggering in seconds. Events are checked once\
          \ a minute, so a short delay may not result in an immedidate resend."
        explode: true
        in: query
        name: delay
        required: false
        schema:
          maximum: 3600
          minimum: 0
          type: integer
        style: form
      - description: Webhook event ID
        explode: false
        in: path
        name: event_id
        required: true
        schema:
          example: b01db9c7-78f2-4a99-8aca-1231d32f9b96
          format: uuid
          type: string
        style: simple
      - description: Webhook ID
        explode: false
        in: path
        name: webhook_id
        required: true
        schema:
          example: b01db9c7-78f2-4a99-8aca-1231d32f9b96
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/event'
          description: Resent webhook event
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Resend an event
      tags:
      - Webhooks
      x-external: true
  /wipe:
    post:
      description: |
        Delete the customer and account related data, leaving other configuration data intact. This enables use cases such as bulk data deletion between tests.
        Data associated with below resources will be deleted:
          - Accounts
          - Account applications
          - ACH
          - Businesses
          - Cards
          - Card images
          - Cases
          - Customers
          - Disclosures
          - External Accounts
          - Internal Accounts
          - Payment schedules and history
          - Persons
          - RDC
          - Relationships
          - Transactions (including for Internal Accounts)
          - Verifications

        Data associated with below resources will be retained:
          - Account Templates
          - API Keys
          - Bank/Partner data
          - Card product
          - Disclosure document records
          - Egress config
          - Groups
          - PII contract with vault
          - Roles
          - Users
          - Webhooks
      operationId: wipeWorkspace
      responses:
        "204":
          description: successfully wiped resources for a particular tenant
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Delete data
      tags:
      - Sandbox Wipe
      x-external: true
    summary: Wipe
  /wires:
    get:
      description: Get paginated list of wires
      operationId: listWires
      parameters:
      - description: The unique identifier of the originating account.
        explode: true
        in: query
        name: originating_account_id
        required: false
        schema:
          example: b01db9c7-78f2-4a99-8aca-1231d32f9b96
          format: uuid
          type: string
        style: form
      - explode: true
        in: query
        name: status
        required: false
        schema:
          description: Optional query parameter that can be use to filter the list
            of returned wires by transfer status
          enum:
          - BLOCKED
          - POSTED
          - READY
          example: READY
          type: string
        style: form
      - description: The unique identifier of a customer.
        explode: true
        in: query
        name: customer_id
        required: false
        schema:
          example: b01db9c7-78f2-4a99-8aca-1231d32f9b96
          format: uuid
          type: string
        style: form
      - description: The unique identifier of the receiving account.
        explode: true
        in: query
        name: receiving_account_id
        required: false
        schema:
          example: b01db9c7-78f2-4a99-8aca-1231d32f9b96
          format: uuid
          type: string
        style: form
      - explode: true
        in: query
        name: page_token
        required: false
        schema:
          description: "Optional pagination token to be provided to retrieve subsequent\
            \ pages, returned from previous get"
          example: a8937a0d
          type: string
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          description: |
            Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
          example: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/wire_list'
          description: List of wires
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: List wires
      tags:
      - Wires
      x-external: true
    post:
      description: Create an outgoing wire transfer
      operationId: createWire
      parameters:
      - description: "An idempotency key is an arbitrary unique value generated by\
          \ client to detect subsequent retries of the same request. It is recommended\
          \ that a UUID or a similar random identifier be used as an idempotency key.\
          \ A different key must be used for each request, unless it is a retry."
        explode: false
        in: header
        name: Idempotency-Key
        required: false
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/wire_request'
        description: Wire transfer request
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/wire'
          description: Created wire
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "422":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unprocessable entity request response
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Send a wire
      tags:
      - Wires
      x-external: true
    summary: Wire
  /wires/{wire_id}:
    get:
      description: Get a wire by id
      operationId: getWire
      parameters:
      - description: The unique identifier of a wire transfer.
        explode: false
        in: path
        name: wire_id
        required: true
        schema:
          example: b01db9c7-78f2-4a99-8aca-1231d32f9b96
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/wire'
          description: wire
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Get a wire by id
      tags:
      - Wires
      x-external: true
    patch:
      description: Cancel an outgoing tranfer
      operationId: cancelWire
      parameters:
      - description: The unique identifier of a wire transfer.
        explode: false
        in: path
        name: wire_id
        required: true
        schema:
          example: b01db9c7-78f2-4a99-8aca-1231d32f9b96
          format: uuid
          type: string
        style: simple
      - description: "An idempotency key is an arbitrary unique value generated by\
          \ client to detect subsequent retries of the same request. It is recommended\
          \ that a UUID or a similar random identifier be used as an idempotency key.\
          \ A different key must be used for each request, unless it is a retry."
        explode: false
        in: header
        name: Idempotency-Key
        required: false
        schema:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/update_transfer'
        description: wire to update
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/wire'
          description: Updated wire
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: BadRequest
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden error
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Resource not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error
      summary: Cancel an outgoing wire
      tags:
      - Wires
      x-external: true
    summary: Wire
components:
  parameters:
    account_id:
      description: Account ID
      explode: true
      in: query
      name: account_id
      required: false
      schema:
        example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
        format: uuid
        type: string
      style: form
    account_id1:
      description: Unique identifier for the account.
      explode: true
      in: query
      name: account_id
      required: false
      schema:
        example: b01db9c7-78f2-4a99-8aca-1231d32f9b96
        format: uuid
        type: string
      style: form
    account_id2:
      description: The account's unique identifier provided by Synctera
      explode: true
      in: query
      name: account_id
      required: true
      schema:
        example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
        format: uuid
        type: string
      style: form
    account_id_path:
      description: Unique identifier for the account.
      explode: false
      in: path
      name: account_id
      required: true
      schema:
        example: 57826c51-e4ff-4e57-9558-08cab6b963c7
        format: uuid
        type: string
      style: simple
    account_id_query:
      description: |
        Account ID(s). Multiple IDs can be provided as a comma-separated list.
      explode: false
      in: query
      name: id
      required: false
      schema:
        example: "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157"
        items:
          format: uuid
          type: string
        type: array
      style: form
    account_id_query1:
      description: Originating account IDs. Multiple IDs can be provided as a comma-separated
        list.
      explode: false
      in: query
      name: account_id
      required: false
      schema:
        example: "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157"
        items:
          format: uuid
          type: string
        type: array
      style: form
    account_id_query2:
      description: return results matching this account ID
      explode: true
      in: query
      name: account_id
      required: false
      schema:
        example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
        format: uuid
        type: string
      style: form
    account_id_query_array:
      description: Account ID(s). Multiple IDs can be provided as a comma-separated
        list.
      explode: false
      in: query
      name: account_id
      required: false
      schema:
        items:
          $ref: '#/components/schemas/account_id'
        type: array
      style: form
    account_no:
      description: Account number
      explode: true
      in: query
      name: account_no
      required: false
      schema:
        type: string
      style: form
    account_number:
      description: |
        Account number(s). Multiple account numbers can be provided as a comma-separated list.
        When only a single account number is provided, any * characters in the string are wildcards, and match any characters.
      explode: false
      in: query
      name: account_number
      required: false
      schema:
        example: "2345678108180014864"
        items:
          type: string
        type: array
      style: form
    account_sort_by_query:
      description: |
        Specifies the sort order for the returned accounts.
      explode: false
      in: query
      name: sort_by
      required: false
      schema:
        items:
          enum:
          - account_number:asc
          - account_number:desc
          - account_type:asc
          - account_type:desc
          - first_name:asc
          - first_name:desc
          - last_name:asc
          - last_name:desc
          type: string
        type: array
      style: form
    account_type_query:
      description: |
        The type of the account
      explode: true
      in: query
      name: account_type
      required: false
      schema:
        $ref: '#/components/schemas/account_type'
      style: form
    acknowledging_person_id:
      description: |
        Return only disclosures that have the specified acknowledging_person_id. Multiple IDs can be provided as a comma-separated list.
      explode: false
      in: query
      name: acknowledging_person_id
      required: false
      schema:
        example: "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157"
        items:
          format: uuid
          type: string
        type: array
      style: form
    alert_id:
      description: Unique identifier for this watchlist alert.
      explode: false
      in: path
      name: alert_id
      required: true
      schema:
        example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
        format: uuid
        type: string
      style: simple
    amount_limit_gte_query:
      description: return results with an amount limit greater than or equal to this
      explode: true
      in: query
      name: amount_limit_gte
      required: false
      schema:
        minimum: 0
        type: integer
      style: form
    amount_limit_lte_query:
      description: return results with an amount limit less than or equal to this
      explode: true
      in: query
      name: amount_limit_lte
      required: false
      schema:
        minimum: 0
        type: integer
      style: form
    amount_limit_query:
      description: return results matching this amount limit
      explode: true
      in: query
      name: amount_limit
      required: false
      schema:
        format: int64
        minimum: 0
        type: integer
      style: form
    author_user_id_query:
      explode: true
      in: query
      name: author_user_id
      required: false
      schema:
        description: Only return notes where the author user ID matches the specified
          string.
        example: 64438afd-fa20-4010-a573-2bbdca77cdb6
        format: uuid
        type: string
      style: form
    ban_status:
      description: |
        (alpha) Ban status of the person. Multiple values can be provided as a comma-seperated list of the following:
        * `ALLOWED` – person is not banned or suspended
        * `SUSPENDED` - person is suspended
        * `BANNED` – person is banned
      explode: false
      in: query
      name: ban_status
      required: false
      schema:
        items:
          $ref: '#/components/schemas/ban_status'
        type: array
      style: form
    barcode_query:
      explode: true
      in: query
      name: barcode
      required: false
      schema:
        $ref: '#/components/schemas/barcode'
      style: form
    business_id_path:
      description: Business's unique identifier.
      explode: false
      in: path
      name: business_id
      required: true
      schema:
        example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
        format: uuid
        type: string
      style: simple
    business_id_query:
      description: |
        Unique identifier for the business. Multiple IDs can be provided as a comma-separated list.
      explode: false
      in: query
      name: business_id
      required: false
      schema:
        example: "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157"
        items:
          format: uuid
          type: string
        type: array
      style: form
    business_id_query1:
      explode: true
      in: query
      name: business_id
      required: false
      schema:
        $ref: '#/components/schemas/business_id'
      style: form
    business_id_query_array:
      description: "A list of business unique identifiers, with a comma separating\
        \ any values."
      explode: false
      in: query
      name: business_id
      required: false
      schema:
        items:
          $ref: '#/components/schemas/business_id2'
        type: array
      style: form
    business_sort_by_query:
      description: |
        Specifies the sort order for the returned businesses.
      explode: false
      in: query
      name: sort_by
      required: false
      schema:
        items:
          enum:
          - creation_time:asc
          - creation_time:desc
          - entity_name:asc
          - entity_name:desc
          - last_updated_time:asc
          - last_updated_time:desc
          type: string
        type: array
      style: form
    card_brand_query:
      description: The brand of a card product
      explode: true
      in: query
      name: card_brand
      required: false
      schema:
        $ref: '#/components/schemas/card_brand'
      style: form
    card_id:
      explode: false
      in: path
      name: card_id
      required: true
      schema:
        $ref: '#/components/schemas/card_id'
      style: simple
    card_id1:
      description: Card ID
      explode: true
      in: query
      name: card_id
      required: false
      schema:
        example: 6dc0397d-1aba-4be9-9582-895a7a887d49
        format: uuid
        type: string
      style: form
    card_id2:
      description: Card ID
      explode: true
      in: query
      name: card_id
      required: false
      schema:
        example: 6dc0397d-1aba-4be9-9582-895a7a887d49
        format: uuid
        type: string
      style: form
    card_id_query:
      explode: true
      in: query
      name: card_id
      required: false
      schema:
        $ref: '#/components/schemas/card_id'
      style: form
    card_image_id:
      explode: false
      in: path
      name: card_image_id
      required: true
      schema:
        $ref: '#/components/schemas/card_image_id'
      style: simple
    card_product_id_query:
      explode: true
      in: query
      name: card_product_id
      required: false
      schema:
        $ref: '#/components/schemas/card_product_id'
      style: form
    card_sort_by_query:
      description: |
        Specifies the sort order for the returned cards.
      explode: false
      in: query
      name: sort_by
      required: false
      schema:
        items:
          enum:
          - account_id:asc
          - account_id:desc
          - card_brand:asc
          - card_brand:desc
          - card_product_id:asc
          - card_product_id:desc
          - card_status:asc
          - card_status:desc
          - card_type:asc
          - card_type:desc
          - customer_id:asc
          - customer_id:desc
          - expiration_date:asc
          - expiration_date:desc
          - form:asc
          - form:desc
          - last_four:asc
          - last_four:desc
          type: string
        type: array
      style: form
    card_status_query:
      description: The status of a card
      explode: true
      in: query
      name: card_status
      required: false
      schema:
        $ref: '#/components/schemas/card_status'
      style: form
    card_type_query:
      description: Indicates the type of card
      explode: true
      in: query
      name: card_type
      required: false
      schema:
        $ref: '#/components/schemas/card_type'
      style: form
    cash_pickup_id:
      description: The unique identifier of a cash pickup
      explode: false
      in: path
      name: cash_pickup_id
      required: true
      schema:
        example: 1d2a39f5-e39b-4cd4-96a1-8727187469a9
        format: uuid
        type: string
      style: simple
    customer_id:
      description: The unique identifier of a customer.
      explode: true
      in: query
      name: customer_id
      required: false
      schema:
        example: b01db9c7-78f2-4a99-8aca-1231d32f9b96
        format: uuid
        type: string
      style: form
    customer_id_path:
      description: The customer's unique identifier
      explode: false
      in: path
      name: customer_id
      required: true
      schema:
        $ref: '#/components/schemas/customer_id'
      style: simple
    customer_id_query:
      explode: true
      in: query
      name: customer_id
      required: false
      schema:
        $ref: '#/components/schemas/customer_id1'
      style: form
    customer_id_query1:
      description: The IDs of customers who created the payment schedules. Multiple
        IDs can be provided as a comma-separated list.
      explode: false
      in: query
      name: customer_id
      required: false
      schema:
        example: "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157"
        items:
          format: uuid
          type: string
        type: array
      style: form
    customer_id_query_array:
      explode: false
      in: query
      name: customer_id
      required: false
      schema:
        items:
          $ref: '#/components/schemas/customer_id1'
        type: array
      style: form
    customer_id_query_array1:
      description: "A list of customer unique identifiers, with a comma separating\
        \ any values."
      explode: false
      in: query
      name: customer_id
      required: false
      schema:
        items:
          $ref: '#/components/schemas/customer_id'
        type: array
      style: form
    customer_id_query_one:
      deprecated: true
      description: The customer's unique identifier
      explode: true
      in: query
      name: customer_id
      required: false
      schema:
        $ref: '#/components/schemas/customer_id'
      style: form
    customer_id_query_required:
      explode: true
      in: query
      name: customer_id
      required: true
      schema:
        $ref: '#/components/schemas/customer_id1'
      style: form
    customer_sort_by_query:
      description: |
        Specifies the sort order for the returned customers.
      explode: false
      in: query
      name: sort_by
      required: false
      schema:
        items:
          enum:
          - creation_time:asc
          - creation_time:desc
          - first_name:asc
          - first_name:desc
          - last_name:asc
          - last_name:desc
          - last_updated_time:asc
          - last_updated_time:desc
          type: string
        type: array
      style: form
    customer_type:
      description: |
        Customer type of the account, BUSINESS or PERSONAL
      explode: true
      in: query
      name: customer_type
      required: false
      schema:
        $ref: '#/components/schemas/customer_type'
      style: form
    deposit_id_path:
      description: ID of a deposit for a remote deposit capture
      explode: false
      in: path
      name: deposit_id
      required: true
      schema:
        example: b01db9c7-78f2-4a99-8aca-1231d32f9b96
        format: uuid
        type: string
      style: simple
    digital_wallet_token_id:
      explode: false
      in: path
      name: digital_wallet_token_id
      required: true
      schema:
        $ref: '#/components/schemas/digital_wallet_token_id'
      style: simple
    digital_wallet_token_state_query:
      description: The status of the Digital Wallet Token
      explode: true
      in: query
      name: token_state
      required: false
      schema:
        $ref: '#/components/schemas/digital_wallet_token_state'
      style: form
    disclosure_id:
      description: The unique identifier for the disclosure.
      explode: false
      in: path
      name: disclosure_id
      required: true
      schema:
        example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
        format: uuid
        type: string
      style: simple
    document_id:
      description: The unique identifier of the document.
      explode: false
      in: path
      name: document_id
      required: true
      schema:
        example: b01db9c7-78f2-4a99-8aca-1231d32f9b96
        format: uuid
        type: string
      style: simple
    document_version:
      description: The document version.
      explode: false
      in: path
      name: document_version
      required: true
      schema:
        example: 1
        type: integer
      style: simple
    eft_ca_amount_query:
      description: Amount of the transfer
      explode: true
      in: query
      name: amount
      required: false
      schema:
        example: "100"
        type: string
      style: form
    eft_ca_bank_id_query:
      description: Bank ID of the transfer
      explode: true
      in: query
      name: bank_id
      required: false
      schema:
        type: string
      style: form
    eft_ca_currency_query:
      description: Currency of the transfer
      explode: true
      in: query
      name: currency
      required: false
      schema:
        example: CAD
        type: string
      style: form
    eft_ca_customer_id_query:
      description: Customer ID of the transfer
      explode: true
      in: query
      name: customer_id
      required: false
      schema:
        type: string
      style: form
    eft_ca_dc_sign_query:
      description: DC sign of the transfer
      explode: true
      in: query
      name: dc_sign
      required: false
      schema:
        type: string
      style: form
    eft_ca_destination_account_id_query:
      description: Destination account ID
      explode: true
      in: query
      name: destination_account_id
      required: false
      schema:
        example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
        type: string
      style: form
    eft_ca_destination_account_number_query:
      description: Destination account number
      explode: true
      in: query
      name: destination_account_number
      required: false
      schema:
        example: "987654321"
        type: string
      style: form
    eft_ca_destination_account_owner_name_query:
      description: Destination account owner name
      explode: true
      in: query
      name: destination_account_owner_name
      required: false
      schema:
        example: Jane Joe
        type: string
      style: form
    eft_ca_effective_date_query:
      description: Effective date of the transfer
      explode: true
      in: query
      name: effective_date
      required: false
      schema:
        type: string
      style: form
    eft_ca_from_effective_date_query:
      description: From effective date of the transfer
      explode: true
      in: query
      name: from_effective_date
      required: false
      schema:
        type: string
      style: form
    eft_ca_from_posting_date_query:
      description: From posting date of the transfer
      explode: true
      in: query
      name: from_posting_date
      required: false
      schema:
        type: string
      style: form
    eft_ca_id_path:
      description: EFT Canada Transfer ID
      explode: false
      in: path
      name: id
      required: true
      schema:
        format: uuid
        type: string
      style: simple
    eft_ca_id_query:
      description: EFT Canada Transfer ID
      explode: true
      in: query
      name: id
      required: false
      schema:
        type: string
      style: form
    eft_ca_is_same_day_query:
      description: Is same day transfer
      explode: true
      in: query
      name: is_same_day
      required: false
      schema:
        type: boolean
      style: form
    eft_ca_max_amount_query:
      description: Maximum amount of the transfer
      explode: true
      in: query
      name: max_amount
      required: false
      schema:
        example: 100
        minimum: 1
        type: integer
      style: form
    eft_ca_min_amount_query:
      description: Minimum amount of the transfer
      explode: true
      in: query
      name: min_amount
      required: false
      schema:
        example: 100
        minimum: 1
        type: integer
      style: form
    eft_ca_network_status_query:
      description: Network status of the transfer
      explode: true
      in: query
      name: network_status
      required: false
      schema:
        type: string
      style: form
    eft_ca_originating_account_id_query:
      description: Originating account ID
      explode: true
      in: query
      name: originating_account_id
      required: false
      schema:
        example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
        type: string
      style: form
    eft_ca_originating_account_number_query:
      description: Originating account number
      explode: true
      in: query
      name: originating_account_number
      required: false
      schema:
        example: "123456789"
        type: string
      style: form
    eft_ca_originating_account_owner_name_query:
      description: Originating account owner name
      explode: true
      in: query
      name: originating_account_owner_name
      required: false
      schema:
        type: string
      style: form
    eft_ca_partner_id_query:
      description: Partner ID of the transfer
      explode: true
      in: query
      name: partner_id
      required: false
      schema:
        type: string
      style: form
    eft_ca_posting_date_query:
      description: Posting date of the transfer
      explode: true
      in: query
      name: posting_date
      required: false
      schema:
        type: string
      style: form
    eft_ca_reference_id_query:
      description: Reference ID of the transfer
      explode: true
      in: query
      name: reference_id
      required: false
      schema:
        type: string
      style: form
    eft_ca_status_query:
      description: Status of the transfer
      explode: true
      in: query
      name: status
      required: false
      schema:
        type: string
      style: form
    eft_ca_subtype_query:
      description: Subtype of the transfer
      explode: true
      in: query
      name: subtype
      required: false
      schema:
        type: string
      style: form
    eft_ca_to_effective_date_query:
      description: To effective date of the transfer
      explode: true
      in: query
      name: to_effective_date
      required: false
      schema:
        type: string
      style: form
    eft_ca_to_posting_date_query:
      description: To posting date of the transfer
      explode: true
      in: query
      name: to_posting_date
      required: false
      schema:
        type: string
      style: form
    email:
      explode: true
      in: query
      name: email
      required: false
      schema:
        description: "Only return resources where the email field matches the specified\
          \ string. Any * characters in the string are wildcards, and match any characters."
        example: john.doe@example.com
        type: string
      style: form
    emboss_name_query:
      description: emboss name
      explode: true
      in: query
      name: emboss_name
      required: false
      schema:
        type: string
      style: form
    employment_id:
      description: Unique ID for the employment record.
      explode: false
      in: path
      name: employment_id
      required: true
      schema:
        example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
        format: uuid
        type: string
      style: simple
    encryption:
      description: "Whether the file should be encrypted and access restricted, e.g.\
        \ if the file contains PII"
      explode: true
      in: query
      name: encryption
      required: false
      schema:
        enum:
        - NOT_REQUIRED
        - REQUIRED
        type: string
      style: form
    entity_name:
      explode: true
      in: query
      name: entity_name
      required: false
      schema:
        description: "Only return resources where the `entity_name` field matches\
          \ the specified string. Any `*` characters in the string are wildcards,\
          \ and match any characters."
        example: Apex Corporation
        type: string
      style: form
    exclude_jit_transactions:
      description: Hide "JIT funding" transactions from results
      explode: true
      in: query
      name: exclude_jit_transactions
      required: false
      schema:
        type: boolean
      style: form
    expiration_date_query:
      description: The date representing when the card would expire at
      explode: true
      in: query
      name: expiration_date
      required: false
      schema:
        example: 2006-01-02
        format: date
        type: string
      style: form
    external_account_id:
      description: External Account ID
      explode: false
      in: path
      name: external_account_id
      required: true
      schema:
        example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
        format: uuid
        type: string
      style: simple
    external_account_id_query:
      description: |
        External account ID(s). Multiple IDs can be provided as a comma-separated list.
      explode: false
      in: query
      name: id
      required: false
      schema:
        example: "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157"
        items:
          format: uuid
          type: string
        type: array
      style: form
    external_card_id:
      description: The unique identifier of an external card
      explode: false
      in: path
      name: external_card_id
      required: true
      schema:
        example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
        format: uuid
        type: string
      style: simple
    external_card_id_query:
      explode: true
      in: query
      name: external_card_id
      required: false
      schema:
        $ref: '#/components/schemas/external_card_id'
      style: form
    external_card_status_query:
      explode: true
      in: query
      name: status
      required: false
      schema:
        $ref: '#/components/schemas/external_card_status'
      style: form
    external_transfer_type_query:
      description: The type of an external transfer
      explode: true
      in: query
      name: type
      required: false
      schema:
        $ref: '#/components/schemas/transfer_type'
      style: form
    first_chosen_name:
      explode: true
      in: query
      name: first_name
      required: false
      schema:
        description: "Only return resources where the first_name or chosen_name field\
          \ matches the specified string. Any * characters in the string are wildcards,\
          \ and match any characters."
        example: Alice
        type: string
      style: form
    force_vendor_refresh:
      description: |
        Force a vendor refresh of the external account.
      explode: true
      in: query
      name: force_vendor_refresh
      required: false
      schema:
        type: boolean
      style: form
    form_query:
      description: The format of the card
      explode: true
      in: query
      name: form
      required: false
      schema:
        $ref: '#/components/schemas/form'
      style: form
    from_business_id_query:
      description: |
        Unique identifier for the business. Multiple IDs can be provided as a comma-separated list.
      explode: false
      in: query
      name: from_business_id
      required: false
      schema:
        example: "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157"
        items:
          format: uuid
          type: string
        type: array
      style: form
    from_date:
      description: Only display transactions with a posting date greater than from_date
      explode: true
      in: query
      name: from_date
      required: false
      schema:
        format: date
        type: string
      style: form
    from_person_id_query:
      description: |
        Unique identifier for the person. Multiple IDs can be provided as a comma-separated list.
      explode: false
      in: query
      name: from_person_id
      required: false
      schema:
        example: "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157"
        items:
          format: uuid
          type: string
        type: array
      style: form
    gateway_id:
      explode: false
      in: path
      name: gateway_id
      required: true
      schema:
        $ref: '#/components/schemas/gateway_id'
      style: simple
    has_accounts_query:
      description: |
        Filter on resources that have an account(s)
      explode: true
      in: query
      name: has_accounts
      required: false
      schema:
        type: boolean
      style: form
    id:
      description: Unique resource identifier
      explode: false
      in: query
      name: id
      required: false
      schema:
        items:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        type: array
      style: form
    id1:
      description: Transaction ID
      explode: false
      in: path
      name: id
      required: true
      schema:
        example: 472341e0-ea3e-41a1-96bc-fd0185e1eac8
        format: uuid
        type: string
      style: simple
    id2:
      description: Transaction ID
      explode: false
      in: path
      name: id
      required: true
      schema:
        example: 472341e0-ea3e-41a1-96bc-fd0185e1eac8
        format: uuid
        type: string
      style: simple
    id_query:
      description: |
        Unique identifier for the business. Multiple IDs can be provided as a comma-separated list.
      explode: false
      in: query
      name: id
      required: false
      schema:
        example: "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157"
        items:
          format: uuid
          type: string
        type: array
      style: form
    id_query1:
      description: |
        Unique identifier for the resource. Multiple IDs can be provided as a comma-separated list.
      explode: false
      in: query
      name: id
      required: false
      schema:
        example: "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157"
        items:
          format: uuid
          type: string
        type: array
      style: form
    id_query2:
      description: IDs. Multiple IDs can be provided as a comma-separated list.
      explode: false
      in: query
      name: id
      required: false
      schema:
        example: "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157"
        items:
          format: uuid
          type: string
        type: array
      style: form
    id_query3:
      description: |
        Unique identifier for the resource. Multiple IDs can be provided as a comma-separated list.
      explode: false
      in: query
      name: id
      required: false
      schema:
        example: "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157"
        items:
          format: uuid
          type: string
        type: array
      style: form
    id_query4:
      description: return results with these comma-separated IDs
      explode: false
      in: query
      name: id
      required: false
      schema:
        example: "c833e6c6-5c15-4719-90e9-7a6682c483d3,ef17356c-69b0-446e-ae2f-72ab59eeb544"
        items:
          format: uuid
          type: string
        type: array
      style: form
    id_query5:
      description: |
        Unique identifier for the resource. Multiple IDs can be provided as a comma-separated list.
      explode: false
      in: query
      name: id
      required: false
      schema:
        example: "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157"
        items:
          format: uuid
          type: string
        type: array
      style: form
    idempotency_key:
      description: "An idempotency key is an arbitrary unique value generated by client\
        \ to detect subsequent retries of the same request. It is recommended that\
        \ a UUID or a similar random identifier be used as an idempotency key. A different\
        \ key must be used for each request, unless it is a retry."
      explode: false
      in: header
      name: Idempotency-Key
      required: false
      schema:
        example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
        type: string
      style: simple
    idempotency_key_query:
      description: Transaction Idempotency Key(s). Multiple keys can be provided as
        a comma-separated list.
      explode: false
      in: query
      name: idempotency_key
      required: false
      schema:
        example: "ba313a66-cbb6-4bc3-aa37-6548448ecb32,cadb3dd1-feb0-42c3-b545-afbbfa99eb7f"
        items:
          type: string
        type: array
      style: form
    include_child_transactions:
      description: Include transactions from sub-accounts when listing transactions
        for a given account
      explode: true
      in: query
      name: include_child_transactions
      required: false
      schema:
        type: boolean
      style: form
    include_history:
      description: "If true, include old (inactive) records as well."
      explode: true
      in: query
      name: include_history
      required: false
      schema:
        default: false
        type: boolean
      style: form
    interest_product_id_query:
      description: Interest product ID that accounts associate with. Multiple IDs
        can be provided as a comma-separated list.
      explode: true
      in: query
      name: interest_product_id
      required: false
      schema:
        type: string
      style: form
    internal_account_id_path:
      description: Unique identifier for the internal account.
      explode: false
      in: path
      name: internal_account_id
      required: true
      schema:
        example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
        format: uuid
        type: string
      style: simple
    internal_account_id_query:
      description: |
        Internal account ID(s). Multiple IDs can be provided as a comma-separated list.
      explode: false
      in: query
      name: id
      required: false
      schema:
        example: "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157"
        items:
          format: uuid
          type: string
        type: array
      style: form
    international_wire_status:
      description: The status of the international wire transfer.
      explode: true
      in: query
      name: international_wire_status
      required: false
      schema:
        $ref: '#/components/schemas/international_wire_status'
      style: form
    is_active_query:
      description: return results that match this active status
      explode: true
      in: query
      name: is_active
      required: false
      schema:
        type: boolean
      style: form
    is_customer:
      description: "If true, show only customers. If false, show non-customer parties."
      explode: true
      in: query
      name: is_customer
      required: false
      schema:
        type: boolean
      style: form
    last_four_query:
      description: The last 4 digits of the card PAN
      explode: true
      in: query
      name: last_four
      required: false
      schema:
        example: "1234"
        pattern: "^\\d{4}$"
        type: string
      style: form
    last_name:
      explode: true
      in: query
      name: last_name
      required: false
      schema:
        description: "Only return resources where the last_name field matches the\
          \ specified string. Any * characters in the string are wildcards, and match\
          \ any characters."
        example: Smith
        type: string
      style: form
    license_id:
      description: License record identifier
      explode: false
      in: path
      name: license_id
      required: true
      schema:
        example: ba4f84d7-fa20-4010-a573-0bbca57ab589
        format: uuid
        type: string
      style: simple
    limit:
      explode: true
      in: query
      name: limit
      required: false
      schema:
        default: 100
        description: |
          Maximum number of objects to return per page. If the limit is greater than 100, then it will be set to 100.
        example: 100
        minimum: 1
        type: integer
      style: form
    linked_account_id_query:
      description: |
        Return only resources that are linked to the specified backing account in balance_floor or balance_ceiling. Multiple IDs can be provided as a comma-separated list.
      explode: false
      in: query
      name: linked_account_id
      required: false
      schema:
        example: "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157"
        items:
          format: uuid
          type: string
        type: array
      style: form
    max_age:
      description: |
        Optional relative age of a balance in seconds. If the balance is older than the requested seconds it will fail. This field is optional for most financial institutions, but required for some, so you should probably send it.
      explode: true
      in: query
      name: max_age
      required: false
      schema:
        example: 600
        format: int64
        minimum: 0
        type: integer
      style: form
    merchant_guid:
      description: The unique id for a `merchant`.
      example: MCH-7ed79542-884d-2b1b-dd74-501c5cc9d25b
      explode: false
      in: path
      name: merchant_guid
      required: true
      schema:
        type: string
      style: simple
    monitoring_alert_id:
      description: Unique identifier for this monitoring alert.
      explode: false
      in: path
      name: alert_id
      required: true
      schema:
        example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
        format: uuid
        type: string
      style: simple
    monitoring_subscription_id:
      description: Unique identifier for monitoring subscription.
      explode: false
      in: path
      name: subscription_id
      required: true
      schema:
        example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
        format: uuid
        type: string
      style: simple
    name_query:
      description: return results that match this name
      explode: true
      in: query
      name: name
      required: false
      schema:
        type: string
      style: form
    nickname_query:
      description: |
        Nickname of the account
      explode: true
      in: query
      name: nickname
      required: false
      schema:
        type: string
      style: form
    note_id_path:
      description: The unique identifier of a note
      explode: false
      in: path
      name: note_id
      required: true
      schema:
        example: 64438afd-fa20-4010-a573-2bbdca77cdb6
        format: uuid
        type: string
      style: simple
    note_id_query:
      description: |
        Return the note with the specified id. Multiple IDs can be provided as a comma-separated list.
      explode: false
      in: query
      name: id
      required: false
      schema:
        example: "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157"
        items:
          format: uuid
          type: string
        type: array
      style: form
    num_related_accounts_gte_query:
      description: return results that are associated with at least this many accounts
      explode: true
      in: query
      name: num_related_accounts_gte
      required: false
      schema:
        minimum: 0
        type: integer
      style: form
    num_related_accounts_lte_query:
      description: return results that are associated with at most this many accounts
      explode: true
      in: query
      name: num_related_accounts_lte
      required: false
      schema:
        minimum: 0
        type: integer
      style: form
    num_related_accounts_query:
      description: return results that are associated with this many accounts
      explode: true
      in: query
      name: num_related_accounts
      required: false
      schema:
        minimum: 0
        type: integer
      style: form
    originating_account_id:
      description: The unique identifier of the originating account.
      explode: true
      in: query
      name: originating_account_id
      required: false
      schema:
        example: b01db9c7-78f2-4a99-8aca-1231d32f9b96
        format: uuid
        type: string
      style: form
    originating_account_id_query_array:
      explode: false
      in: query
      name: originating_account_id
      required: false
      schema:
        items:
          $ref: '#/components/schemas/originating_account_id'
        type: array
      style: form
    overdraft_account_id_query:
      deprecated: true
      description: |
        Overdraft account ID(s). Multiple IDs can be provided as a comma-separated list.
        This parameter is deprecated and will be removed in a future API version. Use linked_account_id instead.
      explode: false
      in: query
      name: overdraft_account_id
      required: false
      schema:
        example: "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157"
        items:
          format: uuid
          type: string
        type: array
      style: form
    overflow_account_id_query:
      deprecated: true
      description: |
        Overflow account ID(s). Multiple IDs can be provided as a comma-separated list.
        This parameter is deprecated and will be removed in a future API version. Use linked_account_id instead.
      explode: false
      in: query
      name: overflow_account_id
      required: false
      schema:
        example: "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157"
        items:
          format: uuid
          type: string
        type: array
      style: form
    page_token:
      explode: true
      in: query
      name: page_token
      required: false
      schema:
        description: "Optional pagination token to be provided to retrieve subsequent\
          \ pages, returned from previous get"
        example: a8937a0d
        type: string
      style: form
    payment_schedule_id_query:
      description: Payment schedule IDs. Multiple IDs can be provided as a comma-separated
        list.
      explode: false
      in: query
      name: schedule_id
      required: false
      schema:
        example: "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157"
        items:
          format: uuid
          type: string
        type: array
      style: form
    payment_type_query:
      explode: true
      in: query
      name: payment_type
      required: false
      schema:
        $ref: '#/components/schemas/payment_type'
      style: form
    person_id_path:
      description: Person's unique identifier.
      explode: false
      in: path
      name: person_id
      required: true
      schema:
        example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
        format: uuid
        type: string
      style: simple
    person_id_query:
      description: |
        Unique identifier for the person. Multiple IDs can be provided as a comma-separated list.
      explode: false
      in: query
      name: person_id
      required: false
      schema:
        example: "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157"
        items:
          format: uuid
          type: string
        type: array
      style: form
    person_sort_by_query:
      description: |
        Specifies the sort order for the returned persons.
      explode: false
      in: query
      name: sort_by
      required: false
      schema:
        items:
          enum:
          - creation_time:asc
          - creation_time:desc
          - first_name:asc
          - first_name:desc
          - last_name:asc
          - last_name:desc
          - last_updated_time:asc
          - last_updated_time:desc
          type: string
        type: array
      style: form
    personal_id_id_path:
      description: UUID for a personal identifier.
      explode: false
      in: path
      name: personal_id_id
      required: true
      schema:
        example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
        format: uuid
        type: string
      style: simple
    phone_number:
      explode: true
      in: query
      name: phone_number
      required: false
      schema:
        description: "Only return resources where the phone_number field matches the\
          \ specified string. Phone numbers use the E.164 format e.g. +19178675309.\
          \ Any * characters in the string are wildcards, and match any characters."
        example: +12065550100
        type: string
      style: form
    postal_code_query:
      description: The postal code of a card user
      explode: true
      in: query
      name: postal_code
      required: false
      schema:
        example: "49633"
        type: string
      style: form
    product_id:
      description: Account Product ID
      explode: false
      in: path
      name: product_id
      required: true
      schema:
        example: 92113c51-e4ff-4e57-9558-08cab6b963dd
        format: uuid
        type: string
      style: simple
    receiving_account_id:
      description: The unique identifier of the receiving account.
      explode: true
      in: query
      name: receiving_account_id
      required: false
      schema:
        example: b01db9c7-78f2-4a99-8aca-1231d32f9b96
        format: uuid
        type: string
      style: form
    reference_id:
      description: Reference ID
      explode: true
      in: query
      name: reference_id
      required: false
      schema:
        type: string
      style: form
    related_resource_id:
      description: Return documents that are related to resources with the specified
        ID
      explode: true
      in: query
      name: related_resource_id
      required: false
      schema:
        example: b01db9c7-78f2-4a99-8aca-1231d32f9b96
        format: uuid
        type: string
      style: form
    related_resource_id_query:
      description: Only return notes that have a related resource with the specified
        ID.
      explode: false
      in: query
      name: related_resource_id
      required: false
      schema:
        example: "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157"
        items:
          type: string
        type: array
      style: form
    related_resource_type:
      description: Return documents that are related to resources of the specified
        type
      explode: true
      in: query
      name: related_resource_type
      required: false
      schema:
        $ref: '#/components/schemas/related_resource_type'
      style: form
    related_resource_type_query:
      description: Only return notes that have a related resource with the specified
        type.
      explode: true
      in: query
      name: related_resource_type
      required: false
      schema:
        $ref: '#/components/schemas/related_resource_type1'
      style: form
    relationship_id:
      description: Relationship ID of the account associate with the account entity
      explode: false
      in: path
      name: relationship_id
      required: true
      schema:
        example: 1a582c51-e4ff-4e57-9558-08cab6b963aa
        format: uuid
        type: string
      style: simple
    relationship_id1:
      description: Relationship ID.
      explode: false
      in: path
      name: relationship_id
      required: true
      schema:
        example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
        format: uuid
        type: string
      style: simple
    relationship_type:
      description: |
        The relationship type, any of the following.  All direct businesses customers need at least one beneficial owner or controlling person.
        * `BENEFICIAL_OWNER_OF` – a person who directly or indirectly owns a portion of the business.
        * `MANAGING_PERSON_OF` – a person who is an officer, director, or controlling person of an organization.
        * `OWNER_OF` – a business with ownership of another business.
      explode: false
      in: query
      name: relationship_type
      required: false
      schema:
        items:
          enum:
          - BENEFICIAL_OWNER_OF
          - MANAGING_PERSON_OF
          - OWNER_OF
          - PAYER_PAYEE
          example: BENEFICIAL_OWNER_OF
          type: string
        type: array
      style: form
    restricted:
      description: Is External Account Restricted for Access
      explode: true
      in: query
      name: restricted
      required: false
      schema:
        type: boolean
      style: form
    result_query:
      description: |
        The result of the verification that was run on the party. Multiple values can be provided as a comma-separated list.
      explode: false
      in: query
      name: result
      required: false
      schema:
        items:
          $ref: '#/components/schemas/verification_result'
        type: array
      style: form
    risk_rating_id:
      description: Risk Rating ID
      explode: false
      in: path
      name: risk_rating_id
      required: true
      schema:
        example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
        format: uuid
        type: string
      style: simple
    schedule_id_path:
      description: Payment schedule ID
      explode: false
      in: path
      name: payment_schedule_id
      required: true
      schema:
        format: uuid
        type: string
      style: simple
    spend_control_direction_query:
      explode: true
      in: query
      name: direction
      required: false
      schema:
        $ref: '#/components/schemas/spend_control_direction'
      style: form
    spend_control_id:
      explode: false
      in: path
      name: spend_control_id
      required: true
      schema:
        $ref: '#/components/schemas/spend_control_id'
      style: simple
    spend_control_ids_query:
      description: |
        Spend Control ID(s). Multiple IDs can be provided as a comma-separated list.
        Return only resources that use the specified Spend Controls.
      explode: false
      in: query
      name: spend_control_ids
      required: false
      schema:
        $ref: '#/components/schemas/spend_control_ids'
      style: form
    spend_control_sort_by_query:
      description: |
        Specifies the sort order for returned Spend Controls.
      explode: false
      in: query
      name: sort_by
      required: false
      schema:
        items:
          enum:
          - amount_limit:asc
          - amount_limit:desc
          - is_active:asc
          - is_active:desc
          - last_modified_time:asc
          - last_modified_time:desc
          - name:asc
          - name:desc
          - num_related_accounts:asc
          - num_related_accounts:desc
          type: string
        type: array
      style: form
    ssn_last_4:
      explode: true
      in: query
      name: ssn_last_4
      required: false
      schema:
        description: Only return resources where the last 4 characters of the SSN
          match the specified value.
        example: "6789"
        maxLength: 4
        minLength: 4
        type: string
      style: form
    statement_id:
      description: The unique identifier of a statement
      explode: false
      in: path
      name: statement_id
      required: true
      schema:
        example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
        format: uuid
        type: string
      style: simple
    status:
      explode: true
      in: query
      name: status
      required: false
      schema:
        $ref: '#/components/schemas/status'
      style: form
    status1:
      explode: true
      in: query
      name: status
      required: false
      schema:
        description: |
          Status of the business. One of the following:
          * `PROSPECT` – a potential customer, used for information-gathering and disclosures.
          * `ACTIVE` –  is an integrator defined status.  Integrators should set a business to active if they believe the person to be qualified for conducting business.  Synctera will combine this status with other statuses such a verification to determine if the business is eligible for specific actions such as initiating transactions or issuing a card.
          * `FROZEN` – business's actions are blocked for security, legal, or other reasons.
          * `SANCTION` – business is on a sanctions list and should be carefully monitored.
          * `DISSOLVED` – an inactive status indicating a business entity has filed articles of dissolution or a certificate of termination to terminate its existence.
          * `CANCELLED` – an inactive status indicating that a business entity has filed a cancellation or has failed to file its periodic report after notice of forfeiture of its rights to do business.
          * `SUSPENDED` – an inactive status indicating that the business entity has lost the right to operate in it's registered jurisdiction.
          * `MERGED` – an inactive status indicating that the business entity has terminated existence by merging into another entity.
          * `INACTIVE` – an inactive status indicating that the business entity is no longer active.
          * `CONVERTED` – An inactive status indicating that the business entity has been converted to another type of business entity in the same jurisdiction.
        enum:
        - ACTIVE
        - CANCELLED
        - CONVERTED
        - DISSOLVED
        - FROZEN
        - INACTIVE
        - MERGED
        - PROSPECT
        - SANCTION
        - SUSPENDED
        type: string
      style: form
    status2:
      explode: true
      in: query
      name: status
      required: false
      schema:
        description: Only return resources where with the specified status.
        enum:
        - ACTIVE
        - DECEASED
        - DENIED
        - DORMANT
        - ESCHEAT
        - FROZEN
        - INACTIVE
        - PROSPECT
        - SANCTION
        example: ACTIVE
        type: string
      style: form
    status3:
      description: The status of the transaction
      explode: false
      in: query
      name: status
      required: false
      schema:
        example: "PENDING,PARTCLEARED"
        items:
          type: string
        type: array
      style: form
    status4:
      explode: true
      in: query
      name: status
      required: false
      schema:
        $ref: '#/components/schemas/status2'
      style: form
    status5:
      description: The status of the transaction
      explode: false
      in: query
      name: status
      required: false
      schema:
        example: "PENDING,PARTCLEARED"
        items:
          type: string
        type: array
      style: form
    status6:
      explode: true
      in: query
      name: status
      required: false
      schema:
        description: Optional query parameter that can be use to filter the list of
          returned wires by transfer status
        enum:
        - BLOCKED
        - POSTED
        - READY
        example: READY
        type: string
      style: form
    subscription_id:
      description: Watchlist monitoring subscription ID
      explode: false
      in: path
      name: subscription_id
      required: true
      schema:
        example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
        format: uuid
        type: string
      style: simple
    subtype:
      description: Only display transactions matching the given subtype
      explode: true
      in: query
      name: subtype
      required: false
      schema:
        type: string
      style: form
    template_id:
      description: Account Template ID
      explode: false
      in: path
      name: template_id
      required: true
      schema:
        example: a8943c51-e4ff-4e57-9558-08cab6b963c0
        format: uuid
        type: string
      style: simple
    tenant_id:
      explode: true
      in: query
      name: tenant
      required: false
      schema:
        description: Only return resources owned by the specified tenant
        example: abcdef_ghijkl
        type: string
      style: form
    to_business_id_query:
      description: |
        Unique identifier for the business. Multiple IDs can be provided as a comma-separated list.
      explode: false
      in: query
      name: to_business_id
      required: false
      schema:
        example: "64438afd-fa20-4010-a573-2bbdca77cdb6,84ef251c-ab8f-47a5-bbfd-a16648f95157"
        items:
          format: uuid
          type: string
        type: array
      style: form
    to_date:
      description: Only display transactions with a posting date less than or equal
        to to_date
      explode: true
      in: query
      name: to_date
      required: false
      schema:
        format: date
        type: string
      style: form
    transaction_id:
      description: Transaction ID in the ledger
      explode: false
      in: path
      name: transaction_id
      required: true
      schema:
        example: b01db9c7-78f2-4a99-8aca-1231d32f9b96
        format: uuid
        type: string
      style: simple
    transaction_id1:
      description: Only display holds linked to the provided transaction id
      explode: true
      in: query
      name: transaction_id
      required: false
      schema:
        example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
        format: uuid
        type: string
      style: form
    transaction_id2:
      description: Only display holds linked to the provided transaction id
      explode: true
      in: query
      name: transaction_id
      required: false
      schema:
        example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
        format: uuid
        type: string
      style: form
    transfer_id:
      description: The unique identifier of a transfer
      explode: false
      in: path
      name: transfer_id
      required: true
      schema:
        example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
        format: uuid
        type: string
      style: simple
    type:
      description: The type of documents
      explode: true
      in: query
      name: type
      required: false
      schema:
        $ref: '#/components/schemas/document_type'
      style: form
    type1:
      description: Only display transactions matching the given type
      explode: true
      in: query
      name: type
      required: false
      schema:
        type: string
      style: form
    type2:
      description: Only display transactions matching the given type
      explode: true
      in: query
      name: type
      required: false
      schema:
        type: string
      style: form
    uuid_query:
      description: Transaction UUID(s). Multiple UUIDs can be provided as a comma-separated
        list.
      explode: false
      in: query
      name: uuid
      required: false
      schema:
        example: "ba313a66-cbb6-4bc3-aa37-6548448ecb32,cadb3dd1-feb0-42c3-b545-afbbfa99eb7f"
        items:
          format: uuid
          type: string
        type: array
      style: form
    verification_id:
      description: Unique identifier for the verification.
      explode: false
      in: path
      name: verification_id
      required: true
      schema:
        example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
        format: uuid
        type: string
      style: simple
    verification_id1:
      description: Verification's unique identifier.
      explode: false
      in: path
      name: verification_id
      required: true
      schema:
        example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
        format: uuid
        type: string
      style: simple
    verification_type_query:
      description: |
        The type of verification run. Multiple values can be provided as a comma-separated list.
      explode: false
      in: query
      name: verification_type
      required: false
      schema:
        items:
          $ref: '#/components/schemas/verification_type1'
        type: array
      style: form
    webhook_id:
      description: Webhook ID
      explode: false
      in: path
      name: webhook_id
      required: true
      schema:
        example: b01db9c7-78f2-4a99-8aca-1231d32f9b96
        format: uuid
        type: string
      style: simple
    wire_id:
      description: The unique identifier of a wire transfer.
      explode: false
      in: path
      name: wire_id
      required: true
      schema:
        example: b01db9c7-78f2-4a99-8aca-1231d32f9b96
        format: uuid
        type: string
      style: simple
  responses:
    account_closed:
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/error'
      description: Account has been closed
    already_exists:
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/error'
      description: Resource already exists error
    bad_request:
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/error'
      description: BadRequest
    delete_response:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/delete_response'
      description: Resource has been deleted
    forbidden:
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/error'
      description: Forbidden error
    internal_server_error:
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/error'
      description: Internal server error
    not_found:
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/error'
      description: Resource not found
    unauthorized:
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/error'
      description: Unauthorized
    unprocessable_entity:
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/error'
      description: Unprocessable entity request response
  schemas:
    account:
      anyOf:
      - $ref: '#/components/schemas/account_depository'
      - $ref: '#/components/schemas/account_charge_secured'
      - $ref: '#/components/schemas/account_line_of_credit'
      description: Account
      type: object
    account_access_status:
      description: "Represents whether a customer has frozen their account. `FROZEN`\
        \ is a customer-initiated state meaning that the account will reject all debits,\
        \ typically used for a lost or stolen card."
      enum:
      - ACTIVE
      - FROZEN
      type: string
    account_base:
      properties:
        access_status:
          $ref: '#/components/schemas/account_access_status'
        account_number:
          description: Account number
          maxLength: 50
          readOnly: true
          type: string
        account_number_masked:
          description: "The response will contain the bank fintech ID (3 or 6 digits)\
            \ plus the last 4 digits, with the digits in between replaced with * characters.\
            \ Shadow mode account numbers will not be masked."
          example: 123*****6789
          maxLength: 50
          readOnly: true
          type: string
        account_purpose:
          description: Purpose of the account
          example: This account for the account holder's salary deposit.
          type: string
        account_type:
          $ref: '#/components/schemas/account_type'
        application_id:
          description: |
            The application ID for this account.
          format: uuid
          type: string
        balances:
          description: A list of balances for account based on different type
          items:
            $ref: '#/components/schemas/balance'
          readOnly: true
          type: array
        bank_routing:
          description: Bank routing number
          maxLength: 9
          readOnly: true
          type: string
        creation_time:
          description: Account creation timestamp in RFC3339 format
          format: date-time
          readOnly: true
          type: string
        currency:
          description: Account currency or account settlement currency. ISO 4217 alphabetic
            currency code. Default USD
          example: USD
          pattern: "^[A-Z]{3}$"
          type: string
        customer_ids:
          description: A list of the customer IDs of the account holders.
          items:
            format: uuid
            type: string
          readOnly: true
          type: array
        customer_type:
          $ref: '#/components/schemas/customer_type'
        exchange_rate_type:
          description: Exchange rate type
          example: "M, INTERBANK, CUST"
          maxLength: 10
          type: string
        iban:
          description: International bank account number
          maxLength: 34
          type: string
        id:
          description: Account ID
          format: uuid
          readOnly: true
          type: string
        is_account_pool:
          description: Account is investment (variable balance) account or a multi-balance
            account pool. Default false
          type: boolean
        is_sar_enabled:
          description: A flag to indicate whether SAR generation is enabled.
          readOnly: true
          type: boolean
        last_updated_time:
          description: Timestamp of the last account modification in RFC3339 format
          format: date-time
          readOnly: true
          type: string
        metadata:
          description: User provided account metadata
          type: object
        nickname:
          description: User provided account nickname
          type: string
        status:
          $ref: '#/components/schemas/status'
        swift_code:
          description: SWIFT code
          maxLength: 11
          minLength: 8
          type: string
      type: object
    account_charge_secured:
      allOf:
      - properties:
          note:
            description: Add an optional note when creating or updating a charged
              secured account. A note is required when updating the status to or from
              SUSPENDED
            type: string
            writeOnly: true
          security:
            $ref: '#/components/schemas/security'
          spend_control_ids:
            $ref: '#/components/schemas/spend_control_ids'
        type: object
      - $ref: '#/components/schemas/account_base'
      description: |
        Account representing a secured charge account, e.g. for use in a Smart Charge Card offering.
      type: object
    account_creation:
      allOf:
      - $ref: '#/components/schemas/account'
      - properties:
          account_template_id:
            description: |
              Account template ID.
              If not specified: * `account_type` is *required*. * If there is a single account template of the correct type, that account template
                is automatically used.
              * Otherwise, the request is an error.
            format: uuid
            type: string
          relationships:
            description: List of the relationship for this account to the parties
            items:
              $ref: '#/components/schemas/relationship'
            type: array
        type: object
    account_depository:
      allOf:
      - properties:
          balance_ceiling:
            $ref: '#/components/schemas/balance_ceiling'
          balance_floor:
            $ref: '#/components/schemas/balance_floor'
          fee_product_ids:
            description: A list of fee account products that the current account associates
              with.
            items:
              format: uuid
              type: string
            type: array
          interest_product_id:
            description: |
              An interest account product that the current account associates with.
            format: uuid
            type: string
          note:
            description: Add an optional note when creating or updating a depository
              account. A note is required when updating the status to or from SUSPENDED
            type: string
            writeOnly: true
          overdraft_limit:
            deprecated: true
            description: |
              This field is unused and will be removed in a future API version.
            format: int64
            minimum: 0
            type: integer
          spend_control_ids:
            $ref: '#/components/schemas/spend_control_ids'
          spending_limits:
            $ref: '#/components/schemas/spending_limits'
      - $ref: '#/components/schemas/account_base'
      description: Account representing either a checking or saving account.
      type: object
    account_generic_response:
      example:
        billing_period:
          frequency: ANNUALLY
          start_date: 2022-01-01T00:00:00Z
        creation_time: 2000-01-23T04:56:07.000+00:00
        account_type: null
        close_date: 2000-01-23
        metadata: "{}"
        fee_product_ids:
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        is_wire_enabled: true
        auto_payment_period: 20
        account_purpose: This account for the account holder's salary deposit.
        spend_control_ids:
        - 7d943c51-e4ff-4e57-9558-08cab6b963c7
        - 7d943c51-e4ff-4e57-9558-08cab6b963c7
        - 7d943c51-e4ff-4e57-9558-08cab6b963c7
        - 7d943c51-e4ff-4e57-9558-08cab6b963c7
        - 7d943c51-e4ff-4e57-9558-08cab6b963c7
        minimum_payment: null
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        tenant: abcdef_ghijkl
        open_date: 2000-01-23
        interest_product_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        is_external_card_enabled: true
        overdraft_limit: 0
        swift_code: swift_code
        is_account_pool: true
        restrictions:
          is_past_due: true
          is_account_out_of_area: true
          is_delinquent: true
          is_revoked: true
        application_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        is_card_enabled: true
        last_updated_time: 2000-01-23T04:56:07.000+00:00
        iban: iban
        spending_limits:
          week:
            amount: 0
            transactions: 0
          month:
            amount: 0
            transactions: 0
          lifetime:
            amount: 0
            transactions: 0
          description: description
          day:
            amount: 0
            transactions: 0
          transaction:
            amount: 0
        is_sar_enabled: true
        bank_routing: bank_routing
        status: null
        access_status_last_updated_time: 2000-01-23T04:56:07.000+00:00
        customer_type: null
        account_number: account_number
        is_eft_ca_enabled: true
        access_status: null
        is_ach_enabled: true
        balances:
        - balance: 2399
          type: null
        - balance: 2399
          type: null
        business_ids:
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        security:
          linked_account_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        account_number_masked: 123*****6789
        credit_limit: 2500
        nickname: nickname
        currency: USD
        is_system_auto_pay_enabled: true
        balance_ceiling:
          balance: 0
          linked_account_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          overflow_account_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        balance_floor:
          balance: 6
          linked_account_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          overdraft_account_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        is_p2p_enabled: true
        grace_period: 21
        exchange_rate_type: "M, INTERBANK, CUST"
        is_security: true
        customer_ids:
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        access_status:
          $ref: '#/components/schemas/account_access_status'
        access_status_last_updated_time:
          description: Timestamp of the last modification of the access_status. RFC3339
            format.
          format: date-time
          readOnly: true
          type: string
        account_number:
          description: Account number
          maxLength: 50
          readOnly: true
          type: string
        account_number_masked:
          description: "The response will contain the bank fintech ID (3 or 6 digits)\
            \ plus the last 4 digits, with the digits in between replaced with * characters.\
            \ Shadow mode account numbers will not be masked."
          example: 123*****6789
          maxLength: 50
          readOnly: true
          type: string
        account_purpose:
          description: Purpose of the account
          example: This account for the account holder's salary deposit.
          type: string
        account_type:
          $ref: '#/components/schemas/account_type'
        application_id:
          description: |
            The application ID for this account.
          format: uuid
          type: string
        auto_payment_period:
          description: |
            The number of days past the billing period to initiate an auto payment.  Only applicable for accounts with type `CHARGE_SECURED`, where the account holder has opted in for auto payment functionality. This value must be lower than or equal the `grace_period` setting on the account. If this value is 0, the  auto payment will happen on the same day as the statement is generated.  Auto payment only occurs if regular payments are not received on time.
          example: 20
          maximum: 28
          minimum: 0
          type: integer
        balance_ceiling:
          $ref: '#/components/schemas/balance_ceiling'
        balance_floor:
          $ref: '#/components/schemas/balance_floor'
        balances:
          description: A list of balances for account based on different type
          items:
            $ref: '#/components/schemas/balance'
          readOnly: true
          type: array
        bank_routing:
          description: Bank routing number
          maxLength: 9
          readOnly: true
          type: string
        billing_period:
          $ref: '#/components/schemas/billing_period'
        business_ids:
          description: A list of the business IDs of the account holders.
          items:
            format: uuid
            type: string
          readOnly: true
          type: array
        close_date:
          description: The account close date. This is the bank's posting date when
            the account resource's status was changed to CLOSED or CHARGED_OFF.
          format: date
          readOnly: true
          type: string
        creation_time:
          description: Account creation timestamp in RFC3339 format
          format: date-time
          readOnly: true
          type: string
        credit_limit:
          description: |
            The credit limit for this line of credit account in cents. Minimum is 0.
          example: 2500
          format: int64
          minimum: 0
          type: integer
        currency:
          description: Account currency or account settlement currency. ISO 4217 alphabetic
            currency code. Default USD
          example: USD
          pattern: "^[A-Z]{3}$"
          type: string
        customer_ids:
          description: A list of the customer IDs of the account holders.
          items:
            format: uuid
            type: string
          readOnly: true
          type: array
        customer_type:
          $ref: '#/components/schemas/customer_type'
        exchange_rate_type:
          description: Exchange rate type
          example: "M, INTERBANK, CUST"
          maxLength: 10
          type: string
        fee_product_ids:
          description: A list of fee account products that the current account associates
            with.
          items:
            format: uuid
            type: string
          type: array
        grace_period:
          description: |
            The number of days past the billing period to allow for payment before it is considered due. This directly infers the due date for a payment. The default will be set to 21 days.
          example: 21
          maximum: 28
          minimum: 21
          type: integer
        iban:
          description: International bank account number
          maxLength: 34
          type: string
        id:
          description: Account ID
          format: uuid
          readOnly: true
          type: string
        interest_product_id:
          description: An interest account product that the current account associates
            with.
          format: uuid
          type: string
        is_account_pool:
          description: Account is investment (variable balance) account or a multi-balance
            account pool. Default false
          type: boolean
        is_ach_enabled:
          description: A flag to indicate whether ACH transactions are enabled.
          readOnly: true
          type: boolean
        is_card_enabled:
          description: A flag to indicate whether card transactions are enabled.
          readOnly: true
          type: boolean
        is_eft_ca_enabled:
          description: A flag to indicate whether EFT Canada transactions are enabled.
          readOnly: true
          type: boolean
        is_external_card_enabled:
          description: A flag to indicate whether external card transactions are enabled.
          readOnly: true
          type: boolean
        is_p2p_enabled:
          description: A flag to indicate whether P2P transactions are enabled.
          readOnly: true
          type: boolean
        is_sar_enabled:
          description: A flag to indicate whether SAR generation is enabled.
          readOnly: true
          type: boolean
        is_security:
          description: A flag to indicate whether this account is being used as security
            for another account.
          readOnly: true
          type: boolean
        is_system_auto_pay_enabled:
          description: A flag to indicate whether auto pay feature is enabled.
          type: boolean
        is_wire_enabled:
          description: A flag to indicate whether wire transactions are enabled.
          readOnly: true
          type: boolean
        last_updated_time:
          description: Timestamp of the last account modification in RFC3339 format
          format: date-time
          readOnly: true
          type: string
        metadata:
          description: User provided account metadata
          type: object
        minimum_payment:
          $ref: '#/components/schemas/minimum_payment'
        nickname:
          description: User provided account nickname
          type: string
        open_date:
          description: The account open date. This is the bank's posting date when
            the account resource was created.
          format: date
          readOnly: true
          type: string
        overdraft_limit:
          deprecated: true
          description: |
            This field is unused and will be removed in a future API version.
          format: int64
          minimum: 0
          type: integer
        restrictions:
          $ref: '#/components/schemas/account_restrictions'
        security:
          $ref: '#/components/schemas/security'
        spend_control_ids:
          description: List of spend control IDs to control spending for the account
          items:
            example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
            format: uuid
            type: string
          maxItems: 10
          type: array
        spending_limits:
          $ref: '#/components/schemas/spending_limits'
        status:
          $ref: '#/components/schemas/status'
        swift_code:
          description: SWIFT code
          maxLength: 11
          minLength: 8
          type: string
        tenant:
          description: |
            The id of the tenant containing the resource. This is relevant for Fintechs that have multiple workspaces.
          example: abcdef_ghijkl
          type: string
      type: object
    account_id:
      description: The unique identifier of an account
      example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
      format: uuid
      type: string
    account_identifiers:
      example:
        number: "78277121"
        iban: LI4476584648937N59B00
      properties:
        iban:
          description: |
            The IBAN of the account. Value may be masked, in which case only the last four digits are returned.
          example: LI4476584648937N59B00
          type: string
        number:
          description: |
            The account number. Value may be masked, in which case only the last four digits are returned.
          example: "78277121"
          type: string
      required:
      - number
      title: Identifiers for the account
      type: object
    account_line_of_credit:
      allOf:
      - properties:
          credit_limit:
            description: |
              The credit limit for this line of credit account in cents. Minimum is 0.
            example: 2500
            format: int64
            minimum: 0
            type: integer
          grace_period:
            description: |
              The number of days past the billing period to allow for payment before it is considered due. This directly infers the due date for a payment. The default will be set to 21 days.
            example: 21
            maximum: 28
            minimum: 21
            type: integer
          interest_product_id:
            description: |
              An interest account product that the current account associates with. The account product must have its calculation_method set to COMPOUNDED_DAILY.
            format: uuid
            type: string
          minimum_payment:
            $ref: '#/components/schemas/minimum_payment_partial'
          note:
            description: Add an optional note when creating or updating a line of
              credit account. A note is required when updating the status to or from
              SUSPENDED
            type: string
            writeOnly: true
        type: object
      - $ref: '#/components/schemas/account_base'
      description: Account representing a line of credit account.
      type: object
    account_list:
      allOf:
      - properties:
          accounts:
            description: Array of Accounts
            items:
              $ref: '#/components/schemas/account_generic_response'
            type: array
        required:
        - accounts
        type: object
      - $ref: '#/components/schemas/paginated_response'
    account_product:
      discriminator:
        mapping:
          FEE: '#/components/schemas/fee'
          INTEREST: '#/components/schemas/interest'
        propertyName: product_type
      oneOf:
      - $ref: '#/components/schemas/interest'
      - $ref: '#/components/schemas/fee'
      type: object
    account_product_list:
      allOf:
      - $ref: '#/components/schemas/paginated_response'
      - properties:
          account_products:
            description: Array of account products
            items:
              $ref: '#/components/schemas/account_product'
            type: array
        required:
        - account_products
        type: object
    account_relationship_type:
      description: Relationship type
      enum:
      - ACCOUNT_HOLDER
      - AUTHORIZED_SIGNER
      - AUTHORIZED_USER
      - JOINT_ACCOUNT_HOLDER
      - PRIMARY_ACCOUNT_HOLDER
      type: string
    account_restrictions:
      description: Conditions that restrict the use of the account.
      example:
        is_past_due: true
        is_account_out_of_area: true
        is_delinquent: true
        is_revoked: true
      properties:
        is_account_out_of_area:
          description: |
            A flag to indicate whether any of the account holders of the account are out of the supported countries. Can only be set by the Synctera platform.
          type: boolean
        is_delinquent:
          description: |
            A flag to indicate whether a credit account is greater than 30 days past due on minimum payments. Delinquent accounts will be unable to spend until overdue amount is paid. Can only be set by the Synctera platform.
          type: boolean
        is_past_due:
          description: |
            A flag to indicate whether a credit account is past due on minimum payments.  Can only be set by the Synctera platform.
          type: boolean
        is_revoked:
          description: |
            A flag to indicates whether a credit account has been revoked (greater than 90 days past due). Revoked accounts will be unable to spend and  no longer accrue interest.  Can only be set by the Synctera platform.
          type: boolean
      type: object
    account_routing:
      example:
        correspondent_bank_details:
        - swift_code: BNGRGRAAXXX
          bank_address:
            country_code: US
            city: New York
            address_line_1: 100 Main St.
            address_line_2: Suite 99
            state: NY
            postal_code: "28620"
          bank_name: Bank of Greece
        - swift_code: BNGRGRAAXXX
          bank_address:
            country_code: US
            city: New York
            address_line_1: 100 Main St.
            address_line_2: Suite 99
            state: NY
            postal_code: "28620"
          bank_name: Bank of Greece
        eft_routing_number: "02101140"
        swift_code: CHASUS3AXXX
        bank_address:
          country_code: US
          city: New York
          address_line_1: 100 Main St.
          address_line_2: Suite 99
          state: NY
          postal_code: "28620"
        bank_countries:
        - US
        - US
        bank_name: Chase
        wire_routing_number: "756392185"
        eft_ca_routing_number: "02101140"
        ach_routing_number: "756392185"
      properties:
        ach_routing_number:
          description: |
            The routing number used for US ACH payments. Only appears if `bank_countries` contains `US`. Value may be masked, in which case only the last four digits are returned.
          example: "756392185"
          type: string
        bank_address:
          $ref: '#/components/schemas/address'
        bank_countries:
          description: The countries that this bank operates the account in
          items:
            example: US
            type: string
          type: array
        bank_name:
          description: The name of the bank managing the account
          example: Chase
          type: string
        correspondent_bank_details:
          description: |
            The details of the correspondent banks for the account.
          items:
            $ref: '#/components/schemas/correspondent_bank_details'
          nullable: true
          type: array
        eft_ca_routing_number:
          description: |
            > 🚧 Alpha > This is an Alpha property. Feedback from the community is welcome. We may make breaking changes to this property.
            The 9 digit routing number used for EFT CA payments, identifying a Canadian bank.  The format is 0xxxyyyyy where xxx is the institution number and yyyyy is the transit number. On write, Synctera will store the entire routing number; on read, we only return the last 4 characters. Value may be masked, in which case only the last four digits are returned.
          example: "02101140"
          type: string
        eft_routing_number:
          deprecated: true
          description: |
            The routing number used for EFT payments, identifying a Canadian bank, consisting of the institution number and the branch number. Only appears if `bank_countries` contains `CA`. Value may be masked, in which case only the last four digits are returned. This attribute is deprecated and will be removed in a future API version. Use eft_ca_routing_number instead.
          example: "02101140"
          type: string
        swift_code:
          description: |
            The SWIFT code for the bank. Value may be masked, in which case only the last four characters are returned.
          example: CHASUS3AXXX
          type: string
        wire_routing_number:
          description: |
            The routing number used for domestic wire payments. Only appears if `bank_countries` contains `US`. Value may be masked, in which case only the last four digits are returned.
          example: "756392185"
          type: string
      required:
      - bank_countries
      - bank_name
      title: Routing information for the account
      type: object
    account_summary:
      properties:
        account_number:
          description: Account number
          type: string
        account_status:
          description: Account Status
          type: string
        account_type:
          description: |
            The type of the account. In lead mode, this always takes the value of the template. If not specified in shadow mode, CHECKING will be assumed.
          type: string
        balance_ceiling:
          $ref: '#/components/schemas/account_summary_balance_ceiling'
        balance_floor:
          $ref: '#/components/schemas/account_summary_balance_floor'
        creation_time:
          description: Account creation time
          format: date-time
          type: string
        currency:
          description: Account currency or account settlement currency. ISO 4217 alphabetic
            currency code. Default USD
          example: USD
          pattern: "^[A-Z]{3}$"
          type: string
        customer_type:
          description: Customer type
          type: string
        financial_institution:
          $ref: '#/components/schemas/financial_institution'
        id:
          description: The unique identifier of the account the statement belongs
            to
          format: uuid
          type: string
        last_updated_time:
          description: Account last modification time
          format: date-time
          type: string
        nickname:
          description: User provided account nickname
          type: string
      title: Account Summary
      type: object
    account_template:
      properties:
        application_type:
          $ref: '#/components/schemas/application_type'
        description:
          description: User provided account template description
          type: string
        id:
          description: Generated ID for the template
          format: uuid
          readOnly: true
          type: string
        is_enabled:
          description: Whether this template can be used for account creation
          type: boolean
        name:
          description: Unique account template name
          type: string
        template:
          $ref: '#/components/schemas/template_fields'
      required:
      - is_enabled
      - name
      - template
      type: object
    account_template_response:
      example:
        is_enabled: true
        template:
          billing_period:
            frequency: ANNUALLY
            start_date: 2022-01-01T00:00:00Z
          account_type: null
          interest_product_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          is_external_card_enabled: false
          is_eft_ca_enabled: true
          overdraft_limit: 0
          fee_product_ids:
          - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          is_wire_enabled: false
          is_ach_enabled: false
          bank_country: US
          auto_payment_period: 20
          balance_ceiling:
            balance: 0
            linked_account_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            overflow_account_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          balance_floor:
            balance: 6
            linked_account_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            overdraft_account_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          is_p2p_enabled: false
          grace_period: 21
          is_card_enabled: false
          spend_control_ids:
          - 7d943c51-e4ff-4e57-9558-08cab6b963c7
          - 7d943c51-e4ff-4e57-9558-08cab6b963c7
          - 7d943c51-e4ff-4e57-9558-08cab6b963c7
          - 7d943c51-e4ff-4e57-9558-08cab6b963c7
          - 7d943c51-e4ff-4e57-9558-08cab6b963c7
          minimum_payment: null
          spending_limits:
            week:
              amount: 0
              transactions: 0
            month:
              amount: 0
              transactions: 0
            lifetime:
              amount: 0
              transactions: 0
            description: description
            day:
              amount: 0
              transactions: 0
            transaction:
              amount: 0
          is_sar_enabled: false
          currency: USD
        application_type: null
        name: name
        description: description
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        tenant: abcdef_ghijkl
      properties:
        application_type:
          $ref: '#/components/schemas/application_type'
        description:
          description: Account template description
          type: string
        id:
          description: Generated ID for the template
          format: uuid
          type: string
        is_enabled:
          description: Whether this template can be used for account creation
          type: boolean
        name:
          description: Unique account template name
          type: string
        template:
          $ref: '#/components/schemas/template_fields_generic_response'
        tenant:
          description: |
            The id of the tenant containing the resource. This is relevant for Fintechs that have multiple workspaces.
          example: abcdef_ghijkl
          type: string
      required:
      - is_enabled
      - name
      - template
      type: object
    account_type:
      description: |
        The type of the account. In lead mode, this always takes the value of the template. If not
        specified in shadow mode, CHECKING will be assumed. Below mentioned are the account types:
        * SAVING: Savings account
        * CHECKING: Checking account
        * LINE_OF_CREDIT: Line of Credit account
        * CHARGE_SECURED: Secured Charge account, e.g. for use in a Smart Charge Card offering
      enum:
      - CHARGE_SECURED
      - CHECKING
      - LINE_OF_CREDIT
      - SAVING
      title: Account Type
      type: string
    account_verification:
      description: |
        Information about the account verification process. If the account has not been verified, this will be null.
      discriminator:
        mapping:
          FINICITY: '#/components/schemas/finicity_account_verification'
          MANUAL: '#/components/schemas/manual_account_verification'
          PLAID: '#/components/schemas/plaid_account_verification'
        propertyName: vendor
      nullable: true
      oneOf:
      - $ref: '#/components/schemas/plaid_account_verification'
      - $ref: '#/components/schemas/finicity_account_verification'
      - $ref: '#/components/schemas/manual_account_verification'
      title: Information about the account verification process
      type: object
    accrual_payout_schedule:
      enum:
      - MONTHLY
      - NONE
      type: string
    ach_instruction:
      properties:
        request:
          $ref: '#/components/schemas/outgoing_ach_request'
        type:
          enum:
          - ACH
          - INTERNAL_TRANSFER
          type: string
      required:
      - request
      - type
      type: object
    ach_request_hold_data:
      nullable: true
      properties:
        amount:
          type: integer
        duration:
          example: 2
          minimum: 0
          type: integer
      required:
      - amount
      - duration
      type: object
    ach_return_simulation_request:
      description: Simulate receiving an ACH return
      properties:
        ach_id:
          description: ID of an outgoing ACH transfer to be returned.
          example: 23a37f14-16eb-461d-9331-b78182adbad4
          format: uuid
          type: string
      required:
      - ach_id
      title: Incoming ACH return simulation request
      type: object
    ach_simulation_response:
      type: object
    ach_transaction_simulation_request:
      description: Simulate receiving an ACH transaction
      properties:
        account_number:
          description: Number of the receiving account
          example: "123638791329"
          type: string
        amount:
          description: Amount to transfer in cents (e.g. 100 = $1).
          example: 607
          type: integer
        dc_sign:
          description: The type of transaction (debit or credit) in relation to the
            receiving account. A credit is a transfer in and a debit is a transfer
            pulling money out of the receiving account.
          enum:
          - credit
          - debit
          example: debit
          type: string
        effective_date:
          description: Effective date of the transaction. Transactions with the current
            date or date in the past are posted immediately. Future-dated transactions
            are scheduled to be posted on the chosen date.
          example: 2022-03-18
          format: date
          type: string
      required:
      - account_number
      - amount
      - dc_sign
      - effective_date
      title: Incoming ACH transaction simulation request
      type: object
    action:
      properties:
        data:
          type: object
        message:
          type: string
        timestamp:
          format: date-time
      required:
      - data
      - message
      - timestamp
      type: object
    add_accounts_request:
      properties:
        account_identifiers:
          $ref: '#/components/schemas/add_accounts_request_account_identifiers'
        account_owner_names:
          description: The names of the account owners.
          items:
            example: Jane Smith
            minLength: 1
            type: string
          minItems: 1
          type: array
        business_id:
          description: |
            The identifier for the business customer associated with this external account. Exactly one of `business_id` or `customer_id` must be specified.
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        currency:
          description: ISO 4217 alphabetic currency code
          example: USD
          pattern: "^[A-Z]{3}$"
          type: string
        customer_id:
          description: |
            The identifier for the personal customer associated with this external account. Exactly one of `customer_id` or `business_id` must be specified.
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        customer_type:
          $ref: '#/components/schemas/ext_account_customer_type'
        metadata:
          description: User-supplied metadata
          type: object
        nickname:
          description: A user-meaningful name for the account
          example: Vacation savings
          minLength: 1
          type: string
        routing_identifiers:
          $ref: '#/components/schemas/add_accounts_request_routing_identifiers'
        type:
          description: The type of the account
          enum:
          - CHECKING
          - SAVINGS
          type: string
        vendor_account_id:
          description: "The ID of the vendor account, will be empty for MANUAL vendor"
          example: blgvvBlXw3cq5GMPwqB6s6q4dLKB9WcVqGDGo
          minLength: 1
          type: string
        verification:
          $ref: '#/components/schemas/account_verification'
      required:
      - account_identifiers
      - account_owner_names
      - customer_type
      - routing_identifiers
      - type
      type: object
    add_accounts_request_account_identifiers:
      description: |
        The identifiers for the account. At least one of `number` or `iban` must be specified.  Account number or IBAN can be specified for international accounts. For domestic accounts, only account number is required.
      properties:
        iban:
          description: |
            The IBAN of the account. On write, Synctera will store the entire IBAN number; on read, we only return the last 4 characters.
          example: LI4476584648937N59B00
          minLength: 1
          type: string
        number:
          description: |
            The account number. On write, Synctera will store the entire account number; on read, we only return the last 4 characters.
          example: "78277121"
          minLength: 1
          type: string
      title: Identifiers for the account
      type: object
    add_accounts_request_routing_identifiers:
      properties:
        ach_routing_number:
          description: |
            The routing number used for US ACH payments.
          example: "756392185"
          minLength: 1
          type: string
        bank_countries:
          description: The countries that this bank operates the account in
          items:
            example: US
            type: string
          minItems: 1
          type: array
        bank_name:
          description: The name of the bank managing the account
          example: Chase
          minLength: 1
          type: string
        eft_ca_routing_number:
          description: |
            > 🚧 Alpha > This is an Alpha property. Feedback from the community is welcome. We may make breaking changes to this property.
            The 9 digit routing number used for EFT CA payments, identifying a Canadian bank.  The format is 0xxxyyyyy where xxx is the institution number and yyyyy is the transit number. On write, Synctera will store the entire routing number; on read, we only return the last 4 characters.
          example: "02101140"
          maxLength: 9
          minLength: 9
          type: string
        international_wire_details:
          $ref: '#/components/schemas/international_wire_details'
        wire_routing_number:
          description: |
            The routing number used for US domestic wire payments.
          example: "915075033"
          minLength: 1
          type: string
      required:
      - bank_countries
      - bank_name
      title: Identifiers for the bank
      type: object
    add_vendor_account_failure:
      example:
        reason: null
        vendor_request_id: vendor_request_id
        vendor_error_message: vendor_error_message
        reason_description: reason_description
        vendor_account_id: blgvvBlXw3cq5GMPwqB6s6q4dLKB9WcVqGDGo
      properties:
        reason:
          $ref: '#/components/schemas/add_vendor_accounts_error_reason'
        reason_description:
          description: A human-readable message describing the reason for the failure.
          type: string
        vendor_account_id:
          description: |
            The vendor account ID for the account that failed. For Plaid, this is an `account_id`.
          example: blgvvBlXw3cq5GMPwqB6s6q4dLKB9WcVqGDGo
          type: string
        vendor_error_message:
          description: |
            The display_message returned by the vendor. Only returned if reason is set to `PROVIDER_ERROR`. For Plaid, this is the `display_message`.
          type: string
        vendor_request_id:
          description: |
            A unique identifier for the request from the vendor, which can be used for troubleshooting. Only returned if reason is set to `PROVIDER_ERROR`.
          type: string
      required:
      - reason
      - reason_description
      - vendor_account_id
      type: object
    add_vendor_accounts_error_reason:
      description: A machine-readable code describing the reason for the failure.
      enum:
      - ACCOUNT_NOT_FOUND
      - DUPLICATE_ACCOUNT
      - FAILED_VERIFICATION
      - PROVIDER_ERROR
      - UNSUPPORTED_ACCOUNT_TYPE
      type: string
    add_vendor_accounts_request:
      properties:
        business_id:
          description: |
            The identifier for the business customer associated with this external account. Exactly one of `business_id` or `customer_id` must be specified.
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        customer_id:
          description: |
            The identifier for the personal customer associated with this external account. Exactly one of `customer_id` or `business_id` must be specified.
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        customer_type:
          $ref: '#/components/schemas/ext_account_customer_type'
        vendor:
          $ref: '#/components/schemas/external_account_vendor_values'
        vendor_access_token:
          description: |
            The token provided to link external accounts. For Plaid, this is their `access_token`.
          example: access-sandbox-de3ce8ef-33f8-452c-a685-8671031fc0f6
          minLength: 1
          type: string
        vendor_account_ids:
          description: |
            The list of vendor account IDs that the customer chose to link. For Plaid, these are `account_id`s.
          items:
            description: The Plaid account_id.
            example: blgvvBlXw3cq5GMPwqB6s6q4dLKB9WcVqGDGo
            minLength: 1
            type: string
          minItems: 1
          type: array
        vendor_customer_id:
          description: |
            The identifier provided by the vendor for the customer associated with this external account.
          example: "123"
          type: string
        verify_owner:
          default: false
          description: |
            If true, Synctera will attempt to verify that the external account owner is the same as the customer by comparing external account data to customer data. At least 2 of the following fields must match: name, phone number, email, address. Verification is disabled by default.
          type: boolean
      required:
      - customer_type
      - vendor
      type: object
    add_vendor_accounts_response:
      example:
        deleted_accounts:
        - creation_time: 2010-05-06T12:23:34.321Z
          metadata: "{}"
          routing_identifiers:
            correspondent_bank_details:
            - swift_code: BNGRGRAAXXX
              bank_address:
                country_code: US
                city: New York
                address_line_1: 100 Main St.
                address_line_2: Suite 99
                state: NY
                postal_code: "28620"
              bank_name: Bank of Greece
            - swift_code: BNGRGRAAXXX
              bank_address:
                country_code: US
                city: New York
                address_line_1: 100 Main St.
                address_line_2: Suite 99
                state: NY
                postal_code: "28620"
              bank_name: Bank of Greece
            eft_routing_number: "02101140"
            swift_code: CHASUS3AXXX
            bank_address:
              country_code: US
              city: New York
              address_line_1: 100 Main St.
              address_line_2: Suite 99
              state: NY
              postal_code: "28620"
            bank_countries:
            - US
            - US
            bank_name: Chase
            wire_routing_number: "756392185"
            eft_ca_routing_number: "02101140"
            ach_routing_number: "756392185"
          vendor_data:
            account_number_mask: account_number_mask
            institution_id: institution_id
          type: CHECKING
          vendor_info: null
          account_identifiers:
            number: "78277121"
            iban: LI4476584648937N59B00
          deletion_time: 2010-05-06T12:23:34.321Z
          last_updated_time: 2010-05-06T12:23:34.321Z
          name: Plaid Checking
          nickname: Vacation savings
          account_owner_names:
          - Jane Smith
          - Jane Smith
          currency: USD
          id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          customer_id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          business_id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          verification: null
          status: ACTIVE
        - creation_time: 2010-05-06T12:23:34.321Z
          metadata: "{}"
          routing_identifiers:
            correspondent_bank_details:
            - swift_code: BNGRGRAAXXX
              bank_address:
                country_code: US
                city: New York
                address_line_1: 100 Main St.
                address_line_2: Suite 99
                state: NY
                postal_code: "28620"
              bank_name: Bank of Greece
            - swift_code: BNGRGRAAXXX
              bank_address:
                country_code: US
                city: New York
                address_line_1: 100 Main St.
                address_line_2: Suite 99
                state: NY
                postal_code: "28620"
              bank_name: Bank of Greece
            eft_routing_number: "02101140"
            swift_code: CHASUS3AXXX
            bank_address:
              country_code: US
              city: New York
              address_line_1: 100 Main St.
              address_line_2: Suite 99
              state: NY
              postal_code: "28620"
            bank_countries:
            - US
            - US
            bank_name: Chase
            wire_routing_number: "756392185"
            eft_ca_routing_number: "02101140"
            ach_routing_number: "756392185"
          vendor_data:
            account_number_mask: account_number_mask
            institution_id: institution_id
          type: CHECKING
          vendor_info: null
          account_identifiers:
            number: "78277121"
            iban: LI4476584648937N59B00
          deletion_time: 2010-05-06T12:23:34.321Z
          last_updated_time: 2010-05-06T12:23:34.321Z
          name: Plaid Checking
          nickname: Vacation savings
          account_owner_names:
          - Jane Smith
          - Jane Smith
          currency: USD
          id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          customer_id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          business_id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          verification: null
          status: ACTIVE
        failed_accounts:
        - reason: null
          vendor_request_id: vendor_request_id
          vendor_error_message: vendor_error_message
          reason_description: reason_description
          vendor_account_id: blgvvBlXw3cq5GMPwqB6s6q4dLKB9WcVqGDGo
        - reason: null
          vendor_request_id: vendor_request_id
          vendor_error_message: vendor_error_message
          reason_description: reason_description
          vendor_account_id: blgvvBlXw3cq5GMPwqB6s6q4dLKB9WcVqGDGo
        added_accounts:
        - creation_time: 2010-05-06T12:23:34.321Z
          metadata: "{}"
          routing_identifiers:
            correspondent_bank_details:
            - swift_code: BNGRGRAAXXX
              bank_address:
                country_code: US
                city: New York
                address_line_1: 100 Main St.
                address_line_2: Suite 99
                state: NY
                postal_code: "28620"
              bank_name: Bank of Greece
            - swift_code: BNGRGRAAXXX
              bank_address:
                country_code: US
                city: New York
                address_line_1: 100 Main St.
                address_line_2: Suite 99
                state: NY
                postal_code: "28620"
              bank_name: Bank of Greece
            eft_routing_number: "02101140"
            swift_code: CHASUS3AXXX
            bank_address:
              country_code: US
              city: New York
              address_line_1: 100 Main St.
              address_line_2: Suite 99
              state: NY
              postal_code: "28620"
            bank_countries:
            - US
            - US
            bank_name: Chase
            wire_routing_number: "756392185"
            eft_ca_routing_number: "02101140"
            ach_routing_number: "756392185"
          vendor_data:
            account_number_mask: account_number_mask
            institution_id: institution_id
          type: CHECKING
          vendor_info: null
          account_identifiers:
            number: "78277121"
            iban: LI4476584648937N59B00
          deletion_time: 2010-05-06T12:23:34.321Z
          last_updated_time: 2010-05-06T12:23:34.321Z
          name: Plaid Checking
          nickname: Vacation savings
          account_owner_names:
          - Jane Smith
          - Jane Smith
          currency: USD
          id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          customer_id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          business_id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          verification: null
          status: ACTIVE
        - creation_time: 2010-05-06T12:23:34.321Z
          metadata: "{}"
          routing_identifiers:
            correspondent_bank_details:
            - swift_code: BNGRGRAAXXX
              bank_address:
                country_code: US
                city: New York
                address_line_1: 100 Main St.
                address_line_2: Suite 99
                state: NY
                postal_code: "28620"
              bank_name: Bank of Greece
            - swift_code: BNGRGRAAXXX
              bank_address:
                country_code: US
                city: New York
                address_line_1: 100 Main St.
                address_line_2: Suite 99
                state: NY
                postal_code: "28620"
              bank_name: Bank of Greece
            eft_routing_number: "02101140"
            swift_code: CHASUS3AXXX
            bank_address:
              country_code: US
              city: New York
              address_line_1: 100 Main St.
              address_line_2: Suite 99
              state: NY
              postal_code: "28620"
            bank_countries:
            - US
            - US
            bank_name: Chase
            wire_routing_number: "756392185"
            eft_ca_routing_number: "02101140"
            ach_routing_number: "756392185"
          vendor_data:
            account_number_mask: account_number_mask
            institution_id: institution_id
          type: CHECKING
          vendor_info: null
          account_identifiers:
            number: "78277121"
            iban: LI4476584648937N59B00
          deletion_time: 2010-05-06T12:23:34.321Z
          last_updated_time: 2010-05-06T12:23:34.321Z
          name: Plaid Checking
          nickname: Vacation savings
          account_owner_names:
          - Jane Smith
          - Jane Smith
          currency: USD
          id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          customer_id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          business_id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          verification: null
          status: ACTIVE
      properties:
        added_accounts:
          items:
            $ref: '#/components/schemas/external_account'
          type: array
        deleted_accounts:
          items:
            $ref: '#/components/schemas/external_account'
          type: array
        failed_accounts:
          items:
            $ref: '#/components/schemas/add_vendor_account_failure'
          type: array
      required:
      - added_accounts
      - failed_accounts
      type: object
    additional_data:
      description: Contains additional information about the relationship.
      properties:
        title:
          description: The professional role or position the person holds at the related
            organization.
          enum:
          - DIRECTOR
          - FOUNDER
          - OFFICER
          type: string
      required:
      - title
      type: object
    additional_owner_data:
      description: Contains additional information about the relationship.
      properties:
        percent_ownership:
          description: Percentage ownership of the related business.
          example: 35.75
          exclusiveMinimum: true
          format: double
          maximum: 100
          minimum: 0
          type: number
      required:
      - percent_ownership
      type: object
    address:
      example:
        country_code: US
        city: New York
        address_line_1: 100 Main St.
        address_line_2: Suite 99
        state: NY
        postal_code: "28620"
      properties:
        address_line_1:
          description: Street address line 1
          example: 100 Main St.
          type: string
        address_line_2:
          description: Street address line 2
          example: Suite 99
          type: string
        city:
          description: City
          example: New York
          type: string
        country_code:
          description: ISO-3166-1 Alpha-2 country code
          example: US
          pattern: "^[A-Z]{2}$"
          type: string
        postal_code:
          description: |
            Postal code.
            For US, formats of 12345 or 12345-1234 are accepted.
            For CA, formats of A1A 1A1 or A1A1A1 (regardless of case) are accepted, and will be converted to A1A 1A1 format.
          example: "28620"
          type: string
        state:
          description: |
            State, region, province, or prefecture.
            This is the ISO-3166-2 subdivision code, excluding the country prefix.
            For example, TX for Texas USA or TAM for Tamaulipas Mexico.
            Its length varies by country, e.g. 2 characters for US, 3 for MX.
          example: NY
          type: string
      required:
      - address_line_1
      - country_code
      type: object
    address1:
      example:
        country_code: US
        city: New York
        address_line_1: 100 Main St.
        address_line_2: Suite 99
        state: NY
        postal_code: "49633"
      properties:
        address_line_1:
          description: Street address line 1
          example: 100 Main St.
          maxLength: 100
          type: string
        address_line_2:
          description: Street address line 2
          example: Suite 99
          maxLength: 100
          type: string
        city:
          description: City
          example: New York
          type: string
        country_code:
          description: ISO-3166-1 Alpha-2 country code
          example: US
          type: string
        postal_code:
          description: Postal code
          example: "49633"
          type: string
        state:
          description: "State, region, province, or prefecture"
          example: NY
          type: string
      required:
      - address_line_1
      - city
      - country_code
      - postal_code
      - state
      type: object
    address2:
      properties:
        address_line_1:
          type: string
        address_line_2:
          type: string
        city:
          type: string
        country_code:
          type: string
        postal_code:
          type: string
        state:
          type: string
      title: Address
      type: object
    adhoc_verification_request:
      description: |
        Basic identifying information about the person being verified.
      properties:
        payee_id:
          description: Synctera party (non-customer) who is receiving money from a
            customer (the payer)
          format: uuid
          type: string
        payer_id:
          description: Synctera customer who is sending money to a non-customer (the
            payee)
          format: uuid
          type: string
      required:
      - payee_id
      - payer_id
      type: object
    adhoc_verification_response:
      example:
        result: ACCEPTED
        matching_watchlists:
        - US_OFAC
        - US_OFAC
        id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
        vendor_info: null
      properties:
        id:
          description: Unique ID for this verification result.
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        matching_watchlists:
          description: |
            list of watchlists that the subject of the request matched
          items:
            enum:
            - US_OFAC
            type: string
          type: array
        result:
          $ref: '#/components/schemas/verification_result'
        vendor_info:
          $ref: '#/components/schemas/vendor_info'
      required:
      - id
      - matching_watchlists
      - result
      type: object
    apple_digital_wallet_provision_request:
      properties:
        certificates:
          description: Leaf and sub-CA certificates provided by Apple
          items:
            description: Array of Base64 encoded certificates from Apple.
            type: string
          type: array
        device_type:
          $ref: '#/components/schemas/device_type'
        nonce:
          description: One-time-use nonce provided by Apple for security purposes.
          type: string
        nonce_signature:
          description: Apple-provided signature to the nonce.
          type: string
        provisioning_app_version:
          description: Version of the application making the provisioning request.
          maxLength: 50
          type: string
      required:
      - certificates
      - device_type
      - nonce
      - nonce_signature
      - provisioning_app_version
      type: object
    apple_digital_wallet_provision_response:
      example:
        ephemeral_public_key: ephemeral_public_key
        activation_data: activation_data
        created_time: 2010-05-06T12:23:34.321Z
        encrypted_pass_data: encrypted_pass_data
        last_modified_time: 2010-05-06T12:23:34.321Z
        card_id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
      properties:
        activation_data:
          type: string
        card_id:
          description: The unique identifier of a card
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        created_time:
          example: 2010-05-06T12:23:34.321Z
          format: date-time
          type: string
        encrypted_pass_data:
          type: string
        ephemeral_public_key:
          type: string
        last_modified_time:
          example: 2010-05-06T12:23:34.321Z
          format: date-time
          type: string
      type: object
    application_type:
      description: |
        The type of the application.
        * LINE_OF_CREDIT: line of credit application
        * RESTRICTED_ACCOUNT: restricted account application
      enum:
      - LINE_OF_CREDIT
      - RESTRICTED_ACCOUNT
      title: Application Type
      type: string
    auth_request_model:
      properties:
        amount:
          description: The amount of the transaction in the smallest whole denomination
            of the applicable currency (eg. For USD use cents)
          type: integer
        card_acceptor:
          $ref: '#/components/schemas/card_acceptor_model'
        card_id:
          format: uuid
          type: string
        card_options:
          $ref: '#/components/schemas/card_options'
        cash_back_amount:
          type: integer
        is_pre_auth:
          default: false
          type: boolean
        mid:
          maxLength: 50
          minLength: 1
          type: string
        network_fees:
          items:
            $ref: '#/components/schemas/network_fee_model'
          type: array
        pin:
          maxLength: 50
          minLength: 1
          type: string
        transaction_options:
          $ref: '#/components/schemas/transaction_options'
      required:
      - amount
      - card_id
      - mid
      type: object
    authenticate_3ds_request:
      description: Details for an External Card Transfer 3-D Secure Authentication
        request
      properties:
        challenge_jwt:
          description: The JWT recieved from the 3DS challenge
          type: string
        id:
          description: The unique identifier of the 3DS authentication
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
      required:
      - challenge_jwt
      - id
      type: object
    authenticate_3ds_response:
      description: Details for an External Card Transfer 3-D Secure Authentication
        response
      example:
        id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
        status: FAILED
      properties:
        id:
          description: The unique identifier of the 3DS authentication
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        status:
          description: Status of the 3DS authentication
          enum:
          - FAILED
          - SUCCESS
          type: string
      required:
      - id
      - status
      type: object
    authorization_advice_model:
      properties:
        amount:
          description: The amount of the transaction in the smallest whole denomination
            of the applicable currency (eg. For USD use cents)
          type: integer
        network_fees:
          items:
            $ref: '#/components/schemas/network_fee_model'
          type: array
        original_transaction_id:
          format: uuid
          type: string
        transaction_options:
          $ref: '#/components/schemas/transaction_options'
      required:
      - amount
      - original_transaction_id
      type: object
    balance:
      example:
        balance: 2399
        type: null
      properties:
        balance:
          description: balance in ISO 4217 minor currency units. Unit in cents.
          example: 2399
          format: int64
          readOnly: true
          type: integer
        type:
          $ref: '#/components/schemas/balance_type'
      required:
      - balance
      - type
      type: object
    balance_ceiling:
      example:
        balance: 0
        linked_account_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        overflow_account_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        balance:
          description: Maximum balance in the account's currency. Unit in cents.
          format: int64
          minimum: 0
          type: integer
        linked_account_id:
          description: |
            ID of linked backing account for just-in-time (JIT) funding of transactions to maintain the balance ceiling
          format: uuid
          type: string
        overflow_account_id:
          deprecated: true
          description: |
            ID of linked backing account for just-in-time (JIT) funding of transactions to maintain the balance ceiling
            This attribute is a deprecated alias for linked_account_id.
          format: uuid
          type: string
      required:
      - balance
      type: object
    balance_floor:
      example:
        balance: 6
        linked_account_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        overdraft_account_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        balance:
          description: Minimum balance in the account's currency. Unit in cents.
          format: int64
          type: integer
        linked_account_id:
          description: |
            ID of linked backing account for just-in-time (JIT) funding of transactions to maintain the balance floor
          format: uuid
          type: string
        overdraft_account_id:
          deprecated: true
          description: |
            ID of linked backing account for just-in-time (JIT) funding of transactions to maintain the balance floor
            This attribute is a deprecated alias for linked_account_id.
          format: uuid
          type: string
      required:
      - balance
      type: object
    balance_inquiry_request_model:
      properties:
        account_type:
          enum:
          - checking
          - credit
          - savings
          type: string
        card_acceptor:
          $ref: '#/components/schemas/card_acceptor_model'
        card_id:
          format: uuid
          type: string
        mid:
          maxLength: 50
          minLength: 1
          type: string
        network_fees:
          items:
            $ref: '#/components/schemas/network_fee_model'
          type: array
        pin:
          maxLength: 15
          minLength: 1
          type: string
      required:
      - account_type
      - card_acceptor
      - card_id
      - mid
      type: object
    balance_type:
      description: |
        For `SAVING` and `CHECKING` accounts:
        * `ACCOUNT_BALANCE`: the amount of money in the account. Equal to the sum of credits minus debits for all posted transactions.
        * `AVAILABLE_BALANCE`: the account balance minus any pending debits.
        * `ACCRUED_INTEREST_MTD`: the amount of accrued interest to date for the billing month

        For `LINE_OF_CREDIT` accounts:
        * `ACCOUNT_BALANCE`: the amount of credit currently in use. Equal to the sum of debits minus credits for all posted transactions.
        * `AVAILABLE_BALANCE`: the amount of credit available. Equal to the credit limit minus `account_balance` minus any pending debits.
      enum:
      - ACCOUNT_BALANCE
      - ACCRUED_INTEREST_MTD
      - AVAILABLE_BALANCE
      type: string
    ban_status:
      description: |
        (alpha) Ban status of the person. One of the following:
        * `ALLOWED` – person is not banned or suspended
        * `SUSPENDED` - person is manually suspended due to fraud
        * `BANNED` – person is banned due to matching ban rules
        Note: changing the ban status to or from BANNED can only be performed by the Synctera platform based on ban rules.
      enum:
      - ALLOWED
      - BANNED
      - SUSPENDED
      example: ALLOWED
      type: string
    barcode:
      description: The barcode associated with a card
      example: "10044461864615598000"
      pattern: "\\d{20}"
      type: string
    base:
      properties:
        compliance_restrictions:
          description: |
            The types of compliance that the business needs to adhere to
            * `LICENSED_CANNABIS` – A type of compliance restriction where the business would need a cannabis license in order to operate.
          items:
            enum:
            - LICENSED_CANNABIS
            type: string
          type: array
        creation_time:
          description: The date and time the resource was created.
          example: 2010-05-06T12:23:34.321Z
          format: date-time
          readOnly: true
          type: string
        ein:
          description: "U.S. Employer Identification Number (EIN) for this business,\
            \ in the format xx-xxxxxxx."
          example: 12-3456789
          type: string
        email:
          description: Business's email.
          example: alice@example.com
          type: string
        entity_name:
          description: Business's legal name.
          example: Apex Corporation
          type: string
        formation_date:
          description: Date the business was legally registered in RFC 3339 full-date
            format (YYYY-MM-DD).
          example: 2000-01-01
          format: date
          type: string
        formation_state:
          description: U.S. state where the business is legally registered (2-letter
            abbreviation).
          example: NY
          type: string
        has_accounts:
          description: This flag indicates whether the person or business has accounts.
          readOnly: true
          type: boolean
        id:
          description: Business's unique identifier.
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          readOnly: true
          type: string
        is_customer:
          description: |
            True for personal and business customers with a direct relationship with the fintech or bank. Set this to true for any customer related to an account.
          example: true
          type: boolean
        last_updated_time:
          description: The date and time the resource was last updated.
          example: 2010-05-06T12:23:34.321Z
          format: date-time
          readOnly: true
          type: string
        legal_address:
          $ref: '#/components/schemas/legal_address'
        metadata:
          description: |
            Optional field to store additional information about the resource. Intended to be used by the integrator to store non-sensitive data.
          type: object
        phone_number:
          description: Business's phone number with country code in E.164 format.
            Must have a valid country code. Area code and local phone number are not
            validated.
          example: +14374570680
          pattern: "^\\+[1-9]\\d{1,14}$"
          type: string
        status:
          description: |
            Status of the business. One of the following:
            * `PROSPECT` – a potential customer, used for information-gathering and disclosures.
            * `ACTIVE` –  is an integrator defined status.  Integrators should set a business to active if they believe the person to be qualified for conducting business.  Synctera will combine this status with other statuses such a verification to determine if the business is eligible for specific actions such as initiating transactions or issuing a card.
            * `FROZEN` – business's actions are blocked for security, legal, or other reasons.
            * `SANCTION` – business is on a sanctions list and should be carefully monitored.
            * `DISSOLVED` – an inactive status indicating a business entity has filed articles of dissolution or a certificate of termination to terminate its existence.
            * `CANCELLED` – an inactive status indicating that a business entity has filed a cancellation or has failed to file its periodic report after notice of forfeiture of its rights to do business.
            * `SUSPENDED` – an inactive status indicating that the business entity has lost the right to operate in it's registered jurisdiction.
            * `MERGED` – an inactive status indicating that the business entity has terminated existence by merging into another entity.
            * `INACTIVE` – an inactive status indicating that the business entity is no longer active.
            * `CONVERTED` – An inactive status indicating that the business entity has been converted to another type of business entity in the same jurisdiction.
          enum:
          - ACTIVE
          - CANCELLED
          - CONVERTED
          - DISSOLVED
          - FROZEN
          - INACTIVE
          - MERGED
          - PROSPECT
          - SANCTION
          - SUSPENDED
          type: string
        structure:
          description: Business's legal structure.
          enum:
          - CORPORATION
          - LLC
          - NON_PROFIT
          - OTHER
          - PARTNERSHIP
          - SOLE_PROPRIETORSHIP
          - S_CORPORATION
          example: CORPORATION
          type: string
        tenant:
          description: |
            The id of the tenant containing the resource. This is relevant for Fintechs that have multiple workspaces.
          example: abcdef_ghijkl
          type: string
        trade_names:
          description: Other names by which this business is known.
          example:
          - Apex
          - Apex LLC
          - CorporationID#77231
          items:
            type: string
          type: array
        verification_last_run:
          description: Date and time KYB verification was last run on the business.
          example: 2010-05-06T12:23:34.321Z
          format: date-time
          readOnly: true
          type: string
        verification_status:
          $ref: '#/components/schemas/verification_status'
        website:
          description: Business's website.
          example: https://example.com
          type: string
      type: object
    base_account_verification:
      properties:
        creation_time:
          description: The time at which verification was first completed.
          example: 2010-05-06T12:23:34.321Z
          format: date-time
          type: string
        last_updated_time:
          description: The time at which verification was last updated.
          example: 2010-05-06T12:23:34.321Z
          format: date-time
          type: string
        status:
          description: The status of verification
          enum:
          - UNVERIFIED
          - VERIFIED
          type: string
        vendor:
          description: The vendor used for verifying the account
          enum:
          - FINICITY
          - MANUAL
          - PLAID
          type: string
      required:
      - status
      - vendor
      title: Information about account verification
      type: object
    base_card:
      allOf:
      - properties:
          account_id:
            description: The ID of the account to which the card will be linked
            example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
            format: uuid
            type: string
          card_product_id:
            description: The card product to which the card is attached
            example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
            format: uuid
            type: string
          creation_time:
            description: The timestamp representing when the card issuance request
              was made
            example: 2010-05-06T12:23:34.321Z
            format: date-time
            readOnly: true
            type: string
          customer_id:
            description: The ID of the customer to whom the card will be issued
            example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
            format: uuid
            type: string
          emboss_name:
            $ref: '#/components/schemas/emboss_name'
          expiration_month:
            example: "06"
            readOnly: true
            type: string
          expiration_time:
            description: The timestamp representing when the card would expire at
            example: 2010-05-06T12:23:34.321Z
            format: date-time
            readOnly: true
            type: string
          expiration_year:
            example: "25"
            readOnly: true
            type: string
          id:
            description: Card ID
            example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
            format: uuid
            readOnly: true
            type: string
          is_pin_set:
            default: false
            description: indicates whether a pin has been set on the card
            example: true
            readOnly: true
            type: boolean
          last_four:
            description: The last 4 digits of the card PAN
            example: "1234"
            readOnly: true
            type: string
          last_modified_time:
            description: The timestamp representing when the card was last modified
              at
            example: 2010-05-06T12:23:34.321Z
            format: date-time
            readOnly: true
            type: string
          metadata:
            $ref: '#/components/schemas/card_metadata'
          reissue_reason:
            description: |
              This is the reason the card needs to be reissued, if any. The reason determines several behaviours:
                - whether or not the new card will use the same PAN as the original card
                - the old card will be terminated and if so, when it will be terminated

              Reason                 | Same PAN | Terminate Old Card
              ---------------------- | -------- | ------------------
              EXPIRATION             | yes      | on activation
              LOST                   | no       | immediately
              STOLEN                 | no       | immediately
              DAMAGED                | yes      | on activation
              VIRTUAL_TO_PHYSICAL(*) | yes      | on activation
              PRODUCT_CHANGE         | yes      | on activation
              NAME_CHANGE(**)        | yes      | on activation
              APPEARANCE             | yes      | on activation

              (*) VIRTUAL_TO_PHYSICAL is deprecated. Please use PRODUCT_CHANGE whenever reissuing from one
              card product to another, including from a virtual product to a physical product.

              (**) NAME_CHANGE is deprecated. Please use APPEARANCE whenever reissuing in order to change the
              appearance of a card, such as the printed name or custom image.

              For all reasons, the new card will use the same PIN as the original card and digital wallet tokens will
              reassigned to the new card
            enum:
            - APPEARANCE
            - DAMAGED
            - EXPIRATION
            - LOST
            - NAME_CHANGE
            - PRODUCT_CHANGE
            - STOLEN
            - VIRTUAL_TO_PHYSICAL
            type: string
          reissued_from_id:
            description: |
              When reissuing a card, specify the card to be replaced here. When getting a card's details, if this card was issued as a reissuance of another card, this ID refers to the card was replaced. If this field is set, then reissue_reason must also be set.
            example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
            format: uuid
            type: string
          reissued_to_id:
            description: "If this card was reissued, this ID refers to the card that\
              \ replaced it."
            example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
            format: uuid
            readOnly: true
            type: string
          timestamp_pin_set:
            description: Time when the PIN was last set or changed.
            example: 2010-05-06T12:23:34.321Z
            format: date-time
            readOnly: true
            type: string
          type:
            $ref: '#/components/schemas/card_type'
        required:
        - form
        type: object
      - $ref: '#/components/schemas/card_format'
    base_cash_pickup:
      properties:
        account_id:
          example: 23f71110-3b25-4f3d-a1c3-915d699d8db6
          format: uuid
          type: string
        amount:
          description: The amount (in cents) of the transaction
          example: 10000
          type: integer
        business_id:
          example: 60c99d99-f6b1-4877-9866-1aeeeb141ce2
          format: uuid
          type: string
        creation_time:
          example: 2050-06-07T21:32:43.321Z
          format: date-time
          readOnly: true
          type: string
        currency:
          example: USD
          pattern: "^[A-Z]{3}$"
          readOnly: true
          type: string
        employee_customer_id:
          example: 4ee911a0-45e1-11ed-b878-0242ac120002
          format: uuid
          type: string
        id:
          example: 83bc0aab-188e-4a19-961d-039e022f9234
          format: uuid
          readOnly: true
          type: string
        last_updated_time:
          example: 2050-06-07T21:32:43.321Z
          format: date-time
          readOnly: true
          type: string
        metadata:
          additionalProperties:
            type: string
          type: object
        pickup_time:
          description: the date when the money was actually picked up
          example: 2050-06-07T21:32:43.321Z
          format: date-time
          readOnly: true
          type: string
        posted_amount:
          example: 12000
          readOnly: true
          type: integer
        posted_date:
          description: The date the transaction was posted. This is the date any money
            is considered to be added or removed from an account.
          example: 2023-01-01
          format: date
          readOnly: true
          type: string
        reference_id:
          description: An external ID provided by the partner. This is not guaranteed
            to be globally unique.
          type: string
        scheduled_pickup_date:
          description: the date when the money was expected to be picked up
          format: date
          type: string
        transaction_id:
          example: 6834b1c8-723d-4225-8dcb-d46deeac91f7
          format: uuid
          readOnly: true
          type: string
      required:
      - account_id
      - amount
      - reference_id
      title: Base Model
      type: object
    base_disclosure:
      properties:
        acknowledging_person_id:
          description: |
            Unique ID for the person acknowledging the disclosure. Applicable for disclosures where the person  acknowledging is different from the subject of the disclosure. Required for OWNER_CERTIFICATION disclosures.
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        business_id:
          description: |
            Unique ID for the business. Exactly one of `business_id` or `person_id` must be set.
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        creation_time:
          description: The date and time the resource was created.
          example: 2010-05-06T12:23:34.321Z
          format: date-time
          readOnly: true
          type: string
        disclosure_date:
          description: Date and time the disclosure was made.
          example: 2010-05-06T12:23:34.321Z
          format: date-time
          type: string
        event_type:
          description: |
            Describes how the disclosure was shown and what the user did as a result.
            One of the following:
            * `DISPLAYED` —
                The document was made visible to the user,
                but they did not interact with it.
            * `VIEWED` —
                The document was made visible to the user,
                and they interacted enough to see the whole document (e.g. scrolled to the bottom).
            * `ACKNOWLEDGED` —
                The document was made visible to the user,
                and they took positive action to confirm that they have read and accepted the document.
          enum:
          - ACKNOWLEDGED
          - DISPLAYED
          - VIEWED
          example: ACKNOWLEDGED
          type: string
        id:
          description: The unique identifier for this resource.
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          readOnly: true
          type: string
        last_updated_time:
          description: The date and time the resource was last updated.
          example: 2010-05-06T12:23:34.321Z
          format: date-time
          readOnly: true
          type: string
        metadata:
          description: |
            Optional field to store additional information about the resource. Intended to be used by the integrator to store non-sensitive data.
          type: object
        person_id:
          description: |
            Unique ID for the person. Exactly one of `person_id` or `business_id` must be set.
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        type:
          $ref: '#/components/schemas/disclosure_type'
        version:
          description: Version of the disclosure document.
          example: "1.0"
          pattern: "^v?[0-9]+\\.[0-9]+$"
          type: string
      type: object
    base_person:
      properties:
        ban_status:
          $ref: '#/components/schemas/ban_status'
        creation_time:
          description: The date and time the resource was created.
          example: 2010-05-06T12:23:34.321Z
          format: date-time
          readOnly: true
          type: string
        email:
          description: Customer's email
          example: alice@example.com
          type: string
        has_accounts:
          description: This flag indicates whether the person or business has accounts.
          readOnly: true
          type: boolean
        id:
          description: Customer unique identifier
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          readOnly: true
          type: string
        kyc_exempt:
          description: Customer's KYC exemption
          readOnly: true
          type: boolean
        kyc_last_run:
          description: Date and time KYC was last run on the customer
          example: 2010-05-06T12:23:34.321Z
          format: date-time
          readOnly: true
          type: string
        kyc_status:
          $ref: '#/components/schemas/customer_kyc_status'
        last_updated_time:
          description: The date and time the resource was last updated.
          example: 2010-05-06T12:23:34.321Z
          format: date-time
          readOnly: true
          type: string
        legal_address:
          $ref: '#/components/schemas/legal_address'
        metadata:
          description: User-supplied metadata. Do not use to store PII.
          type: object
        middle_name:
          description: Customer's middle name
          example: Anne
          type: string
        note:
          description: Add an optional note when creating or updating a customer.
            A note is required when updating a customers's ban_status between SUSPENDED
            and ALLOWED.
          type: string
          writeOnly: true
        phone_number:
          description: Customer's mobile phone number with country code in E.164 format.
            Must have a valid country code. Area code and local phone number are not
            validated.
          example: +14374570680
          pattern: "^\\+[1-9]\\d{1,14}$"
          type: string
        related_customers:
          deprecated: true
          description: Customer's relationships with other accounts eg. guardian.
            This property is no longer supported. Setting it will return an error.
          items:
            $ref: '#/components/schemas/relationship1'
          type: array
        shipping_address:
          $ref: '#/components/schemas/shipping_address'
        ssn:
          description: "Customer's full tax ID eg SSN formatted with hyphens. This\
            \ optional parameter is required when running KYC on a customer. Input\
            \ must match the pattern ^\\d{3}-\\d{2}-\\d{4}$. The response contains\
            \ the last 4 digits only (e.g. 6789)."
          example: 123-45-6789
          type: string
        ssn_source:
          $ref: '#/components/schemas/ssn_source'
        tenant:
          description: |
            The id of the tenant containing the resource. This is relevant for Fintechs that have multiple workspaces.
          example: abcdef_ghijkl
          type: string
      type: object
    base_person1:
      properties:
        ban_status:
          $ref: '#/components/schemas/ban_status'
        chosen_name:
          description: Person's chosen name.
          example: Annie
          type: string
        creation_time:
          description: The date and time the resource was created.
          example: 2010-05-06T12:23:34.321Z
          format: date-time
          readOnly: true
          type: string
        dob:
          description: Person's date of birth in RFC 3339 full-date format (YYYY-MM-DD).
          example: 2000-01-01
          format: date
          type: string
        email:
          description: Person's email.
          example: alice@example.com
          type: string
        first_name:
          description: Person's first name.
          example: Jane
          type: string
        has_accounts:
          description: This flag indicates whether the person or business has accounts.
          readOnly: true
          type: boolean
        id:
          description: Person's unique identifier.
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          readOnly: true
          type: string
        is_customer:
          description: |
            True for personal and business customers with a direct relationship with the fintech or bank. Set this to true for any customer related to an account.
          example: true
          type: boolean
        last_name:
          description: Person's last name.
          example: Smith
          type: string
        last_updated_time:
          description: The date and time the resource was last updated.
          example: 2010-05-06T12:23:34.321Z
          format: date-time
          readOnly: true
          type: string
        legal_address:
          $ref: '#/components/schemas/legal_address'
        metadata:
          description: |
            Optional field to store additional information about the resource. Intended to be used by the integrator to store non-sensitive data.
          type: object
        middle_name:
          description: Person's middle name.
          example: Anne
          type: string
        phone_number:
          description: Person's mobile phone number with country code in E.164 format.
            Must have a valid country code. Area code and local phone number are not
            validated
          example: +14374570680
          pattern: "^\\+[1-9]\\d{1,14}$"
          type: string
        shipping_address:
          $ref: '#/components/schemas/shipping_address'
        ssn:
          description: Person's full tax ID eg SSN formatted with hyphens. The response
            contains the last 4 digits only (e.g. 6789).
          example: 123-45-6789
          type: string
        ssn_source:
          $ref: '#/components/schemas/ssn_source'
        status:
          $ref: '#/components/schemas/status2'
        tenant:
          description: |
            The id of the tenant containing the resource. This is relevant for Fintechs that have multiple workspaces.
          example: abcdef_ghijkl
          type: string
        verification_last_run:
          description: Date and time KYC verification was last run on the person.
          example: 2010-05-06T12:23:34.321Z
          format: date-time
          readOnly: true
          type: string
        verification_status:
          $ref: '#/components/schemas/verification_status'
      type: object
    base_statement:
      allOf:
      - $ref: '#/components/schemas/statement_summary'
      - properties:
          account_summary:
            $ref: '#/components/schemas/account_summary'
          authorized_signer:
            items:
              $ref: '#/components/schemas/person'
            readOnly: true
            type: array
          closing_balance:
            description: "The account balance at the end of the statement period,\
              \ in ISO 4217 minor currency units."
            format: int64
            type: integer
          customer_service_details:
            $ref: '#/components/schemas/customer_service_details'
          disclosure:
            type: string
          joint_account_holders:
            items:
              $ref: '#/components/schemas/person'
            readOnly: true
            type: array
          opening_balance:
            description: "The account balance at the start of the statement period,\
              \ in ISO 4217 minor currency units."
            format: int64
            type: integer
          primary_account_holder_business:
            $ref: '#/components/schemas/business1'
          primary_account_holder_personal:
            $ref: '#/components/schemas/person'
          transactions:
            deprecated: true
            description: |
              This attribute is deprecated and will be removed in a future API version. Use `GET /v0/statements/{statement_id}/transactions` instead.
            items:
              $ref: '#/components/schemas/transaction'
            type: array
          transactions_omitted:
            description: |
              Only appears in `statement.created` webhook payloads. Indicates that the `transactions` attribute was emptied due to webhook size constraints. If this attribute returns `true`, you may use  `GET /v0/statements/{statement_id}/transactions` to retrieve the full list.
            type: boolean
        type: object
      type: object
    base_template_fields:
      properties:
        account_type:
          $ref: '#/components/schemas/account_type'
        bank_country:
          description: Bank country of the account. ISO 3166-1 Alpha-2 or Alpha-3
            country code.
          example: US
          pattern: "^[A-Z]{2,3}$"
          type: string
        currency:
          description: Account currency. ISO 4217 alphabetic currency code
          example: USD
          pattern: "^[A-Z]{3}$"
          type: string
      required:
      - account_type
      - bank_country
      - currency
      type: object
    billing_address:
      properties:
        address:
          type: string
        compressed_zip:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        zip:
          type: string
      type: object
    billing_period:
      description: |
        The scheme for determining an account's billing period.
      example:
        frequency: ANNUALLY
        start_date: 2022-01-01T00:00:00Z
      properties:
        frequency:
          description: |
            The frequency of billing cycles. Along with the start date, this will determine the start and end of each cycle.
          enum:
          - ANNUALLY
          - BI_WEEKLY
          - DAILY
          - MONTHLY
          - SEMI_MONTHLY
          - WEEKLY
          type: string
        start_date:
          description: |
            The first day of the first billing cycle for this account. For a monthly billing cycle, this would determine the day of the month each billing cycle will start on. Note that, although this is returned as a UTC timestamp, the date always corresponds to the bank's calendar, and therefore the time and timezone should be ignored.
          example: 2022-01-01T00:00:00Z
          format: date-time
          type: string
      required:
      - frequency
      - start_date
      type: object
    business:
      allOf:
      - required:
        - is_customer
        - status
      - $ref: '#/components/schemas/base'
      description: Represents a business customer.
      type: object
    business1:
      properties:
        creation_time:
          format: date-time
          type: string
        ein:
          type: string
        email:
          type: string
        entity_name:
          type: string
        formation_date:
          format: date
          type: string
        formation_state:
          type: string
        id:
          format: uuid
          type: string
        last_updated_time:
          format: date-time
          type: string
        phone_number:
          type: string
        status:
          type: string
        structure:
          type: string
        trade_names:
          items:
            type: string
          type: array
        verification_last_run:
          format: date-time
          type: string
        verification_status:
          type: string
      title: Business
      type: object
    business_business_owner_relationship:
      allOf:
      - $ref: '#/components/schemas/patch_business_business_owner_relationship'
      - required:
        - additional_data
        - from_business_id
        - to_business_id
      description: Denotes the relationship between specified businesses.
      type: object
    business_id:
      description: The unique identifier of a business
      example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
      format: uuid
      type: string
    business_id1:
      description: |
        Unique ID for the business. Exactly one of `business_id` or `person_id` must be set.
      example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
      format: uuid
      type: string
    business_id2:
      description: |
        Unique ID for the business. Exactly one of `business_id` or `person_id` must be set.
      example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
      format: uuid
      type: string
    business_id3:
      description: |
        Unique ID for the business. Exactly one of `business_id` or `person_id` must be set.
      example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
      format: uuid
      type: string
    business_id4:
      description: |
        Unique ID for the business. Exactly one of `business_id` or `person_id` must be set.
      example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
      format: uuid
      type: string
    business_id5:
      description: |
        Unique ID for the business. Exactly one of `business_id` or `person_id` must be set.
      example: b01db9c7-78f2-4a99-8aca-1231d32f9b96
      format: uuid
      type: string
    business_id6:
      description: |
        Unique ID for the business. Exactly one of `business_id` or `person_id` must be set.
      example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
      format: uuid
      type: string
    business_list:
      allOf:
      - $ref: '#/components/schemas/paginated_response'
      - properties:
          businesses:
            description: Array of businesses.
            items:
              $ref: '#/components/schemas/business'
            type: array
        required:
        - businesses
        type: object
    bypassable_errors:
      enum:
      - ACCOUNT_OWNER_WATCHLIST
      - DURATION_CONFLICT
      - EXTERNAL_ACCOUNT_NOT_ACTIVE
      - EXTERNAL_ACCOUNT_NOT_VERIFIED
      - EXTERNAL_ACH_DISABLED_FOR_TENANT
      - FRAUD_DETECTED
      - IMPROPER_ACCOUNT_CUSTOMER_RELATIONSHIP
      - IMPROPER_ACCOUNT_STATUS
      - IMPROPER_CUSTOMER_STATUS
      - IMPROPER_CUSTOMER_VERIFICATION_STATUS
      - IMPROPER_PARTNER_LIFECYCLE_STATUS
      - IMPROPER_PARTNER_VERIFICATION_STATUS
      - PARTIAL_HOLDS_DISABLED
      type: string
    bypassable_errors1:
      enum:
      - ACCOUNT_OWNER_WATCHLIST
      - IMPROPER_ACCOUNT_CUSTOMER_RELATIONSHIP
      - IMPROPER_ACCOUNT_STATUS
      - IMPROPER_CUSTOMER_STATUS
      - IMPROPER_CUSTOMER_VERIFICATION_STATUS
      - IMPROPER_PARTNER_LIFECYCLE_STATUS
      - IMPROPER_PARTNER_VERIFICATION_STATUS
      - SPEND_CONTROL_VIOLATION
      - SUSPECTED_FRAUD
      type: string
    calculation_method:
      enum:
      - COMPOUNDED_DAILY
      - COMPOUNDED_MONTHLY
      type: string
    card_acceptor_model:
      example:
        address: address
        city: city
        country: country
        ecommerce_security_level_indicator: ecommerce_security_level_indicator
        mcc: mcc
        name: name
        partial_approval_capable: false
        state: state
        zip: zip
      properties:
        address:
          maxLength: 255
          type: string
        city:
          maxLength: 40
          type: string
        country:
          type: string
        ecommerce_security_level_indicator:
          type: string
        mcc:
          maxLength: 5
          type: string
        name:
          maxLength: 50
          type: string
        partial_approval_capable:
          default: false
          type: boolean
        state:
          description: Two-Letter USPS State Abbreviation
          pattern: "\\b(A[KLRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|PA|RI|S[CD]|T[NX]|UT|V[AT]|W[AIVY])\\\
            b"
          type: string
        zip:
          maxLength: 10
          type: string
      type: object
    card_activation_request:
      properties:
        activation_code:
          description: An activation code provided with the card required to prove
            possession of the card
          type: string
        customer_id:
          description: The ID of the customer for which card is being activated
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
      required:
      - activation_code
      - customer_id
      type: object
    card_brand:
      description: The brand of a card product
      enum:
      - MASTERCARD
      - VISA
      type: string
    card_change:
      description: Card change details
      properties:
        change_type:
          $ref: '#/components/schemas/change_type'
        channel:
          $ref: '#/components/schemas/change_channel'
        id:
          description: Unique token
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          readOnly: true
          type: string
        memo:
          description: Additional details about the reason for the status change
          maxLength: 255
          type: string
        reason:
          $ref: '#/components/schemas/card_status_reason_code'
        state:
          $ref: '#/components/schemas/card_change_state'
        updated_at:
          description: Date of change
          example: 2010-05-06T12:23:34.321Z
          format: date-time
          readOnly: true
          type: string
        updated_by:
          description: "ID of user who initiated the change, if done via Synctera\
            \ Admin System"
          type: string
      required:
      - change_type
      - channel
      - id
      - state
      - updated_at
      - updated_by
      type: object
    card_change_state:
      description: Card status
      oneOf:
      - $ref: '#/components/schemas/card_status'
      - $ref: '#/components/schemas/card_pin_status'
      - $ref: '#/components/schemas/card_fulfillment_status'
    card_changes_list:
      allOf:
      - properties:
          changes:
            description: List of changes in descending chronological order
            items:
              $ref: '#/components/schemas/card_change'
            type: array
        required:
        - changes
        type: object
      - $ref: '#/components/schemas/paginated_response'
    card_edit_request:
      properties:
        card_status:
          $ref: '#/components/schemas/card_status_request'
        customer_id:
          description: The ID of the customer to whom the card will be issued
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        emboss_name:
          $ref: '#/components/schemas/emboss_name'
        memo:
          description: Additional details about the reason for the status change
          maxLength: 255
          type: string
        metadata:
          additionalProperties:
            type: string
          description: Additional data to include in the request structured as key-value
            pairs
          type: object
        reason:
          $ref: '#/components/schemas/card_status_reason_code'
      type: object
    card_format:
      properties:
        form:
          description: PHYSICAL or VIRTUAL.
          enum:
          - PHYSICAL
          - VIRTUAL
          type: string
      required:
      - form
      type: object
    card_fulfillment_status:
      description: The status indicating the state of the card issuance
      enum:
      - DIGITALLY_PRESENTED
      - ISSUED
      - ORDERED
      - REISSUED
      - REJECTED
      - REORDERED
      - SHIPPED
      type: string
    card_id:
      description: The unique identifier of a card
      example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
      format: uuid
      type: string
    card_image_details:
      example:
        card_product_id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
        rejection_memo: rejection_memo
        rejection_reason: null
        id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
        customer_id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
        status: null
      properties:
        card_product_id:
          description: The unique identifier of a cards product
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        customer_id:
          description: The unique identifier of a customer
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        id:
          description: The unique identifier of a card image
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        rejection_memo:
          type: string
        rejection_reason:
          $ref: '#/components/schemas/card_image_rejection_reason'
        status:
          $ref: '#/components/schemas/card_image_status'
      required:
      - card_product_id
      - customer_id
      - id
      - status
    card_image_details_list:
      allOf:
      - properties:
          images:
            description: Array of image details
            items:
              $ref: '#/components/schemas/card_image_details'
            type: array
        required:
        - images
        type: object
      - $ref: '#/components/schemas/paginated_response'
    card_image_id:
      description: The unique identifier of a card image
      example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
      format: uuid
      type: string
    card_image_mode:
      description: |
        The image mode of a card product.
        If the card product supports custom card images, this value determines how the images will be handled during card issuance.
        REQUIRED means that cards issued with this card product must have the ID of an image that has been uploaded. Note that the image does not necessarily have to have been approved prior to the issuance request. This mode is currently disabled.
        REQUIRED_APPROVED_FIRST means that cards issued with this card product must have the ID of an image that has been uploaded and approved.
      enum:
      - REQUIRED
      - REQUIRED_APPROVED_FIRST
      type: string
    card_image_rejection_reason:
      description: The category of reason that a card image was rejected
      enum:
      - BRANDED
      - COPYRIGHT
      - INAPPROPRIATE
      - OTHER
      - PROMOTIONAL
      - TRADEMARK
      type: string
    card_image_status:
      description: The status of a custom card image
      enum:
      - APPROVED
      - NOT_UPLOADED
      - REJECTED
      - UNREVIEWED
      type: string
    card_issuance_request:
      discriminator:
        mapping:
          PHYSICAL: '#/components/schemas/physical_card_issuance_request'
          VIRTUAL: '#/components/schemas/virtual_card_issuance_request'
        propertyName: form
      oneOf:
      - $ref: '#/components/schemas/virtual_card_issuance_request'
      - $ref: '#/components/schemas/physical_card_issuance_request'
      type: object
    card_list_response:
      allOf:
      - $ref: '#/components/schemas/paginated_response'
      - properties:
          cards:
            description: Array of Cards
            items:
              $ref: '#/components/schemas/card_response'
            type: array
        required:
        - cards
        type: object
    card_metadata:
      additionalProperties:
        type: string
      description: Additional data to include in the request structured as key-value
        pairs
      type: object
    card_options:
      properties:
        billing_address:
          $ref: '#/components/schemas/billing_address'
        card_present:
          default: false
          type: boolean
        cvv:
          maxLength: 3
          type: string
        expiration:
          maxLength: 4
          minLength: 4
          type: string
      type: object
    card_pin_status:
      description: The status of the card PIN
      enum:
      - CHANGED
      - SET
      readOnly: true
      type: string
    card_product:
      allOf:
      - properties:
          active:
            description: Indicates whether the Card Product is active
            type: boolean
          card_program_id:
            description: Card Program ID
            example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
            format: uuid
            type: string
          color:
            description: Color code for dynamic card elements such as PAN and card
              holder name
            pattern: "^[0-9A-F]{6}$"
            type: string
          creation_time:
            description: The timestamp representing when the Card Product was created
            example: 2010-05-06T12:23:34.321Z
            format: date-time
            readOnly: true
            type: string
          digital_wallet_tokenization:
            $ref: '#/components/schemas/digital_wallet_tokenization'
          end_date:
            description: The time when the Card Product is decommissioned
            example: 2050-06-07T21:32:43.321Z
            format: date-time
            type: string
          id:
            description: Card Product ID
            example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
            format: uuid
            readOnly: true
            type: string
          image:
            description: Indicates whether or not there is an overlay image of the
              card product available
            type: boolean
          image_mode:
            $ref: '#/components/schemas/card_image_mode'
          issue_without_kyc:
            description: Allow issuing cards on this product without requiring KYC
            type: boolean
          last_modified_time:
            description: The timestamp representing when the Card Product was last
              modified
            example: 2010-05-06T12:23:34.321Z
            format: date-time
            readOnly: true
            type: string
          name:
            description: The name of the Card Product
            maxLength: 40
            minLength: 1
            type: string
          orientation:
            description: Card orientation
            enum:
            - HORIZONTAL
            - VERTICAL
            type: string
          package_id:
            description: Card fulfillment provider’s package ID
            maxLength: 50
            minLength: 1
            type: string
          physical_card_format:
            $ref: '#/components/schemas/physical_card_format'
          return_address:
            $ref: '#/components/schemas/shipping'
          start_date:
            description: The time when the Card Product goes live
            example: 2010-05-06T12:23:34.321Z
            format: date-time
            type: string
          three_ds_policy:
            $ref: '#/components/schemas/three_ds_policy'
          txn_enhancer:
            $ref: '#/components/schemas/txn_enhancer'
        required:
        - active
        - card_program_id
        - name
        - start_date
        type: object
      - $ref: '#/components/schemas/card_format'
      description: Card Product
    card_product_id:
      description: The unique identifier of a cards product
      example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
      format: uuid
      type: string
    card_product_list_response:
      allOf:
      - properties:
          card_products:
            description: Array of Card Products
            items:
              $ref: '#/components/schemas/card_product_response'
            type: array
        required:
        - card_products
        type: object
      - $ref: '#/components/schemas/paginated_response'
    card_product_response:
      allOf:
      - $ref: '#/components/schemas/card_product'
      required:
      - active
      - card_program_id
      - creation_time
      - digital_wallet_tokenization
      - end_date
      - form
      - id
      - last_modified_time
      - name
      - start_date
      - three_ds_policy
    card_response:
      discriminator:
        mapping:
          PHYSICAL: '#/components/schemas/physical_card_response'
          VIRTUAL: '#/components/schemas/virtual_card_response'
        propertyName: form
      oneOf:
      - $ref: '#/components/schemas/virtual_card_response'
      - $ref: '#/components/schemas/physical_card_response'
    card_status:
      description: The status indicating the card lifecycle state
      enum:
      - ACTIVE
      - IMAGE_PENDING
      - IMAGE_REJECTED
      - PENDING
      - REJECTED
      - SUSPENDED
      - TERMINATED
      - UNACTIVATED
      type: string
    card_status_object:
      description: The status of the card
      properties:
        card_status:
          $ref: '#/components/schemas/card_status'
        memo:
          description: Additional details about the reason for the status change
          maxLength: 255
          type: string
        pending_reasons:
          $ref: '#/components/schemas/card_status_pending_reasons'
        status_reason:
          $ref: '#/components/schemas/card_status_reason_code'
      required:
      - card_status
      title: Status
      type: object
    card_status_pending_reasons:
      description: reasons why the card status is PENDING
      properties:
        is_waiting_for_bulk_shipment:
          description: |
            The card is to be shipping as part of a bulk shipment but that bulk shipment has not yet been released.
          type: boolean
        is_waiting_for_image:
          description: |
            The card has a custom image and either that image hasn't yet been uploaded and approved or the card has not yet been processed by the periodic daily custom card image processing task.
          type: boolean
        is_waiting_for_pin:
          description: |
            The card requires a PIN to be set before it can be issued (refer to the pin_issuance_policy of the related card product). The PIN has not yet been set and not enough time has passed to use a random PIN (if applicable).
          type: boolean
      type: object
    card_status_reason_code:
      description: |
        The reason for the card status

        Code | Description
        --- | ---
        NEW | Card activated
        REQ | Requested by you
        INA | Dormant
        UNK | Invalid shipping address
        NEG | Negative account balance
        REV | Account under review
        SUS | Suspicious activity
        OUT | Activity outside program parameters
        FRD | Confirmed fraud
        MAT | Matched with an OFAC list
        LOS | Card reported lost
        CLO | Card was cloned
        COM | Account or card was compromised
        TMP | Awaiting customer confirmation
        PRC | Initiated by Processor
        ISS | Initiated by Issuer
        EXP | Card expired
        KYC | Failed KYC
        INF | Information was validated
        ACT | Account activity was validated
        AUX | Initiated by a third party
        PIN | PIN try limit reached
        STO | Card reported stolen
        ADD | Address issue
        NAM | Name issue
        SSN | SSN issue
        DOB | DOB issue
        EML | Email issue
        PHO | Phone issue
        FUL | Account/fulfillment mismatch
        OTH | Other
      enum:
      - ACT
      - ADD
      - AUX
      - CLO
      - COM
      - DOB
      - EML
      - EXP
      - FRD
      - FUL
      - INA
      - INF
      - ISS
      - KYC
      - LOS
      - MAT
      - NAM
      - NEG
      - NEW
      - OTH
      - OUT
      - PHO
      - PIN
      - PRC
      - REQ
      - REV
      - SSN
      - STO
      - SUS
      - TMP
      - UNK
      type: string
    card_status_reason_memo:
      description: Additional details about the reason for the status change
      maxLength: 255
      type: string
    card_status_request:
      description: The status indicating the card lifecycle state
      enum:
      - ACTIVE
      - SUSPENDED
      - TERMINATED
      type: string
    card_type:
      description: The type of the card program and BIN
      enum:
      - DEBIT
      - PREPAID
      type: string
    card_widget_url_response:
      description: A URL for activate card and set pin widgets
      example:
        url: https://openapi-generator.tech
      properties:
        url:
          format: uri
          type: string
      type: object
    cash_pickup:
      allOf:
      - $ref: '#/components/schemas/base_cash_pickup'
      - properties:
          status:
            $ref: '#/components/schemas/cash_pickup_status'
        type: object
      required:
      - business_id
      - creation_time
      - currency
      - employee_customer_id
      - id
      - last_updated_time
      - scheduled_pickup_date
      - status
      - transaction_id
      title: Cash Pickup
      type: object
    cash_pickup_list:
      allOf:
      - $ref: '#/components/schemas/paginated_response'
      - properties:
          cash_pickups:
            description: Array of cash pickups
            items:
              $ref: '#/components/schemas/cash_pickup'
            type: array
        required:
        - cash_pickups
        type: object
      title: Cash Pickup List
    cash_pickup_metadata:
      additionalProperties:
        type: string
      type: object
    cash_pickup_patch_request:
      properties:
        metadata:
          additionalProperties:
            type: string
          type: object
        status:
          enum:
          - CANCELED
          - PENDING
          type: string
      title: Cash Pickup Update Request
      type: object
    cash_pickup_post_request:
      allOf:
      - $ref: '#/components/schemas/base_cash_pickup'
      title: Cash Pickup Create Request
    cash_pickup_status:
      enum:
      - CANCELED
      - COMPLETE
      - PENDING
      - SUSPENSE
      type: string
    change_channel:
      description: How the change was submitted
      enum:
      - ADMIN
      - API
      - FRAUD
      - SYSTEM
      type: string
    change_type:
      description: The category of card change
      enum:
      - FULFILLMENT
      - PIN
      - STATUS
      type: string
    clearing_model:
      example:
        amount: 80
        card_acceptor:
          address: address
          city: city
          country: country
          ecommerce_security_level_indicator: ecommerce_security_level_indicator
          mcc: mcc
          name: name
          partial_approval_capable: false
          state: state
          zip: zip
        force_post: false
        is_refund: false
        mid: mid
        network_fees:
        - amount: 123
          credit_debit: C
          type: ISSUER_FEE
        - amount: 123
          credit_debit: C
          type: ISSUER_FEE
        original_transaction_id: original_transaction_id
      properties:
        amount:
          description: The amount of the transaction in the smallest whole denomination
            of the applicable currency (eg. For USD use cents)
          type: integer
        card_acceptor:
          $ref: '#/components/schemas/card_acceptor_model'
        force_post:
          default: false
          type: boolean
        is_refund:
          default: false
          type: boolean
        mid:
          maxLength: 50
          minLength: 1
          type: string
        network_fees:
          items:
            $ref: '#/components/schemas/network_fee_model'
          type: array
        original_transaction_id:
          description: When you simulated a clearing the synchronous response would
            have included a `transaction.token`. That value should be used here.
          format: uuid
          type: string
      required:
      - amount
      - original_transaction_id
      type: object
    client_token:
      description: "A short-lived, one-time token used for accessing client PINs/PANs"
      example:
        client_token: 7d943c51-e4ff-4e57-9558-08cab6b963c7
      properties:
        client_token:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          type: string
      title: Client Token
      type: object
    content:
      description: The note's text content.
      example: Customer was frozen to investigate fraud.
      type: string
    correspondent_bank_details:
      example:
        swift_code: BNGRGRAAXXX
        bank_address:
          country_code: US
          city: New York
          address_line_1: 100 Main St.
          address_line_2: Suite 99
          state: NY
          postal_code: "28620"
        bank_name: Bank of Greece
      properties:
        bank_address:
          $ref: '#/components/schemas/address'
        bank_name:
          description: |
            The name of the correspondent bank.
          example: Bank of Greece
          minLength: 1
          type: string
        swift_code:
          description: |
            The SWIFT code (also known as BIC code) used for international payments.
          example: BNGRGRAAXXX
          pattern: "^[A-Z]{6}[A-Z0-9]{2}([A-Z0-9]{3})?$"
          type: string
      required:
      - bank_address
      - bank_name
      - swift_code
      title: Correspondent bank details
      type: object
    create_card_image_request:
      properties:
        card_product_id:
          description: The unique identifier of a cards product
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        customer_id:
          description: The unique identifier of a customer
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
      required:
      - card_product_id
      - customer_id
      type: object
    create_gateway_request:
      properties:
        active:
          default: true
          description: Current status of the Authorization gateway
          type: boolean
        card_products:
          description: List of Card Product unique identifiers that will utilize the
            Gateway
          items:
            example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
            format: uuid
            type: string
          type: array
        custom_headers:
          additionalProperties:
            type: string
          description: Custom Headers of the Authorization gateway
          type: object
        standin:
          $ref: '#/components/schemas/gateway_standin'
        url:
          description: URL of the Authorization gateway
          format: uri
          maxLength: 1000
          type: string
      required:
      - card_products
      - url
      type: object
    currency_code:
      description: ISO 4217  Alpha-3 currency code
      example: USD
      maxLength: 3
      minLength: 3
      type: string
    customer:
      allOf:
      - $ref: '#/components/schemas/base_person'
      - properties:
          dob:
            description: Customer's date of birth in RFC 3339 full-date format (YYYY-MM-DD)
            example: 2000-01-01
            format: date
            type: string
          first_name:
            description: Customer's first name
            example: Jane
            type: string
          last_name:
            description: Customer's last name
            example: Smith
            type: string
          status:
            description: Customer's status
            enum:
            - ACTIVE
            - DECEASED
            - DENIED
            - DORMANT
            - ESCHEAT
            - FROZEN
            - INACTIVE
            - PROSPECT
            - SANCTION
            type: string
        required:
        - status
      description: Details of a customer
      title: Customer
      type: object
    customer_id:
      example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
      format: uuid
      type: string
    customer_id1:
      description: The unique identifier of a customer
      example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
      format: uuid
      type: string
    customer_in_body:
      discriminator:
        mapping:
          ACTIVE: '#/components/schemas/customer'
          DECEASED: '#/components/schemas/customer'
          DENIED: '#/components/schemas/customer'
          DORMANT: '#/components/schemas/customer'
          ESCHEAT: '#/components/schemas/customer'
          FROZEN: '#/components/schemas/customer'
          INACTIVE: '#/components/schemas/customer'
          PROSPECT: '#/components/schemas/prospect'
          SANCTION: '#/components/schemas/customer'
        propertyName: status
      oneOf:
      - $ref: '#/components/schemas/customer'
      - $ref: '#/components/schemas/prospect'
      type: object
    customer_kyc_status:
      description: Customer's KYC status
      enum:
      - ACCEPTED
      - PROVIDER_FAILURE
      - PROVISIONAL
      - REJECTED
      - REVIEW
      - UNVERIFIED
      readOnly: true
      type: string
    customer_list:
      allOf:
      - properties:
          customers:
            description: Array of Customers
            items:
              $ref: '#/components/schemas/customer_in_body'
            type: array
        required:
        - customers
        type: object
      - $ref: '#/components/schemas/paginated_response'
    customer_service_details:
      description: "The customer service details of the fintech partner, e.g. phone\
        \ number, email address, etc."
      properties:
        address:
          $ref: '#/components/schemas/address2'
        email:
          description: The customer service email address
          type: string
        phone_number:
          description: The customer service phone number
          type: string
      title: Customer Service Details
      type: object
    customer_type:
      description: Customer type
      enum:
      - BUSINESS
      - PERSONAL
      readOnly: true
      title: Customer Type
      type: string
    customer_verification:
      example:
        customer_consent: true
        customer_ip_address: 66.152.213.183
      properties:
        customer_consent:
          description: |
            Whether this customer has consented to a KYC check.
          type: boolean
        customer_ip_address:
          description: IP address of the customer being verified.
          example: 140.151.183.216
          type: string
        document_id:
          description: |
            The ID of the uploaded government-issued identification document provided by the Socure SDK.
          example: 1ab2c3de-fg45-6789-a01b-23c45678defg
          type: string
        verification_type:
          description: |
            List of possible checks to run on a customer. This is a legacy field that is now ignored.
          items:
            $ref: '#/components/schemas/verification_type'
          type: array
      required:
      - customer_consent
      title: PersonVerification
      type: object
    customer_verification_result:
      description: Verification result
      example:
        result: ACCEPTED
        verification_time: 2000-01-23T04:56:07.000+00:00
        verification_type: kyc
        id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
        raw_response:
          provider: SOCURE
          raw_data: "{}"
        vendor_info: null
        issues:
        - "R186: Global Watchlist sources selected are correlated with the input identifiers"
        - "R186: Global Watchlist sources selected are correlated with the input identifiers"
      properties:
        id:
          description: Unique ID for this verification result.
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          readOnly: true
          type: string
        issues:
          deprecated: true
          description: |
            List of potential problems found. These are subject to change.
          items:
            example: "R186: Global Watchlist sources selected are correlated with\
              \ the input identifiers"
            type: string
          readOnly: true
          type: array
        raw_response:
          $ref: '#/components/schemas/raw_response'
        result:
          description: The determination of this verification.
          enum:
          - ACCEPTED
          - PROVIDER_FAILURE
          - PROVISIONAL
          - REJECTED
          - REVIEW
          example: ACCEPTED
          type: string
        vendor_info:
          $ref: '#/components/schemas/verification_vendor_info'
        verification_time:
          description: The date and time the verification was completed.
          format: date-time
          type: string
        verification_type:
          $ref: '#/components/schemas/verification_type'
      required:
      - result
      - verification_time
      - verification_type
      title: CustomerVerificationResult
      type: object
    customer_verification_result_list:
      allOf:
      - properties:
          verifications:
            description: Array of verification results.
            items:
              $ref: '#/components/schemas/customer_verification_result'
            type: array
        required:
        - verifications
        type: object
      - $ref: '#/components/schemas/paginated_response'
    customer_verify_response:
      allOf:
      - properties:
          kyc_status:
            $ref: '#/components/schemas/customer_kyc_status'
          verifications:
            description: Array of verification results.
            items:
              $ref: '#/components/schemas/customer_verification_result'
            type: array
        required:
        - kyc_status
        - verifications
        type: object
      - $ref: '#/components/schemas/paginated_response'
    dc_sign:
      description: The `dc_sign` represents the direction money was moved.
      enum:
      - credit
      - debit
      type: string
    delete_response:
      description: Deleted object information
      example:
        resource: resource
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        id:
          description: Object ID
          format: uuid
          type: string
        resource:
          description: The resource name
          type: string
      title: Deleted Object
      type: object
    deposit:
      allOf:
      - properties:
          creation_time:
            example: 2010-05-06T12:23:34.321Z
            format: date-time
            type: string
          date_captured:
            description: "Date the deposit was captured, in RFC 3339 format"
            example: 2010-05-06T12:23:34.321Z
            format: date-time
            type: string
          date_processed:
            description: "Date the deposit was processed, in RFC 3339 format"
            example: 2010-05-06T12:23:34.321Z
            format: date-time
            type: string
          deposit_amount:
            description: Amount deposited in ISO 4217 minor currency units
            example: 12345
            type: integer
          id:
            description: Remote Check Deposit ID
            example: b01db9c7-78f2-4a99-8aca-1231d32f9b96
            format: uuid
            type: string
          last_updated_time:
            example: 2010-05-06T12:23:34.321Z
            format: date-time
            type: string
          ocr_account_number:
            description: "Account number of the issuer of the check, included if OCR\
              \ is successful"
            example: "123456789"
            type: string
          ocr_check_number:
            description: "The unique check number for this check in the checkbook,\
              \ included if OCR is successful and there is a check number on the check"
            example: "001"
            type: string
          ocr_routing_number:
            description: "Routing number of the issuing bank, included if OCR is successful"
            example: "026009593"
            type: string
          status:
            description: The status of the deposit
            enum:
            - FAILED
            - PENDING
            - REJECTED
            - SUBMITTED
            type: string
          transaction_id:
            description: The ID of the transaction associated with this deposit
            example: b01db9c7-78f2-4a99-8aca-1231d32f9b96
            format: uuid
            type: string
          vendor_info:
            $ref: '#/components/schemas/vendor_info'
        type: object
      - $ref: '#/components/schemas/deposit_request'
      description: Deposit using remote deposit capture
      title: Remote Check Deposit
    deposit_get:
      allOf:
      - $ref: '#/components/schemas/deposit'
      - required:
        - account_id
        - back_image_id
        - check_amount
        - date_captured
        - date_processed
        - deposit_amount
        - deposit_currency
        - front_image_id
        - id
        - status
    deposit_list:
      allOf:
      - properties:
          deposits:
            description: Array of  Remote Check Deposits
            items:
              $ref: '#/components/schemas/deposit_get'
            type: array
        required:
        - deposits
        type: object
      - $ref: '#/components/schemas/paginated_response'
    deposit_post:
      allOf:
      - required:
        - account_id
        - back_image_id
        - check_amount
        - deposit_currency
        - front_image_id
      - $ref: '#/components/schemas/deposit_request'
    deposit_request:
      description: User provided request to submit an RDC
      properties:
        account_id:
          description: The ID of the account
          example: b01db9c7-78f2-4a99-8aca-1231d32f9b96
          format: uuid
          type: string
        back_image_id:
          description: ID of the uploaded image of the back of the check
          example: b01db9c7-78f2-4a99-8aca-1231d32f9b96
          format: uuid
          type: string
        business_id:
          description: |
            Unique ID for the business. Exactly one of `business_id` or `person_id` must be set.
          example: b01db9c7-78f2-4a99-8aca-1231d32f9b96
          format: uuid
          type: string
        check_amount:
          description: Amount on check in ISO 4217 minor currency units
          example: 12345
          minimum: 1
          type: integer
        deposit_currency:
          description: ISO 4217 currency code for the deposit amount
          example: USD
          type: string
        front_image_id:
          description: ID of the uploaded image of the front of the check
          example: b01db9c7-78f2-4a99-8aca-1231d32f9b96
          format: uuid
          type: string
        metadata:
          description: |
            Optional field to store additional information about the resource. Intended to be used by the integrator to store non-sensitive data.
          type: object
        person_id:
          description: |
            Unique ID for the person. Exactly one of `person_id` or `business_id` must be set.
          example: b01db9c7-78f2-4a99-8aca-1231d32f9b96
          format: uuid
          type: string
      title: Remote Check Deposit Request
      type: object
    detail:
      description: An object containing information about an individual check performed.
      properties:
        description:
          description: Human-readable description explaining the individual check.
          example: Email address is correlated with the individual's name
          type: string
        label:
          description: Human-readable grouping describing the aspect of the customer's
            identity examined by this check.
          example: Email
          type: string
        result:
          description: |
            The result of the individual check. One of the following:
            * `PASS` – the check passed contributing to a positive outcome (or accepted verification result).
            * `WARN` – the results of the check were inconclusive and might require review.
            * `FAIL` – the check failed and might result in a failing outcome (or rejected verification_result).
          enum:
          - FAIL
          - PASS
          - WARN
          example: PASS
          type: string
        vendor_code:
          description: Machine-readable description of the individual check. This
            field contains vendor-specific terms and may not be populated in all cases.
          example: R940
          type: string
      readOnly: true
      type: object
    details:
      description: |
        A list of individual checks done as part of the due diligence process for the verification type.
      items:
        $ref: '#/components/schemas/detail'
      readOnly: true
      type: array
    device_details:
      description: "Optionally provided browser device details, used as a fallback\
        \ in case there is an issue with Device Data Collection. Note that minimal\
        \ field validation is performed."
      properties:
        color_depth:
          description: "The device's color palette bit depth, in bits per pixel"
          example: 24
          maximum: 99
          minimum: 1
          type: integer
        header:
          description: The exact contents of the browser's HTTP accept headers
          example: "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"
          type: string
        ip_address:
          description: The device's IP address (either IPv4 or IPv6 formats are acceptable)
          example: 1.12.123.255
          type: string
        java_enabled:
          description: If the browser has the ability to execute Java (value returned
            from `navigator.javaEnabled` property)
          type: boolean
        javascript_enabled:
          description: If the browser has the ability to execute JavaScript (value
            returned from `navigator.javaScriptEnabled` property)
          type: boolean
        language:
          description: The browser's language as defined in IETF BCP47
          example: en-US
          type: string
        screen_height:
          description: "The total height of the device's screen, in pixels"
          example: 1080
          maximum: 999999
          minimum: 1
          type: integer
        screen_width:
          description: "The total width of the device's screen, in pixels"
          example: 1920
          maximum: 999999
          minimum: 1
          type: integer
        timezone:
          description: "The offset from UTC of the device's local timezone, in minutes"
          example: -300
          maximum: 840
          minimum: -840
          type: integer
        user_agent:
          description: The exact contents of the HTTP user agent header
          example: "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML,\
            \ like Gecko) Chrome/71.0.3578.98 Safari/537.36"
          type: string
      required:
      - color_depth
      - header
      - ip_address
      - java_enabled
      - javascript_enabled
      - language
      - screen_height
      - screen_width
      - timezone
      - user_agent
      type: object
    device_type:
      description: The type of device into which the digital wallet token will be
        provisioned.
      enum:
      - MOBILE_PHONE
      - TABLET
      - WATCH
      type: string
    digital_wallet_token_address_verification:
      properties:
        validate:
          example: false
          type: boolean
      type: object
    digital_wallet_token_edit_request:
      properties:
        token_status:
          description: The status indicating the digital wallet token lifecycle state
          enum:
          - ACTIVE
          - SUSPENDED
          - TERMINATED
          type: string
      required:
      - token_status
      type: object
    digital_wallet_token_id:
      description: The unique identifier of a digital wallet token
      format: string
      type: string
    digital_wallet_token_response:
      example:
        requested_time: 2010-05-06T12:23:34.321Z
        last_modified_time: 2010-05-06T12:23:34.321Z
        device_id: device_id
        approved_time: 2010-05-06T12:23:34.321Z
        device_type: APPLIANCE
        id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
        state: null
        type: APPLE_PAY
        card_id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
      properties:
        approved_time:
          example: 2010-05-06T12:23:34.321Z
          format: date-time
          type: string
        card_id:
          description: Card ID of the Digital wallet Token
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        device_id:
          description: The user’s Android device ID; the device’s unique identifier.
          maxLength: 124
          type: string
        device_type:
          description: Type of the device where the Digital Wallet Token is used in
          enum:
          - APPLIANCE
          - GAMING_DEVICE
          - LAPTOP
          - MOBILE_PHONE
          - MOBILE_PHONE_OR_TABLET
          - TABLET
          - UNKNOWN
          - VEHICLE
          - WATCH
          type: string
        id:
          description: Digital Wallet Token ID
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        last_modified_time:
          example: 2010-05-06T12:23:34.321Z
          format: date-time
          type: string
        requested_time:
          example: 2010-05-06T12:23:34.321Z
          format: date-time
          type: string
        state:
          $ref: '#/components/schemas/digital_wallet_token_state'
        type:
          description: "Type of the Digital Wallet. Can be one of APPLE_PAY, ANDROID_PAY,\
            \ SAMSUNG_PAY or something else when cards are added on file to a merchant."
          example: APPLE_PAY
          type: string
      type: object
    digital_wallet_token_state:
      description: Current status of the Digital Wallet Token
      enum:
      - ACTIVE
      - REQUESTED
      - REQUEST_DECLINED
      - SUSPENDED
      - TERMINATED
      type: string
    digital_wallet_tokenization:
      properties:
        card_art_id:
          description: Specifies the digital wallet card art identifier for the card
            product.
          type: string
        provisioning_controls:
          $ref: '#/components/schemas/provisioning_controls'
      type: object
    disclosure:
      allOf:
      - $ref: '#/components/schemas/base_disclosure'
      - required:
        - disclosure_date
        - event_type
        - type
        - version
      description: Represents a disclosure.
      type: object
    disclosure1:
      description: Represents a disclosure
      example:
        creation_time: 2010-05-06T12:23:34.321Z
        event_type: VIEWED
        last_updated_time: 2010-05-06T12:23:34.321Z
        id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
        type: REG_DD
        version: v1.1
        timestamp: 2010-05-06T12:23:34.321Z
      properties:
        creation_time:
          example: 2010-05-06T12:23:34.321Z
          format: date-time
          readOnly: true
          type: string
        event_type:
          enum:
          - ACKNOWLEDGED
          - DISPLAYED
          - VIEWED
          example: VIEWED
          type: string
        id:
          description: Disclosure ID
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        last_updated_time:
          example: 2010-05-06T12:23:34.321Z
          format: date-time
          readOnly: true
          type: string
        timestamp:
          description: Date of disclosure
          example: 2010-05-06T12:23:34.321Z
          format: date-time
          type: string
        type:
          description: Disclosure Type
          enum:
          - ACH_AUTHORIZATION
          - CARDHOLDER_AGREEMENT
          - E_SIGN
          - KYC_DATA_COLLECTION
          - OWNER_CERTIFICATION
          - PRIVACY_NOTICE
          - REG_CC
          - REG_DD
          - REG_E
          - SC_ACCOUNT_AGREEMENT
          - SC_AUTO_PAYMENT
          - SC_SECURITY_AGREEMENT
          - TERMS_AND_CONDITIONS
          example: REG_DD
          type: string
        version:
          description: Disclosure Version
          example: v1.1
          type: string
      required:
      - event_type
      - timestamp
      - type
      - version
      title: Disclosure
      type: object
    disclosure_list:
      allOf:
      - properties:
          disclosures:
            description: Array of disclosures.
            items:
              $ref: '#/components/schemas/disclosure'
            type: array
        required:
        - disclosures
        type: object
      - $ref: '#/components/schemas/paginated_response'
    disclosure_response:
      description: Represents all customer disclosures
      example:
        disclosures:
        - creation_time: 2010-05-06T12:23:34.321Z
          event_type: VIEWED
          last_updated_time: 2010-05-06T12:23:34.321Z
          id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          type: REG_DD
          version: v1.1
          timestamp: 2010-05-06T12:23:34.321Z
        - creation_time: 2010-05-06T12:23:34.321Z
          event_type: VIEWED
          last_updated_time: 2010-05-06T12:23:34.321Z
          id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          type: REG_DD
          version: v1.1
          timestamp: 2010-05-06T12:23:34.321Z
      properties:
        disclosures:
          description: List of the customer's disclosures
          items:
            $ref: '#/components/schemas/disclosure1'
          type: array
      title: List of Customer Disclosures
      type: object
    disclosure_type:
      description: "Describes the regulatory requirement that triggered the disclosure.\n\
        One of the following:\n* `ACH_AUTHORIZATION` –\n    The ACH Authorization\
        \ & Agreement Disclosure serves as a method of disclosing\n    and obtaining\
        \ consent from a consumer to conduct ACH and pre-authorized\n    electronic\
        \ transactions to and from their account. Record of obtaining this\n    consent\
        \ should be retained, in accordance with Reg E, for no less than 2 years\n\
        \    from the date the disclosure was made to the consumer.\n* `CARDHOLDER_AGREEMENT`\
        \ –\n    The Cardholder Agreement is a legal document that details the terms\
        \ of a card\n    agreement between either a consumer or a business, and the\
        \ financial\n    institution that issues the card. The Agreement governs the\
        \ use of the\n    account.\n* `E_SIGN` –\n    US law with rules around electronic\
        \ agreements/documents/disclosures:\n    used to obtain consent from consumers\
        \ to receive electronic communications\n    (agreements, disclosures, statements,\
        \ etc) about their accounts.\n* `KYC_DATA_COLLECTION` –\n    Document advising\
        \ the customer that you will collect their personal information\n    (name,\
        \ date of birth, tax ID, etc.)\n    and will be validating their information\
        \ against external data/documentation.\n* `PRIVACY_NOTICE` –\n    Document\
        \ that tells customers what is done with their non-public information,\n \
        \   who it is shared with, how is is secured,\n    and how they can opt out\
        \ of it being shared beyond Synctera.\n* `OWNER_CERTIFICATION` –\n    Disclosure\
        \ to certify that the beneficial owners of the business have been correctly\
        \ entered.\n* `REG_CC` –\n    US regulation that implements the Expedited\
        \ Funds Availability Act:\n    describes standards for when a financial institution\n\
        \    makes funds available in a deposit account.\n* `REG_DD` –\n    US regulation\
        \ that implements the Truth in Savings Act,\n    to inform customers about\
        \ the terms and rules for a deposit account.\n* `REG_E` –\n    US regulation\
        \ that implements the Electronic Funds Transfer Act:\n    covers liability\
        \ for electronic transactions,\n    disputes for fraudulent or unrecognized\
        \ electronic transactions,\n    and consent for electronic debits from a consumer's\
        \ account.\n* `TERMS_AND_CONDITIONS` –\n    A detailed agreement between you\
        \ and the consumer for the\n    structure, terms, fees, charges, rates of\
        \ the product or service,\n    and the rules for the relationship between\
        \ you and the consumer.\n* `SC_ACCOUNT_AGREEMENT` – \n    A detailed agreement\
        \ between you and the consumer for the\n    structure and terms of service\
        \ for smart card accounts.\n* `SC_SECURITY_AGREEMENT` – \n    A detailed agreement\
        \ between you and the consumer for the\n    terms of service for smart card\
        \ security account.\n* `SC_AUTO_PAYMENT` -\n    A detailed agreement between\
        \ you and the consumer for the\n    structure and terms of service for smart\
        \ card auto repayment.\n"
      enum:
      - ACH_AUTHORIZATION
      - CARDHOLDER_AGREEMENT
      - E_SIGN
      - KYC_DATA_COLLECTION
      - OWNER_CERTIFICATION
      - PRIVACY_NOTICE
      - REG_CC
      - REG_DD
      - REG_E
      - SC_ACCOUNT_AGREEMENT
      - SC_AUTO_PAYMENT
      - SC_SECURITY_AGREEMENT
      - TERMS_AND_CONDITIONS
      type: string
    document:
      example:
        creation_time: 2010-05-06T12:23:34.321Z
        related_resource_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        metadata: "{}"
        available_versions:
        - 0
        - 0
        file_name: file_name
        description: description
        type: null
        version: 6
        encryption: null
        last_updated_time: 2010-05-06T12:23:34.321Z
        name: name
        id: b01db9c7-78f2-4a99-8aca-1231d32f9b96
        related_resource_type: null
        tenant: abcdef_ghijkl
      properties:
        available_versions:
          description: All document versions
          items:
            type: integer
          type: array
        creation_time:
          description: The date and time the resource was created
          example: 2010-05-06T12:23:34.321Z
          format: date-time
          readOnly: true
          type: string
        description:
          description: A description of the document
          type: string
        encryption:
          $ref: '#/components/schemas/encryption'
        file_name:
          description: The name of the document
          readOnly: true
          type: string
        id:
          description: The unique identifier for this resource
          example: b01db9c7-78f2-4a99-8aca-1231d32f9b96
          format: uuid
          readOnly: true
          type: string
        last_updated_time:
          description: The date and time the resource was last updated
          example: 2010-05-06T12:23:34.321Z
          format: date-time
          readOnly: true
          type: string
        metadata:
          description: |
            Optional field to store additional information about the resource. Intended to be used by the integrator to store non-sensitive data.
          type: object
        name:
          description: A user-friendly name for the document
          type: string
        related_resource_id:
          description: The ID of the resource related to the document
          format: uuid
          type: string
        related_resource_type:
          $ref: '#/components/schemas/related_resource_type'
        tenant:
          description: |
            The id of the tenant containing the resource. This is relevant for Fintechs that have multiple workspaces.
          example: abcdef_ghijkl
          type: string
        type:
          $ref: '#/components/schemas/document_type'
        version:
          description: The document version
          type: integer
      type: object
    document_creation:
      properties:
        description:
          description: A description of the attached document
          type: string
        encryption:
          $ref: '#/components/schemas/encryption'
        file:
          description: The file contents
          format: binary
          type: string
        metadata:
          $ref: '#/components/schemas/metadata'
        name:
          description: A user-friendly name for the document
          type: string
        related_resource_id:
          description: The ID of the resource related to the document
          format: uuid
          type: string
        related_resource_type:
          $ref: '#/components/schemas/related_resource_type'
        type:
          $ref: '#/components/schemas/document_type'
      required:
      - file
      type: object
    document_list:
      allOf:
      - properties:
          documents:
            description: Array of documents
            items:
              $ref: '#/components/schemas/document'
            type: array
        required:
        - documents
        type: object
      - $ref: '#/components/schemas/paginated_response'
    document_type:
      description: The type of the document
      enum:
      - APPLICATION_DOCUMENTATION
      - CHECK_IMAGE
      - COMPANY_PROFILE_DOCUMENT
      - COMPLIANCE_REPORT
      - FINANCIAL_FILE
      - IDENTITY_DOCUMENTATION
      - STATEMENT
      - STATEMENT_DISCLOSURE
      - TERMS_OF_SERVICE
      type: string
    document_version:
      description: The document version
      type: integer
    document_versions:
      description: All document versions
      items:
        type: integer
      type: array
    eft_ca_base:
      description: EFT transfer specific to Canada
      properties:
        amount:
          description: Transfer amount in cents
          example: 10000
          format: int64
          minimum: 1
          type: integer
        customer_id:
          description: |
            The UUID of the Synctera customer resource that is the originator of the transfer.
          example: 46fec39e-e776-4571-bf90-d0e1d15172fe
          format: uuid
          type: string
        dc_sign:
          description: Debit or credit sign
          enum:
          - CREDIT
          - DEBIT
          example: DEBIT
          type: string
        source_data:
          description: Additional information to be added to the transfer
          type: object
        transaction_code:
          description: |
            The three digit transaction code that identifies the type of transaction. More information can be found here: https://www.payments.ca/sites/default/files/standard007eng.pdf.
          example: "304"
          maximum: 3
          minimum: 3
          type: string
      required:
      - amount
      - customer_id
      - dc_sign
      - transaction_code
      title: Electronic Funds Transfer
      type: object
    eft_ca_list:
      allOf:
      - $ref: '#/components/schemas/paginated_response'
      - properties:
          transfers:
            description: Array of transfers.
            items:
              $ref: '#/components/schemas/eft_ca_response'
            type: array
        required:
        - transfers
        type: object
    eft_ca_patch:
      allOf:
      - properties:
          source_data:
            description: Additional information to be added to the transfer
            type: object
          status:
            $ref: '#/components/schemas/eft_ca_status'
      description: Properties for updating a transfer
      title: Electronic Funds Transfer Patch
      type: object
    eft_ca_post:
      allOf:
      - $ref: '#/components/schemas/eft_ca_base'
      - properties:
          destination_account_id:
            description: |
              The UUID of the Synctera external account resource that is the destination of the transfer. This external account represents the account on the destination bank's platform.
            example: fccb4a46-1261-4e91-b622-73b5b946183d
            format: uuid
            type: string
          destination_account_owner_name:
            description: |
              The official name of the account owner of the destination account.
            example: Jane Joe
            type: string
          effective_date:
            description: The effective date of the transaction once it gets posted
            example: 2022-03-18
            format: date
            type: string
          is_same_day:
            description: Send the same day (use only is_same_day without specific
              effective_date).
            example: true
            type: boolean
          originating_account_id:
            description: |
              The UUID of the Synctera account resource originating the transfer.
            example: b01db9c7-78f2-4a99-8aca-1231d32f9b96
            format: uuid
            type: string
          originating_account_owner_name:
            description: |
              The official name of the account owner of the originating account.
            example: John Doe
            format: string
            type: string
        required:
        - destination_account_id
        - destination_account_owner_name
        - originating_account_id
        - originating_account_owner_name
      description: Properties for creating a transfer
      title: Electronic Funds Transfer Post
      type: object
    eft_ca_response:
      allOf:
      - $ref: '#/components/schemas/eft_ca_base'
      - properties:
          destination_account_id:
            description: |
              The UUID of the Synctera account that is the destination of the transfer. For a transfer originated by the Synctera platform, this will be an external account resource, while for a transfer originated by the external account, this account will be an account resource.
            example: fccb4a46-1261-4e91-b622-73b5b946183d
            format: uuid
            type: string
          destination_account_number:
            description: The account number of the destination account.
            example: "1344012344"
            format: string
            type: string
          destination_account_owner_name:
            description: The account owner name of the destination account.
            type: string
          effective_date:
            description: The effective date of the transaction once it gets posted
            example: 2022-03-18
            format: date
            type: string
          history:
            items:
              $ref: '#/components/schemas/action'
            type: array
          id:
            description: ID of the transfer
            format: uuid
            type: string
          is_same_day:
            description: Send the same day (use only is_same_day without specific
              effective_date).
            example: true
            type: boolean
          network_status:
            description: The network status of the transfer.
            enum:
            - FAILED
            - PENDING
            - POSTED
            example: PENDING
            type: string
          originating_account_id:
            description: |
              The UUID of the Synctera account that is the origination of the transfer. For a transfer originated by the Synctera platform, this will be an account resource, while for a transfer originated by the external account, this will be an external account resource.
            example: b01db9c7-78f2-4a99-8aca-1231d32f9b96
            format: uuid
            type: string
          originating_account_number:
            description: The account number of the originating account.
            example: "1961234745"
            format: string
            type: string
          originating_account_owner_name:
            description: The account owner name of the origination account.
            type: string
          posting_date:
            description: The posting date of the transaction once it gets posted
            example: 2022-03-18
            format: date
            type: string
          reference_id:
            description: The reference id of the transfer.
            example: "123456789"
            type: string
          status:
            $ref: '#/components/schemas/eft_ca_status'
          subtype:
            description: The subtype of the transfer
            enum:
            - INCOMING_CREDIT
            - INCOMING_CREDIT_RETURN
            - INCOMING_CREDIT_RETURN_REVERSAL
            - INCOMING_CREDIT_REVERSAL
            - INCOMING_DEBIT
            - INCOMING_DEBIT_RETURN
            - INCOMING_DEBIT_RETURN_REVERSAL
            - INCOMING_DEBIT_REVERSAL
            - OUTGOING_CREDIT
            - OUTGOING_CREDIT_RETURN
            - OUTGOING_CREDIT_RETURN_REVERSAL
            - OUTGOING_CREDIT_REVERSAL
            - OUTGOING_DEBIT
            - OUTGOING_DEBIT_RETURN
            - OUTGOING_DEBIT_RETURN_REVERSAL
            - OUTGOING_DEBIT_REVERSAL
            example: INCOMING_CREDIT
            type: string
          tenant_id:
            $ref: '#/components/schemas/tenant_id'
          transaction_id:
            description: The related transaction id of the transfer.
            example: 45b5246f-ad97-4629-9aac-465b74a05505
            format: uuid
            type: string
        required:
        - destination_account_id
        - destination_account_number
        - destination_account_owner_name
        - effective_date
        - id
        - is_same_day
        - originating_account_id
        - originating_account_number
        - originating_account_owner_name
        - reference_id
        - status
        - subtype
        - tenant_id
      description: EFT transfer specific to Canada
      title: Electronic Funds Transfer Response
      type: object
    eft_ca_status:
      description: |
        The status of the transfer in the Synctera platform. This is automatically set upon the creation of a transfer. To cancel a transfer, the current status must be 'PENDING' and the request status set to 'CANCELLED'. To trigger a return, the current status must be 'POSTED' and the returned status will be set to 'RETURNED' if successful.
      enum:
      - CANCELLED
      - FAILED
      - PENDING
      - POSTED
      - REJECTED
      - RETURNED
      example: POSTED
      type: string
    emboss_name:
      description: "The customer details to emboss on the card - Defaults to customer\
        \ first and last name. Is limited to 21 characters. Valid characters are A-Z,\
        \ a-z, 0-9, space ( ), period (.), comma (,), forward slash (/), hyphen (-),\
        \ ampersand (&), single quote (')."
      properties:
        line_1:
          description: line 1
          example: Jane Smith
          type: string
        line_2:
          description: line 2
          example: Acme Inc.
          type: string
      required:
      - line_1
      type: object
    employment:
      description: |
        A period of time in which a customer is (was) employed by a particular employer.
      example:
        employment_to: 2010-05-06T12:23:34.321Z
        employment_occupation: clerk
        employment_from: 2010-05-06T12:23:34.321Z
        employment_income: 5000000
        employment_hours: 37.5
        employment_income_currency: USD
        employer_name: "ABC, Inc."
        employment_info: "{}"
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        employer_name:
          description: Name of customer's employer.
          example: "ABC, Inc."
          type: string
        employment_from:
          description: First day of employment.
          example: 2010-05-06T12:23:34.321Z
          format: date-time
          type: string
        employment_hours:
          description: Number of hours spent per week working for specified employment.
          example: 37.5
          format: float
          maximum: 80
          minimum: 0
          type: number
        employment_income:
          description: Annual income in cents.
          example: 5000000
          type: integer
        employment_income_currency:
          description: |
            The 3-letter alphabetic ISO 4217 code for the currency in which the employee was paid.
          example: USD
          type: string
        employment_info:
          description: |
            A collection of arbitrary key-value pairs providing additional information about this employment relationship.
          type: object
        employment_occupation:
          description: "Customer's work title, profession, or field."
          example: clerk
          type: string
        employment_to:
          description: Last day of employment.
          example: 2010-05-06T12:23:34.321Z
          format: date-time
          type: string
        id:
          description: Unique ID for this employment relationship.
          format: uuid
          readOnly: true
          type: string
      required:
      - employer_name
      title: Customer employment record
      type: object
    employment_list:
      allOf:
      - properties:
          employment:
            description: Array of customer employment records.
            items:
              $ref: '#/components/schemas/employment'
            type: array
        required:
        - employment
        type: object
      - $ref: '#/components/schemas/paginated_response'
    encryption:
      default: NOT_REQUIRED
      description: "Whether the file should be encrypted and access restricted, e.g.\
        \ if the file contains PII"
      enum:
      - NOT_REQUIRED
      - REQUIRED
      type: string
    error:
      description: |-
        Synctera error responses in API v0 follow [RFC 7807](https://datatracker.ietf.org/doc/html/rfc7807). Following that standard, the field for a machine-readable "error code" in API v0 is `type`.
        In our future API v1, we are phasing out RFC 7807 and adopting a custom error format. That format will be documented in our API v1 spec. But you may see some v0 error responses with a machine-readable `code` field while we are making the transition from v0 to v1.
      properties:
        code:
          description: An optional “sneak preview” of our future API v1 error responses.
            This is provided to give integrators a chance to work with our future
            error codes. Error codes for the same error may change between v0 and
            v1.
          example: BAD_REQUEST_BODY
          type: string
        detail:
          description: |
            A human-readable string explaining this particular error.
          example: "missing required fields: first_name, dob"
          type: string
        status:
          description: the HTTP status code for this response
          example: 400
          type: integer
        title:
          description: |
            A human-readable string for this general category of error, which corresponds 1-to-1 with error types (`title` is the human-readable version of `type`). There can be multiple distinct titles for the same HTTP status code, and the same `title` can result in many different `detail` strings.
            This field will be removed in API v1.
          example: Bad Request Body
          type: string
        type:
          description: |
            A machine-readable string that identifies the error for programmatic use. This is a URI, i.e. a globally unique identifier. It is _not_ necessarily a URL, so do not expect it to resolve to a web page. You can use this whole string as an error code, or just everything after the last slash.
            This field will be removed in API v1.
          example: https://dev.synctera.com/errors/bad-request-body
          type: string
      title: Standard error response (RFC 7807 problem report)
      type: object
    event:
      description: Webhook event object
      example:
        metadata: metadata
        response_history:
        - sent_time: 2000-01-23T04:56:07.000+00:00
          code: 0
          response_body: response_body
          response_time: 2000-01-23T04:56:07.000+00:00
        - sent_time: 2000-01-23T04:56:07.000+00:00
          code: 0
          response_body: response_body
          response_time: 2000-01-23T04:56:07.000+00:00
        webhook_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        event_resource_changed_fields: event_resource_changed_fields
        event_resource: event_resource
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        type: null
        event_time: 2000-01-23T04:56:07.000+00:00
        url: url
        status: FAILED
      properties:
        event_resource:
          description: |
            Json string of object associated with the event. For example, if your event is ACCOUNT.CREATED, You can refer to Acccount to parse the account event to obtain the ID, status etc.
          type: string
        event_resource_changed_fields:
          description: |
            Json string of object associated with the event related to a resource change. This only contains those fields that have value changed on the event, and the field values are prior to the resource change event.
          type: string
        event_time:
          description: Timestamp of the current event raised
          format: date-time
          type: string
        id:
          description: Unique event ID of the webhook request. Use event endpoints
            to get more event summary data
          format: uuid
          readOnly: true
          type: string
        metadata:
          description: Metadata that stored in the webhook subscription
          maxLength: 1024
          type: string
        response_history:
          description: Response history of the webhook request
          items:
            $ref: '#/components/schemas/response_history_item'
          type: array
        status:
          description: Current event status. Failing event will keep retry until it
            is purged.
          enum:
          - FAILED
          - RETRYING
          - RUNNING
          - SUCCESS
          type: string
        type:
          $ref: '#/components/schemas/event_type_explicit'
        url:
          description: URL that the current event will be sent to
          maxLength: 1024
          type: string
        webhook_id:
          description: Webhook the current event belongs to
          format: uuid
          type: string
      title: Webhook event
      type: object
    event_list:
      allOf:
      - $ref: '#/components/schemas/paginated_response'
      - properties:
          event_list:
            description: Array of events
            items:
              $ref: '#/components/schemas/event'
            type: array
        required:
        - event_list
        type: object
    event_trigger:
      description: "Webhook event object that will be returned after triggering the\
        \ given event. Only id, type and event_time will have value."
      example:
        metadata: metadata
        response_history:
        - sent_time: 2000-01-23T04:56:07.000+00:00
          code: 0
          response_body: response_body
          response_time: 2000-01-23T04:56:07.000+00:00
        - sent_time: 2000-01-23T04:56:07.000+00:00
          code: 0
          response_body: response_body
          response_time: 2000-01-23T04:56:07.000+00:00
        webhook_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        event_resource_changed_fields: event_resource_changed_fields
        event_resource: event_resource
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        type: null
        event_time: 2000-01-23T04:56:07.000+00:00
        url: url
        status: FAILED
      properties:
        event_resource:
          deprecated: true
          description: |
            Json string of object associated with the event. For example, if your event is ACCOUNT.CREATED, You can refer to Acccount to parse the account event to obtain the ID, status etc.
          type: string
        event_resource_changed_fields:
          deprecated: true
          description: |
            Json string of object associated with the event related to a resource change. This only contains those fields that have value changed on the event, and the field values are prior to the resource change event.
          type: string
        event_time:
          description: Timestamp of the current event raised
          format: date-time
          type: string
        id:
          description: Unique event ID of the webhook request. Use event endpoints
            to get more event summary data
          format: uuid
          readOnly: true
          type: string
        metadata:
          deprecated: true
          description: Metadata that stored in the webhook subscription
          maxLength: 1024
          type: string
        response_history:
          deprecated: true
          description: Response history of the webhook request
          items:
            $ref: '#/components/schemas/response_history_item'
          type: array
        status:
          deprecated: true
          description: Current event status. Failing event will keep retry until it
            is purged.
          enum:
          - FAILED
          - RETRYING
          - RUNNING
          - SUCCESS
          type: string
        type:
          $ref: '#/components/schemas/event_type_explicit'
        url:
          deprecated: true
          description: URL that the current event will be sent to
          maxLength: 1024
          type: string
        webhook_id:
          deprecated: true
          description: Webhook the current event belongs to
          format: uuid
          type: string
      title: Webhook event trigger
      type: object
    event_type:
      oneOf:
      - $ref: '#/components/schemas/event_type_wildcard'
      - $ref: '#/components/schemas/event_type_explicit'
    event_type_explicit:
      description: All the webhook event types
      enum:
      - ACCOUNT.CREATED
      - ACCOUNT.UPDATED
      - ACH.INCOMING.FUTURE_DATED
      - APPLICATION.CREATED
      - APPLICATION.UPDATED
      - BUSINESS.CREATED
      - BUSINESS.UPDATED
      - BUSINESS.VERIFICATION_OUTCOME.UPDATED
      - CARD.CREATED
      - CARD.DIGITALWALLETTOKEN.CREATED
      - CARD.DIGITALWALLETTOKEN.UPDATED
      - CARD.IMAGE.UPDATED
      - CARD.UPDATED
      - CASE.CREATED
      - CASE.UPDATED
      - CASH_PICKUP.CREATED
      - CASH_PICKUP.UPDATED
      - CUSTOMER.CREATED
      - CUSTOMER.KYC_OUTCOME.UPDATED
      - CUSTOMER.UPDATED
      - EXTERNAL_CARD.CREATED
      - EXTERNAL_CARD.DELETED
      - EXTERNAL_CARD.UPDATED
      - EXTERNAL_CARD_TRANSFER.CREATED
      - EXTERNAL_CARD_TRANSFER.UPDATED
      - INTEREST.MONTHLY_PAYOUT
      - INTERNAL_ACCOUNT.CREATED
      - INTERNAL_ACCOUNT.UPDATED
      - INTERNAL_TRANSFER.SUCCEEDED
      - NOTE.CREATED
      - NOTE.UPDATED
      - PAYMENT_SCHEDULE.CREATED
      - PAYMENT_SCHEDULE.PAYMENT.CREATED
      - PAYMENT_SCHEDULE.UPDATED
      - PERSON.CREATED
      - PERSON.UPDATED
      - PERSON.VERIFICATION_OUTCOME.UPDATED
      - STATEMENT.CREATED
      - TRANSACTION.PENDING.CREATED
      - TRANSACTION.PENDING.UPDATED
      - TRANSACTION.POSTED.CREATED
      - TRANSACTION.POSTED.UPDATED
      type: string
    event_type_wildcard:
      enum:
      - ACCOUNT.*
      - ACH.*
      - APPLICATION.*
      - BUSINESS.*
      - CARD.*
      - CASE.*
      - CASH_PICKUP.*
      - CUSTOMER.*
      - EXTERNAL_CARD.*
      - EXTERNAL_CARD_TRANSFER.*
      - INTEREST.*
      - INTERNAL_TRANSFER.*
      - NOTE.*
      - PAYMENT_SCHEDULE.*
      - PERSON.*
      - STATEMENT.*
      - TRANSACTION.*
      type: string
    ext_account_customer_type:
      description: |
        The type of customer in the external financial institution. _Not_ necessarily the customer type on Synctera's platform: a business customer might link to the owner's personal account at an external financial institution.
      enum:
      - BUSINESS
      - PERSONAL
      type: string
    external_account:
      example:
        creation_time: 2010-05-06T12:23:34.321Z
        metadata: "{}"
        routing_identifiers:
          correspondent_bank_details:
          - swift_code: BNGRGRAAXXX
            bank_address:
              country_code: US
              city: New York
              address_line_1: 100 Main St.
              address_line_2: Suite 99
              state: NY
              postal_code: "28620"
            bank_name: Bank of Greece
          - swift_code: BNGRGRAAXXX
            bank_address:
              country_code: US
              city: New York
              address_line_1: 100 Main St.
              address_line_2: Suite 99
              state: NY
              postal_code: "28620"
            bank_name: Bank of Greece
          eft_routing_number: "02101140"
          swift_code: CHASUS3AXXX
          bank_address:
            country_code: US
            city: New York
            address_line_1: 100 Main St.
            address_line_2: Suite 99
            state: NY
            postal_code: "28620"
          bank_countries:
          - US
          - US
          bank_name: Chase
          wire_routing_number: "756392185"
          eft_ca_routing_number: "02101140"
          ach_routing_number: "756392185"
        vendor_data:
          account_number_mask: account_number_mask
          institution_id: institution_id
        type: CHECKING
        vendor_info: null
        account_identifiers:
          number: "78277121"
          iban: LI4476584648937N59B00
        deletion_time: 2010-05-06T12:23:34.321Z
        last_updated_time: 2010-05-06T12:23:34.321Z
        name: Plaid Checking
        nickname: Vacation savings
        account_owner_names:
        - Jane Smith
        - Jane Smith
        currency: USD
        id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
        customer_id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
        business_id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
        verification: null
        status: ACTIVE
      properties:
        account_identifiers:
          $ref: '#/components/schemas/account_identifiers'
        account_owner_names:
          description: |
            The names of the account owners. Values may be masked, in which case the array will be empty.
          items:
            example: Jane Smith
            type: string
          type: array
        business_id:
          description: |
            The identifier for the business customer associated with this external account. Exactly one of `business_id` or `customer_id` will be returned.
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        creation_time:
          example: 2010-05-06T12:23:34.321Z
          format: date-time
          type: string
        currency:
          description: ISO 4217 alphabetic currency code
          example: USD
          pattern: "^[A-Z]{3}$"
          type: string
        customer_id:
          description: |
            The identifier for the personal customer associated with this external account. Exactly one of `customer_id` or `business_id` will be returned.
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        deletion_time:
          example: 2010-05-06T12:23:34.321Z
          format: date-time
          type: string
        id:
          description: External account unique identifier
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          readOnly: true
          type: string
        last_updated_time:
          example: 2010-05-06T12:23:34.321Z
          format: date-time
          type: string
        metadata:
          description: User-supplied JSON format metadata.
          type: object
        name:
          description: The official name of the account
          example: Plaid Checking
          type: string
        nickname:
          description: A user-meaningful name for the account
          example: Vacation savings
          nullable: true
          type: string
        routing_identifiers:
          $ref: '#/components/schemas/account_routing'
        status:
          description: The current state of the account
          enum:
          - ACTIVE
          - CLOSED
          type: string
        type:
          description: The type of the account
          enum:
          - CHECKING
          - CREDIT_CARD
          - INVESTMENT_529
          - MONEY_MARKET
          - OTHER
          - SAVINGS
          type: string
        vendor_data:
          $ref: '#/components/schemas/external_account_vendor_data'
        vendor_info:
          $ref: '#/components/schemas/vendor_info'
        verification:
          $ref: '#/components/schemas/account_verification'
      required:
      - account_identifiers
      - account_owner_names
      - creation_time
      - id
      - last_updated_time
      - routing_identifiers
      - status
      - type
      - verification
      title: External account
      type: object
    external_account_access_token:
      example:
        vendor_customer_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        vendor_access_token: vendor_access_token
        vendor_institution_id: vendor_institution_id
        customer_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        business_id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
        request_id: request_id
        vendor_public_token: vendor_public_token
      properties:
        business_id:
          description: |
            The identifier for the business customer associated with this external account. Exactly one of `business_id` or `customer_id` must be specified.
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        customer_id:
          description: |
            The identifier for the personal customer associated with this external account. Exactly one of `customer_id` or `business_id` must be specified.
          format: uuid
          type: string
        request_id:
          description: "A unique identifier for the request, which can be used for\
            \ troubleshooting"
          readOnly: true
          type: string
        vendor_access_token:
          description: The access token associated with the Item data is being requested
            for.
          readOnly: true
          type: string
        vendor_customer_id:
          description: An alias for `customer_id` (deprecated).
          format: uuid
          type: string
          x-status: deprecated
        vendor_institution_id:
          description: |
            The ID of the institution the access token is requested for
          minLength: 1
          type: string
        vendor_public_token:
          description: |
            The user's public token obtained from successful link login.
          type: string
      required:
      - vendor_institution_id
      - vendor_public_token
      type: object
    external_account_balance:
      example:
        creation_time: 2010-05-06T12:23:34.321Z
        current: -2500
        last_updated_time: 2010-05-06T12:23:34.321Z
        available: 1025
        last_updated_time_vendor: 2010-05-06T12:23:34.321Z
        limit: 10000
        currency: USD
        transactions_last_updated_time: 2010-05-06T12:23:34.321Z
      properties:
        available:
          description: |
            The amount of funds available to be withdrawn from the account, as determined
            by the financial institution.

            This is an integer in the minor currency unit (e.g. cents): 1025 means $10.25.
          example: 1025
          format: int64
          minimum: 0
          nullable: true
          type: integer
        creation_time:
          example: 2010-05-06T12:23:34.321Z
          format: date-time
          type: string
        currency:
          description: ISO 4217 alphabetic currency code
          example: USD
          type: string
        current:
          description: |
            For a `DEPOSITORY` account, this is the total amount of funds in the account.

            For a `CREDIT` account, this is the amount owing. If negative, the lender
            owes the account holder.

            This is an integer in the minor currency unit (e.g. cents):
            -2500 means $25.00 owed to the account holder.
          example: -2500
          format: int64
          minimum: 0
          nullable: true
          type: integer
        last_updated_time:
          description: The last time Synctera has fetched this balance from a vendor
          example: 2010-05-06T12:23:34.321Z
          format: date-time
          type: string
        last_updated_time_vendor:
          description: Vendor timestamp of when the balance was last updated on the
            vendor side
          example: 2010-05-06T12:23:34.321Z
          format: date-time
          type: string
        limit:
          description: |
            For `DEPOSITORY` accounts, this is the pre-arranged overdraft limit, commonly
            used in Europe. In North America this is typically not set for depository accounts.

            For `CREDIT` accounts, this is the credit limit on the account.

            This is an integer in the minor currency unit (e.g. cents): 10000 means $100.00
          example: 10000
          format: int64
          minimum: 0
          nullable: true
          type: integer
        transactions_last_updated_time:
          description: The last time Synctera has fetched transactions from a vendor
          example: 2010-05-06T12:23:34.321Z
          format: date-time
          type: string
      required:
      - currency
      title: External Account Balance
      type: object
    external_account_language:
      description: |
        The language that corresponds to the link token. For Plaid, see their [documentation](https://plaid.com/docs/api/tokens/#link-token-create-request-language) for a list of allowed values.
      enum:
      - DE
      - EN
      - ES
      - FR
      - NL
      type: string
    external_account_link_token:
      example:
        sdk_type: WEB
        link_token: link_token
        link_customization_name: link_customization_name
        language: null
        type: CREDIT
        verify_owner: false
        vendor_access_token: vendor_access_token
        country_codes:
        - CA
        - CA
        expiration: 2000-01-23T04:56:07.000+00:00
        redirect_uri: redirect_uri
        vendor_institution_id: vendor_institution_id
        customer_id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
        business_id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
        client_name: client_name
        request_id: request_id
      properties:
        business_id:
          description: |
            The identifier for the business customer associated with this external account. Exactly one of `business_id` or `customer_id` must be specified.
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        client_name:
          description: "The name of your application, as it should be displayed in\
            \ Link. Maximum length of 30 characters."
          type: string
        country_codes:
          description: Country codes in the ISO-3166-1 alpha-2 country code standard.
          items:
            enum:
            - CA
            - US
            type: string
          minItems: 1
          type: array
        customer_id:
          description: |
            The identifier for the personal customer associated with this external account. Exactly one of `customer_id` or `business_id` must be specified.
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        expiration:
          description: The expiration date for the link_token. Expires in 4 hours.
          format: date-time
          readOnly: true
          type: string
        language:
          $ref: '#/components/schemas/external_account_language'
        link_customization_name:
          description: |
            The name of the Link customization from the Plaid Dashboard to be applied to Link. If not specified, the default customization will be used. When using a Link customization, the language in the customization must match the language selected via the language parameter, and the countries in the customization should match the country codes selected via country_codes.
          type: string
        link_token:
          description: |
            A link_token, which can be supplied to Link in order to initialize it and receive a public_token, which can be exchanged for an access_token.
          readOnly: true
          type: string
        redirect_uri:
          description: |
            A URI indicating the destination where a user should be forwarded after completing the Link flow; used to support OAuth authentication flows when launching Link in the browser or via a webview.
          type: string
        request_id:
          description: "A unique identifier for the request, which can be used for\
            \ troubleshooting."
          readOnly: true
          type: string
        sdk_type:
          default: WEB
          description: Describes the environment of the client code running a vendor-supplied
            SDK
          enum:
          - ANDROID
          - IOS
          - WEB
          type: string
        type:
          description: "The type of the link token. DEPOSITORY for checking and savings\
            \ accounts, CREDIT for credit card type accounts, INVESTMENT for investment\
            \ accounts, and MICRO_DEPOSIT for depository accounts with support for\
            \ micro-deposits verification."
          enum:
          - CREDIT
          - DEPOSITORY
          - INVESTMENT
          - MICRO_DEPOSIT
          type: string
        vendor_access_token:
          description: The access token associated with the Item data is being requested
            for.
          type: string
        vendor_institution_id:
          description: |
            The ID of the institution the access token is requested for. If present the link token will be created in an update mode.
          minLength: 1
          type: string
        verify_owner:
          default: false
          description: |
            If true, Synctera will attempt to verify that the external account owner is the same as the customer by comparing external account data to customer data. At least 2 of the following fields must match: name, phone number, email, address. Verification is disabled by default.
          type: boolean
      required:
      - client_name
      - country_codes
      - language
      - type
      type: object
    external_account_transaction:
      example:
        date: 2000-01-23
        transaction_id: transaction_id
        amount: 0
        check_number: check_number
        payment_channel: IN_STORE
        merchant_name: Fancy store
        currency: USD
        category:
        - category
        - category
        transaction_type: transaction_type
        authorized_date: 2000-01-23
        payment_method: payment_method
        is_pending: true
      properties:
        amount:
          description: Transaction amount. Number in cents. E.g. 1000 represents $10.00
          format: int64
          type: integer
        authorized_date:
          description: Date that the transaction is authorized. ISO 8601 format (
            YYYY-MM-DD ).
          format: date
          nullable: true
          type: string
        category:
          description: Category of the transaction
          items:
            type: string
          type: array
        check_number:
          description: Check number of the transaction. This field will be null if
            not a check transaction.
          type: string
        currency:
          description: ISO 4217 alphabetic currency code
          example: USD
          type: string
        date:
          description: |
            For pending transactions, this represents the date of the transaction occurred; for posted transactions, this represents the date of the transaction posted. ISO 8601 format ( YYYY-MM-DD ).
          format: date
          type: string
        is_pending:
          description: Indicates the transaction is pending or unsettled if true.
          type: boolean
        merchant_name:
          description: Merchant name of the transaction
          example: Fancy store
          type: string
        payment_channel:
          description: channel used to make a payment
          enum:
          - IN_STORE
          - ONLINE
          - OTHER
          type: string
          x-enumDescriptions:
          - ONLINE: Online transaction.
          - OTHER: "Transactions that relate to banks, e.g. fees or deposits."
          - IN_STORE: In store transaction.
        payment_method:
          description: "Transfer type of the transaction, e.g. ACH"
          type: string
        transaction_id:
          description: case-sensitive transaction ID
          type: string
        transaction_type:
          description: type of the transaction
          type: string
      type: object
    external_account_transaction_refresh_response:
      example:
        transactions_synced: 0
      properties:
        transactions_synced:
          description: |
            Number of transactions synced for the access token associated with this external account.
          format: int64
          type: integer
      required:
      - transactions_synced
      type: object
    external_account_vendor_data:
      example:
        account_number_mask: account_number_mask
        institution_id: institution_id
      properties:
        account_number_mask:
          description: |
            The last alphanumeric characters of an account's official account number. Note that the mask may be non-unique between accounts, and it may also not match the mask that the bank displays to the user.
          type: string
        institution_id:
          description: The ID of the institution external account belongs
          type: string
      type: object
    external_account_vendor_values:
      description: |
        The vendor selected for the operation.
      enum:
      - FINICITY
      - PLAID
      type: string
    external_accounts_list:
      allOf:
      - properties:
          external_accounts:
            description: Array of external accounts
            items:
              $ref: '#/components/schemas/external_account'
            type: array
        required:
        - external_accounts
        type: object
      - $ref: '#/components/schemas/paginated_response'
    external_accounts_transaction_list:
      example:
        transactions:
        - date: 2000-01-23
          transaction_id: transaction_id
          amount: 0
          check_number: check_number
          payment_channel: IN_STORE
          merchant_name: Fancy store
          currency: USD
          category:
          - category
          - category
          transaction_type: transaction_type
          authorized_date: 2000-01-23
          payment_method: payment_method
          is_pending: true
        - date: 2000-01-23
          transaction_id: transaction_id
          amount: 0
          check_number: check_number
          payment_channel: IN_STORE
          merchant_name: Fancy store
          currency: USD
          category:
          - category
          - category
          transaction_type: transaction_type
          authorized_date: 2000-01-23
          payment_method: payment_method
          is_pending: true
      properties:
        transactions:
          description: Array of transactions of a given external account
          items:
            $ref: '#/components/schemas/external_account_transaction'
          type: array
      required:
      - transactions
      type: object
    external_card_id:
      description: The unique identifier of external card
      example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
      format: uuid
      type: string
    external_card_list_response:
      allOf:
      - properties:
          external_cards:
            description: Array of External Cards
            items:
              $ref: '#/components/schemas/external_card_response'
            type: array
        required:
        - external_cards
        type: object
      - $ref: '#/components/schemas/paginated_response'
    external_card_request:
      properties:
        business_id:
          description: The unique identifier of a business
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        customer_id:
          description: The unique identifier of a customer
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        name:
          description: The cardholder name
          example: Jean Valjean
          type: string
        token:
          description: The token that was returned via tokenization iframe
          type: string
      required:
      - customer_id
      - name
      - token
      type: object
    external_card_response:
      example:
        created_time: 2010-05-06T12:23:34.321Z
        expiration_year: "25"
        last_modified_time: 2010-05-06T12:23:34.321Z
        last_four: "1234"
        expiration_month: "06"
        name: Jean Valjean
        currency: USD
        id: id
        customer_id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
        verifications:
          pull_enabled: true
          cvv2_result: CVV_MISMATCH
          push_enabled: true
          address_verification_result: ADDRESS_AND_ZIP_MISMATCH
          state: FAILED
        status: null
      properties:
        created_time:
          example: 2010-05-06T12:23:34.321Z
          format: date-time
          type: string
        currency:
          description: ISO 4217  Alpha-3 currency code
          example: USD
          maxLength: 3
          minLength: 3
          type: string
        customer_id:
          description: The unique identifier of a customer
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        expiration_month:
          example: "06"
          readOnly: true
          type: string
        expiration_year:
          example: "25"
          readOnly: true
          type: string
        id:
          description: External card ID
          type: string
        last_four:
          description: The last 4 digits of the card PAN
          example: "1234"
          readOnly: true
          type: string
        last_modified_time:
          example: 2010-05-06T12:23:34.321Z
          format: date-time
          type: string
        name:
          description: The cardholder name
          example: Jean Valjean
          type: string
        status:
          $ref: '#/components/schemas/external_card_status'
        verifications:
          $ref: '#/components/schemas/external_card_verifications'
      required:
      - currency
      - customer_id
      - expiration_month
      - expiration_year
      - id
      - last_four
      - name
      - status
      type: object
    external_card_status:
      description: Status of an External Card
      enum:
      - ACTIVE
      - SUSPENDED
      type: string
    external_card_update_request:
      properties:
        status:
          $ref: '#/components/schemas/external_card_status'
      required:
      - status
      type: object
    external_card_verifications:
      description: Verify card passed AVS and CVV checks and if it able to perform
        PUSH/PULL transfers.
      example:
        pull_enabled: true
        cvv2_result: CVV_MISMATCH
        push_enabled: true
        address_verification_result: ADDRESS_AND_ZIP_MISMATCH
        state: FAILED
      properties:
        address_verification_result:
          description: |
            Address verification results

            Status | Description
            --- | ---
            VERIFIED | AVS verified
            NOT_VERIFIED | AVS not verified
            ADDRESS_MISMATCH | ZIP code match, address no match
            ZIP_MISMATCH | Address match, ZIP code no match
            ADDRESS_AND_ZIP_MISMATCH | Address and ZIP code no match
          enum:
          - ADDRESS_AND_ZIP_MISMATCH
          - ADDRESS_MISMATCH
          - NOT_VERIFIED
          - VERIFIED
          - ZIP_MISMATCH
          type: string
        cvv2_result:
          description: |
            Card Verification Value results

            Status | Description
            --- | ---
            VERIFIED | CVV and expiration date verified
            NOT_VERIFIED | CVV and expiration date not verified
            CVV_MISMATCH | Either CVV or expiration date does not match
            NOT_SUPPORTED | Issuer does not participate in CVV2 service
          enum:
          - CVV_MISMATCH
          - NOT_SUPPORTED
          - NOT_VERIFIED
          - VERIFIED
          type: string
        pull_enabled:
          description: Indicates if the card is able to perform PULL transfers.
          type: boolean
        push_enabled:
          description: Indicates if the card is able to perform PUSH transfers.
          type: boolean
        state:
          enum:
          - FAILED
          - SUCCEEDED
          type: string
      required:
      - address_verification_result
      - cvv2_result
      - pull_enabled
      - push_enabled
      - state
      type: object
    external_data:
      description: an unstructured json blob representing additional transaction information
        supplied by the integrator.
      nullable: true
      type: object
    fee:
      properties:
        amount:
          description: Fee amount
          format: int64
          type: integer
        currency:
          description: Fee currency code in ISO 4217
          pattern: "^[A-Z]{3}$"
          type: string
        fee_type:
          description: Fee type
          enum:
          - ACH_FEE
          - ANNUAL_FEE
          - ATM_WITHDRWAL_FEE
          - MONTHLY_FEE
          - OVERDRAFT_FEE
          - WIRE_FEE
          type: string
        id:
          description: Fee ID
          format: uuid
          readOnly: true
          type: string
        product_type:
          enum:
          - FEE
          - INTEREST
          type: string
      required:
      - amount
      - currency
      - fee_type
      - product_type
      type: object
    financial_institution:
      properties:
        legal_address:
          $ref: '#/components/schemas/address2'
        name:
          type: string
        phone_number:
          type: string
      title: Financial Institution
      type: object
    financial_request_model:
      properties:
        amount:
          description: The amount of the transaction in the smallest whole denomination
            of the applicable currency (eg. For USD use cents)
          type: integer
        card_acceptor:
          $ref: '#/components/schemas/card_acceptor_model'
        card_id:
          format: uuid
          type: string
        cash_back_amount:
          description: Cash back amount in the smallest whole denomination of the
            applicable currency (eg. For USD use cents)
          type: integer
        is_pre_auth:
          default: false
          type: boolean
        mid:
          maxLength: 50
          minLength: 1
          type: string
        pin:
          maxLength: 15
          minLength: 1
          type: string
        transaction_options:
          $ref: '#/components/schemas/transaction_options'
      required:
      - amount
      - card_acceptor
      - card_id
      - mid
      type: object
    finicity_account_verification:
      allOf:
      - $ref: '#/components/schemas/base_account_verification'
      title: Information specific to Finicity verification
    form:
      description: PHYSICAL or VIRTUAL.
      enum:
      - PHYSICAL
      - VIRTUAL
      type: string
    fulfillment_details:
      properties:
        ship_date:
          description: The date that the card was shipped as reported by the card
            fulfillment provider
          example: 2022-07-19
          format: date
          readOnly: true
          type: string
        shipping_method:
          description: The specific shipping method as reported by the card fulfillment
            provider
          example: UPS Next Day Air Saver
          readOnly: true
          type: string
        tracking_number:
          description: The shipment tracking number
          example: 1ZW3268W1319325382
          readOnly: true
          type: string
      type: object
    gateway_custom_headers:
      additionalProperties:
        type: string
      description: Custom Headers of the Authorization gateway
      type: object
    gateway_id:
      description: The unique identifier of an Authorization gateway config
      format: string
      type: string
    gateway_list_response:
      allOf:
      - properties:
          gateways:
            description: Array of Authorization gateway configuration
            items:
              $ref: '#/components/schemas/gateway_response'
            type: array
        type: object
      - $ref: '#/components/schemas/paginated_response'
    gateway_response:
      example:
        card_products:
        - 7d943c51-e4ff-4e57-9558-08cab6b963c7
        - 7d943c51-e4ff-4e57-9558-08cab6b963c7
        creation_time: 2010-05-06T12:23:34.321Z
        standin:
          enabled: false
        last_modified_time: 2010-05-06T12:23:34.321Z
        active: true
        id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
        url: https://openapi-generator.tech
        custom_headers:
          key: custom_headers
      properties:
        active:
          description: Current status of the Authorization gateway
          type: boolean
        card_products:
          description: List of Card Product unique identifiers that will utilize the
            Gateway
          items:
            example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
            format: uuid
            type: string
          type: array
        creation_time:
          description: The timestamp representing when the gateway config request
            was made
          example: 2010-05-06T12:23:34.321Z
          format: date-time
          readOnly: true
          type: string
        custom_headers:
          additionalProperties:
            type: string
          description: Custom Headers of the Authorization gateway
          type: object
        id:
          description: Gateway ID
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        last_modified_time:
          description: The timestamp representing when the gateway config was last
            modified at
          example: 2010-05-06T12:23:34.321Z
          format: date-time
          readOnly: true
          type: string
        standin:
          $ref: '#/components/schemas/gateway_standin'
        url:
          description: URL of the Authorization gateway
          format: uri
          maxLength: 1000
          type: string
      required:
      - active
      - card_products
      - creation_time
      - id
      - last_modified_time
      - url
      type: object
    gateway_standin:
      example:
        enabled: false
      properties:
        enabled:
          default: false
          type: boolean
      type: object
    google_digital_wallet_provision_request:
      properties:
        device_id:
          description: The user’s Android device ID; the device’s unique identifier.
          maxLength: 24
          type: string
        device_type:
          $ref: '#/components/schemas/device_type'
        provisioning_app_version:
          description: Version of the application making the provisioning request.
          maxLength: 50
          type: string
        wallet_account_id:
          description: The user’s Google wallet account ID.
          maxLength: 50
          type: string
      required:
      - device_id
      - device_type
      - provisioning_app_version
      - wallet_account_id
      type: object
    google_digital_wallet_provision_response:
      example:
        created_time: 2010-05-06T12:23:34.321Z
        last_modified_time: 2010-05-06T12:23:34.321Z
        push_tokenize_request_data:
          token_service_provider: token_service_provider
          opaque_payment_card: opaque_payment_card
          user_address:
            country_code: US
            city: New York
            address_line_1: 100 Main St.
            address_line_2: Suite 99
            state: NY
            postal_code: "49633"
          display_name: display_name
          last_digits: last_digits
          network: mastercard
        card_id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
      properties:
        card_id:
          description: The unique identifier of a card
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        created_time:
          example: 2010-05-06T12:23:34.321Z
          format: date-time
          type: string
        last_modified_time:
          example: 2010-05-06T12:23:34.321Z
          format: date-time
          type: string
        push_tokenize_request_data:
          $ref: '#/components/schemas/push_tokenize_request_data'
      type: object
    has_accounts:
      description: This flag indicates whether the person or business has accounts.
      readOnly: true
      type: boolean
    hold_data:
      example:
        amount: 0
        availability_time: 2010-05-06T12:23:34.321Z
      properties:
        amount:
          type: integer
        availability_time:
          example: 2010-05-06T12:23:34.321Z
          format: date-time
          type: string
      required:
      - amount
      - availability_time
      type: object
    id:
      description: The unique identifier for this resource.
      example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
      format: uuid
      readOnly: true
      type: string
    in_app_provisioning:
      properties:
        address_verification:
          $ref: '#/components/schemas/digital_wallet_token_address_verification'
        enabled:
          default: false
          example: false
          type: boolean
      type: object
    initialize_3ds_request:
      description: Initialization for an External Card Transfer 3-D Secure Authentication
        request
      properties:
        amount:
          description: Amount in cents of the External Card Transfer to be authenticated
          minimum: 1
          type: integer
        currency:
          description: ISO 4217  Alpha-3 currency code
          example: USD
          maxLength: 3
          minLength: 3
          type: string
        external_card_id:
          description: The ID of the External Card for which the 3DS Authentication
            will be performed
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
      required:
      - amount
      - currency
      - external_card_id
      type: object
    initialize_3ds_response:
      description: Initialization for an External Card Transfer 3-D Secure Authentication
        response
      example:
        device_data_collection_url: https://openapi-generator.tech
        id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
        device_data_collection_jwt: device_data_collection_jwt
      properties:
        device_data_collection_jwt:
          description: JWT used for device data collection
          type: string
        device_data_collection_url:
          description: URL used for device data collection
          format: uri
          type: string
        id:
          description: The unique identifier of the 3DS authentication
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
      required:
      - device_data_collection_jwt
      - device_data_collection_url
      - id
      type: object
    interest:
      properties:
        accrual_payout_schedule:
          $ref: '#/components/schemas/accrual_payout_schedule'
        calculation_method:
          $ref: '#/components/schemas/calculation_method'
        description:
          description: User provided description for the current interest.
          example: The rate is designed for high interest saving account.
          type: string
        id:
          description: Interest ID
          format: uuid
          readOnly: true
          type: string
        product_type:
          enum:
          - FEE
          - INTEREST
          type: string
        rates:
          description: |
            A list of interest rate. Date intervals between valid_from and valid_to expect to have no overlap.
          items:
            $ref: '#/components/schemas/rate_details'
          type: array
      required:
      - accrual_payout_schedule
      - calculation_method
      - product_type
      - rates
      type: object
    internal_account:
      properties:
        account_number:
          description: Generated internal account number
          readOnly: true
          type: string
        account_type:
          $ref: '#/components/schemas/internal_account_type'
        balances:
          description: A list of balances for internal account based on different
            type
          items:
            $ref: '#/components/schemas/balance'
          readOnly: true
          type: array
        bank_routing:
          description: Bank routing number
          maxLength: 9
          readOnly: true
          type: string
        creation_time:
          description: The date and time the resource was created.
          example: 2010-05-06T12:23:34.321Z
          format: date-time
          readOnly: true
          type: string
        currency:
          description: Account currency or account settlement currency. ISO 4217 alphabetic
            currency code.
          example: USD
          pattern: "^[A-Z]{3}$"
          type: string
        description:
          description: A user provided description for the current account
          type: string
        gl_type:
          description: |
            What type of general ledger account this internal account represents.
          enum:
          - ASSET
          - EXPENSE
          - LIABILITY
          - REVENUE
          type: string
        id:
          description: Generated ID for internal account
          format: uuid
          readOnly: true
          type: string
        is_system_acc:
          default: false
          description: "Is a system-controlled internal account. When this field is\
            \ true, this internal account will be reserved exclusively for internal\
            \ use by the Synctera platform and any internal transfers to or from this\
            \ internal account will be declined."
          type: boolean
        last_updated_time:
          description: The date and time the resource was last updated.
          example: 2010-05-06T12:23:34.321Z
          format: date-time
          readOnly: true
          type: string
        purpose:
          $ref: '#/components/schemas/internal_account_purpose'
        status:
          enum:
          - ACTIVE
          type: string
      required:
      - currency
      - status
      type: object
    internal_account_patch:
      properties:
        account_type:
          $ref: '#/components/schemas/internal_account_type'
        description:
          description: A user provided description for the current account
          type: string
        purpose:
          $ref: '#/components/schemas/internal_account_purpose'
      type: object
    internal_account_post:
      allOf:
      - {}
      - $ref: '#/components/schemas/internal_account'
      type: object
    internal_account_purpose:
      description: "The purpose of the internal account. On creation, the default\
        \ is PROFIT_AND_LOSS."
      enum:
      - CORE
      - PROFIT_AND_LOSS
      - RESERVE
      - SETTLEMENT
      - SUSPENSE
      - TREASURY
      type: string
    internal_account_response:
      allOf:
      - properties:
          tenant:
            $ref: '#/components/schemas/tenant_id'
      - $ref: '#/components/schemas/internal_account'
      type: object
    internal_account_type:
      description: type associated with the internal account.
      enum:
      - ACH_SETTLEMENT
      - ACH_SUSPENSE
      - CARD_SETTLEMENT
      - CASH_SETTLEMENT
      - CASH_SUSPENSE
      - CHECK_SETTLEMENT
      - EFT_CA_SETTLEMENT
      - EFT_CA_SUSPENSE
      - EXTERNAL_CARD_AFT_SETTLEMENT
      - EXTERNAL_CARD_OCT_SETTLEMENT
      - FEES
      - INTEREST_PAYOUT
      - MONEY_IN_AND_OUT
      - NETWORK_ADJUSTMENT
      - NETWORK_CHARGEBACK
      - PROVISIONAL_CREDIT_PNL
      - REWARDS
      - WIRE_SETTLEMENT
      - WIRE_SUSPENSE
      type: string
    internal_accounts_list:
      allOf:
      - properties:
          internal_accounts:
            description: Array of internal accounts
            items:
              $ref: '#/components/schemas/internal_account_response'
            type: array
        required:
        - internal_accounts
        type: object
      - $ref: '#/components/schemas/paginated_response'
    internal_transfer:
      example:
        amount: 1025
        currency: USD
        originating_account_id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
        receiving_account_id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
        type: ACCOUNT_TO_ACCOUNT
      properties:
        amount:
          description: The amount (in cents) to transfer from originating account
            to receiving account.
          format: int64
          minimum: 1
          type: integer
        capture_mode:
          default: IMMEDIATE
          description: |-
            Controls when the transfer will take effect.
            A value of `IMMEDIATE` (the default) means that the transfer will be completed immediately.
            A value of `MANUAL` means that the transaction will remain in a "pending" state until explicitly completed or cancelled (or the auth expires).
          enum:
          - IMMEDIATE
          - MANUAL
          type: string
        currency:
          description: ISO 4217 alphabetic currency code of the transfer amount
          example: USD
          type: string
        expires_at:
          description: "When `capture_mode` is `MANUAL`, this field describes when\
            \ the pending transaction should expire."
          format: date-time
          type: string
        final_customer_id:
          description: The customer id of the international customer that receives
            the final remittance transfer (required for remittance payments).
          format: uuid
          type: string
        memo:
          description: A short note to the recipient
          type: string
        metadata:
          description: Arbitrary key-value metadata to associate with the transaction
          type: object
        originating_account_alias:
          description: An alias representing a GL account to debit. This is alternative
            to specifying by account id
          example: ach_suspense
          type: string
        originating_account_customer_id:
          description: The customer id of the owner of the originating account.
          format: uuid
          type: string
        originating_account_id:
          description: The UUID of the account being debited
          format: uuid
          type: string
        receiving_account_alias:
          description: An alias representing a GL account to credit. This is an alternative
            to specifying by account id
          example: ach_suspense
          type: string
        receiving_account_customer_id:
          description: The customer id of the owner of the receiving account.
          format: uuid
          type: string
        receiving_account_id:
          description: The UUID of the account being credited
          format: uuid
          type: string
        tenant:
          description: "The tenant associated with this resource, in the form \"<bankid>_<partnerid>\""
          type: string
        type:
          description: The desired transaction type to use for this transfer
          enum:
          - ACCOUNT_TO_ACCOUNT
          - ACCOUNT_TO_ACCOUNT_SWEEP
          - ACH_CREDIT_SWEEP
          - ACH_DEBIT_SWEEP
          - ACH_FLOAT_TRANSFER
          - ACH_INCOMING_CREDIT_SWEEP
          - ACH_INCOMING_DEBIT_SWEEP
          - ACH_INCOMING_RETURN_CREDIT_SWEEP
          - ACH_INCOMING_RETURN_DEBIT_SWEEP
          - ACH_OUTGOING_CREDIT_SWEEP
          - ACH_OUTGOING_DEBIT_SWEEP
          - ACH_OUTGOING_RETURN_CREDIT_SWEEP
          - ACH_OUTGOING_RETURN_DEBIT_SWEEP
          - ACH_SWEEP
          - CARD_CHARGEBACK
          - CARD_CHARGEBACK_WRITEOFF
          - CARD_PROVISIONAL_CREDIT
          - CASHBACK
          - CASHBACK_SWEEP
          - CREDIT_MEMO
          - DOMESTIC_WIRE_INCOMING_RETURN_SWEEP
          - DOMESTIC_WIRE_INCOMING_RETURN_SWEEP_REVERSAL
          - DOMESTIC_WIRE_INCOMING_SWEEP
          - DOMESTIC_WIRE_INCOMING_SWEEP_REVERSAL
          - DOMESTIC_WIRE_OUTGOING_RETURN_SWEEP
          - DOMESTIC_WIRE_OUTGOING_RETURN_SWEEP_REVERSAL
          - DOMESTIC_WIRE_OUTGOING_SWEEP
          - DOMESTIC_WIRE_OUTGOING_SWEEP_REVERSAL
          - FEE
          - FEE_SWEEP
          - FORCE_PAYMENT
          - INCOMING_WIRE
          - INCOMING_WIRE_SWEEP
          - INTEREST_CHARGED_SWEEP
          - INTEREST_PAYOUT
          - INTEREST_PAYOUT_SWEEP
          - INTERNATIONAL_WIRE_OUTGOING_SWEEP
          - INTERNATIONAL_WIRE_OUTGOING_SWEEP_REVERSAL
          - INVOICE
          - LOAN_DISBURSEMENT
          - LOAN_FUNDING
          - MANUAL_ADJUSTMENT
          - MANUAL_ADJUSTMENT_REVERSAL
          - MANUAL_ADJUSTMENT_SWEEP
          - MANUAL_CARD_SWEEP
          - MANUAL_CHECK_SWEEP
          - MANUAL_WIRE_SWEEP
          - MASTERCARD_GROSS_SWEEP
          - MASTERCARD_GROSS_SWEEP_REVERSAL
          - MASTERCARD_INTERCHANGE_SWEEP
          - MASTERCARD_INTERCHANGE_SWEEP_REVERSAL
          - MASTERCARD_NET_SWEEP
          - MASTERCARD_NET_SWEEP_REVERSAL
          - MOBILE_DEPOSIT_RETURN_SWEEP
          - MOBILE_DEPOSIT_RETURN_SWEEP_REVERSAL
          - MOBILE_DEPOSIT_SWEEP
          - MOBILE_DEPOSIT_SWEEP_REVERSAL
          - NETWORK_ADJUSTMENT_SWEEP
          - NETWORK_CHARGEBACK_SWEEP
          - OUTGOING_INTERNATIONAL_REMITTANCE
          - OUTGOING_INTERNATIONAL_REMITTANCE_REVERSAL
          - PROMOTIONAL_CREDIT
          - PROMOTIONAL_CREDIT_REVERSAL
          - PROMOTIONAL_CREDIT_SWEEP
          - PULSE_GROSS_SWEEP
          - PULSE_GROSS_SWEEP_REVERSAL
          - PULSE_INTERCHANGE_SWEEP
          - PULSE_INTERCHANGE_SWEEP_REVERSAL
          - SECURITY_ACCOUNT_PAYMENT
          - SIGN_UP_BONUS
          - SUBSCRIPTION_FEE
          - TRANSFER_FEE
          - TRANSFER_FEE_REVERSAL
          - WIRE_SETTLEMENT_CREDIT
          - WIRE_SETTLEMENT_DEBIT
          type: string
      required:
      - amount
      - currency
      - type
      type: object
    internal_transfer_instruction:
      properties:
        request:
          $ref: '#/components/schemas/internal_transfer'
        type:
          enum:
          - INTERNAL_TRANSFER
          type: string
      required:
      - request
      - type
      type: object
    internal_transfer_patch:
      properties:
        status:
          description: The desired status of the internal transfer auth
          enum:
          - CANCELED
          - COMPLETE
          type: string
    internal_transfer_response:
      allOf:
      - properties:
          id:
            description: The transaction id associated with the transfer
            format: uuid
            type: string
          status:
            description: |-
              The status of the internal transfer auth.
              A value of `PENDING` indicates that the funds have been reserved and the transaction is ready to be either completed or canceled.
              A value of `COMPLETE` indicates the funds have been successfully moved and no more action can be performed.
              A value of `CANCELED` or `EXPIRED` means that the transaction has rolled back and the funds have been returned to the originating account, either by explicitly canceling via the API, or due to the expiry time having passed.
            enum:
            - CANCELED
            - COMPLETE
            - EXPIRED
            - PENDING
            type: string
        required:
        - id
        - status
        type: object
      - $ref: '#/components/schemas/internal_transfer'
    international_wire_details:
      properties:
        bank_address:
          $ref: '#/components/schemas/address'
        correspondent_banks_details:
          description: |
            Correspondent banks details used for international payments.
          items:
            $ref: '#/components/schemas/correspondent_bank_details'
          type: array
        swift_code:
          description: |
            The SWIFT code (also known as BIC code) used for international payments.
          example: CHASUS3AXXX
          pattern: "^[A-Z]{6}[A-Z0-9]{2}([A-Z0-9]{3})?$"
          type: string
      required:
      - bank_address
      - swift_code
      title: International bank details
      type: object
    international_wire_list:
      allOf:
      - properties:
          international_wires:
            description: Array of international wires
            items:
              $ref: '#/components/schemas/international_wire_response'
            type: array
        required:
        - international_wires
        type: object
      - $ref: '#/components/schemas/paginated_response'
      title: International Wires List
    international_wire_patch:
      properties:
        status:
          description: The new status of the wire transfer.
          enum:
          - CANCELED
          - COMPLETED
          - CONFIRMED
          - DECLINED
          example: CONFIRMED
          type: string
      required:
      - status
      title: Update the status of international wires
      type: object
    international_wire_post:
      properties:
        amount_in_beneficiary_currency:
          description: Transfer amount in cents ($100 would be 10000) in the currency
            of the beneficiary.
          example: 10000
          format: int64
          type: integer
        beneficiary_currency:
          description: "The currency of the beneficiary's account in ISO4217 format.\
            \ Optional, the currency will be inferred form the receiving account,\
            \ validation will be performed if this field is provided, if the receiving\
            \ account currency and this field do not match the API will return an\
            \ error."
          example: EUR
          type: string
        customer_id:
          description: The customer UUID representing the person initiating the Wire
            transfer.
          example: b01db9c7-78f2-4a99-8aca-1231d32f9b96
          format: uuid
          type: string
        metadata:
          description: Additional transfer metadata structured as key-value pairs.
          type: object
        originating_account_id:
          description: The account uuid representing the sender of the wire.
          example: b01db9c7-78f2-4a99-8aca-1231d32f9b96
          format: uuid
          type: string
        quote_id:
          description: "The quote id returned from the /international_wire/quote endpoint,\
            \ contains FX rate information. Required if the international wire is\
            \ cross currency."
          format: uuid
          type: string
        receiving_account_id:
          description: "The external account uuid representing the recipient of the\
            \ wire. Needs to be configured with international bank routing details\
            \ (e.g. SWIFT code, refer to external accounts documentation)."
          example: b01db9c7-78f2-4a99-8aca-1231d32f9b96
          format: uuid
          type: string
        sender_currency:
          description: "The currency of the sender's account in ISO4217 format. Optional,\
            \ the currency will be inferred form the originating account, validation\
            \ will be performed if this field is provided, if the originating account\
            \ currency and this field do not match the API will return an error."
          example: USD
          type: string
        wire_instruction:
          description: Optional transaction instructions for the recipient bank if
            required by the recipient bank.
          example: For benefit of John Doe's account with account number XXX
          maxLength: 210
          type: string
        wire_purpose:
          description: Reason for the wire transfer.
          example: "Payment for Receipt #1234"
          type: string
      required:
      - amount_in_beneficiary_currency
      - customer_id
      - originating_account_id
      - receiving_account_id
      - wire_purpose
      title: Request payload for creating a new international wire transfer
      type: object
    international_wire_response:
      example:
        creation_time: 2010-05-06T12:23:34.321Z
        transaction_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        metadata: "{}"
        wire_purpose: "Payment for Receipt #1234"
        beneficiary_currency: EUR
        max_accepted_sender_cost: 13500
        originating_account_id: b01db9c7-78f2-4a99-8aca-1231d32f9b96
        amount_in_beneficiary_currency: 10000
        network_reference_id: "1234567890123456"
        receiving_account_id: b01db9c7-78f2-4a99-8aca-1231d32f9b96
        quote_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        fx_exchange_rate: 1.3
        wire_instruction: For benefit of John Doe's account with account number XXX
        last_updated_time: 2010-05-06T12:23:34.321Z
        sender_amount: 13000
        case_id: 0
        effective_date: 2022-03-18T00:00:00.000+00:00
        sender_currency: USD
        decline_reason: decline_reason
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        customer_id: b01db9c7-78f2-4a99-8aca-1231d32f9b96
        status: PENDING
      properties:
        amount_in_beneficiary_currency:
          description: Transfer amount in cents ($100 would be 10000) in the currency
            of the beneficiary.
          example: 10000
          format: int64
          type: integer
        beneficiary_currency:
          description: The currency of the beneficiary's account in ISO4217 format.
          example: EUR
          type: string
        case_id:
          description: The ID of the associated case.
          type: integer
        creation_time:
          example: 2010-05-06T12:23:34.321Z
          format: date-time
          readOnly: true
          type: string
        customer_id:
          description: The customer UUID representing the person initiating the Wire
            transfer.
          example: b01db9c7-78f2-4a99-8aca-1231d32f9b96
          format: uuid
          type: string
        decline_reason:
          description: "If the wire is declined after being successfully submitted,\
            \ this field will contain a message explaining the reason for the decline."
          type: string
        effective_date:
          description: The effective date of the transaction once it gets posted.
          example: 2022-03-18
          format: date
          type: string
        fx_exchange_rate:
          description: The exchange rate used for the wire transfer.
          example: 1.3
          type: number
        id:
          description: The ID of the international wire transfer.
          format: uuid
          type: string
        last_updated_time:
          example: 2010-05-06T12:23:34.321Z
          format: date-time
          readOnly: true
          type: string
        max_accepted_sender_cost:
          description: "The maximum amount the sender is willing to pay for the wire\
            \ transfer in case FX fluctuates, required if the quote type is 'estimate'."
          example: 13500
          type: integer
        metadata:
          description: Additional transfer metadata structured as key-value pairs.
          type: object
        network_reference_id:
          description: The network reference ID of the wire transfer.
          example: "1234567890123456"
          type: string
        originating_account_id:
          description: The account uuid representing the sender of the wire.
          example: b01db9c7-78f2-4a99-8aca-1231d32f9b96
          format: uuid
          type: string
        quote_id:
          description: "The quote id returned from the /international_wire/quote endpoint,\
            \ contains FX rate information. Required if the international wire is\
            \ cross currency."
          format: uuid
          type: string
        receiving_account_id:
          description: "The external account uuid representing the recipient of the\
            \ wire. Needs to be configured with international bank routing details\
            \ (e.g. SWIFT code, refer to external accounts documentation)."
          example: b01db9c7-78f2-4a99-8aca-1231d32f9b96
          format: uuid
          type: string
        sender_amount:
          description: "Debit amount to the wire sender, in cents ($100 would be 10000)."
          example: 13000
          format: int64
          type: integer
        sender_currency:
          description: The currency of the sender's account in ISO4217 format.
          example: USD
          type: string
        status:
          $ref: '#/components/schemas/international_wire_status'
        transaction_id:
          description: ID of the resulting transaction resource.
          format: uuid
          type: string
        wire_instruction:
          description: Optional transaction instructions for the recipient bank if
            required by the recipient bank.
          example: For benefit of John Doe's account with account number XXX
          maxLength: 210
          type: string
        wire_purpose:
          description: Reason for the wire transfer.
          example: "Payment for Receipt #1234"
          type: string
      required:
      - amount_in_beneficiary_currency
      - beneficiary_currency
      - creation_time
      - customer_id
      - id
      - last_updated_time
      - originating_account_id
      - receiving_account_id
      - sender_amount
      - sender_currency
      - status
      - wire_purpose
      title: Response payload for an international wire object
      type: object
    international_wire_status:
      description: The current status of the transfer.
      enum:
      - CANCELED
      - COMPLETED
      - CONFIRMED
      - DECLINED
      - PENDING
      example: PENDING
      type: string
    is_customer:
      description: |
        True for personal and business customers with a direct relationship with the fintech or bank. Set this to true for any customer related to an account.
      example: true
      type: boolean
    legal_address:
      allOf:
      - description: Legal address
      - $ref: '#/components/schemas/address'
    license_list:
      allOf:
      - properties:
          licenses:
            description: Array of license records
            items:
              $ref: '#/components/schemas/response_license'
            type: array
        type: object
      - $ref: '#/components/schemas/paginated_response'
    license_number:
      description: The entity's license number
      example: "10321"
      minLength: 1
      type: string
    license_patch:
      properties:
        license_number:
          description: The entity's license number
          example: "10321"
          minLength: 1
          type: string
      required:
      - license_number
      type: object
    license_type:
      description: "The type of the license being created. For example, the license\
        \ being created could be for MRB (Marijuana related business)"
      enum:
      - MRB
      example: MRB
      type: string
    lookup_3ds_request:
      discriminator:
        mapping:
          BROWSER: '#/components/schemas/lookup_3ds_request_browser'
          SDK: '#/components/schemas/lookup_3ds_request_sdk'
        propertyName: device_channel
      oneOf:
      - $ref: '#/components/schemas/lookup_3ds_request_browser'
      - $ref: '#/components/schemas/lookup_3ds_request_sdk'
      type: object
    lookup_3ds_request_base:
      description: Details for an External Card Transfer 3-D Secure Authentication
        lookup request
      properties:
        authentication_indicator:
          enum:
          - INSTALLMENT
          - PAYMENT
          - RECURRING
          type: string
        device_channel:
          description: |
            Channel through which Device Data Collection was performed

            Channel | Description
            --- | ---
            `BROWSER` | Internet browser
            `SDK` | Mobile app
          enum:
          - BROWSER
          - SDK
          example: BROWSER
          type: string
        id:
          description: The unique identifier of the 3DS authentication
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        transaction_mode:
          enum:
          - COMPUTER_DEVICE
          - MOBILE_DEVICE
          - TABLET_DEVICE
          type: string
      required:
      - authentication_indicator
      - device_channel
      - id
      - transaction_mode
      type: object
    lookup_3ds_request_browser:
      allOf:
      - properties:
          device_details:
            $ref: '#/components/schemas/device_details'
        type: object
      - $ref: '#/components/schemas/lookup_3ds_request_base'
      type: object
    lookup_3ds_request_sdk:
      allOf:
      - $ref: '#/components/schemas/lookup_3ds_request_base'
      type: object
    lookup_3ds_response:
      description: Details for an External Card Transfer 3-D Secure Authentication
        lookup response
      example:
        processor_transaction_id: processor_transaction_id
        challenge_payload: challenge_payload
        id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
        challenge_url: https://openapi-generator.tech
        status: CHALLENGE_REQUIRED
      properties:
        challenge_payload:
          description: "3DS challenge payload, returned if challenge is required"
          type: string
        challenge_url:
          description: "3DS challenge URL, returned if challenge is required"
          format: uri
          type: string
        id:
          description: The unique identifier of the 3DS authentication
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        processor_transaction_id:
          description: "Processor Transaction ID, returned if challenge is required"
          type: string
        status:
          description: Status of the 3DS authentication
          enum:
          - CHALLENGE_REQUIRED
          - FAILED
          - NOT_ENROLLED
          - SUCCESS
          - UNKNOWN
          type: string
      required:
      - id
      - status
      type: object
    manual_account_verification:
      allOf:
      - $ref: '#/components/schemas/base_account_verification'
      title: Information specific to Manual verification
    manual_entry:
      properties:
        address_verification:
          $ref: '#/components/schemas/digital_wallet_token_address_verification'
        enabled:
          default: false
          example: false
          type: boolean
      type: object
    merchant:
      description: "Merchant descriptor information that will be shown on statement\
        \ and transaction details. If not provided, FinTech information will be used."
      properties:
        address:
          $ref: '#/components/schemas/address1'
        email:
          description: Merchant's email
          example: alice@example.com
          type: string
        name:
          description: Merchant's name
          type: string
        phone_number:
          description: Merchant's phone number with country code in E.164 format.
            Must have a valid country code. Area code and local phone number are not
            validated.
          example: +14374570680
          pattern: "^\\+[1-9]\\d{1,14}$"
          type: string
      required:
      - address
      - name
      type: object
    merchant_category_codes:
      description: merchant category codes for spend control
      items:
        description: specify a specific MCC or a range of MCCs using a dash (-)
        example: 5600–5699
        pattern: "^\\d{4}(-\\d{4})?$"
        type: string
      maxItems: 10
      type: array
    merchant_response:
      example:
        updated_at: 2018-09-28T21:13:53.000Z
        website_url: https://www.xfinity.com
        logo_url: https://s3.amazonaws.com/MD_Assets/merchant_logos/comcast.png
        name: Comcast
        created_at: 2017-04-20T19:30:12.000Z
        guid: MCH-7ed79542-884d-2b1b-dd74-501c5cc9d25b
      properties:
        created_at:
          example: 2017-04-20T19:30:12.000Z
          nullable: true
          type: string
        guid:
          example: MCH-7ed79542-884d-2b1b-dd74-501c5cc9d25b
          nullable: true
          type: string
        logo_url:
          example: https://s3.amazonaws.com/MD_Assets/merchant_logos/comcast.png
          nullable: true
          type: string
        name:
          example: Comcast
          nullable: true
          type: string
        updated_at:
          example: 2018-09-28T21:13:53.000Z
          nullable: true
          type: string
        website_url:
          example: https://www.xfinity.com
          nullable: true
          type: string
      type: object
    metadata:
      description: |
        Optional field to store additional information about the resource. Intended to be used by the integrator to store non-sensitive data.
      type: object
    minimum_payment:
      description: |
        The scheme for calculating the minimum payment due for outstanding balances in a billing period.
      discriminator:
        mapping:
          FULL: '#/components/schemas/minimum_payment_type_full'
          RATE_OR_AMOUNT: '#/components/schemas/minimum_payment_type_rate_or_amount'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/minimum_payment_type_rate_or_amount'
      - $ref: '#/components/schemas/minimum_payment_type_full'
      type: object
    minimum_payment_full:
      description: |
        The scheme for calculating the minimum payment due for outstanding balances in a billing period.
      discriminator:
        mapping:
          FULL: '#/components/schemas/minimum_payment_type_full'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/minimum_payment_type_full'
      type: object
    minimum_payment_partial:
      description: |
        The scheme for calculating the minimum payment due for outstanding balances in a billing period.
      discriminator:
        mapping:
          RATE_OR_AMOUNT: '#/components/schemas/minimum_payment_type_rate_or_amount'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/minimum_payment_type_rate_or_amount'
      type: object
    minimum_payment_type:
      description: "* RATE_OR_AMOUNT: Describes a minimum payment scheme where the\
        \ amount calculated is either a portion\n  of the balance due, or a fixed,\
        \ minimum amount, whichever is greater. For example, if\n  set to 1.00% and\
        \ $30, the minimum payment will be calculated as 1.00% of the balance, or\n\
        \  $30, whichever is greatest. However, the minimum payment will never exceed\
        \ the statement\n  balance.\n* FULL: Describes a minimum payment scheme where\
        \ the amount calculated is the entire account\n  balance at the end of the\
        \ statement period.\n  \nNote that the choice of minimum payment type is constrained\
        \ by the account type.\n"
      enum:
      - FULL
      - RATE_OR_AMOUNT
      type: string
    minimum_payment_type_full:
      properties:
        type:
          $ref: '#/components/schemas/minimum_payment_type'
      required:
      - type
      type: object
    minimum_payment_type_rate_or_amount:
      properties:
        min_amount:
          description: |
            The minimum amount to charge as a minimum payment, in cents. For example, to set the minimum to $30, set this value to 3000. Note: despite setting this value, the minimum payment will never be greater than the statement balance.
          format: int64
          type: integer
        rate:
          description: |
            The percentage of the balance to use, in basis points. For example, to set 12.5% of the balance, set this value to 1250.
          type: integer
        type:
          $ref: '#/components/schemas/minimum_payment_type'
      required:
      - min_amount
      - rate
      - type
      type: object
    monitoring_alert:
      example:
        creation_time: 2010-05-06T12:23:34.321Z
        metadata: "{}"
        urls:
        - https://example.com/alert-document-1
        - https://example.com/alert-document-2
        last_updated_time: 2010-05-06T12:23:34.321Z
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        title: Ireland Competition and Consumer Protection Commission Criminal Court
          Cases
        type: BANKRUPTCY
        vendor_info: null
        business_id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
        person_id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
        status: null
      properties:
        business_id:
          description: |
            Unique ID for the business. Exactly one of `business_id` or `person_id` must be set.
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        creation_time:
          description: The date and time the resource was created.
          example: 2010-05-06T12:23:34.321Z
          format: date-time
          readOnly: true
          type: string
        id:
          description: Unique identifier for this alert.
          format: uuid
          readOnly: true
          type: string
        last_updated_time:
          description: The date and time the resource was last update.
          example: 2010-05-06T12:23:34.321Z
          format: date-time
          readOnly: true
          type: string
        metadata:
          description: |
            Optional field to store additional information about the resource. Intended to be used by the integrator to store non-sensitive data.
          type: object
        person_id:
          description: |
            Unique ID for the person. Exactly one of `person_id` or `business_id` must be set.
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        status:
          $ref: '#/components/schemas/monitoring_status'
        title:
          description: A description of the monitoring alert.
          example: Ireland Competition and Consumer Protection Commission Criminal
            Court Cases
          type: string
        type:
          description: |
            The type of customer alert. Any of the following:
            * `WATCHLIST` – the customer was added to a known watchlist.
            * `BANKRUPTCY` – the customer filed for bankruptcy.
            * `NEGATIVE_NEWS` – the customer was mentioned in negative news articles.
            * `LICENSE_VALIDITY` – the license is no longer valid. Exmaple of this would be if a license was suspended
          enum:
          - BANKRUPTCY
          - LICENSE_VALIDITY
          - NEGATIVE_NEWS
          - WATCHLIST
          readOnly: true
          type: string
        urls:
          description: Where to get more information about this alert.
          example:
          - https://example.com/alert-document-1
          - https://example.com/alert-document-2
          items:
            type: string
          readOnly: true
          type: array
        vendor_info:
          $ref: '#/components/schemas/vendor_info'
      type: object
    monitoring_alert_list:
      allOf:
      - properties:
          alerts:
            items:
              $ref: '#/components/schemas/monitoring_alert'
            type: array
        required:
        - alerts
        type: object
      - $ref: '#/components/schemas/paginated_response'
    monitoring_status:
      description: |
        The status of the alert. Any of the following:
        * `ACTIVE` – alert has been issued and should be investigated.
        * `SUPPRESSED` – alert is a false positive, alert should be dismissed, or has been otherwise investigated.
      enum:
      - ACTIVE
      - SUPPRESSED
      type: string
    monitoring_subscription:
      example:
        creation_time: 2010-05-06T12:23:34.321Z
        metadata: "{}"
        last_updated_time: 2010-05-06T12:23:34.321Z
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        business_id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
        person_id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
      properties:
        business_id:
          description: |
            Unique ID for the business. Exactly one of `business_id` or `person_id` must be set.
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        creation_time:
          description: The date and time the resource was created.
          example: 2010-05-06T12:23:34.321Z
          format: date-time
          readOnly: true
          type: string
        id:
          description: Unique identifier for this subscription.
          format: uuid
          readOnly: true
          type: string
        last_updated_time:
          description: The date and time the resource was last update.
          example: 2010-05-06T12:23:34.321Z
          format: date-time
          readOnly: true
          type: string
        metadata:
          description: |
            Optional field to store additional information about the resource. Intended to be used by the integrator to store non-sensitive data.
          type: object
        person_id:
          description: |
            Unique ID for the person. Exactly one of `person_id` or `business_id` must be set.
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
      type: object
    monitoring_subscription_list:
      allOf:
      - properties:
          subscriptions:
            items:
              $ref: '#/components/schemas/monitoring_subscription'
            type: array
        required:
        - subscriptions
        type: object
      - $ref: '#/components/schemas/paginated_response'
    network_fee_model:
      example:
        amount: 123
        credit_debit: C
        type: ISSUER_FEE
      properties:
        amount:
          description: The amount of the fee in the smallest whole denomination of
            the applicable currency (eg. For USD use cents)
          type: integer
        credit_debit:
          description: C = credit; D = debit
          enum:
          - C
          - D
          type: string
        type:
          enum:
          - ACQUIRER_FEE
          - CROSS_BORDER_ISSUER_FEE
          - CUR_CONV_CARDHOLDER_FEE
          - CUR_CONV_ISSUER_FEE
          - INTERCHANGE_FEE
          - ISSUER_FEE
          - PINDEBIT_ASSOC_FEE
          - SWITCH_FEE
          type: string
      required:
      - amount
      - type
      type: object
    note_create:
      properties:
        content:
          description: The note's text content.
          example: Customer was frozen to investigate fraud.
          type: string
        metadata:
          description: |
            Optional field to store additional information about the resource. Intended to be used by the integrator to store non-sensitive data.
          type: object
        related_resource_field:
          description: |
            🚧 Beta
            This is a Beta property. Feedback from the community is welcome. We may make breaking changes to this property.
            Path to the field in the related resource that the note pertains to. This uses a dot notation like the following:
            Examples:
            * a field in the resource: first_name
            * a sub-field: legal_address.city
            * nested arrays: application_details.sections[1].pages[2].items[0].answer
          example: /legal_address/city
          type: string
        related_resource_id:
          description: |
            The id of the resource that is associated with the note.
            This is typically a UUID.
            For TENANT it is a string tenant ID.
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          type: string
        related_resource_type:
          $ref: '#/components/schemas/related_resource_type1'
        status:
          $ref: '#/components/schemas/status1'
        tenant:
          description: |
            The tenant containing the resource.
            Tenancy is represented as bank_id_partner_id.
            This attribute is included on all responses.
            For requests, it is optional for clients with access to a single tenant.
          example: abcdef_ghijkl
          type: string
        type:
          $ref: '#/components/schemas/type'
      required:
      - content
      - related_resource_id
      - related_resource_type
      title: Note creation object
      type: object
    note_list:
      allOf:
      - properties:
          notes:
            description: Array of notes
            items:
              $ref: '#/components/schemas/note_response'
            type: array
        required:
        - notes
        type: object
      - $ref: '#/components/schemas/paginated_response'
      title: Note List
    note_response:
      example:
        creation_time: 2010-05-06T12:23:34.321Z
        related_resource_field: /legal_address/city
        related_resource_id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
        metadata: "{}"
        last_updated_time: 2010-05-06T12:23:34.321Z
        author: Jane Smith jane@example.com
        id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
        related_resource_type: CUSTOMER
        type: NOTE
        content: Customer was frozen to investigate fraud.
        tenant: abcdef_ghijkl
        status: RESOLVED
      properties:
        author:
          description: The note's author.
          example: Jane Smith jane@example.com
          type: string
        content:
          description: The note's text content.
          example: Customer was frozen to investigate fraud.
          type: string
        creation_time:
          description: The date and time the note was created.
          example: 2010-05-06T12:23:34.321Z
          format: date-time
          readOnly: true
          type: string
        id:
          description: note ID
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          readOnly: true
          type: string
        last_updated_time:
          description: The date and time the note was last updated.
          example: 2010-05-06T12:23:34.321Z
          format: date-time
          readOnly: true
          type: string
        metadata:
          description: |
            Optional field to store additional information about the resource. Intended to be used by the integrator to store non-sensitive data.
          type: object
        related_resource_field:
          description: |
            🚧 Beta
            This is a Beta property. Feedback from the community is welcome. We may make breaking changes to this property.
            Path to the field in the related resource that the note pertains to. This uses a dot notation like the following:
            Examples:
            * a field in the resource: first_name
            * a sub-field: legal_address.city
            * nested arrays: application_details.sections[1].pages[2].items[0].answer
          example: /legal_address/city
          type: string
        related_resource_id:
          description: |
            The id of the resource that is associated with the note.
            This is typically a UUID.
            For TENANT it is a string tenant ID.
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          type: string
        related_resource_type:
          $ref: '#/components/schemas/related_resource_type1'
        status:
          $ref: '#/components/schemas/status1'
        tenant:
          description: |
            The tenant containing the resource.
            Tenancy is represented as bank_id_partner_id.
            This attribute is included on all responses.
            For requests, it is optional for clients with access to a single tenant.
          example: abcdef_ghijkl
          type: string
        type:
          $ref: '#/components/schemas/type'
      required:
      - author
      - content
      - creation_time
      - id
      - last_updated_time
      - related_resource_id
      - related_resource_type
      - tenant
      title: Note response object
      type: object
    original_credit_request_model:
      properties:
        amount:
          description: The amount of the transaction in the smallest whole denomination
            of the applicable currency (eg. For USD use cents)
          type: integer
        card_acceptor:
          $ref: '#/components/schemas/card_acceptor_model'
        card_id:
          format: uuid
          type: string
        mid:
          maxLength: 50
          minLength: 1
          type: string
        screening_score:
          type: string
        sender_data:
          $ref: '#/components/schemas/original_credit_sender_data'
        transactionPurpose:
          type: string
        type:
          enum:
          - account_to_account
          - bill_payment
          - business_to_business
          - card_bill_payment
          - cash_claim
          - cash_in
          - cash_out
          - disbursement
          - face_to_face_merchant_payment
          - gambling_payout
          - government_disbursement
          - government_payment
          - loyalty
          - merchant_disbursement
          - mobile_air_time_payment
          - money_transfer_by_bank
          - money_transfer_by_merchant
          - online_gambling_payout
          - payments_goods_services
          - pension_disbursement
          - person_to_person
          - prepaid
          - prepaid_loads
          - wallet_transfer
          type: string
      required:
      - amount
      - card_id
      - mid
      - type
      type: object
    original_credit_sender_data:
      properties:
        funding_source:
          enum:
          - cash
          - credit
          - debit
          - deposit_account
          - mobile_money_payment
          - non_visa_credit
          - prepaid
          type: string
        sender_account_number:
          type: string
        sender_account_type:
          enum:
          - bank_account_number_and_identification_code
          - card_account
          - email
          - iban
          - other
          - phone_number
          - rtn_bank_account
          - social_network_id
          - wallet_id
          type: string
        sender_address:
          type: string
        sender_city:
          type: string
        sender_country:
          type: string
        sender_name:
          type: string
        sender_reference_number:
          type: string
        sender_state:
          type: string
        transaction_purpose:
          enum:
          - crypto_currency
          - education
          - emergency_need
          - family_support
          - gifts
          - labor_transfers
          - lending
          - medical_treatment
          - other
          - salary
          - savings
          - travel
          type: string
        unique_transaction_reference_number:
          maxLength: 17
          minLength: 1
          type: string
      required:
      - funding_source
      type: object
    originating_account_id:
      description: The unique identifier of an originating account
      example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
      format: uuid
      type: string
    outgoing_ach:
      description: Represents a sent ACH transaction.
      example:
        source_account_no: "123638791329"
        amount: 1560
        source_account_name: Thomas Anderson
        is_same_day: true
        memo: memo
        external_id: b01db9c7-78f2-4a99-8aca-1231d32f9b96
        trace_no: "123456780000069"
        account_no: "122455799"
        hold:
          amount: 0
          availability_time: 2010-05-06T12:23:34.321Z
        partner_id: 2
        bank_id: 1
        account_name: Bruce Wayne
        company_name: Asdf Finance
        effective_date: 2022-03-25T00:00:00.000+00:00
        reference_info: reference_info
        company_entry_description: PAYROLL
        id: b01db9c7-78f2-4a99-8aca-1231d32f9b96
        status: CANCELED
      properties:
        account_name:
          description: Receiving account name
          example: Bruce Wayne
          type: string
        account_no:
          description: Receiving account number
          example: "122455799"
          type: string
        amount:
          description: Transaction amount in cents
          example: 1560
          type: integer
        bank_id:
          example: 1
          type: integer
        company_entry_description:
          description: Company Entry Description field in ACH batch header. Originator
            inserts this field's value to provide the Receiver with a description
            of the entry's purpose.
          example: PAYROLL
          type: string
        company_name:
          description: Company Name field in ACH batch header.
          example: Asdf Finance
          type: string
        effective_date:
          description: Effective date of the transaction
          example: 2022-03-25
          format: date
          type: string
        external_id:
          description: Transaction ID in the ledger
          example: b01db9c7-78f2-4a99-8aca-1231d32f9b96
          format: uuid
          type: string
        hold:
          $ref: '#/components/schemas/hold_data'
        id:
          example: b01db9c7-78f2-4a99-8aca-1231d32f9b96
          format: uuid
          type: string
        is_same_day:
          description: Was initiated as same-day ACH transaction
          type: boolean
        memo:
          type: string
        partner_id:
          example: 2
          type: integer
        reference_info:
          description: Transaction reference info
          type: string
        source_account_name:
          description: Originating account name
          example: Thomas Anderson
          type: string
        source_account_no:
          description: Originating account number
          example: "123638791329"
          type: string
        status:
          enum:
          - CANCELED
          - COMPLETE
          - DECLINED
          - INIT
          - PENDING
          type: string
        trace_no:
          description: Trace number of the transaction
          example: "123456780000069"
          type: string
      required:
      - account_no
      - amount
      - bank_id
      - effective_date
      - external_id
      - id
      - is_same_day
      - memo
      - partner_id
      - source_account_no
      - status
      - trace_no
      type: object
    outgoing_ach_list:
      allOf:
      - properties:
          transactions:
            description: Array of sent ACH transactions.
            items:
              $ref: '#/components/schemas/outgoing_ach'
            type: array
        required:
        - transactions
        type: object
      - $ref: '#/components/schemas/paginated_response'
    outgoing_ach_patch:
      description: Update sent ach transaction
      properties:
        funds_availability_time:
          example: 2010-05-06T12:23:34.321Z
          format: date-time
          nullable: true
          type: string
        status:
          enum:
          - CANCELED
          nullable: true
          type: string
      type: object
    outgoing_ach_request:
      description: Send an ACH
      properties:
        amount:
          description: Amount to transfer in ISO 4217 minor currency units
          example: 607
          type: integer
        company_entry_description:
          description: Company Entry Description field in ACH batch header. Originator
            inserts this field's value to provide the Receiver with a description
            of the entry's purpose.
          example: PAYROLL
          maxLength: 10
          nullable: true
          type: string
        company_name:
          description: "Overrides the 'Company Name' field in ACH batch header, which\
            \ otherwise defaults to the configured partner name."
          example: Asdf Finance
          maxLength: 16
          type: string
        currency:
          description: ISO 4217 alphabetic currency code of the transfer amount
          example: USD
          type: string
        customer_id:
          description: The customer's unique identifier
          example: b01db9c7-78f2-4a99-8aca-1231d32f9b96
          format: uuid
          type: string
        dc_sign:
          description: The type of transaction (debit or credit). A debit is a transfer
            in and a credit is a transfer out of the originating account
          enum:
          - credit
          - debit
          example: debit
          type: string
        effective_date:
          description: Effective date transaction proccesses (is_same_day needs to
            be false or not present at all)
          example: 2022-03-18
          format: date
          nullable: true
          type: string
        external_data:
          description: Additional transfer metadata structured as key-value pairs
          nullable: true
          type: object
        final_customer_id:
          description: ID of the international customer that receives the final remittance
            transfer (required for OFAC enabled payments)
          format: uuid
          nullable: true
          type: string
        hold:
          $ref: '#/components/schemas/ach_request_hold_data'
        is_same_day:
          description: Send as same day ACH transaction (use only is_same_day without
            specific effective_date)
          nullable: true
          type: boolean
        memo:
          description: Memo for the payment
          nullable: true
          type: string
        originating_account_id:
          description: The unique identifier for an originating account
          example: b01db9c7-78f2-4a99-8aca-1231d32f9b96
          format: uuid
          type: string
        receiving_account_id:
          description: The unique identifier for an receiving account
          example: b01db9c7-78f2-4a99-8aca-1231d32f9b96
          format: uuid
          type: string
        reference_info:
          description: Will be sent to the ACH network and maps to Addenda record
            05 - the recipient bank will receive this info
          example: Tempore atque et cum.
          nullable: true
          type: string
        risk:
          $ref: '#/components/schemas/risk_data'
        sec_code:
          default: WEB
          description: |-
            Standard Entry Class Code:
            * WEB: Internet initiated / Mobile Entry (default if empty)
            * CCD: Corporate Credit or Debit
          enum:
          - CCD
          - WEB
          type: string
      required:
      - amount
      - currency
      - customer_id
      - dc_sign
      - originating_account_id
      - receiving_account_id
      title: Send ACH requests
      type: object
    paginated_response:
      properties:
        next_page_token:
          description: "If returned, use the next_page_token to query for the next\
            \ page of results. Not returned if there are no more rows."
          example: a8937a0d
          type: string
      title: Paginated List response
      type: object
    patch_account:
      anyOf:
      - $ref: '#/components/schemas/patch_account_depository'
      - $ref: '#/components/schemas/patch_account_charge_secured'
      - $ref: '#/components/schemas/patch_account_line_of_credit'
      type: object
    patch_account_charge_secured:
      allOf:
      - properties:
          is_ach_enabled:
            description: A flag to indicate whether ACH transactions are enabled.
            type: boolean
          is_card_enabled:
            description: A flag to indicate whether card transactions are enabled.
            type: boolean
          is_eft_ca_enabled:
            description: A flag to indicate whether EFT Canada transactions are enabled.
            type: boolean
          is_p2p_enabled:
            description: A flag to indicate whether P2P transactions are enabled.
            type: boolean
          is_system_auto_pay_enabled:
            description: A flag to indicate whether auto payments are enabled.
            type: boolean
          is_wire_enabled:
            description: A flag to indicate whether wire transactions are enabled.
            type: boolean
          note:
            description: Add an optional note when patching a charged secured account.
              A note is required when setting the status to or from SUSPENDED.
            type: string
            writeOnly: true
          spend_control_ids:
            $ref: '#/components/schemas/spend_control_ids'
      - $ref: '#/components/schemas/account_base'
      type: object
    patch_account_depository:
      allOf:
      - properties:
          balance_ceiling:
            $ref: '#/components/schemas/balance_ceiling'
          balance_floor:
            $ref: '#/components/schemas/balance_floor'
          fee_product_ids:
            description: A list of fee account products that the current account associates
              with.
            items:
              format: uuid
              type: string
            type: array
          interest_product_id:
            description: |
              An interest account product that the current account associates with.
            format: uuid
            type: string
          is_ach_enabled:
            description: A flag to indicate whether ACH transactions are enabled.
            type: boolean
          is_card_enabled:
            description: A flag to indicate whether card transactions are enabled.
            type: boolean
          is_eft_ca_enabled:
            description: A flag to indicate whether EFT Canada transactions are enabled.
            type: boolean
          is_external_card_enabled:
            description: A flag to indicate whether external cards are enabled.
            type: boolean
          is_p2p_enabled:
            description: A flag to indicate whether P2P transactions are enabled.
            type: boolean
          is_wire_enabled:
            description: A flag to indicate whether wire transactions are enabled.
            type: boolean
          note:
            description: Add an optional note when creating or updating a depository
              account. A note is required when updating the status to or from SUSPENDED
            type: string
            writeOnly: true
          overdraft_limit:
            description: Account's overdraft limit
            format: int64
            minimum: 0
            type: integer
          spend_control_ids:
            $ref: '#/components/schemas/spend_control_ids'
          spending_limits:
            $ref: '#/components/schemas/spending_limits'
      - $ref: '#/components/schemas/account_base'
      description: Account representing either a checking or saving account.
      type: object
    patch_account_line_of_credit:
      allOf:
      - properties:
          credit_limit:
            description: |
              The credit limit for this line of credit account in cents. Minimum is 0.
            example: 2500
            format: int64
            minimum: 0
            type: integer
          grace_period:
            description: |
              The number of days past the billing period to allow for payment before it is considered due. This directly infers the due date for a payment. The default will be set to 21 days.
            example: 21
            maximum: 28
            minimum: 21
            type: integer
          is_ach_enabled:
            description: A flag to indicate whether ACH transactions are enabled.
            type: boolean
          is_eft_ca_enabled:
            description: A flag to indicate whether EFT Canada transactions are enabled.
            type: boolean
          is_p2p_enabled:
            description: A flag to indicate whether P2P transactions are enabled.
            type: boolean
          is_wire_enabled:
            description: A flag to indicate whether wire transactions are enabled.
            type: boolean
          minimum_payment:
            $ref: '#/components/schemas/minimum_payment_partial'
          note:
            description: Add an optional note when patching a line of credit account.
              A note is required when setting the status to or from SUSPENDED.
            type: string
            writeOnly: true
      - $ref: '#/components/schemas/account_base'
      type: object
    patch_account_product:
      discriminator:
        mapping:
          FEE: '#/components/schemas/fee'
          INTEREST: '#/components/schemas/patch_interest'
        propertyName: product_type
      oneOf:
      - $ref: '#/components/schemas/patch_interest'
      - $ref: '#/components/schemas/fee'
      type: object
    patch_accounts_request_account_identifiers:
      properties:
        iban:
          description: |
            The IBAN of the account. On write, Synctera will store the entire IBAN number; on read, we only return the last 4 characters.
          example: LI4476584648937N59B00
          minLength: 1
          type: string
        number:
          description: |
            The account number.
          example: "87654321"
          minLength: 1
          type: string
      title: Identifiers for the account
      type: object
    patch_accounts_request_routing_identifiers:
      properties:
        ach_routing_number:
          description: |
            The routing number used for US ACH payments. On write, Synctera will store the entire routing number; on read, we only return the last 4 characters.
          example: "756392185"
          minLength: 1
          type: string
        bank_name:
          description: The name of the bank managing the account
          example: Chase
          minLength: 1
          type: string
        eft_ca_routing_number:
          description: |
            > 🚧 Alpha > This is an Alpha property. Feedback from the community is welcome. We may make breaking changes to this property.
            The 9 digit routing number used for EFT CA payments, identifying a Canadian bank.  The format is 0xxxyyyyy where xxx is the institution number and yyyyy is the transit number. On write, Synctera will store the entire routing number; on read, we only return the last 4 characters.
          example: "02101140"
          maxLength: 9
          minLength: 9
          type: string
        international_wire_details:
          $ref: '#/components/schemas/patch_international_wire_details'
        wire_routing_number:
          description: |
            The routing number used for domestic wire payments. On write, Synctera will store the entire routing number; on read, we only return the last 4 characters.
          example: "952391102"
          type: string
      title: Identifiers for the bank
      type: object
    patch_business:
      allOf:
      - $ref: '#/components/schemas/base'
      description: Represents a business customer.
      type: object
    patch_business_business_owner_relationship:
      allOf:
      - properties:
          additional_data:
            $ref: '#/components/schemas/additional_owner_data'
          creation_time:
            description: The date and time the resource was created.
            example: 2010-05-06T12:23:34.321Z
            format: date-time
            readOnly: true
            type: string
          from_business_id:
            description: |
              Unique ID for the subject business.
            example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
            format: uuid
            type: string
          id:
            description: Relationship unique identifier.
            example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
            format: uuid
            readOnly: true
            type: string
          last_updated_time:
            description: The date and time the resource was last updated.
            example: 2010-05-06T12:23:34.321Z
            format: date-time
            readOnly: true
            type: string
          metadata:
            $ref: '#/components/schemas/metadata'
          relationship_type:
            $ref: '#/components/schemas/relationship_types'
          tenant:
            $ref: '#/components/schemas/tenant_id'
          to_business_id:
            description: |
              Unique ID for the related business.
            example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
            format: uuid
            type: string
        required:
        - relationship_type
      description: Denotes the relationship between specified businesses.
      type: object
    patch_customer:
      description: Customer object for patch purpose. All fields are optional
      properties:
        ban_status:
          $ref: '#/components/schemas/ban_status'
        dob:
          description: Customer's date of birth in RFC 3339 full-date format (YYYY-MM-DD)
          example: 2000-01-01
          format: date
          type: string
        email:
          description: Customer's email
          example: alice@example.com
          type: string
        first_name:
          description: Customer's first name
          example: Jane
          type: string
        last_name:
          description: Customer's last name
          example: Smith
          type: string
        legal_address:
          $ref: '#/components/schemas/legal_address'
        metadata:
          description: User-supplied JSON format metadata. Do not use to store PII.
          type: object
        middle_name:
          description: Customer's middle name
          example: Anne
          type: string
        note:
          description: Add an optional note when creating or updating a customer.
            A note is required when updating a customers's ban_status between SUSPENDED
            and ALLOWED.
          type: string
        phone_number:
          description: Customer's mobile phone number with country code in E.164 format.
            Must have a valid country code. Area code and local phone number are not
            validated.
          example: +14374570680
          pattern: "^\\+[1-9]\\d{1,14}$"
          type: string
        shipping_address:
          $ref: '#/components/schemas/shipping_address'
        ssn:
          description: "Customer's full tax ID eg SSN formatted with hyphens. This\
            \ optional parameter is required when running KYC on a customer. Must\
            \ be compiled with ^\\d{3}-\\d{2}-\\d{4}$. Response contains the last\
            \ 4 digits only (e.g. 6789)."
          example: 123-45-6789
          type: string
        status:
          description: Customer's status
          enum:
          - ACTIVE
          - DECEASED
          - DENIED
          - DORMANT
          - ESCHEAT
          - FROZEN
          - INACTIVE
          - PROSPECT
          - SANCTION
          type: string
      title: Customer
      type: object
    patch_document:
      properties:
        description:
          description: A description of the document
          type: string
        name:
          description: A user-friendly name for the document
          type: string
        type:
          $ref: '#/components/schemas/document_type'
      type: object
    patch_external_account:
      properties:
        account_identifiers:
          $ref: '#/components/schemas/patch_accounts_request_account_identifiers'
        account_owner_names:
          description: The names of the account owners.
          items:
            example: Jane Smith
            type: string
          type: array
        currency:
          description: The currency of the account in ISO 4217 format
          example: USD
          pattern: "^[A-Z]{3}$"
          type: string
        nickname:
          description: A user-meaningful name for the account
          example: Vacation savings
          minLength: 1
          type: string
        routing_identifiers:
          $ref: '#/components/schemas/patch_accounts_request_routing_identifiers'
        type:
          description: The type of the account
          enum:
          - CHECKING
          - SAVINGS
          type: string
        verification:
          $ref: '#/components/schemas/account_verification'
      type: object
    patch_interest:
      properties:
        accrual_payout_schedule:
          $ref: '#/components/schemas/accrual_payout_schedule'
        calculation_method:
          $ref: '#/components/schemas/calculation_method'
        description:
          description: User provided description for the current interest.
          example: The rate is designed for high interest saving account.
          type: string
        id:
          description: Interest ID
          format: uuid
          readOnly: true
          type: string
        product_type:
          enum:
          - INTEREST
          type: string
        rates:
          description: |
            A list of interest rate. Date intervals between valid_from and valid_to expect to have no overlap.
          items:
            $ref: '#/components/schemas/rate_details'
          type: array
      required:
      - product_type
      type: object
    patch_international_wire_details:
      properties:
        bank_address:
          $ref: '#/components/schemas/address'
        correspondent_banks_details:
          description: |
            Correspondent banks details used for international payments. Note that in a patch request,  the entirity of the correspondent_banks_details array will be updated.
          items:
            $ref: '#/components/schemas/correspondent_bank_details'
          type: array
        swift_code:
          description: |
            The SWIFT code (also known as BIC code) used for international payments.
          example: CHASUS3AXXX
          pattern: "^[A-Z]{6}[A-Z0-9]{2}([A-Z0-9]{3})?$"
          type: string
      title: International bank details
      type: object
    patch_note:
      properties:
        status:
          $ref: '#/components/schemas/status1'
      title: Note patch object
      type: object
    patch_payer_payee_relationship:
      allOf:
      - properties:
          additional_data:
            $ref: '#/components/schemas/payer_payee_additional_data'
          creation_time:
            description: The date and time the resource was created.
            example: 2010-05-06T12:23:34.321Z
            format: date-time
            readOnly: true
            type: string
          from_business_id:
            description: |
              Unique ID for the subject business.
            example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
            format: uuid
            type: string
          from_person_id:
            description: |
              Unique ID for the subject person.
            example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
            format: uuid
            type: string
          id:
            description: Relationship unique identifier.
            example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
            format: uuid
            readOnly: true
            type: string
          last_updated_time:
            description: The date and time the resource was last updated.
            example: 2010-05-06T12:23:34.321Z
            format: date-time
            readOnly: true
            type: string
          metadata:
            $ref: '#/components/schemas/metadata'
          relationship_type:
            $ref: '#/components/schemas/relationship_types'
          tenant:
            $ref: '#/components/schemas/tenant_id'
          to_business_id:
            description: |
              Unique ID for the related business.
            example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
            format: uuid
            type: string
          to_person_id:
            description: |
              Unique ID for the related person.
            example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
            format: uuid
            type: string
        required:
        - relationship_type
      description: |
        > 🚧 Alpha
        > The PAYER_PAYEE relationship is Alpha. We may make breaking changes to this schema. PAYER_PAYEE denotes the relationship between specified person or business as a payer or payee to a person or business
      type: object
    patch_payment_schedule:
      description: Patch request for payment schedule
      properties:
        status:
          description: Target payment schedule status
          enum:
          - CANCELLED
          type: string
      type: object
    patch_person:
      allOf:
      - properties:
          note:
            description: Text to be added to a note when updating a person. A note
              is required when changing a person's ban_status between SUSPENDED and
              ALLOWED.
            type: string
      - $ref: '#/components/schemas/base_person1'
      description: Properties of a person that can be updated
      type: object
    patch_person_business_owner_relationship:
      allOf:
      - properties:
          additional_data:
            $ref: '#/components/schemas/additional_owner_data'
          creation_time:
            description: The date and time the resource was created.
            example: 2010-05-06T12:23:34.321Z
            format: date-time
            readOnly: true
            type: string
          from_person_id:
            description: |
              Unique ID for the subject person.
            example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
            format: uuid
            type: string
          id:
            description: Relationship unique identifier.
            example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
            format: uuid
            readOnly: true
            type: string
          last_updated_time:
            description: The date and time the resource was last updated.
            example: 2010-05-06T12:23:34.321Z
            format: date-time
            readOnly: true
            type: string
          metadata:
            $ref: '#/components/schemas/metadata'
          relationship_type:
            $ref: '#/components/schemas/relationship_types'
          tenant:
            $ref: '#/components/schemas/tenant_id'
          to_business_id:
            description: |
              Unique ID for the related business.
            example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
            format: uuid
            type: string
        required:
        - relationship_type
      description: Denotes the relationship between specified business and person.
      type: object
    patch_person_business_relationship:
      allOf:
      - properties:
          additional_data:
            $ref: '#/components/schemas/additional_data'
          creation_time:
            description: The date and time the resource was created.
            example: 2010-05-06T12:23:34.321Z
            format: date-time
            readOnly: true
            type: string
          from_person_id:
            description: |
              Unique ID for the subject person.
            example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
            format: uuid
            type: string
          id:
            description: Relationship unique identifier.
            example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
            format: uuid
            readOnly: true
            type: string
          last_updated_time:
            description: The date and time the resource was last updated.
            example: 2010-05-06T12:23:34.321Z
            format: date-time
            readOnly: true
            type: string
          metadata:
            $ref: '#/components/schemas/metadata'
          relationship_type:
            $ref: '#/components/schemas/relationship_types'
          tenant:
            $ref: '#/components/schemas/tenant_id'
          to_business_id:
            description: |
              Unique ID for the related business.
            example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
            format: uuid
            type: string
        required:
        - relationship_type
      description: Denotes the relationship between specified person and business.
      type: object
    patch_personal_id:
      properties:
        country_code:
          description: |
            The updated ISO 3166 Alpha-2 country code for the country that issued the personal identifier.
            The country code cannot be modified for personal identifier types that have an implicit country, e.g. SSN.
          example: US
          type: string
        id_type:
          $ref: '#/components/schemas/personal_id_type'
        identifier:
          description: The updated personal identifier
          example: 123-45-6789
          type: string
        tenant:
          description: |
            The id of the tenant containing the resource. This is relevant for Fintechs that have multiple workspaces.
          example: abcdef_ghijkl
          type: string
      required:
      - id_type
      type: object
    patch_relationship_in:
      discriminator:
        mapping:
          BENEFICIAL_OWNER_OF: '#/components/schemas/patch_person_business_owner_relationship'
          MANAGING_PERSON_OF: '#/components/schemas/patch_person_business_relationship'
          OWNER_OF: '#/components/schemas/patch_business_business_owner_relationship'
          PAYER_PAYEE: '#/components/schemas/patch_payer_payee_relationship'
        propertyName: relationship_type
      oneOf:
      - $ref: '#/components/schemas/patch_person_business_relationship'
      - $ref: '#/components/schemas/patch_business_business_owner_relationship'
      - $ref: '#/components/schemas/patch_person_business_owner_relationship'
      - $ref: '#/components/schemas/patch_payer_payee_relationship'
      type: object
    payer_payee_additional_data:
      description: Contains the type of transfer for the payer and payee relationship
      properties:
        transfer_type:
          enum:
          - CREDIT
          - DEBIT
          - DEBIT_OR_CREDIT
          type: string
      required:
      - transfer_type
      type: object
    payer_payee_relationship:
      allOf:
      - required:
        - additional_data
      - $ref: '#/components/schemas/patch_payer_payee_relationship'
      description: |
        >  🚧 Alpha
        > The PAYER_PAYEE relationship is Alpha. We may make breaking changes to this schema. PAYER_PAYEE denotes the relationship between specified person or business as a payer or payee to a person or businesses.
        One from_person_id/from_business_id must be provided, and one of to_person_id/to_business_id must be provided.
      type: object
    payment:
      description: Executed payment
      properties:
        description:
          description: User provided description for the payment schedule
          type: string
        error_details:
          $ref: '#/components/schemas/payment_error_details'
        id:
          description: Payment ID
          format: uuid
          type: string
        metadata:
          description: User provided JSON format data for the payment schedule
          type: object
        payment_date:
          $ref: '#/components/schemas/payment_date'
        payment_instruction:
          $ref: '#/components/schemas/payment_instruction'
        payment_schedule_id:
          description: ID of the payment schedule that executed this payment
          format: uuid
          type: string
        status:
          $ref: '#/components/schemas/payment_status'
        transaction_id:
          description: Transaction ID. It will be included only when status is COMPLETED
          format: uuid
          type: string
      type: object
    payment_date:
      example:
        execution_date: 2000-01-23
        scheduled_date: 2000-01-23
      properties:
        execution_date:
          description: Execution date for the next payment
          format: date
          type: string
        scheduled_date:
          description: Scheduled date for the next payment
          format: date
          type: string
      readOnly: true
      required:
      - execution_date
      - scheduled_date
      type: object
    payment_error_details:
      description: Payment error details. It will be included only when status is
        ERROR
      properties:
        code:
          type: string
        details:
          type: string
      type: object
    payment_instruction:
      discriminator:
        mapping:
          ACH: '#/components/schemas/ach_instruction'
          INTERNAL_TRANSFER: '#/components/schemas/internal_transfer_instruction'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/ach_instruction'
      - $ref: '#/components/schemas/internal_transfer_instruction'
    payment_list:
      allOf:
      - properties:
          payments:
            description: Array of payments
            items:
              $ref: '#/components/schemas/payment'
            type: array
        required:
        - payments
        type: object
      - $ref: '#/components/schemas/paginated_response'
    payment_schedule:
      description: Payment schedule
      example:
        schedule:
          end_date: 2000-01-23
          count: 1
          interval: 221
          frequency: DAILY
          start_date: 2000-01-23
        metadata: "{}"
        description: description
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        payment_instruction: null
        next_payment_date:
          execution_date: 2000-01-23
          scheduled_date: 2000-01-23
        status: null
      properties:
        description:
          description: User provided description for the payment schedule
          type: string
        id:
          description: Payment schedule ID
          format: uuid
          readOnly: true
          type: string
        metadata:
          description: User provided JSON format data
          type: object
        next_payment_date:
          $ref: '#/components/schemas/payment_date'
        payment_instruction:
          $ref: '#/components/schemas/payment_instruction'
        schedule:
          $ref: '#/components/schemas/schedule_config'
        status:
          $ref: '#/components/schemas/payment_schedule_status'
      required:
      - description
      - payment_instruction
      - schedule
      type: object
    payment_schedule_list:
      allOf:
      - properties:
          payment_schedules:
            description: Array of payment schedules.
            items:
              $ref: '#/components/schemas/payment_schedule'
            type: array
        required:
        - payment_schedules
        type: object
      - $ref: '#/components/schemas/paginated_response'
    payment_schedule_status:
      description: |
        Status of the payment schedule.
      enum:
      - ACTIVE
      - CANCELLED
      - EXPIRED
      readOnly: true
      type: string
      x-enumDescriptions:
      - ACTIVE: Payment schedule will run the next payment
      - EXPIRED: Payment schedule has completed all the payments
      - CANCELLED: Payment schedule has cancelled all the future payments
    payment_status:
      description: Payment request status
      enum:
      - COMPLETED
      - ERROR
      type: string
    payment_sub_type:
      enum:
      - CARD.ATM_WITHDRAWAL
      - CARD.POS_CASHBACK
      type: string
    payment_sub_type_list:
      description: "A list of payment sub-types to which a spend control will apply,\
        \ if set. If not set or the array is empty, then the spend control will apply\
        \ to all sub-types."
      items:
        $ref: '#/components/schemas/payment_sub_type'
      type: array
    payment_type:
      description: |
        The type of payment to which a spend control applies.
        If this is not set, the spend control applies to all spending, regardless of payment type.
      enum:
      - ACH
      - CARD
      - CASH
      - CHECK
      - EFT_CA
      - EXTERNAL_CARD
      - INTERNAL_TRANSFER
      - WIRE
      type: string
    payment_type_list:
      description: "A list of payment types to which a spend control will apply, if\
        \ set. If not set or the array is empty, then the spend control will apply\
        \ to all types of payments."
      items:
        $ref: '#/components/schemas/payment_type'
      type: array
    pending_transaction:
      example:
        account_id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
        data:
          reason: reason
          was_partial: true
          avail_balance: 6
          memo: memo
          available_balance: 1
          type: type
          network: network
          expires_at: 2000-01-23T04:56:07.000+00:00
          balance: 5
          subtype: subtype
          effective_date: 2000-01-23T04:56:07.000+00:00
          transaction_time: 2000-01-23T04:56:07.000+00:00
          currency: currency
          req_amount: 0
          risk_info: "{}"
          transaction_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          amount: 0
          external_data: "{}"
          auto_post_at: 2000-01-23T04:56:07.000+00:00
          idemkey: idemkey
          history:
          - account_id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
            data:
              reason: reason
              was_partial: true
              avail_balance: 2
              memo: memo
              available_balance: 7
              type: type
              network: network
              expires_at: 2000-01-23T04:56:07.000+00:00
              balance: 9
              subtype: subtype
              effective_date: 2000-01-23T04:56:07.000+00:00
              transaction_time: 2000-01-23T04:56:07.000+00:00
              currency: currency
              req_amount: 0
              risk_info: "{}"
              transaction_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
              amount: 0
              external_data: "{}"
              auto_post_at: 2000-01-23T04:56:07.000+00:00
              idemkey: idemkey
              user_data: "{}"
              dc_sign: null
              force_post: true
              total_amount: 0
              operation: hold_cancel
              status: CLEARED
            reference_id: reference_id
            created: 2000-01-23T04:56:07.000+00:00
            idemkey: idemkey
            offset_account_id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
            id: 4
            account_no: account_no
            updated: 2000-01-23T04:56:07.000+00:00
            uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            tenant: tenant
            offset_account_no: offset_account_no
          - account_id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
            data:
              reason: reason
              was_partial: true
              avail_balance: 2
              memo: memo
              available_balance: 7
              type: type
              network: network
              expires_at: 2000-01-23T04:56:07.000+00:00
              balance: 9
              subtype: subtype
              effective_date: 2000-01-23T04:56:07.000+00:00
              transaction_time: 2000-01-23T04:56:07.000+00:00
              currency: currency
              req_amount: 0
              risk_info: "{}"
              transaction_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
              amount: 0
              external_data: "{}"
              auto_post_at: 2000-01-23T04:56:07.000+00:00
              idemkey: idemkey
              user_data: "{}"
              dc_sign: null
              force_post: true
              total_amount: 0
              operation: hold_cancel
              status: CLEARED
            reference_id: reference_id
            created: 2000-01-23T04:56:07.000+00:00
            idemkey: idemkey
            offset_account_id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
            id: 4
            account_no: account_no
            updated: 2000-01-23T04:56:07.000+00:00
            uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            tenant: tenant
            offset_account_no: offset_account_no
          user_data: "{}"
          dc_sign: null
          force_post: true
          total_amount: 0
          operation: hold_cancel
          status: CLEARED
        reference_id: reference_id
        created: 2000-01-23T04:56:07.000+00:00
        idemkey: idemkey
        offset_account_id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
        id: 1
        account_no: account_no
        updated: 2000-01-23T04:56:07.000+00:00
        uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        tenant: tenant
        offset_account_no: offset_account_no
      properties:
        account_id:
          description: The account id associated with the hold
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          type: string
        account_no:
          description: The account number associated with the hold
          type: string
        created:
          description: The creation date of the hold
          format: date-time
          type: string
        data:
          $ref: '#/components/schemas/pending_transaction_data'
        id:
          format: int64
          type: integer
        idemkey:
          description: The idempotency key used when initially creating this hold.
          type: string
        offset_account_id:
          description: The offset account id associated with the hold
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          type: string
        offset_account_no:
          description: The offset account number associated with the hold
          type: string
        reference_id:
          description: An external ID provided by the payment network to represent
            this transaction.
          nullable: true
          type: string
        tenant:
          description: "The tenant associated with this hold, in the form \"<bankid>_<partnerid>\""
          type: string
        updated:
          description: The date the hold was last update
          format: date-time
          type: string
        uuid:
          description: The unique identifier of the hold transaction.
          format: uuid
          type: string
      required:
      - account_id
      - account_no
      - created
      - data
      - id
      - idemkey
      - reference_id
      - tenant
      - updated
      - uuid
      title: A pending transaction
      type: object
    pending_transaction_data:
      example:
        reason: reason
        was_partial: true
        avail_balance: 6
        memo: memo
        available_balance: 1
        type: type
        network: network
        expires_at: 2000-01-23T04:56:07.000+00:00
        balance: 5
        subtype: subtype
        effective_date: 2000-01-23T04:56:07.000+00:00
        transaction_time: 2000-01-23T04:56:07.000+00:00
        currency: currency
        req_amount: 0
        risk_info: "{}"
        transaction_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        amount: 0
        external_data: "{}"
        auto_post_at: 2000-01-23T04:56:07.000+00:00
        idemkey: idemkey
        history:
        - account_id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          data:
            reason: reason
            was_partial: true
            avail_balance: 2
            memo: memo
            available_balance: 7
            type: type
            network: network
            expires_at: 2000-01-23T04:56:07.000+00:00
            balance: 9
            subtype: subtype
            effective_date: 2000-01-23T04:56:07.000+00:00
            transaction_time: 2000-01-23T04:56:07.000+00:00
            currency: currency
            req_amount: 0
            risk_info: "{}"
            transaction_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            amount: 0
            external_data: "{}"
            auto_post_at: 2000-01-23T04:56:07.000+00:00
            idemkey: idemkey
            user_data: "{}"
            dc_sign: null
            force_post: true
            total_amount: 0
            operation: hold_cancel
            status: CLEARED
          reference_id: reference_id
          created: 2000-01-23T04:56:07.000+00:00
          idemkey: idemkey
          offset_account_id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          id: 4
          account_no: account_no
          updated: 2000-01-23T04:56:07.000+00:00
          uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          tenant: tenant
          offset_account_no: offset_account_no
        - account_id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          data:
            reason: reason
            was_partial: true
            avail_balance: 2
            memo: memo
            available_balance: 7
            type: type
            network: network
            expires_at: 2000-01-23T04:56:07.000+00:00
            balance: 9
            subtype: subtype
            effective_date: 2000-01-23T04:56:07.000+00:00
            transaction_time: 2000-01-23T04:56:07.000+00:00
            currency: currency
            req_amount: 0
            risk_info: "{}"
            transaction_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            amount: 0
            external_data: "{}"
            auto_post_at: 2000-01-23T04:56:07.000+00:00
            idemkey: idemkey
            user_data: "{}"
            dc_sign: null
            force_post: true
            total_amount: 0
            operation: hold_cancel
            status: CLEARED
          reference_id: reference_id
          created: 2000-01-23T04:56:07.000+00:00
          idemkey: idemkey
          offset_account_id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          id: 4
          account_no: account_no
          updated: 2000-01-23T04:56:07.000+00:00
          uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          tenant: tenant
          offset_account_no: offset_account_no
        user_data: "{}"
        dc_sign: null
        force_post: true
        total_amount: 0
        operation: hold_cancel
        status: CLEARED
      properties:
        amount:
          description: The amount of the hold.
          format: int64
          minimum: 0
          type: integer
        auto_post_at:
          description: The account "available balance" at the time this hold was created
          format: date-time
          type: string
        avail_balance:
          description: The account "available balance" at the time this hold was created
            (to be deprecated)
          format: int64
          type: integer
        available_balance:
          description: The account "available balance" at the time this hold was created
          format: int64
          type: integer
        balance:
          description: The account balance at the time this hold was created
          format: int64
          type: integer
        currency:
          description: ISO 4217 alphabetic currency code of the transfer amount
          type: string
        dc_sign:
          $ref: '#/components/schemas/dc_sign'
        effective_date:
          description: The effective date of the transaction once it gets posted
          format: date-time
          type: string
        expires_at:
          description: The date that at which this hold is no longer valid.
          format: date-time
          type: string
        external_data:
          description: an unstructured json blob representing additional transaction
            information supplied by the integrator.
          nullable: true
          type: object
        force_post:
          description: Whether or not the hold was forced (spending controls ignored)
          type: boolean
        history:
          description: "An array representing any previous states of the hold, if\
            \ it has been modified (For example, increasing or decreasing the hold\
            \ amount)."
          items:
            $ref: '#/components/schemas/pending_transaction_history'
          type: array
        idemkey:
          description: The idempotency key used when initially creating this hold.
          type: string
        memo:
          description: A short note to the recipient
          type: string
        network:
          description: The network this transaction is associated with
          type: string
        operation:
          enum:
          - hold_cancel
          - hold_decline
          - hold_decrease
          - hold_expire
          - hold_increase
          - hold_new
          - hold_post
          - hold_replace
          type: string
        reason:
          description: "If a hold has been declined or modified, this will include\
            \ the reason."
          type: string
        req_amount:
          description: "The requested amount, in the case of hold modifications."
          format: int64
          minimum: 0
          type: integer
        risk_info:
          description: Information received by the transaction risk/fraud service
            related to this transaction
          nullable: true
          type: object
        status:
          description: The status of the hold.
          enum:
          - CLEARED
          - DECLINED
          - EXPIRED
          - INTERNAL_ERROR
          - PARTCLEARED
          - PENDING
          - RELEASED
          - REPLACED
          type: string
        subtype:
          description: "The specific transaction type. For example, for `ach`, this\
            \ may be \"outgoing_debit\"."
          type: string
        total_amount:
          description: The total amount of the hold. This may be different than `amount`
            in the case where a hold increase or decrease was requested.
          format: int64
          minimum: 0
          type: integer
        transaction_id:
          description: "The uuid of the transaction that this pending transaction\
            \ originated from, if any. This is primary used when a transaction \"\
            posts\", but a subset of the amount reserved until a future settlement\
            \ date."
          format: uuid
          type: string
        transaction_time:
          description: The time that the transaction was created
          format: date-time
          type: string
        type:
          description: "The general type of transaction. For example, \"card\" or\
            \ \"ach\"."
          type: string
        user_data:
          description: An unstructured JSON blob representing additional transaction
            information specific to each payment rail.
          nullable: true
          type: object
        was_partial:
          description: Does this hold represent a partial debit (or credit)?
          type: boolean
      required:
      - amount
      - auto_post_at
      - avail_balance
      - available_balance
      - balance
      - currency
      - dc_sign
      - effective_date
      - expires_at
      - force_post
      - history
      - idemkey
      - memo
      - network
      - operation
      - reason
      - req_amount
      - status
      - subtype
      - total_amount
      - transaction_time
      - type
      - was_partial
      title: Pending transaction data
      type: object
    pending_transaction_history:
      example:
        account_id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
        data:
          reason: reason
          was_partial: true
          avail_balance: 2
          memo: memo
          available_balance: 7
          type: type
          network: network
          expires_at: 2000-01-23T04:56:07.000+00:00
          balance: 9
          subtype: subtype
          effective_date: 2000-01-23T04:56:07.000+00:00
          transaction_time: 2000-01-23T04:56:07.000+00:00
          currency: currency
          req_amount: 0
          risk_info: "{}"
          transaction_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          amount: 0
          external_data: "{}"
          auto_post_at: 2000-01-23T04:56:07.000+00:00
          idemkey: idemkey
          user_data: "{}"
          dc_sign: null
          force_post: true
          total_amount: 0
          operation: hold_cancel
          status: CLEARED
        reference_id: reference_id
        created: 2000-01-23T04:56:07.000+00:00
        idemkey: idemkey
        offset_account_id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
        id: 4
        account_no: account_no
        updated: 2000-01-23T04:56:07.000+00:00
        uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        tenant: tenant
        offset_account_no: offset_account_no
      properties:
        account_id:
          description: The account id associated with the hold
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          type: string
        account_no:
          description: The account number associated with the hold
          type: string
        created:
          description: The creation date of the hold
          format: date-time
          type: string
        data:
          $ref: '#/components/schemas/pending_transaction_history_data'
        id:
          format: int64
          type: integer
        idemkey:
          description: The idempotency key used when initially creating this transaction.
          type: string
        offset_account_id:
          description: The offset account id associated with the hold
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          type: string
        offset_account_no:
          description: The offset account number associated with the hold
          type: string
        reference_id:
          description: An external ID provided by the payment network to represent
            this transaction.
          nullable: true
          type: string
        tenant:
          description: "The tenant associated with this transaction, in the form \"\
            <bankid>_<partnerid>\""
          type: string
        updated:
          description: The date the hold was last update
          format: date-time
          type: string
        uuid:
          description: The unique identifier of the hold transaction.
          format: uuid
          type: string
      required:
      - account_id
      - account_no
      - created
      - id
      - idemkey
      - reference_id
      - tenant
      - updated
      - uuid
      title: A pending transaction history
      type: object
    pending_transaction_history_data:
      example:
        reason: reason
        was_partial: true
        avail_balance: 2
        memo: memo
        available_balance: 7
        type: type
        network: network
        expires_at: 2000-01-23T04:56:07.000+00:00
        balance: 9
        subtype: subtype
        effective_date: 2000-01-23T04:56:07.000+00:00
        transaction_time: 2000-01-23T04:56:07.000+00:00
        currency: currency
        req_amount: 0
        risk_info: "{}"
        transaction_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        amount: 0
        external_data: "{}"
        auto_post_at: 2000-01-23T04:56:07.000+00:00
        idemkey: idemkey
        user_data: "{}"
        dc_sign: null
        force_post: true
        total_amount: 0
        operation: hold_cancel
        status: CLEARED
      properties:
        amount:
          description: The amount of the hold.
          format: int64
          minimum: 0
          type: integer
        auto_post_at:
          description: The time the transaction will be automatically posted.
          format: date-time
          type: string
        avail_balance:
          description: The account "available balance" at the time this hold was created
            (to be deprecated)
          format: int64
          type: integer
        available_balance:
          description: The account "available balance" at the time this hold was created
          format: int64
          type: integer
        balance:
          description: The account balance at the time this hold was created
          format: int64
          type: integer
        currency:
          description: ISO 4217 alphabetic currency code of the transfer amount
          type: string
        dc_sign:
          $ref: '#/components/schemas/dc_sign'
        effective_date:
          description: The effective date of the transaction once it gets posted
          format: date-time
          type: string
        expires_at:
          description: The date that at which this hold is no longer valid.
          format: date-time
          type: string
        external_data:
          description: an unstructured json blob representing additional transaction
            information supplied by the integrator.
          nullable: true
          type: object
        force_post:
          description: Whether or not the hold was forced (spending controls ignored)
          type: boolean
        idemkey:
          description: The idempotency key used when initially creating this hold.
          type: string
        memo:
          description: A short note to the recipient
          type: string
        network:
          description: The network this transaction is associated with
          type: string
        operation:
          enum:
          - hold_cancel
          - hold_decline
          - hold_decrease
          - hold_expire
          - hold_increase
          - hold_new
          - hold_post
          - hold_replace
          type: string
        reason:
          description: "If a hold has been declined or modified, this will include\
            \ the reason."
          type: string
        req_amount:
          description: "The requested amount, in the case of hold modifications."
          format: int64
          minimum: 0
          type: integer
        risk_info:
          description: Information received by the transaction risk/fraud service
            related to this transaction
          nullable: true
          type: object
        status:
          description: The status of the hold.
          enum:
          - CLEARED
          - DECLINED
          - EXPIRED
          - INTERNAL_ERROR
          - PARTCLEARED
          - PENDING
          - RELEASED
          - REPLACED
          type: string
        subtype:
          description: "The specific transaction type. For example, for `ach`, this\
            \ may be \"outgoing_debit\"."
          type: string
        total_amount:
          description: The total amount of the hold. This may be different than `amount`
            in the case where a hold increase or decrease was requested.
          format: int64
          minimum: 0
          type: integer
        transaction_id:
          description: "The uuid of the transaction that this pending transaction\
            \ originated from, if any. This is primary used when a transaction \"\
            posts\", but a subset of the amount reserved until a future settlement\
            \ date."
          format: uuid
          type: string
        transaction_time:
          description: The time the transaction occurred.
          format: date-time
          type: string
        type:
          description: "The general type of transaction. For example, \"card\" or\
            \ \"ach\"."
          type: string
        user_data:
          description: An unstructured JSON blob representing additional transaction
            information specific to each payment rail.
          nullable: true
          type: object
        was_partial:
          description: Does this hold represent a partial debit (or credit)?
          type: boolean
      required:
      - amount
      - auto_post_at
      - avail_balance
      - available_balance
      - balance
      - currency
      - dc_sign
      - effective_date
      - expires_at
      - force_post
      - idemkey
      - memo
      - network
      - operation
      - reason
      - req_amount
      - status
      - subtype
      - total_amount
      - transaction_time
      - type
      - was_partial
      title: A pending transaction history data
      type: object
    pending_transactions:
      example:
        result:
        - account_id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          data:
            reason: reason
            was_partial: true
            avail_balance: 6
            memo: memo
            available_balance: 1
            type: type
            network: network
            expires_at: 2000-01-23T04:56:07.000+00:00
            balance: 5
            subtype: subtype
            effective_date: 2000-01-23T04:56:07.000+00:00
            transaction_time: 2000-01-23T04:56:07.000+00:00
            currency: currency
            req_amount: 0
            risk_info: "{}"
            transaction_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            amount: 0
            external_data: "{}"
            auto_post_at: 2000-01-23T04:56:07.000+00:00
            idemkey: idemkey
            history:
            - account_id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
              data:
                reason: reason
                was_partial: true
                avail_balance: 2
                memo: memo
                available_balance: 7
                type: type
                network: network
                expires_at: 2000-01-23T04:56:07.000+00:00
                balance: 9
                subtype: subtype
                effective_date: 2000-01-23T04:56:07.000+00:00
                transaction_time: 2000-01-23T04:56:07.000+00:00
                currency: currency
                req_amount: 0
                risk_info: "{}"
                transaction_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
                amount: 0
                external_data: "{}"
                auto_post_at: 2000-01-23T04:56:07.000+00:00
                idemkey: idemkey
                user_data: "{}"
                dc_sign: null
                force_post: true
                total_amount: 0
                operation: hold_cancel
                status: CLEARED
              reference_id: reference_id
              created: 2000-01-23T04:56:07.000+00:00
              idemkey: idemkey
              offset_account_id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
              id: 4
              account_no: account_no
              updated: 2000-01-23T04:56:07.000+00:00
              uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
              tenant: tenant
              offset_account_no: offset_account_no
            - account_id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
              data:
                reason: reason
                was_partial: true
                avail_balance: 2
                memo: memo
                available_balance: 7
                type: type
                network: network
                expires_at: 2000-01-23T04:56:07.000+00:00
                balance: 9
                subtype: subtype
                effective_date: 2000-01-23T04:56:07.000+00:00
                transaction_time: 2000-01-23T04:56:07.000+00:00
                currency: currency
                req_amount: 0
                risk_info: "{}"
                transaction_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
                amount: 0
                external_data: "{}"
                auto_post_at: 2000-01-23T04:56:07.000+00:00
                idemkey: idemkey
                user_data: "{}"
                dc_sign: null
                force_post: true
                total_amount: 0
                operation: hold_cancel
                status: CLEARED
              reference_id: reference_id
              created: 2000-01-23T04:56:07.000+00:00
              idemkey: idemkey
              offset_account_id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
              id: 4
              account_no: account_no
              updated: 2000-01-23T04:56:07.000+00:00
              uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
              tenant: tenant
              offset_account_no: offset_account_no
            user_data: "{}"
            dc_sign: null
            force_post: true
            total_amount: 0
            operation: hold_cancel
            status: CLEARED
          reference_id: reference_id
          created: 2000-01-23T04:56:07.000+00:00
          idemkey: idemkey
          offset_account_id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          id: 1
          account_no: account_no
          updated: 2000-01-23T04:56:07.000+00:00
          uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          tenant: tenant
          offset_account_no: offset_account_no
        - account_id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          data:
            reason: reason
            was_partial: true
            avail_balance: 6
            memo: memo
            available_balance: 1
            type: type
            network: network
            expires_at: 2000-01-23T04:56:07.000+00:00
            balance: 5
            subtype: subtype
            effective_date: 2000-01-23T04:56:07.000+00:00
            transaction_time: 2000-01-23T04:56:07.000+00:00
            currency: currency
            req_amount: 0
            risk_info: "{}"
            transaction_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            amount: 0
            external_data: "{}"
            auto_post_at: 2000-01-23T04:56:07.000+00:00
            idemkey: idemkey
            history:
            - account_id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
              data:
                reason: reason
                was_partial: true
                avail_balance: 2
                memo: memo
                available_balance: 7
                type: type
                network: network
                expires_at: 2000-01-23T04:56:07.000+00:00
                balance: 9
                subtype: subtype
                effective_date: 2000-01-23T04:56:07.000+00:00
                transaction_time: 2000-01-23T04:56:07.000+00:00
                currency: currency
                req_amount: 0
                risk_info: "{}"
                transaction_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
                amount: 0
                external_data: "{}"
                auto_post_at: 2000-01-23T04:56:07.000+00:00
                idemkey: idemkey
                user_data: "{}"
                dc_sign: null
                force_post: true
                total_amount: 0
                operation: hold_cancel
                status: CLEARED
              reference_id: reference_id
              created: 2000-01-23T04:56:07.000+00:00
              idemkey: idemkey
              offset_account_id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
              id: 4
              account_no: account_no
              updated: 2000-01-23T04:56:07.000+00:00
              uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
              tenant: tenant
              offset_account_no: offset_account_no
            - account_id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
              data:
                reason: reason
                was_partial: true
                avail_balance: 2
                memo: memo
                available_balance: 7
                type: type
                network: network
                expires_at: 2000-01-23T04:56:07.000+00:00
                balance: 9
                subtype: subtype
                effective_date: 2000-01-23T04:56:07.000+00:00
                transaction_time: 2000-01-23T04:56:07.000+00:00
                currency: currency
                req_amount: 0
                risk_info: "{}"
                transaction_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
                amount: 0
                external_data: "{}"
                auto_post_at: 2000-01-23T04:56:07.000+00:00
                idemkey: idemkey
                user_data: "{}"
                dc_sign: null
                force_post: true
                total_amount: 0
                operation: hold_cancel
                status: CLEARED
              reference_id: reference_id
              created: 2000-01-23T04:56:07.000+00:00
              idemkey: idemkey
              offset_account_id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
              id: 4
              account_no: account_no
              updated: 2000-01-23T04:56:07.000+00:00
              uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
              tenant: tenant
              offset_account_no: offset_account_no
            user_data: "{}"
            dc_sign: null
            force_post: true
            total_amount: 0
            operation: hold_cancel
            status: CLEARED
          reference_id: reference_id
          created: 2000-01-23T04:56:07.000+00:00
          idemkey: idemkey
          offset_account_id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          id: 1
          account_no: account_no
          updated: 2000-01-23T04:56:07.000+00:00
          uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          tenant: tenant
          offset_account_no: offset_account_no
        next_page_token: next_page_token
      properties:
        next_page_token:
          description: "If returned, use the next_page_token to query for the next\
            \ page of results. Not returned if there are no more rows."
          nullable: true
          type: string
        result:
          description: List of pending transactions
          items:
            $ref: '#/components/schemas/pending_transaction'
          type: array
      required:
      - next_page_token
      - result
      title: Pending Transactions Response
      type: object
    person:
      properties:
        creation_time:
          format: date-time
          type: string
        first_name:
          type: string
        id:
          format: uuid
          type: string
        last_name:
          type: string
        last_updated_time:
          format: date-time
          type: string
        middle_name:
          type: string
        relationship_type:
          type: string
      title: Person
      type: object
    person_business_owner_relationship:
      allOf:
      - required:
        - additional_data
        - from_person_id
        - to_business_id
      - $ref: '#/components/schemas/patch_person_business_owner_relationship'
      description: Denotes the relationship between specified person and business.
      type: object
    person_business_relationship:
      allOf:
      - required:
        - additional_data
        - from_person_id
        - to_business_id
      - $ref: '#/components/schemas/patch_person_business_relationship'
      description: Denotes the relationship between specified person and business.
      type: object
    person_id:
      description: |
        Unique ID for the person. Exactly one of `person_id` or `business_id` must be set.
      example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
      format: uuid
      type: string
    person_id1:
      description: |
        Unique ID for the person. Exactly one of `person_id` or `business_id` must be set.
      example: b01db9c7-78f2-4a99-8aca-1231d32f9b96
      format: uuid
      type: string
    person_list:
      allOf:
      - properties:
          persons:
            description: Array of persons.
            items:
              $ref: '#/components/schemas/response_person'
            type: array
        required:
        - persons
        type: object
      - $ref: '#/components/schemas/paginated_response'
    personal_id_base:
      properties:
        id:
          description: UUID for the personal identifier for subsequent changes and
            deletion
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          readOnly: true
          type: string
        id_type:
          $ref: '#/components/schemas/personal_id_type'
        identifier:
          description: The personal identifier. Format varies by personal identifier
            type.
          example: 123-45-6789
          type: string
        system_provided:
          description: "True if the identifier was provided by the system, e.g. via\
            \ SSN Prefill."
          readOnly: true
          type: boolean
      type: object
    personal_id_country_code_post:
      properties:
        country_code:
          description: |
            The ISO 3166 Alpha-2 country code for the country that issued the personal identifier.
            This is optional for personal identifier types that have an implicit country, e.g. SSN.
            This is required for other types, e.g. PASSPORT_NUMBER.
          format: US
          type: string
    personal_id_country_code_response:
      properties:
        country_code:
          description: |
            The ISO 3166 Alpha-2 country code for the country that issued the personal identifier.
          format: US
          type: string
    personal_id_customer_id:
      properties:
        customer_id:
          description: Id of the customer having this personal identifier
          example: 21943c51-e4ff-4e57-9558-08cab6b963fe
          format: uuid
          type: string
      type: object
    personal_id_type:
      description: |
        The type of the personal identifier. This cannot be changed once the personal identifier is created.
        One of the following:
        * `ITIN` - US Individual Tax Identification Number. Format is 987-65-4321. Country code will default to US.
        * `PASSPORT_NUMBER` - Passport Number. Format varies by country. Country code is required.
        * `SIN` - Canadian Social Insurance Number. Format is 123-456-789. Country code will default to CA.
        * `SSN` - US Social Security Number. Format is 123-45-6789. Country code will default to US.
      enum:
      - ITIN
      - PASSPORT_NUMBER
      - SIN
      - SSN
      example: SSN
      type: string
    physical_card:
      allOf:
      - $ref: '#/components/schemas/base_card'
      - properties:
          card_image_id:
            description: The ID of the custom card image used for this card
            example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
            format: uuid
            type: string
          shipping:
            $ref: '#/components/schemas/shipping'
        type: object
      description: Details pertaining to issuing a new physical card
      title: Physical Card
    physical_card_format:
      description: The format of a physical card product
      enum:
      - CHIP
      - CONTACT
      - CONTACTLESS
      - MAGNETIC_STRIPE
      - PHYSICAL_COMBO
      type: string
    physical_card_issuance_request:
      allOf:
      - required:
        - account_id
        - card_product_id
        - customer_id
        - form
        - type
        type: object
      - $ref: '#/components/schemas/physical_card'
      example:
        account_id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
        card_product_id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
        customer_id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
        form: PHYSICAL
        type: DEBIT
    physical_card_plus_status:
      allOf:
      - $ref: '#/components/schemas/physical_card'
      - $ref: '#/components/schemas/physical_card_response_status'
    physical_card_response:
      allOf:
      - $ref: '#/components/schemas/physical_card_plus_status'
      - properties:
          bin:
            description: The bin number
            type: string
          card_brand:
            $ref: '#/components/schemas/card_brand'
          physical_card_format:
            $ref: '#/components/schemas/physical_card_format'
        required:
        - account_id
        - card_brand
        - card_product_id
        - creation_time
        - customer_id
        - emboss_name
        - form
        - id
        - physical_card_format
        - shipping
        - type
        type: object
      title: Physical Card
    physical_card_response_status:
      allOf:
      - $ref: '#/components/schemas/card_status_object'
      - properties:
          card_fulfillment_status:
            $ref: '#/components/schemas/card_fulfillment_status'
          fulfillment_details:
            $ref: '#/components/schemas/fulfillment_details'
          tracking_number:
            deprecated: true
            description: |
              This contains all shipping details as provided by the card fulfillment provider, including the tracking number. This field is deprecated. Instead, please use the fulfillment_details object, which includes a field for just the tracking number.
            example: "Ship Date [2022-07-19], Shipping Method [UPS Next Day Air Saver];\
              \ Tracking Number [1ZW3268W1319325382]"
            readOnly: true
            type: string
        required:
        - card_fulfillment_status
        - card_status
        - status_reason
        type: object
    plaid_account_verification:
      allOf:
      - $ref: '#/components/schemas/base_account_verification'
      title: Information specific to Plaid verification
    post_license:
      properties:
        business_id:
          description: |
            Unique ID for the business. Exactly one of `business_id` or `person_id` must be set.
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        customer_id:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        license_number:
          description: The entity's license number
          example: "10321"
          minLength: 1
          type: string
        license_type:
          $ref: '#/components/schemas/license_type'
        tenant:
          description: |
            The id of the tenant containing the resource. This is relevant for Fintechs that have multiple workspaces.
          example: abcdef_ghijkl
          type: string
      type: object
    post_person:
      allOf:
      - $ref: '#/components/schemas/base_person1'
      - $ref: '#/components/schemas/post_personal_ids_array'
      - properties:
          note:
            description: Text to be added to a note when creating a person. A note
              is required when creating a person with a ban_status of SUSPENDED.
            type: string
      description: Details of a person
      required:
      - is_customer
      - status
      title: Person
      type: object
    post_personal_id:
      allOf:
      - $ref: '#/components/schemas/personal_id_base'
      - $ref: '#/components/schemas/personal_id_country_code_post'
      required:
      - id_type
      - identifier
      type: object
    post_personal_id_w_cust:
      allOf:
      - $ref: '#/components/schemas/personal_id_customer_id'
      - properties:
          tenant:
            $ref: '#/components/schemas/tenant_id'
      - $ref: '#/components/schemas/personal_id_base'
      - $ref: '#/components/schemas/personal_id_country_code_post'
      required:
      - customer_id
      - id_type
      - identifier
      type: object
    post_personal_ids_array:
      properties:
        personal_ids:
          description: |
            > 🚧 Beta > This is a Beta property. Feedback from the community is welcome. We may make breaking changes to this property.
            Array of personal identifiers
          items:
            $ref: '#/components/schemas/post_personal_id'
          type: array
      type: object
    posted_transaction:
      example:
        lead_mode: true
        data:
          force_post: true
          metadata: "{}"
          external_data: "{}"
          original_trx: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          hold_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          memo: memo
          parent_trx: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          risk_info: "{}"
          user_data: "{}"
          lines:
          - amount: 0
            is_primary: true
            created: 2000-01-23T04:56:07.000+00:00
            related_line: 5
            is_offset: true
            avail_balance: 6
            available_balance: 1
            account_no: account_no
            uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            network: network
            dc_sign: null
            account_id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
            balance: 5
            is_gl_acc: true
            meta: "{}"
            currency: currency
            updated: 2000-01-23T04:56:07.000+00:00
            seq: 2
            tenant: tenant
            is_fee: true
          - amount: 0
            is_primary: true
            created: 2000-01-23T04:56:07.000+00:00
            related_line: 5
            is_offset: true
            avail_balance: 6
            available_balance: 1
            account_no: account_no
            uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            network: network
            dc_sign: null
            account_id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
            balance: 5
            is_gl_acc: true
            meta: "{}"
            currency: currency
            updated: 2000-01-23T04:56:07.000+00:00
            seq: 2
            tenant: tenant
            is_fee: true
        reference_id: reference_id
        created: 2000-01-23T04:56:07.000+00:00
        idemkey: 7d943c51-e4ff-4e57-9558-08cab6b963c7
        type: type
        disputes:
        - created: 2000-01-23T04:56:07.000+00:00
          internal_case_reference: internal_case_reference
          external_case_reference: external_case_reference
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          updated: 2000-01-23T04:56:07.000+00:00
          status: ARBITRATION
        - created: 2000-01-23T04:56:07.000+00:00
          internal_case_reference: internal_case_reference
          external_case_reference: external_case_reference
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          updated: 2000-01-23T04:56:07.000+00:00
          status: ARBITRATION
        uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        subtype: subtype
        effective_date: 2000-01-23T04:56:07.000+00:00
        transaction_time: 2000-01-23T04:56:07.000+00:00
        info_only: true
        id: 7
        updated: 2000-01-23T04:56:07.000+00:00
        posted_date: 2000-01-23T04:56:07.000+00:00
        tenant: tenant
        status: status
      properties:
        created:
          description: The creation date of the transaction
          format: date-time
          type: string
        data:
          $ref: '#/components/schemas/posted_transaction_data'
        disputes:
          description: "The set of disputes related to this transaction. Since a dispute\
            \ can be for a partial amount of a transaction, a single transaction can\
            \ be involved in multiple disputes."
          items:
            $ref: '#/components/schemas/transaction_dispute'
          type: array
        effective_date:
          description: "The \"effective date\" of a transaction. This may be earlier\
            \ than posted_date in some cases (for example, a transaction that occurs\
            \ on a Saturday may not be posted until the following Monday, but would\
            \ have an effective date of Saturday)"
          format: date-time
          type: string
        id:
          format: int64
          type: integer
        idemkey:
          description: The idempotency key used when initially creating this transaction.
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          type: string
        info_only:
          description: Whether or not this transaction represents a purely informational
            operation or an actual money movement
          type: boolean
        lead_mode:
          description: Whether or not this transaction was created operating in "lead
            ledger" mode
          type: boolean
        posted_date:
          description: The date the transaction was posted. This is the date any money
            is considered to be added or removed from an account.
          format: date-time
          type: string
        reference_id:
          description: An external ID provided by the payment network to represent
            this transaction. This will always be null for internal transfers.
          nullable: true
          type: string
        status:
          type: string
        subtype:
          description: "The specific transaction type. For example, for `ach`, this\
            \ may be \"outgoing_debit\"."
          type: string
        tenant:
          description: "The tenant associated with this transaction, in the form \"\
            <bankid>_<partnerid>\""
          type: string
        transaction_time:
          description: The time the transaction occurred.
          format: date-time
          type: string
        type:
          description: "The general type of transaction. For example, \"card\" or\
            \ \"ach\"."
          type: string
        updated:
          description: The date the transaction was last updated
          format: date-time
          type: string
        uuid:
          description: The unique identifier of the transaction.
          format: uuid
          type: string
      required:
      - created
      - data
      - effective_date
      - id
      - idemkey
      - info_only
      - lead_mode
      - posted_date
      - reference_id
      - status
      - subtype
      - tenant
      - transaction_time
      - type
      - updated
      - uuid
      title: A posted transaction
      type: object
    posted_transaction_data:
      example:
        force_post: true
        metadata: "{}"
        external_data: "{}"
        original_trx: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        hold_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        memo: memo
        parent_trx: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        risk_info: "{}"
        user_data: "{}"
        lines:
        - amount: 0
          is_primary: true
          created: 2000-01-23T04:56:07.000+00:00
          related_line: 5
          is_offset: true
          avail_balance: 6
          available_balance: 1
          account_no: account_no
          uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          network: network
          dc_sign: null
          account_id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          balance: 5
          is_gl_acc: true
          meta: "{}"
          currency: currency
          updated: 2000-01-23T04:56:07.000+00:00
          seq: 2
          tenant: tenant
          is_fee: true
        - amount: 0
          is_primary: true
          created: 2000-01-23T04:56:07.000+00:00
          related_line: 5
          is_offset: true
          avail_balance: 6
          available_balance: 1
          account_no: account_no
          uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          network: network
          dc_sign: null
          account_id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          balance: 5
          is_gl_acc: true
          meta: "{}"
          currency: currency
          updated: 2000-01-23T04:56:07.000+00:00
          seq: 2
          tenant: tenant
          is_fee: true
      properties:
        external_data:
          description: an unstructured json blob representing additional transaction
            information supplied by the integrator.
          nullable: true
          type: object
        force_post:
          description: Whether or not the hold was forced (spending controls ignored)
          type: boolean
        hold_id:
          description: "The uuid of the hold (pending transaction) that this transaction\
            \ originated from, if any."
          format: uuid
          type: string
        lines:
          description: "The set of accounting entries associated with this transaction.\
            \ For example, a debit to a customer account will have a corresponding\
            \ credit in a general ledger account."
          items:
            $ref: '#/components/schemas/transaction_line1'
          type: array
        memo:
          description: A short note to the recipient
          type: string
        metadata:
          nullable: true
          type: object
        original_trx:
          description: The "original" transaction that this transaction is related
            to. This is only populated in the case of reversed transactions.
          format: uuid
          type: string
        parent_trx:
          description: The "parent" transaction that this transaction is related to.
            This is only populated in the case of scheduled transactions.
          format: uuid
          type: string
        risk_info:
          description: Information received by the transaction risk/fraud service
            related to this transaction
          nullable: true
          type: object
        user_data:
          description: An unstructured JSON blob representing additional transaction
            information specific to each payment rail.
          nullable: true
          type: object
      required:
      - force_post
      - lines
      - memo
      - metadata
      type: object
    posted_transactions:
      example:
        result:
        - lead_mode: true
          data:
            force_post: true
            metadata: "{}"
            external_data: "{}"
            original_trx: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            hold_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            memo: memo
            parent_trx: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            risk_info: "{}"
            user_data: "{}"
            lines:
            - amount: 0
              is_primary: true
              created: 2000-01-23T04:56:07.000+00:00
              related_line: 5
              is_offset: true
              avail_balance: 6
              available_balance: 1
              account_no: account_no
              uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
              network: network
              dc_sign: null
              account_id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
              balance: 5
              is_gl_acc: true
              meta: "{}"
              currency: currency
              updated: 2000-01-23T04:56:07.000+00:00
              seq: 2
              tenant: tenant
              is_fee: true
            - amount: 0
              is_primary: true
              created: 2000-01-23T04:56:07.000+00:00
              related_line: 5
              is_offset: true
              avail_balance: 6
              available_balance: 1
              account_no: account_no
              uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
              network: network
              dc_sign: null
              account_id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
              balance: 5
              is_gl_acc: true
              meta: "{}"
              currency: currency
              updated: 2000-01-23T04:56:07.000+00:00
              seq: 2
              tenant: tenant
              is_fee: true
          reference_id: reference_id
          created: 2000-01-23T04:56:07.000+00:00
          idemkey: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          type: type
          disputes:
          - created: 2000-01-23T04:56:07.000+00:00
            internal_case_reference: internal_case_reference
            external_case_reference: external_case_reference
            id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            updated: 2000-01-23T04:56:07.000+00:00
            status: ARBITRATION
          - created: 2000-01-23T04:56:07.000+00:00
            internal_case_reference: internal_case_reference
            external_case_reference: external_case_reference
            id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            updated: 2000-01-23T04:56:07.000+00:00
            status: ARBITRATION
          uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          subtype: subtype
          effective_date: 2000-01-23T04:56:07.000+00:00
          transaction_time: 2000-01-23T04:56:07.000+00:00
          info_only: true
          id: 7
          updated: 2000-01-23T04:56:07.000+00:00
          posted_date: 2000-01-23T04:56:07.000+00:00
          tenant: tenant
          status: status
        - lead_mode: true
          data:
            force_post: true
            metadata: "{}"
            external_data: "{}"
            original_trx: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            hold_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            memo: memo
            parent_trx: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            risk_info: "{}"
            user_data: "{}"
            lines:
            - amount: 0
              is_primary: true
              created: 2000-01-23T04:56:07.000+00:00
              related_line: 5
              is_offset: true
              avail_balance: 6
              available_balance: 1
              account_no: account_no
              uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
              network: network
              dc_sign: null
              account_id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
              balance: 5
              is_gl_acc: true
              meta: "{}"
              currency: currency
              updated: 2000-01-23T04:56:07.000+00:00
              seq: 2
              tenant: tenant
              is_fee: true
            - amount: 0
              is_primary: true
              created: 2000-01-23T04:56:07.000+00:00
              related_line: 5
              is_offset: true
              avail_balance: 6
              available_balance: 1
              account_no: account_no
              uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
              network: network
              dc_sign: null
              account_id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
              balance: 5
              is_gl_acc: true
              meta: "{}"
              currency: currency
              updated: 2000-01-23T04:56:07.000+00:00
              seq: 2
              tenant: tenant
              is_fee: true
          reference_id: reference_id
          created: 2000-01-23T04:56:07.000+00:00
          idemkey: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          type: type
          disputes:
          - created: 2000-01-23T04:56:07.000+00:00
            internal_case_reference: internal_case_reference
            external_case_reference: external_case_reference
            id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            updated: 2000-01-23T04:56:07.000+00:00
            status: ARBITRATION
          - created: 2000-01-23T04:56:07.000+00:00
            internal_case_reference: internal_case_reference
            external_case_reference: external_case_reference
            id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            updated: 2000-01-23T04:56:07.000+00:00
            status: ARBITRATION
          uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          subtype: subtype
          effective_date: 2000-01-23T04:56:07.000+00:00
          transaction_time: 2000-01-23T04:56:07.000+00:00
          info_only: true
          id: 7
          updated: 2000-01-23T04:56:07.000+00:00
          posted_date: 2000-01-23T04:56:07.000+00:00
          tenant: tenant
          status: status
        next_page_token: next_page_token
      properties:
        next_page_token:
          description: "If returned, use the next_page_token to query for the next\
            \ page of results. Not returned if there are no more rows."
          nullable: true
          type: string
        result:
          description: List of posted transactions
          items:
            $ref: '#/components/schemas/posted_transaction'
          type: array
      required:
      - next_page_token
      - result
      title: Posted Transactions Response
      type: object
    prospect:
      allOf:
      - $ref: '#/components/schemas/base_person'
      - properties:
          dob:
            description: Customer's date of birth in RFC 3339 full-date format (YYYY-MM-DD)
            example: 2000-01-01
            format: date
            type: string
          first_name:
            description: Customer's first name
            example: Jane
            type: string
          last_name:
            description: Customer's last name
            example: Smith
            type: string
          status:
            description: Customer's status
            enum:
            - ACTIVE
            - DECEASED
            - DENIED
            - DORMANT
            - ESCHEAT
            - FROZEN
            - INACTIVE
            - PROSPECT
            - SANCTION
            type: string
        required:
        - status
      description: A prospect has a unique identifier. It can be upgrade to a customer
        with required information
      title: Customer
      type: object
    provider_type:
      description: Name of the organization that provided this data.
      enum:
      - IDOLOGY
      - SOCURE
      example: SOCURE
      type: string
    provisioning_app_version:
      description: Version of the application making the provisioning request.
      maxLength: 50
      type: string
    provisioning_controls:
      properties:
        in_app_provisioning:
          $ref: '#/components/schemas/in_app_provisioning'
        manual_entry:
          $ref: '#/components/schemas/manual_entry'
        wallet_provider_card_on_file:
          $ref: '#/components/schemas/wallet_provider_card_on_file'
      type: object
    push_tokenize_request_data:
      example:
        token_service_provider: token_service_provider
        opaque_payment_card: opaque_payment_card
        user_address:
          country_code: US
          city: New York
          address_line_1: 100 Main St.
          address_line_2: Suite 99
          state: NY
          postal_code: "49633"
        display_name: display_name
        last_digits: last_digits
        network: mastercard
      properties:
        display_name:
          type: string
        last_digits:
          type: string
        network:
          example: mastercard
          type: string
        opaque_payment_card:
          type: string
        token_service_provider:
          type: string
        user_address:
          $ref: '#/components/schemas/address1'
      type: object
    rate_details:
      properties:
        accrual_period:
          description: |
            How often interest gets calculated against the balance. Note: although two options are displayed here, only DAILY is supported at the moment.
          enum:
          - DAILY
          - MONTHLY
          type: string
        rate:
          description: Rate in basis points. E.g. 5 represents 0.05%
          format: int32
          type: integer
        valid_from:
          description: Rate effective start date. Inclusive.
          format: date
          type: string
        valid_to:
          description: Rate effective end date. Exclusive.
          format: date
          type: string
      required:
      - accrual_period
      - rate
      - valid_from
      type: object
    rates:
      description: |
        A list of interest rate. Date intervals between valid_from and valid_to expect to have no overlap.
      items:
        $ref: '#/components/schemas/rate_details'
      type: array
    raw_response:
      deprecated: true
      example:
        provider: SOCURE
        raw_data: "{}"
      properties:
        provider:
          $ref: '#/components/schemas/provider_type'
        raw_data:
          description: "Raw data from an external provider, as a JSON string."
          example: "{}"
          type: string
      title: Raw response from providers.
      type: object
    recipient_name:
      description: The name of the recipient to whom the card will be shipped
      properties:
        first_name:
          example: Jane
          type: string
        last_name:
          example: Smith
          type: string
        middle_name:
          example: Anne
          type: string
      required:
      - first_name
      - last_name
      type: object
    related_resource_field:
      description: |
        🚧 Beta
        This is a Beta property. Feedback from the community is welcome. We may make breaking changes to this property.
        Path to the field in the related resource that the note pertains to. This uses a dot notation like the following:
        Examples:
        * a field in the resource: first_name
        * a sub-field: legal_address.city
        * nested arrays: application_details.sections[1].pages[2].items[0].answer
      example: /legal_address/city
      type: string
    related_resource_id:
      description: |
        The id of the resource that is associated with the note.
        This is typically a UUID.
        For TENANT it is a string tenant ID.
      example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
      type: string
    related_resource_type:
      description: The type of the resource related to the document
      enum:
      - ACCOUNT
      - BUSINESS
      - CUSTOMER
      type: string
    related_resource_type1:
      description: |
        Type of the resource associated with the note.
      enum:
      - ACCOUNT
      - APPLICATION
      - BUSINESS
      - CUSTOMER
      - SHADOW_TRANSACTION
      - SNAPSHOT
      - TENANT
      - TRANSACTION
      - USER
      example: CUSTOMER
      type: string
    relationship:
      description: "The relationship of the account and the customer/business. Either\
        \ customer_id OR business_id must be specified, but not both."
      properties:
        business_id:
          description: Business associated with the current account. One of business_id
            or customer_id must be specified.
          format: uuid
          type: string
        customer_id:
          description: Personal customer associated with the current account. One
            of customer_id or business_id must be specified.
          format: uuid
          type: string
        id:
          description: ID of account relationship
          format: uuid
          readOnly: true
          type: string
        person_id:
          deprecated: true
          description: Person associated with the current account. This attribute
            is deprecated and will be removed in a future API version. Use customer_id
            instead.
          format: uuid
          type: string
        relationship_type:
          $ref: '#/components/schemas/account_relationship_type'
      required:
      - relationship_type
      title: Account Relationship
      type: object
    relationship1:
      properties:
        id:
          description: ID of related entity
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        relationship_role:
          $ref: '#/components/schemas/relationship_role'
      required:
      - id
      - relationship_role
      title: Relationship
      type: object
    relationship_in:
      discriminator:
        mapping:
          BENEFICIAL_OWNER_OF: '#/components/schemas/person_business_owner_relationship'
          MANAGING_PERSON_OF: '#/components/schemas/person_business_relationship'
          OWNER_OF: '#/components/schemas/business_business_owner_relationship'
          PAYER_PAYEE: '#/components/schemas/payer_payee_relationship'
        propertyName: relationship_type
      oneOf:
      - $ref: '#/components/schemas/business_business_owner_relationship'
      - $ref: '#/components/schemas/person_business_relationship'
      - $ref: '#/components/schemas/person_business_owner_relationship'
      - $ref: '#/components/schemas/payer_payee_relationship'
      type: object
    relationship_list:
      allOf:
      - properties:
          relationships:
            description: Array of relationships
            items:
              $ref: '#/components/schemas/relationship_response'
            type: array
        required:
        - relationships
        type: object
      - $ref: '#/components/schemas/paginated_response'
    relationship_response:
      allOf:
      - properties:
          account_id:
            description: Account ID
            format: uuid
            type: string
      - $ref: '#/components/schemas/relationship'
      description: The relationship of the account and the customer/business.
      title: Account Relationship Response
      type: object
    relationship_role:
      description: "CUSTODIAN - Related party is the custodian e.g. the parent, BENEFICIARY\
        \ - Related party is the beneficiary e.g. the dependent, PARTNER - Related\
        \ party is the partner"
      enum:
      - BENEFICIARY
      - CUSTODIAN
      - PARTNER
      example: CUSTODIAN
      title: Relationship Role
      type: string
    relationship_types:
      description: |
        The relationship type. One of the following:
        * `BENEFICIAL_OWNER_OF` – a person who directly or indirectly owns a portion of the business.
        * `MANAGING_PERSON_OF` – a person who is an officer, director, or other notable person of an organization.
        * `OWNER_OF` – a business with ownership of another business.
        * `PAYER_PAYEE` - a person or business with a payer payee relationship with another person or business
      enum:
      - BENEFICIAL_OWNER_OF
      - MANAGING_PERSON_OF
      - OWNER_OF
      - PAYER_PAYEE
      example: BENEFICIAL_OWNER_OF
      type: string
    relationships_list:
      allOf:
      - properties:
          relationships:
            description: Array of business/person relationships.
            items:
              $ref: '#/components/schemas/relationship_in'
            type: array
        required:
        - relationships
        type: object
      - $ref: '#/components/schemas/paginated_response'
    response_history_item:
      description: Response history object of the webhook request
      example:
        sent_time: 2000-01-23T04:56:07.000+00:00
        code: 0
        response_body: response_body
        response_time: 2000-01-23T04:56:07.000+00:00
      properties:
        code:
          description: Response code from the request
          type: integer
        response_body:
          description: Response body from the request(Length more than 1024 will be
            trimmed)
          type: string
        response_time:
          description: Timestamp that the response is received
          format: date-time
          type: string
        sent_time:
          description: Timestamp that the request is sent
          format: date-time
          type: string
      title: Response history
      type: object
    response_license:
      example:
        creation_time: 2010-05-06T12:23:34.321Z
        license_issuance_date: 2023-01-01T00:00:00.000+00:00
        license_type: MRB
        licensee_address: "1064 elm street, New York"
        licensing_authority: Alcohol & Marijuana Control Office
        license_number: "10321"
        license_type_description: Limited Marijuana Cultivation Facility
        license_classification: RECREATIONAL_CANNABIS
        last_updated_time: 2010-05-06T12:23:34.321Z
        id: 7df5c505-b47c-490d-855f-c1b3cd99327f
        customer_id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
        licensee_name: Apex Corp
        business_id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
        last_verified_time: 2023-05-06T12:23:34.321Z
        license_expiration_date: 2023-01-01T00:00:00.000+00:00
        tenant: abcdef_ghijkl
        status: ACCEPTED
      properties:
        business_id:
          description: |
            Unique ID for the business. Exactly one of `business_id` or `person_id` must be set.
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        creation_time:
          description: The date and time the license resource  was created.
          example: 2010-05-06T12:23:34.321Z
          format: date-time
          type: string
        customer_id:
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        id:
          description: License record unique id
          example: 7df5c505-b47c-490d-855f-c1b3cd99327f
          format: uuid
          type: string
        last_updated_time:
          description: The date and time the license resource was last updated.
          example: 2010-05-06T12:23:34.321Z
          format: date-time
          type: string
        last_verified_time:
          description: Timestamp of the last time the license was verified
          example: 2023-05-06T12:23:34.321Z
          format: date-time
          type: string
        license_classification:
          description: The classification of the license
          enum:
          - MEDICAL_AND_RECREATIONAL_CANNABIS
          - MEDICAL_CANNABIS
          - RECREATIONAL_CANNABIS
          example: RECREATIONAL_CANNABIS
          type: string
        license_expiration_date:
          description: The date on which the license will expire
          example: 2023-01-01
          format: date
          type: string
        license_issuance_date:
          description: The date on which the license was issued
          example: 2023-01-01
          format: date
          type: string
        license_number:
          description: The entity's license number
          example: "10321"
          minLength: 1
          type: string
        license_type:
          $ref: '#/components/schemas/license_type'
        license_type_description:
          description: Free-form text describing the type of the license
          example: Limited Marijuana Cultivation Facility
          type: string
        licensee_address:
          description: The address of the entity that holds the license as reported
            by the verifying vendor
          example: "1064 elm street, New York"
          type: string
        licensee_name:
          description: The name of the entity that holds the license that's reported
            by the verifying vendor
          example: Apex Corp
          type: string
        licensing_authority:
          description: The name of the licensing body that granted the license
          example: Alcohol & Marijuana Control Office
          type: string
        status:
          description: The status of the license
          enum:
          - ACCEPTED
          - REJECTED
          - REVIEW
          - UNVERIFIED
          example: ACCEPTED
          type: string
        tenant:
          description: |
            The id of the tenant containing the resource. This is relevant for Fintechs that have multiple workspaces.
          example: abcdef_ghijkl
          type: string
      required:
      - creation_time
      - id
      - last_updated_time
      - license_number
      - license_type
      - status
      - tenant
      type: object
    response_person:
      allOf:
      - $ref: '#/components/schemas/base_person1'
      - $ref: '#/components/schemas/response_personal_ids_array'
      description: Details of a person
      required:
      - ban_status
      - creation_time
      - id
      - is_customer
      - last_updated_time
      - status
      - tenant
      - verification_status
      type: object
    response_personal_id:
      allOf:
      - $ref: '#/components/schemas/personal_id_country_code_response'
      - $ref: '#/components/schemas/personal_id_base'
      required:
      - country_code
      - id
      - id_type
      - identifier
      - system_provided
      type: object
    response_personal_id_w_cust:
      allOf:
      - $ref: '#/components/schemas/personal_id_customer_id'
      - $ref: '#/components/schemas/personal_id_country_code_response'
      - properties:
          tenant:
            $ref: '#/components/schemas/tenant_id'
      - $ref: '#/components/schemas/personal_id_base'
      required:
      - country_code
      - customer_id
      - id
      - id_type
      - identifier
      - system_provided
      - tenant
      type: object
    response_personal_ids_array:
      properties:
        personal_ids:
          description: |
            > 🚧 Beta > This is a Beta property. Feedback from the community is welcome. We may make breaking changes to this property.
            Array of personal identifiers
          items:
            $ref: '#/components/schemas/response_personal_id'
          type: array
      type: object
    return_data:
      description: Data associated with a returned wire
      example:
        reason: reason
        original_transaction_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        previous_message_id: previous_message_id
        original_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        original_id:
          description: Wire UUID of the original wire that was returned
          format: uuid
          type: string
          x-go-name: OriginalID
        original_transaction_id:
          description: Transaction UUID of the original wire that was returned
          format: uuid
          type: string
          x-go-name: OriginalTransactionID
        previous_message_id:
          description: Wire reference ID of the original wire that was returned
          type: string
          x-go-name: PreviousMessageID
        reason:
          description: The cause of the return
          type: string
          x-go-name: Reason
      required:
      - previous_message_id
      title: Return Data
      type: object
    reversal_model:
      example:
        amount: 80
        find_original_window_days: 6
        is_advice: false
        network_fees:
        - amount: 123
          credit_debit: C
          type: ISSUER_FEE
        - amount: 123
          credit_debit: C
          type: ISSUER_FEE
        original_transaction_id: original_transaction_id
      properties:
        amount:
          description: The amount of the transaction in the smallest whole denomination
            of the applicable currency (eg. For USD use cents)
          type: integer
        find_original_window_days:
          format: int32
          type: integer
        is_advice:
          default: false
          type: boolean
        network_fees:
          items:
            $ref: '#/components/schemas/network_fee_model'
          type: array
        original_transaction_id:
          format: uuid
          type: string
      required:
      - amount
      - original_transaction_id
      type: object
    risk_data:
      nullable: true
      properties:
        client_ip:
          description: Client IP
          type: string
      type: object
    risk_info:
      description: Information received by the transaction risk/fraud service related
        to this transaction
      nullable: true
      type: object
    risk_rating:
      description: Represents a customer's risk profile
      example:
        risk_level: high
        risk_score: 0.8008282
        risk_review: 2000-01-23T04:56:07.000+00:00
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        configuration_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        next_review: 2000-01-23T04:56:07.000+00:00
      properties:
        configuration_id:
          description: The risk configuration id used in risk score calculation
          format: uuid
          readOnly: true
          type: string
        id:
          description: Risk rating ID
          format: uuid
          readOnly: true
          type: string
        next_review:
          description: The next review date where customer risk will be calculated
          format: date-time
          type: string
        risk_level:
          description: A textual representation of the customer risk score
          enum:
          - high
          - low
          - medium
          type: string
        risk_review:
          description: The date the customer risk rating was calculated
          format: date-time
          readOnly: true
          type: string
        risk_score:
          description: The cumulative score of all risk rating fields
          format: float
          type: number
      title: Customer Risk Rating
      type: object
    risk_rating_list:
      allOf:
      - properties:
          risk_ratings:
            description: Array of customer risk ratings
            items:
              $ref: '#/components/schemas/risk_rating'
            type: array
        required:
        - risk_ratings
        type: object
      - $ref: '#/components/schemas/paginated_response'
    savings_summary:
      description: A summary of the accrued interest for the saving account in the
        current period
      properties:
        apy:
          description: |
            The annual percentage yield (APY) for this account for this statement period, rounded to two decimal points. For example, an APY of 5.5% will display as 5.50.
          example: 5.5
          format: float
          type: number
        interest_earned:
          description: |
            The total interest earned by the depository account for this statement period in ISO 4217 minor currency units. For example, $1.50 USD of interest will be displayed as 150.
          example: 150
          format: int64
          type: integer
        interest_earned_previous_month:
          description: |
            The total interest earned by the depository account in the previous statement period in ISO 4217 minor currency units. For example, $1.50 USD of interest will be displayed as 150.
          example: 150
          format: int64
          type: integer
        interest_earned_previous_year:
          description: |
            The total interest earned by the depository account in the previous year in ISO 4217 minor currency units. For example, $100 USD of interest will be displayed as 10000.
          example: 10000
          format: int64
          type: integer
        interest_earned_ytd:
          description: |
            The total interest earned by the depository account for this year to date in ISO 4217 minor currency units. For example, $100 USD of interest will be displayed as 10000.
          example: 10000
          format: int64
          type: integer
      title: Saving Summary
      type: object
    schedule_config:
      description: Payment schedule recurrence configuration
      example:
        end_date: 2000-01-23
        count: 1
        interval: 221
        frequency: DAILY
        start_date: 2000-01-23
      properties:
        count:
          description: Number of times to recur. Exactly one of end_date or count
            must be provided
          format: int32
          minimum: 1
          type: integer
        end_date:
          description: End date of the schedule (exclusive). Exactly one of end_date
            or count must be provided
          format: date
          type: string
        frequency:
          enum:
          - DAILY
          - MONTHLY
          - WEEKLY
          type: string
        interval:
          description: "Interval between recurrences, e.g. interval = 2 with frequency\
            \ = WEEKLY means every other week."
          maximum: 366
          minimum: 1
          type: integer
        start_date:
          description: Start date of the schedule (inclusive)
          format: date
          type: string
      required:
      - frequency
      - interval
      - start_date
      type: object
    schemas-bypassable_errors:
      enum:
      - ACCOUNT_OWNER_WATCHLIST
      - IMPROPER_ACCOUNT_CUSTOMER_RELATIONSHIP
      - IMPROPER_ACCOUNT_STATUS
      - IMPROPER_CUSTOMER_STATUS
      - IMPROPER_CUSTOMER_VERIFICATION_STATUS
      - IMPROPER_PARTNER_LIFECYCLE_STATUS
      - IMPROPER_PARTNER_VERIFICATION_STATUS
      - SPEND_CONTROL_VIOLATION
      - SUSPECTED_FRAUD
      type: string
    security:
      example:
        linked_account_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        linked_account_id:
          description: |
            ID of linked backing account for use as a security, e.g. for use in a Smart Charge Card
            offering. Must be of type CHECKING or SAVING.
          format: uuid
          type: string
      required:
      - linked_account_id
      type: object
    shipping:
      description: Details about the shipping method. If supplied this will override
        the default shipping address of the customer or account.
      properties:
        address:
          allOf:
          - $ref: '#/components/schemas/address1'
          description: The address to which the card will be shipped - Defaults to
            account shipping address if none supplied
        care_of_line:
          description: The name of the person to send in care of
          type: string
        is_expedited_fulfillment:
          default: false
          description: Is the shipment expedited
          example: true
          type: boolean
        method:
          default: LOCAL_MAIL
          description: "The shipping method. \n* `INTERNATIONAL_GROUND` is only available\
            \ for addresses in Canada and Mexico.\n"
          enum:
          - INTERNATIONAL
          - INTERNATIONAL_GROUND
          - INTERNATIONAL_PRIORITY
          - LOCAL_MAIL
          - LOCAL_PRIORITY
          - OVERNIGHT
          - TWO_DAY
          example: LOCAL_MAIL
          type: string
        phone_number:
          description: The phone number of the recipient
          example: +14374570680
          pattern: "^\\+[1-9]\\d{1,14}$"
          type: string
        recipient_name:
          $ref: '#/components/schemas/recipient_name'
      type: object
    shipping_address:
      allOf:
      - $ref: '#/components/schemas/address'
      - description: Shipping address
    simulate_card_fulfillment:
      example:
        card_fulfillment_status: null
      properties:
        card_fulfillment_status:
          $ref: '#/components/schemas/card_fulfillment_status'
      required:
      - card_fulfillment_status
      type: object
    simulation_response_model:
      type: object
    single_use_token_request:
      properties:
        account_id:
          description: The ID of the account to which the token will be linked
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        customer_id:
          description: The ID of the customer to whom the token will be issued
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
      required:
      - account_id
      - customer_id
      type: object
    single_use_token_response:
      example:
        customer_account_mapping_id: user_token
        expires: 2000-01-23T04:56:07.000+00:00
        token: token
      properties:
        customer_account_mapping_id:
          type: string
        expires:
          description: yyyy-MM-ddTHH:mm:ssZ
          format: date-time
          type: string
        token:
          type: string
      required:
      - expires
      type: object
    spend_control:
      properties:
        action_case:
          description: "If set, create a case for transactions that do not conform\
            \ to the spend control"
          type: boolean
        action_decline:
          description: "If set, decline transactions that do not conform to the spend\
            \ control"
          type: boolean
        amount_limit:
          description: Monetary limit for the spend control in the smallest currency
            unit (eg cents)
          format: int64
          minimum: 0
          type: integer
        creation_time:
          description: The timestamp representing when the spend control was created
          example: 2010-05-06T12:23:34.321Z
          format: date-time
          readOnly: true
          type: string
        direction:
          $ref: '#/components/schemas/spend_control_direction'
        id:
          description: Spend Control ID
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          readOnly: true
          type: string
        is_active:
          description: Indicates if spend control is active
          example: true
          type: boolean
        last_modified_time:
          description: The timestamp representing when the spend control was last
            modified
          example: 2010-05-06T12:23:34.321Z
          format: date-time
          readOnly: true
          type: string
        merchant_category_codes:
          description: merchant category codes for spend control
          items:
            description: specify a specific MCC or a range of MCCs using a dash (-)
            example: 5600–5699
            pattern: "^\\d{4}(-\\d{4})?$"
            type: string
          maxItems: 10
          type: array
        name:
          description: Name assigned to spend control
          type: string
        payment_sub_types:
          description: "A list of payment sub-types to which a spend control will\
            \ apply, if set. If not set or the array is empty, then the spend control\
            \ will apply to all sub-types."
          items:
            $ref: '#/components/schemas/payment_sub_type'
          type: array
        payment_types:
          description: "A list of payment types to which a spend control will apply,\
            \ if set. If not set or the array is empty, then the spend control will\
            \ apply to all types of payments."
          items:
            $ref: '#/components/schemas/payment_type'
          type: array
        time_range:
          $ref: '#/components/schemas/spend_control_time_range'
      required:
      - action_case
      - action_decline
      - amount_limit
      - is_active
      - name
      - time_range
      title: Spend Control
      type: object
    spend_control_direction:
      description: |
        The direction of funds flow to which a spend control applies. To limit the rate of funds flowing out of an
        account, use DEBIT. To limit the rate of funds flowing in to an account, use CREDIT.
        If this is not set, the spend control applies to debits (ie spending) only.
      enum:
      - CREDITS
      - DEBITS
      type: string
    spend_control_id:
      description: The unique identifier of a spending control
      example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
      format: uuid
      type: string
    spend_control_ids:
      description: List of spend control IDs to control spending for the account
      items:
        example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
        format: uuid
        type: string
      maxItems: 10
      type: array
    spend_control_response:
      allOf:
      - properties:
          number_of_related_accounts:
            description: A count of how many accounts are using this spend control
            minimum: 0
            type: integer
        required:
        - number_of_related_accounts
        type: object
      - $ref: '#/components/schemas/spend_control'
      required:
      - action_case
      - action_decline
      - amount_limit
      - creation_time
      - id
      - is_active
      - last_modified_time
      - name
      - number_of_related_accounts
      - time_range
    spend_control_response_list:
      allOf:
      - properties:
          spend_controls:
            description: Array of Spend Controls
            items:
              $ref: '#/components/schemas/spend_control_response'
            type: array
        required:
        - spend_controls
        type: object
      - $ref: '#/components/schemas/paginated_response'
    spend_control_rolling_window_days:
      allOf:
      - $ref: '#/components/schemas/spend_control_time_range_type'
      - properties:
          days:
            description: The number of days to define a rolling window for a spend
              control
            maximum: 31
            type: integer
        required:
        - days
        - time_range_type
        type: object
    spend_control_single_transaction:
      allOf:
      - $ref: '#/components/schemas/spend_control_time_range_type'
      required:
      - time_range_type
    spend_control_time_range:
      description: The time range to which the spend control applies
      discriminator:
        mapping:
          ROLLING_WINDOW_DAYS: '#/components/schemas/spend_control_rolling_window_days'
          SINGLE_TRANSACTION: '#/components/schemas/spend_control_single_transaction'
        propertyName: time_range_type
      oneOf:
      - $ref: '#/components/schemas/spend_control_single_transaction'
      - $ref: '#/components/schemas/spend_control_rolling_window_days'
      type: object
    spend_control_time_range_type:
      properties:
        time_range_type:
          enum:
          - ROLLING_WINDOW_DAYS
          - SINGLE_TRANSACTION
          type: string
      required:
      - time_range_type
      type: object
    spend_control_update_request:
      additionalProperties: false
      properties:
        action_case:
          description: "If set, create a case for transactions that do not conform\
            \ to the spend control"
          type: boolean
        action_decline:
          description: "If set, decline transactions that do not conform to the spend\
            \ control"
          type: boolean
        amount_limit:
          description: Monetary limit for the spend control in the smallest currency
            unit (eg cents)
          format: int64
          minimum: 0
          type: integer
        direction:
          $ref: '#/components/schemas/spend_control_direction'
        is_active:
          description: Indicates if spend control is active
          example: true
          type: boolean
        merchant_category_codes:
          description: merchant category codes for spend control
          items:
            description: specify a specific MCC or a range of MCCs using a dash (-)
            example: 5600–5699
            pattern: "^\\d{4}(-\\d{4})?$"
            type: string
          maxItems: 10
          type: array
        name:
          description: Name assigned to spend control
          type: string
        payment_sub_types:
          description: "A list of payment sub-types to which a spend control will\
            \ apply, if set. If not set or the array is empty, then the spend control\
            \ will apply to all sub-types."
          items:
            $ref: '#/components/schemas/payment_sub_type'
          type: array
        payment_types:
          description: "A list of payment types to which a spend control will apply,\
            \ if set. If not set or the array is empty, then the spend control will\
            \ apply to all types of payments."
          items:
            $ref: '#/components/schemas/payment_type'
          type: array
        time_range:
          $ref: '#/components/schemas/spend_control_time_range'
      type: object
    spending_limit_with_time:
      description: Limit over a specific time period.
      example:
        amount: 0
        transactions: 0
      properties:
        amount:
          description: Maximum amount allowed within the time range. Unit in cents.
          format: int64
          minimum: 0
          type: integer
        transactions:
          description: Maximum number of transactions allowed within the time range
          format: int64
          minimum: 0
          type: integer
      type: object
    spending_limits:
      description: Account spending limits
      example:
        week:
          amount: 0
          transactions: 0
        month:
          amount: 0
          transactions: 0
        lifetime:
          amount: 0
          transactions: 0
        description: description
        day:
          amount: 0
          transactions: 0
        transaction:
          amount: 0
      properties:
        day:
          $ref: '#/components/schemas/spending_limit_with_time'
        description:
          description: User provided description on the spending limits
          type: string
        lifetime:
          $ref: '#/components/schemas/spending_limit_with_time'
        month:
          $ref: '#/components/schemas/spending_limit_with_time'
        transaction:
          $ref: '#/components/schemas/spending_limits_transaction'
        week:
          $ref: '#/components/schemas/spending_limit_with_time'
      type: object
    ssn_source:
      description: |
        Describes the collection method for the customer's SSN:
        * `MANUAL` – the full 9 digits of the customer's SSN was collected.
        * `PREFILL` – the customer's SSN was collected using SSN Prefill.
      enum:
      - MANUAL
      - PREFILL
      readOnly: true
      type: string
    statement:
      allOf:
      - properties:
          savings_summary:
            $ref: '#/components/schemas/savings_summary'
        type: object
      - $ref: '#/components/schemas/base_statement'
      description: A statement for a depository account
      title: Depository Statement
    statement_list:
      allOf:
      - properties:
          statements:
            description: Array of statements
            items:
              $ref: '#/components/schemas/statement_summary'
            type: array
        required:
        - statements
        type: object
      - $ref: '#/components/schemas/paginated_response'
      title: Statement List
    statement_summary:
      properties:
        account_id:
          description: The unique identifier of the account the statement belongs
            to
          format: uuid
          readOnly: true
          type: string
        due_date:
          description: The limit date when the due amount indicated on the statement
            should be paid
          format: date
          readOnly: true
          type: string
        end_date:
          description: The date indicating the ending of the time interval covered
            by the statement
          format: date
          readOnly: true
          type: string
        id:
          description: statement ID
          format: uuid
          readOnly: true
          type: string
        issue_date:
          description: The date when the statement has been issued
          format: date
          readOnly: true
          type: string
        start_date:
          description: The date indicating the beginning of the time interval covered
            by the statement
          format: date
          readOnly: true
          type: string
      title: Statement
      type: object
    status:
      description: |
        The status of the account

        | Status | Description | Transactable |
        |------|-----------|-----|
        | ACCOUNT_NEVER_ACTIVE | Account was never activated by the customer | N |
        | ACCOUNT_NOT_DESIRED | A credit account was created for a customer, but the customer did not accept the account | N |
        | ACTIVATED_NOT_DISBURSED | A credit account was created for the customer, but the funds have not been paid out or used | N |
        | ACTIVE_OR_DISBURSED | The account is active and transactable | Y |
        | APPLICATION_SUBMITTED | Deprecated status | N |
        | AWAITING_FIXING | Account is awaiting fixing | N |
        | CHARGED_OFF | The account has been charged off and is closed | N |
        | CLOSED | Accounts must be zeroed out before being closed.  Closed accounts cannot transact | N |
        | DELINQUENT | Synctera will update a credit account to delinquent if the customer has not paid within their expected billing cycle | N |
        | FAILED_KYC | We were unable to verify the identity of the account holder: they have not passed know-your-customer (KYC) checks | N |
        | IN_CLOSING | The account is in the process of being closed | N |
        | RESTRICTED | Synctera will update accounts to restricted of the account holder has not successfully passed KYC | N |
        | SUSPENDED | Account has been suspected of fraudulent activity and is blocked from further transactions | N |
      enum:
      - ACCOUNT_NEVER_ACTIVE
      - ACCOUNT_NOT_DESIRED
      - ACTIVATED_NOT_DISBURSED
      - ACTIVE_OR_DISBURSED
      - APPLICATION_SUBMITTED
      - AWAITING_FIXING
      - CHARGED_OFF
      - CLOSED
      - DELINQUENT
      - FAILED_KYC
      - IN_CLOSING
      - RESTRICTED
      - SUSPENDED
      title: Account Status
      type: string
    status1:
      description: |
        The state of the FEEDBACK, use this field to mark fields as RESOLVED or UNRESOLVED. This is required when creating a note with type FEEDBACK. Providing a status with note type NOTE will result in a Bad Request error.
      enum:
      - RESOLVED
      - UNRESOLVED
      example: RESOLVED
      type: string
    status2:
      description: |
        Status of the person. One of the following:
        * `ACTIVE` – is an integrator defined status.  Integrators should set a person to active if they believe the person to be qualified for conducting business.  Synctera will combine this status with other statuses such a verification to determine if the person is eligible for specific actions such as initiating transactions or issuing a card.
        * `DECEASED` – person is deceased.
        * `DENIED` – customer was turned down.
        * `DORMANT` – person is no longer active.
        * `ESCHEAT` – person's assets are abandoned and are property of the state.
        * `FROZEN` – person's actions are blocked for security, legal, or other reasons.
        * `INACTIVE` – an inactive status indicating that the person is no longer active.
        * `PROSPECT` – a potential customer, used for information-gathering and disclosures.
        * `SANCTION` – person is on a sanctions list and should be carefully monitored.
      enum:
      - ACTIVE
      - DECEASED
      - DENIED
      - DORMANT
      - ESCHEAT
      - FROZEN
      - INACTIVE
      - PROSPECT
      - SANCTION
      example: ACTIVE
      type: string
    template_fields:
      discriminator:
        mapping:
          CHARGE_SECURED: '#/components/schemas/template_fields_charge_secured'
          CHECKING: '#/components/schemas/template_fields_depository'
          LINE_OF_CREDIT: '#/components/schemas/template_fields_line_of_credit'
          SAVING: '#/components/schemas/template_fields_depository'
        propertyName: account_type
      oneOf:
      - $ref: '#/components/schemas/template_fields_charge_secured'
      - $ref: '#/components/schemas/template_fields_line_of_credit'
      - $ref: '#/components/schemas/template_fields_depository'
      type: object
    template_fields_charge_secured:
      allOf:
      - properties:
          auto_payment_period:
            description: |
              The number of days past the billing period to initiate an auto payment.  Only applicable for accounts with type `CHARGE_SECURED`, where the account holder has opted in for auto payment functionality. This value must be lower than or equal the `grace_period` setting on the account. If this value is 0, the auto payment will happen on the same day as the statement is generated. Auto payment only occurs if regular payments are not received on time.
            example: 20
            maximum: 28
            minimum: 0
            type: integer
          grace_period:
            default: 21
            description: |
              The number of days past the billing period to allow for payment before it is considered due. This directly infers the due date for a payment. The default will be set to 21 days.
            maximum: 28
            minimum: 21
            type: integer
          minimum_payment:
            $ref: '#/components/schemas/minimum_payment_full'
          spend_control_ids:
            $ref: '#/components/schemas/spend_control_ids'
        required:
        - minimum_payment
      - $ref: '#/components/schemas/base_template_fields'
      description: |
        For creating CHARGE_SECURED accounts, e.g. for use in a Smart Charge Card offering.
      type: object
    template_fields_depository:
      allOf:
      - properties:
          balance_ceiling:
            $ref: '#/components/schemas/balance_ceiling'
          balance_floor:
            $ref: '#/components/schemas/balance_floor'
          fee_product_ids:
            description: A list of fee account products that the current account associates
              with.
            items:
              format: uuid
              type: string
            type: array
          interest_product_id:
            description: |
              An interest account product that the current account associates with.
            format: uuid
            type: string
          is_ach_enabled:
            default: false
            description: Enable ACH transaction.
            type: boolean
          is_card_enabled:
            default: false
            description: Enable card transaction.
            type: boolean
          is_eft_ca_enabled:
            description: A flag to indicate whether EFT Canada transactions are enabled.
            readOnly: true
            type: boolean
          is_external_card_enabled:
            default: false
            description: Enable external card transaction.
            type: boolean
          is_p2p_enabled:
            default: false
            description: Enable P2P transaction.
            type: boolean
          is_sar_enabled:
            default: false
            description: Enable SAR report.
            type: boolean
          is_wire_enabled:
            default: false
            description: Enable wire transaction.
            type: boolean
          overdraft_limit:
            deprecated: true
            description: |
              This field is unused and will be removed in a future API version.
            format: int64
            minimum: 0
            type: integer
          spend_control_ids:
            $ref: '#/components/schemas/spend_control_ids'
          spending_limits:
            $ref: '#/components/schemas/spending_limits'
      - $ref: '#/components/schemas/base_template_fields'
      type: object
    template_fields_generic_response:
      example:
        billing_period:
          frequency: ANNUALLY
          start_date: 2022-01-01T00:00:00Z
        account_type: null
        interest_product_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        is_external_card_enabled: false
        is_eft_ca_enabled: true
        overdraft_limit: 0
        fee_product_ids:
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        is_wire_enabled: false
        is_ach_enabled: false
        bank_country: US
        auto_payment_period: 20
        balance_ceiling:
          balance: 0
          linked_account_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          overflow_account_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        balance_floor:
          balance: 6
          linked_account_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          overdraft_account_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        is_p2p_enabled: false
        grace_period: 21
        is_card_enabled: false
        spend_control_ids:
        - 7d943c51-e4ff-4e57-9558-08cab6b963c7
        - 7d943c51-e4ff-4e57-9558-08cab6b963c7
        - 7d943c51-e4ff-4e57-9558-08cab6b963c7
        - 7d943c51-e4ff-4e57-9558-08cab6b963c7
        - 7d943c51-e4ff-4e57-9558-08cab6b963c7
        minimum_payment: null
        spending_limits:
          week:
            amount: 0
            transactions: 0
          month:
            amount: 0
            transactions: 0
          lifetime:
            amount: 0
            transactions: 0
          description: description
          day:
            amount: 0
            transactions: 0
          transaction:
            amount: 0
        is_sar_enabled: false
        currency: USD
      properties:
        account_type:
          $ref: '#/components/schemas/account_type'
        auto_payment_period:
          description: |
            The number of days past the billing period to initiate an auto payment.  Only applicable for accounts with type `CHARGE_SECURED`, where the account holder has opted in for auto payment functionality. This value must be lower than or equal the `grace_period` setting on the account. If this value is 0, the  auto payment will happen on the same day as the statement is generated.  Auto payment only occurs if regular payments are not received on time.
          example: 20
          maximum: 28
          minimum: 0
          type: integer
        balance_ceiling:
          $ref: '#/components/schemas/balance_ceiling'
        balance_floor:
          $ref: '#/components/schemas/balance_floor'
        bank_country:
          description: Bank country of the account
          example: US
          pattern: "^[A-Z]{2,3}$"
          type: string
        billing_period:
          $ref: '#/components/schemas/billing_period'
        currency:
          description: Account currency. ISO 4217 alphabetic currency code
          example: USD
          pattern: "^[A-Z]{3}$"
          type: string
        fee_product_ids:
          description: A list of fee account products that the current account associates
            with.
          items:
            format: uuid
            type: string
          type: array
        grace_period:
          default: 21
          description: |
            The number of days past the billing period to allow for payment before it is considered due. This directly infers the due date for a payment. The default will be set to 21 days.
          maximum: 28
          minimum: 21
          type: integer
        interest_product_id:
          description: An interest account product that the current account associates
            with.
          format: uuid
          type: string
        is_ach_enabled:
          default: false
          description: Enable ACH transaction on ledger.
          type: boolean
        is_card_enabled:
          default: false
          description: Enable card transaction on ledger.
          type: boolean
        is_eft_ca_enabled:
          description: A flag to indicate whether EFT Canada transactions are enabled.
          type: boolean
        is_external_card_enabled:
          default: false
          description: Enable external card transaction on ledger.
          type: boolean
        is_p2p_enabled:
          default: false
          description: Enable P2P transaction on ledger.
          type: boolean
        is_sar_enabled:
          default: false
          description: Enable SAR report.
          type: boolean
        is_wire_enabled:
          default: false
          description: Enable wire transaction on ledger.
          type: boolean
        minimum_payment:
          $ref: '#/components/schemas/minimum_payment'
        overdraft_limit:
          deprecated: true
          description: |
            This field is unused and will be removed in a future API version.
          format: int64
          minimum: 0
          type: integer
        spend_control_ids:
          description: List of spend control IDs to control spending for the account
          items:
            example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
            format: uuid
            type: string
          maxItems: 10
          type: array
        spending_limits:
          $ref: '#/components/schemas/spending_limits'
      required:
      - account_type
      - bank_country
      - currency
      type: object
    template_fields_line_of_credit:
      allOf:
      - $ref: '#/components/schemas/base_template_fields'
      - properties:
          grace_period:
            default: 21
            description: |
              The number of days past the billing period to allow for payment before it is considered due. This directly infers the due date for a payment. The default will be set to 21 days.
            maximum: 28
            minimum: 21
            type: integer
          interest_product_id:
            description: |
              An interest account product that the current account associates with. The account product must have its calculation_method set to COMPOUNDED_DAILY.
            format: uuid
            type: string
          minimum_payment:
            $ref: '#/components/schemas/minimum_payment_partial'
        required:
        - minimum_payment
      type: object
    template_list:
      allOf:
      - $ref: '#/components/schemas/paginated_response'
      - properties:
          account_templates:
            description: Array of account templates
            items:
              $ref: '#/components/schemas/account_template_response'
            type: array
        required:
        - account_templates
        type: object
    tenant_id:
      description: |
        The id of the tenant containing the resource. This is relevant for Fintechs that have multiple workspaces.
      example: abcdef_ghijkl
      type: string
    tenant_id1:
      description: |
        The tenant containing the resource.
        Tenancy is represented as bank_id_partner_id.
        This attribute is included on all responses.
        For requests, it is optional for clients with access to a single tenant.
      example: abcdef_ghijkl
      type: string
    three_ds_policy:
      description: |
        EMV 3-D Secure policy.

        Policy      | Description
        ----------- | -----------
        UNSUPPORTED | Transactions from merchants that require advanced authentication challenges will fail
        EXEMPT      | Transactions will be exempted from advanced authentication
      enum:
      - EXEMPT
      - UNSUPPORTED
      type: string
    token_list:
      properties:
        digital_wallet_tokens:
          description: Array of Digital Wallet Token information of a Card
          items:
            $ref: '#/components/schemas/digital_wallet_token_response'
          type: array
      type: object
    token_list_response:
      allOf:
      - $ref: '#/components/schemas/paginated_response'
      - $ref: '#/components/schemas/token_list'
      required:
      - digital_wallet_tokens
    transaction:
      properties:
        data:
          $ref: '#/components/schemas/transaction_data'
        effective_date:
          description: "The \"effective date\" of a transaction. This may be earlier\
            \ than posted_date in some cases (for example, a transaction that occurs\
            \ on a Saturday may not be posted until the following Monday, but would\
            \ have an effective date of Saturday)"
          format: date-time
          type: string
        id:
          type: integer
        posted_date:
          description: The date the transaction was posted. This is the date any money
            is considered to be added or removed from an account.
          format: date-time
          type: string
        status:
          type: string
        subtype:
          description: "The specific transaction type. For example, for `ach`, this\
            \ may be \"outgoing_debit\"."
          type: string
        type:
          description: "The general type of transaction. For example, \"card\" or\
            \ \"ach\"."
          type: string
        uuid:
          description: The unique identifier of the transaction.
          format: uuid
          type: string
      required:
      - data
      - effective_date
      - id
      - posted_date
      - status
      - subtype
      - type
      - uuid
      title: A posted transaction
      type: object
    transaction_data:
      properties:
        external_data:
          description: an unstructured json blob representing additional transaction
            information supplied by the integrator.
          nullable: true
          type: object
        lines:
          description: "The set of accounting entries associated with this transaction.\
            \ For example, a debit to a customer account will have a corresponding\
            \ credit in a general ledger account."
          items:
            $ref: '#/components/schemas/transaction_line'
          type: array
        memo:
          type: string
        metadata:
          nullable: true
          type: object
      required:
      - lines
      - memo
      type: object
    transaction_dispute:
      example:
        created: 2000-01-23T04:56:07.000+00:00
        internal_case_reference: internal_case_reference
        external_case_reference: external_case_reference
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        updated: 2000-01-23T04:56:07.000+00:00
        status: ARBITRATION
      properties:
        created:
          description: The creation time of the dispute
          format: date-time
          type: string
        external_case_reference:
          description: "The external case number or id for the dispute (eg: from a\
            \ vendor such as Marqeta), if one exists."
          type: string
        id:
          description: The unique identifier of the dispute.
          format: uuid
          type: string
        internal_case_reference:
          description: "The internal case number or id for the dispute in the Synctera\
            \ platform, if one exists."
          type: string
        status:
          enum:
          - ARBITRATION
          - CASE_LOST
          - CASE_OPEN
          - CASE_WON
          - CHARGEBACK_INITIATED
          - NETWORK_REJECTED
          - PREARBITRATION
          - REPRESENTMENT
          type: string
        updated:
          description: The time the dispute was last updated
          format: date-time
          type: string
      required:
      - created
      - id
      - status
      - updated
      type: object
    transaction_line:
      properties:
        account_id:
          description: The account uuid associated with this transaction line
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          type: string
        account_no:
          description: The account number associated with this transaction line
          type: string
        amount:
          description: The amount (in cents) of the transaction
          type: integer
        currency:
          description: ISO 4217 alphabetic currency code of the transfer amount
          type: string
        dc_sign:
          $ref: '#/components/schemas/dc_sign'
        uuid:
          format: uuid
          type: string
      required:
      - account_id
      - account_no
      - amount
      - currency
      - dc_sign
      - uuid
      type: object
    transaction_line1:
      example:
        amount: 0
        is_primary: true
        created: 2000-01-23T04:56:07.000+00:00
        related_line: 5
        is_offset: true
        avail_balance: 6
        available_balance: 1
        account_no: account_no
        uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        network: network
        dc_sign: null
        account_id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
        balance: 5
        is_gl_acc: true
        meta: "{}"
        currency: currency
        updated: 2000-01-23T04:56:07.000+00:00
        seq: 2
        tenant: tenant
        is_fee: true
      properties:
        account_id:
          description: The account uuid associated with this transaction line
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          type: string
        account_no:
          description: The account number associated with this transaction line
          type: string
        amount:
          description: The amount (in cents) of the transaction
          format: int64
          type: integer
        avail_balance:
          description: The account "available balance" at the point in time this (to
            be deprecated) transaction was posted
          format: int64
          type: integer
        available_balance:
          description: The account "available balance" at the point in time this transaction
            was posted
          format: int64
          type: integer
        balance:
          description: The account balance at the point in time this transaction was
            posted
          format: int64
          type: integer
        created:
          description: The creation date of the transaction
          format: date-time
          type: string
        currency:
          description: ISO 4217 alphabetic currency code of the transfer amount
          type: string
        dc_sign:
          $ref: '#/components/schemas/dc_sign'
        is_fee:
          description: Whether or not this line is considered a fee
          type: boolean
        is_gl_acc:
          description: Whether or not this line represents a GL account
          type: boolean
        is_offset:
          description: Whether or not this line is considered the "offset" line
          type: boolean
        is_primary:
          description: Whether or not this line is considered the "primary" line
          type: boolean
        meta:
          nullable: true
          type: object
        network:
          description: The network this transaction is associated with
          type: string
        related_line:
          type: integer
        seq:
          type: integer
        tenant:
          description: "The tenant associated with this transaction, in the form \"\
            <bankid>_<partnerid>\""
          type: string
        updated:
          description: The date the transaction was last updated
          format: date-time
          type: string
        uuid:
          format: uuid
          type: string
      required:
      - account_id
      - account_no
      - amount
      - avail_balance
      - available_balance
      - balance
      - created
      - currency
      - dc_sign
      - is_fee
      - is_gl_acc
      - is_offset
      - is_primary
      - meta
      - network
      - related_line
      - seq
      - tenant
      - updated
      - uuid
      type: object
    transaction_list:
      allOf:
      - properties:
          transactions:
            description: Array of statement transactions
            items:
              $ref: '#/components/schemas/transaction'
            type: array
        required:
        - transactions
        type: object
      - $ref: '#/components/schemas/paginated_response'
      title: Statement List
    transaction_options:
      properties:
        additional_data:
          type: string
        card_expiration_date_yymm:
          type: string
        database_transaction_timeout:
          format: int32
          type: integer
        encryption_key_id:
          type: string
        is_async:
          default: false
          type: boolean
        pre_auth_time_limit:
          type: string
        send_expiration_date:
          default: false
          type: boolean
        send_track_data:
          default: false
          type: boolean
        transaction_id:
          type: string
        transaction_timeout_threshold_seconds:
          format: int64
          type: integer
      type: object
    transfer_list_response:
      allOf:
      - properties:
          external_transfers:
            description: Array of External transfer
            items:
              $ref: '#/components/schemas/transfer_response'
            type: array
        required:
        - external_transfers
        type: object
      - $ref: '#/components/schemas/paginated_response'
    transfer_request:
      discriminator:
        mapping:
          PULL: '#/components/schemas/transfer_request_pull'
          PUSH: '#/components/schemas/transfer_request_push'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/transfer_request_push'
      - $ref: '#/components/schemas/transfer_request_pull'
      type: object
    transfer_request_base:
      description: Push to card or pull from card
      properties:
        amount:
          description: Amount of the transfer in cents
          minimum: 1
          type: integer
        currency:
          description: ISO 4217  Alpha-3 currency code
          example: USD
          maxLength: 3
          minLength: 3
          type: string
        external_card_id:
          description: The ID of the external card from/to which the transfer will
            be initiated/received
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        merchant:
          $ref: '#/components/schemas/merchant'
        originating_account_id:
          description: The ID of the account to which the transfer will be initiated/received
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        type:
          $ref: '#/components/schemas/transfer_type_request'
      required:
      - amount
      - currency
      - external_card_id
      - originating_account_id
      - type
      type: object
    transfer_request_pull:
      allOf:
      - $ref: '#/components/schemas/transfer_request_base'
      - properties:
          three_ds_id:
            description: Unique identifier of an External Card Transfer 3-D Secure
              Authorization - conditionally required according to your program's 3DS
              policy
            example: 40e2de9e-4375-4fa1-9393-92da972a9338
            format: uuid
            type: string
        type: object
      type: object
    transfer_request_push:
      allOf:
      - $ref: '#/components/schemas/transfer_request_base'
      - properties:
          originating_customer_id:
            description: "For person-to-person PUSH transactions, this is the `customer_id`\
              \ of the sender who must have privileges to access funds in the originating\
              \ account in order to send funds to the recipient cardholder"
            example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
            format: uuid
            type: string
        type: object
      type: object
    transfer_response:
      discriminator:
        mapping:
          PULL: '#/components/schemas/transfer_response_pull'
          PULL_REVERSAL: '#/components/schemas/transfer_response_pull'
          PUSH: '#/components/schemas/transfer_response_push'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/transfer_response_pull'
      - $ref: '#/components/schemas/transfer_response_push'
      type: object
    transfer_response_base:
      properties:
        account_id:
          description: The ID of the account to which the card will be linked
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        amount:
          description: Amount of the transfer in cents
          type: integer
        country_code:
          description: ISO-3166-1 Alpha-2 country code
          example: US
          type: string
        created_time:
          example: 2010-05-06T12:23:34.321Z
          format: date-time
          type: string
        currency:
          description: ISO 4217  Alpha-3 currency code
          example: USD
          maxLength: 3
          minLength: 3
          type: string
        customer_id:
          description: The ID of the customer to whom the card belongs
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        external_card_id:
          description: The ID of the external card from/to which the transfer was
            initiated/received
          example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
          format: uuid
          type: string
        id:
          description: The ID of the transfer
          type: string
        last_modified_time:
          example: 2010-05-06T12:23:34.321Z
          format: date-time
          type: string
        merchant:
          $ref: '#/components/schemas/merchant'
        status:
          description: The status of the transfer
          enum:
          - CANCELED
          - DECLINED
          - PENDING
          - SUCCEEDED
          - UNKNOWN
          type: string
        transaction_id:
          description: The transaction ID
          format: uuid
          type: string
        type:
          $ref: '#/components/schemas/transfer_type'
      required:
      - account_id
      - amount
      - country_code
      - created_time
      - currency
      - customer_id
      - external_card_id
      - id
      - last_modified_time
      - merchant
      - status
      - type
      type: object
    transfer_response_pull:
      allOf:
      - $ref: '#/components/schemas/transfer_response_base'
      - properties:
          three_ds_id:
            description: Unique identifier of an External Card Transfer 3-D Secure
              Authorization - conditionally required according to your program's 3DS
              policy
            example: 40e2de9e-4375-4fa1-9393-92da972a9338
            format: uuid
            type: string
        type: object
      type: object
    transfer_response_push:
      allOf:
      - properties:
          originating_customer_id:
            description: "For person-to-person PUSH transactions, this is the `customer_id`\
              \ of the sender who must have privileges to access funds in the originating\
              \ account in order to send funds to the recipient cardholder"
            example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
            format: uuid
            type: string
        type: object
      - $ref: '#/components/schemas/transfer_response_base'
      type: object
    transfer_reversal_request:
      description: Reversal for a transfer with type PULL
      properties:
        amount:
          description: Amount of the refund in cents (Amount can be up to the original
            amount)
          type: integer
        currency:
          description: ISO 4217  Alpha-3 currency code
          example: USD
          maxLength: 3
          minLength: 3
          type: string
      required:
      - amount
      - currency
      type: object
    transfer_type:
      description: |
        Type of operation for transfer.

        Type | Description
        --- | ---
        PUSH | Push fund to the external card from the account_id
        PULL | Pull funds from the external card to the account_id
        PULL_REVERSAL | Reversed pull funds transfer from an external card
      enum:
      - PULL
      - PULL_REVERSAL
      - PUSH
      example: PULL
      type: string
    transfer_type_request:
      description: |
        Type of operation for transfer.

        Type | Description
        --- | ---
        PUSH | Push fund to the external card from the account_id
        PULL | Pull funds from the external card to the account_id
      enum:
      - PULL
      - PUSH
      example: PULL
      type: string
    txn_enhancer:
      default: NONE
      description: whether to use a transaction enhancer and/or which vendor to use
      enum:
      - MX
      - NONE
      example: NONE
      type: string
    type:
      default: NOTE
      description: |
        The type of note.
      enum:
      - FEEDBACK
      - NOTE
      example: NOTE
      type: string
    update_account:
      allOf:
      - $ref: '#/components/schemas/account_depository'
      - description: Model for updating an account using PUT. Only supports CHECKING
          and SAVING.
      type: object
    update_card_image_request:
      properties:
        rejection_memo:
          type: string
        rejection_reason:
          $ref: '#/components/schemas/card_image_rejection_reason'
        status:
          $ref: '#/components/schemas/card_image_status'
      required:
      - status
      type: object
    update_gateway_request:
      properties:
        active:
          description: Current status of the Authorization gateway
          type: boolean
        card_products:
          description: List of Card Product unique identifiers that will utilize the
            Gateway
          items:
            example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
            format: uuid
            type: string
          type: array
        custom_headers:
          additionalProperties:
            type: string
          description: Custom Headers of the Authorization gateway
          type: object
        standin:
          $ref: '#/components/schemas/gateway_standin'
        url:
          description: URL of the Authorization gateway
          format: uri
          maxLength: 1000
          type: string
      type: object
    update_transfer:
      properties:
        status:
          description: Field value must be set to CANCELED
          enum:
          - CANCELED
          example: CANCELED
          type: string
      title: Change Status
      type: object
    uprev_document:
      properties:
        description:
          description: A description of the attached document
          type: string
        encryption:
          $ref: '#/components/schemas/encryption'
        file:
          description: The file contents
          format: binary
          type: string
        name:
          description: A user-friendly name for the document
          type: string
        type:
          $ref: '#/components/schemas/document_type'
      required:
      - file
      type: object
    user_data:
      description: An unstructured JSON blob representing additional transaction information
        specific to each payment rail.
      nullable: true
      type: object
    vendor_info:
      description: |
        The information provided to Synctera from the vendor. Interpretation of this object is up to the client.
      discriminator:
        mapping:
          application/json: '#/components/schemas/vendor_json'
          text/xml: '#/components/schemas/vendor_xml'
        propertyName: content_type
      oneOf:
      - $ref: '#/components/schemas/vendor_json'
      - $ref: '#/components/schemas/vendor_xml'
      title: Vendor Info
      type: object
    vendor_json:
      properties:
        content_type:
          description: Describes the content-type encoding received from the vendor
          enum:
          - application/json
          type: string
        json:
          description: Data representation in JSON
          type: object
        vendor:
          example: SOCURE
          type: string
      required:
      - content_type
      - json
      - vendor
    vendor_xml:
      properties:
        content_type:
          description: Describes the content-type encoding received from the vendor
          enum:
          - text/xml
          type: string
        vendor:
          example: IDOLOGY
          type: string
        xml:
          description: Data representaion in XML
          type: string
      required:
      - content_type
      - vendor
      - xml
    verification:
      allOf:
      - properties:
          business_id:
            $ref: '#/components/schemas/business_id6'
          creation_time:
            description: The date and time the resource was created.
            example: 2010-05-06T12:23:34.321Z
            format: date-time
            readOnly: true
            type: string
          details:
            $ref: '#/components/schemas/details'
          id:
            description: Unique ID for this verification result.
            example: 7d943c51-e4ff-4e57-9558-08cab6b963c7
            format: uuid
            readOnly: true
            type: string
          last_updated_time:
            description: The date and time the resource was last updated.
            example: 2010-05-06T12:23:34.321Z
            format: date-time
            readOnly: true
            type: string
          metadata:
            $ref: '#/components/schemas/metadata'
          person_id:
            $ref: '#/components/schemas/person_id'
          result:
            $ref: '#/components/schemas/verification_result'
          vendor_info:
            $ref: '#/components/schemas/vendor_info'
          verification_time:
            description: The date and time the verification was completed.
            format: date-time
            type: string
          verification_type:
            $ref: '#/components/schemas/verification_type1'
        type: object
      - required:
        - result
        - verification_time
        - verification_type
      description: Verification result.
      type: object
    verification_list:
      allOf:
      - $ref: '#/components/schemas/paginated_response'
      - properties:
          verifications:
            description: Array of verification results.
            items:
              $ref: '#/components/schemas/verification'
            type: array
        required:
        - verifications
        type: object
    verification_request:
      allOf:
      - required:
        - customer_consent
      - properties:
          business_id:
            $ref: '#/components/schemas/business_id6'
          customer_consent:
            description: Whether this customer has consented to be verified.
            type: boolean
          customer_ip_address:
            description: The customer's IP address.
            example: 140.151.183.216
            type: string
          document_id:
            description: |
              The ID of the uploaded government-issued identification document provided by the Socure SDK.
            example: 1ab2c3de-fg45-6789-a01b-23c45678defg
            type: string
          person_id:
            $ref: '#/components/schemas/person_id'
      example:
        customer_consent: true
        customer_ip_address: 235.2.7.2
        person_id: 1bb26bcb-0e1b-4060-972d-80891332aae2
      type: object
    verification_result:
      description: |
        The determination of this verification. One of the following:
        * `UNVERIFIED` – record representing the absence of a verification.
        * `PENDING` – verification is in progress for this customer.
        * `PROVISIONAL` – partially verified or verified with restrictions.
        * `ACCEPTED` – the customer has been verified.
        * `REVIEW` – verification has run and issues have been identified and require review.
        * `VENDOR_ERROR` – verification did not successfully run due to an unexpected error or failure.
        * `REJECTED` – the customer was rejected and should not be allowed to take certain actions e.g., open an account.
      enum:
      - ACCEPTED
      - PENDING
      - PROVISIONAL
      - REJECTED
      - REVIEW
      - UNVERIFIED
      - VENDOR_ERROR
      example: ACCEPTED
      type: string
    verification_status:
      description: |
        The result of a KYC/KYB verification. One of the following:
        * `UNVERIFIED` – verification has not been completed for this customer.
        * `PENDING` – verification is in progress for this customer.
        * `PROVISIONAL` – partially verified or verified with restrictions.
        * `ACCEPTED` – the customer has been verified.
        * `REVIEW` – verification has run and issues have been identified and require review.
        * `REJECTED` – the customer was rejected and should not be allowed to take certain actions e.g., open an account.
      enum:
      - ACCEPTED
      - PENDING
      - PROVISIONAL
      - REJECTED
      - REVIEW
      - UNVERIFIED
      example: ACCEPTED
      readOnly: true
      type: string
    verification_type:
      description: The type of check run on the customer.
      enum:
      - addressrisk
      - alertlist
      - decision
      - documentverification
      - emailrisk
      - fraud
      - kyc
      - phonerisk
      - social
      - synthetic
      - watchlistplus
      - watchlistpremier
      - watchliststandard
      example: kyc
      type: string
    verification_type1:
      description: |
        The verification run on the customer. One the following:
          * `IDENTITY` – verify that the information provided is associated with the identity of a real person or business.
          * `WATCHLIST` – checks watchlists for known fraud, money laundering, and other suspicious activity.
          * `DOCUMENT_VERIFICATION` – verifies the authenticity of a document, such as a driver's license, or other government-issued identification document.
          * `RELATED_ENTITIES` – represents dependent verification checks for related parties (e.g. all beneficial owners must pass KYC for a business to pass KYB).
          * `MANUAL_REVIEW` – represents the outcome of a manual review of the verification done on a party (note: overrides the outcome of other verification types).
          * `LICENSE` – represents the outcome of a license verification.
      enum:
      - DOCUMENT_VERIFICATION
      - IDENTITY
      - LICENSE
      - MANUAL_REVIEW
      - RELATED_ENTITIES
      - WATCHLIST
      example: IDENTITY
      type: string
    verification_vendor_info:
      description: |
        The information provided to Synctera from the vendor. Interpretation of this object is up to the client.
      discriminator:
        mapping:
          application/json: '#/components/schemas/verification_vendor_json'
          text/xml: '#/components/schemas/verification_vendor_xml'
        propertyName: content_type
      oneOf:
      - $ref: '#/components/schemas/verification_vendor_xml'
      - $ref: '#/components/schemas/verification_vendor_json'
      type: object
    verification_vendor_info_detail:
      properties:
        code:
          description: Vendor specific code.
          example: R186
          type: string
        description:
          description: Description of vendor specific code.
          example: Global Watchlist sources selected are correlated with the input
            identifiers
          type: string
      type: object
    verification_vendor_json:
      properties:
        content_type:
          description: Describes the content-type encoding received from the vendor.
          enum:
          - application/json
          type: string
        details:
          description: Array of vendor specific information.
          items:
            $ref: '#/components/schemas/verification_vendor_info_detail'
          readOnly: true
          type: array
        json:
          description: Data representation in JSON.
          type: object
        vendor:
          description: Name of the vendor used.
          example: SOCURE
          type: string
      required:
      - content_type
      - json
      - vendor
    verification_vendor_xml:
      properties:
        content_type:
          description: Describes the content-type encoding received from the vendor.
          enum:
          - text/xml
          type: string
        details:
          description: Array of vendor specific information.
          items:
            $ref: '#/components/schemas/verification_vendor_info_detail'
          readOnly: true
          type: array
        vendor:
          description: Name of the vendor used.
          example: IDOLOGY
          type: string
        xml:
          description: Data representaion in XML.
          type: string
      required:
      - content_type
      - vendor
      - xml
    verify_response:
      allOf:
      - $ref: '#/components/schemas/paginated_response'
      - properties:
          verification_status:
            $ref: '#/components/schemas/verification_status'
          verifications:
            description: Array of verification results.
            items:
              $ref: '#/components/schemas/verification'
            type: array
        required:
        - verification_status
        - verifications
        type: object
    version:
      description: Version of the disclosure document.
      example: "1.0"
      pattern: "^v?[0-9]+\\.[0-9]+$"
      type: string
    virtual_card:
      allOf:
      - $ref: '#/components/schemas/base_card'
      description: A virtual card
      title: Virtual Card
    virtual_card_issuance_request:
      allOf:
      - required:
        - account_id
        - card_product_id
        - customer_id
        - form
        - type
        type: object
      - $ref: '#/components/schemas/virtual_card'
      example:
        account_id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
        card_product_id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
        customer_id: 7d943c51-e4ff-4e57-9558-08cab6b963c7
        form: VIRTUAL
        type: DEBIT
    virtual_card_plus_status:
      allOf:
      - $ref: '#/components/schemas/virtual_card_response_status'
      - $ref: '#/components/schemas/virtual_card'
    virtual_card_response:
      allOf:
      - $ref: '#/components/schemas/virtual_card_plus_status'
      - properties:
          bin:
            description: The bin number
            type: string
          card_brand:
            $ref: '#/components/schemas/card_brand'
        required:
        - account_id
        - card_brand
        - card_product_id
        - creation_time
        - customer_id
        - emboss_name
        - expiration_month
        - expiration_year
        - form
        - id
        - last_four
        - type
        type: object
      title: Virtual Card
    virtual_card_response_status:
      allOf:
      - required:
        - card_status
        - status_reason
        type: object
      - $ref: '#/components/schemas/card_status_object'
    wallet_provider_card_on_file:
      properties:
        address_verification:
          $ref: '#/components/schemas/digital_wallet_token_address_verification'
        enabled:
          default: false
          example: false
          type: boolean
      type: object
    watchlist_alert:
      example:
        provider_watchlist_name: provider_watchlist_name
        urls:
        - urls
        - urls
        created: 2000-01-23T04:56:07.000+00:00
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        provider_subject_id: provider_subject_id
        provider_subscription_id: provider_subscription_id
        vendor_info: null
        provider_info: "{}"
        status: ACTIVE
      properties:
        created:
          description: When this alert was created
          format: date-time
          type: string
        id:
          description: Unique identifier for this alert
          format: uuid
          type: string
        provider_info:
          description: |
            The information provided to Synctera that triggered this alert, as an arbitrary JSON object. Interpretation of this object is up to the client.
          type: object
        provider_subject_id:
          description: The id of the provider subject for this alert
          type: string
        provider_subscription_id:
          description: The id of the provider subscription for this alert
          type: string
        provider_watchlist_name:
          description: The name of the provider for this alert
          type: string
        status:
          description: The status of this alert
          enum:
          - ACTIVE
          - SUPPRESSED
          type: string
        urls:
          description: |
            Where to get more information about this alert (according to our third-party data provider).
          items:
            type: string
          type: array
        vendor_info:
          $ref: '#/components/schemas/vendor_info'
      required:
      - status
      type: object
    watchlist_alert_list:
      allOf:
      - properties:
          alerts:
            items:
              $ref: '#/components/schemas/watchlist_alert'
            type: array
        required:
        - alerts
        type: object
      - $ref: '#/components/schemas/paginated_response'
    watchlist_subscription:
      example:
        period_end: 2000-01-23
        auto_renew: true
        period_start: 2000-01-23
        created: 2000-01-23T04:56:07.000+00:00
        customer_consent: true
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        provider_subscription_id: provider_subscription_id
        status: ACTIVE
      properties:
        auto_renew:
          description: |
            Whether this subscription should automatically renew when the subscription period is over (default: vendor-dependent).
          type: boolean
        created:
          description: When this subscription was created
          format: date-time
          type: string
        customer_consent:
          description: |
            Whether this customer has consented to being enrolled for watchlist monitoring
          type: boolean
        id:
          description: Unique identifier for this subscription
          format: uuid
          type: string
        period_end:
          description: The date when monitoring of this individual should end.
          format: date
          type: string
        period_start:
          description: "The date when monitoring of this individual should begin (default:\
            \ today)."
          format: date
          type: string
        provider_subscription_id:
          description: External provider subscription id
          type: string
        status:
          enum:
          - ACTIVE
          - INACTIVE
          type: string
      required:
      - customer_consent
      type: object
    watchlist_subscription_list:
      allOf:
      - $ref: '#/components/schemas/paginated_response'
      - properties:
          subscriptions:
            items:
              $ref: '#/components/schemas/watchlist_subscription'
            type: array
        required:
        - subscriptions
        type: object
    watchlist_suppress:
      properties:
        provider_subject_id:
          description: |
            The id of the subject (person) for whom future alerts should be suppressed.
          type: string
        provider_subscription_id:
          description: |
            The provider's id for the subscription that caused the alert(s) that are being suppressed.
          type: string
        status:
          description: The status of this suppression
          enum:
          - SUPPRESS
          - UNSUPPRESS
          type: string
      required:
      - provider_subject_id
      - provider_subscription_id
      - status
      type: object
    webhook:
      description: Webhook object
      example:
        is_enabled: true
        last_updated: 2000-01-23T04:56:07.000+00:00
        metadata: metadata
        enabled_events:
        - null
        - null
        description: description
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        url: https://openapi-generator.tech
      properties:
        description:
          description: A description of what the webhook is used for
          type: string
        enabled_events:
          description: "A list of the events that will trigger the webhook. Subscribing\
            \ to a wildcard event, e.g. ACCOUNT.*, will send all webhooks for all\
            \ events that match that pattern. Note that this can include new event\
            \ types added after the subscription was created."
          items:
            $ref: '#/components/schemas/event_type'
          type: array
        id:
          description: The unique ID of the webhook
          format: uuid
          readOnly: true
          type: string
        is_enabled:
          description: Set the webhook to be enabled or disabled
          type: boolean
        last_updated:
          description: Timestamp that this webhook was created or the last time any
            field was changed
          format: date-time
          readOnly: true
          type: string
        metadata:
          description: Additional information stored to the webhook
          maxLength: 1024
          type: string
        url:
          description: URL that the webhook will send request to
          format: uri
          maxLength: 1000
          type: string
      required:
      - enabled_events
      - is_enabled
      - url
      title: Webhook
      type: object
    webhook_list:
      allOf:
      - properties:
          webhooks:
            description: Array of webhooks
            items:
              $ref: '#/components/schemas/webhook'
            type: array
        required:
        - webhooks
        type: object
      - $ref: '#/components/schemas/paginated_response'
    webhook_request_object:
      description: Request body for webhook http request
      properties:
        event_resource:
          description: |
            Json string of object associated with the event. For example, if your event is ACCOUNT.CREATED, You can refer to Acccount to parse the account event to obtain the ID, status etc.
          type: string
        event_resource_changed_fields:
          description: |
            Json string of object associated with the event related to a resource change. This only contains those fields that have value changed on the event, and the field values are prior to the resource change event.
          type: string
        event_time:
          description: Timestamp of the current event raised
          format: date-time
          type: string
        id:
          description: The unique ID of the current event
          format: uuid
          type: string
        metadata:
          description: Metadata that stored in the webhook subscription
          maxLength: 1024
          type: string
        response_history:
          deprecated: true
          description: Response history of the webhook request
          items:
            $ref: '#/components/schemas/response_history_item'
          type: array
        status:
          deprecated: true
          description: Current event status. Failing event will keep retry until it
            is purged.
          enum:
          - FAILED
          - RETRYING
          - RUNNING
          - SUCCESS
          type: string
        type:
          $ref: '#/components/schemas/event_type_explicit'
        url:
          description: URL that you specified for the webhook and where this request
            will be sent
          format: uri
          maxLength: 1000
          type: string
        webhook_id:
          description: Id of the Webhook the current request belongs to
          format: uuid
          type: string
      required:
      - event_time
      - id
      - metadata
      - type
      - url
      - webhook_id
      title: Webhook request object
      type: object
    widget_type:
      description: The widget type
      enum:
      - activate_card
      - set_pin
      type: string
    wire:
      example:
        creation_time: 2010-05-06T12:23:34.321Z
        transaction_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        amount: 10000
        originating_account_id: b01db9c7-78f2-4a99-8aca-1231d32f9b96
        receiving_account_id: b01db9c7-78f2-4a99-8aca-1231d32f9b96
        bank_message: bank_message
        originating_account_number: "1961234745"
        sender_reference_id: 9F564A6124E65
        transaction_in_id: b01db9c7-78f2-4a99-8aca-1231d32f9b96
        last_updated_time: 2010-05-06T12:23:34.321Z
        effective_date: 2022-03-18T00:00:00.000+00:00
        recipient_message: recipient_message
        currency: USD
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        return_data:
          reason: reason
          original_transaction_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          previous_message_id: previous_message_id
          original_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        customer_id: b01db9c7-78f2-4a99-8aca-1231d32f9b96
        receiving_account_number: "1961234745"
        status: PENDING
      properties:
        amount:
          description: Transfer amount in cents ($100 would be 10000)
          example: 10000
          type: integer
        bank_message:
          description: Instructions intended for the financial institutions that are
            processing the wire.
          type: string
        creation_time:
          example: 2010-05-06T12:23:34.321Z
          format: date-time
          readOnly: true
          type: string
        currency:
          description: 3-character currency code
          example: USD
          type: string
        customer_id:
          description: The customer UUID representing the person initiating the Wire
            transfer
          example: b01db9c7-78f2-4a99-8aca-1231d32f9b96
          format: uuid
          type: string
        effective_date:
          description: The effective date of the transaction once it gets posted
          example: 2022-03-18
          format: date
          type: string
        id:
          description: wire ID
          format: uuid
          readOnly: true
          type: string
        last_updated_time:
          example: 2010-05-06T12:23:34.321Z
          format: date-time
          readOnly: true
          type: string
        originating_account_id:
          description: Sender account ID
          example: b01db9c7-78f2-4a99-8aca-1231d32f9b96
          format: uuid
          type: string
        originating_account_number:
          description: "The account number representing the sender account. If the\
            \ outgoing wire is a return, it refers to the sender of the initial wire\
            \ not the sender of the return."
          example: "1961234745"
          format: string
          type: string
        receiving_account_id:
          description: The external account uuid representing the recipient of the
            wire.
          example: b01db9c7-78f2-4a99-8aca-1231d32f9b96
          format: uuid
          type: string
        receiving_account_number:
          description: "The account number representing the recipient account. If\
            \ the outgoing wire is a return, it refers to the recipient of the initial\
            \ wire not the destination of the return."
          example: "1961234745"
          format: string
          type: string
        recipient_message:
          description: Information from the originator to the beneficiary (recipient).
          type: string
        return_data:
          $ref: '#/components/schemas/return_data'
        sender_reference_id:
          description: Sender's id associated with fedwire transfer
          example: 9F564A6124E65
          readOnly: true
          type: string
        status:
          description: The current status of the transfer
          enum:
          - CANCELED
          - COMPLETED
          - DECLINED
          - PENDING
          example: PENDING
          readOnly: true
          type: string
        transaction_id:
          description: ID of the resulting transaction resource
          format: uuid
          readOnly: true
          type: string
        transaction_in_id:
          description: The transaction uuid of the incoming wire that triggered an
            outgoing return. This is only used if the outgoing wire is a return.
          example: b01db9c7-78f2-4a99-8aca-1231d32f9b96
          format: uuid
          type: string
      required:
      - amount
      - creation_time
      - currency
      - effective_date
      - id
      - last_updated_time
      - originating_account_number
      - receiving_account_number
      - sender_reference_id
      - status
      - transaction_id
      title: Wire
      type: object
    wire_list:
      allOf:
      - properties:
          wires:
            description: Array of wires
            items:
              $ref: '#/components/schemas/wire'
            type: array
        required:
        - wires
        type: object
      - $ref: '#/components/schemas/paginated_response'
      title: Wire List
    wire_request:
      properties:
        amount:
          description: Transfer amount in cents ($100 would be 10000)
          example: 10000
          type: integer
        bank_message:
          description: Instructions intended for the financial institutions that are
            processing the wire.
          maxLength: 210
          type: string
        currency:
          description: 3-character currency code
          enum:
          - USD
          example: USD
          type: string
        customer_id:
          description: The customer UUID representing the person initiating the Wire
            transfer
          example: b01db9c7-78f2-4a99-8aca-1231d32f9b96
          format: uuid
          type: string
        metadata:
          description: Additional transfer metadata structured as key-value pairs
          type: object
        originating_account_id:
          description: Sender account ID
          example: b01db9c7-78f2-4a99-8aca-1231d32f9b96
          format: uuid
          type: string
        receiving_account_id:
          description: The external account uuid representing the recipient of the
            wire.
          example: b01db9c7-78f2-4a99-8aca-1231d32f9b96
          format: uuid
          type: string
        recipient_message:
          description: Information from the originator to the beneficiary (recipient).
          maxLength: 140
          type: string
      required:
      - amount
      - currency
      - customer_id
      - originating_account_id
      - receiving_account_id
      - recipient_message
      title: Wire payment request payload
      type: object
    withdrawal_request_model:
      properties:
        account_type:
          enum:
          - checking
          - credit
          - savings
          type: string
        amount:
          description: The amount of the transaction in the smallest whole denomination
            of the applicable currency (eg. For USD use cents)
          type: integer
        card_acceptor:
          $ref: '#/components/schemas/card_acceptor_model'
        card_id:
          format: uuid
          type: string
        mid:
          maxLength: 50
          minLength: 1
          type: string
        pin:
          maxLength: 15
          minLength: 1
          type: string
      required:
      - amount
      - card_id
      - mid
      type: object
    getCardBarcode_200_response:
      example:
        barcode: barcode
      properties:
        barcode:
          description: Barcode of the card
          type: string
      type: object
    replaceSecret_request:
      properties:
        is_rolling_secret:
          description: Set true to let the current secret expire in the next 24 hours.
            Set false to let the current secret expire immediately.
          type: boolean
      type: object
    replaceSecret_200_response:
      example:
        secret: secret
        deleted_at: 2000-01-23T04:56:07.000+00:00
      properties:
        deleted_at:
          description: Timestamp that the old secret is delete
          format: date-time
          type: string
        secret:
          description: Generated secret. Do not share. This secret will be used to
            verify that webhook requests were sent from Synctera.
          maxLength: 64
          minLength: 64
          type: string
      type: object
    createSecret_201_response:
      example:
        secret: secret
      properties:
        secret:
          description: Generated secret. Do not share. This secret will be used to
            verify that webhook requests were sent from Synctera.
          maxLength: 64
          minLength: 64
          type: string
      type: object
    triggerEvent_request:
      properties:
        event:
          $ref: '#/components/schemas/event_type'
      type: object
    account_summary_balance_ceiling:
      properties:
        balance:
          description: Maximum balance in the account's currency. Unit in cents.
          format: int64
          type: integer
      type: object
    account_summary_balance_floor:
      properties:
        balance:
          description: Minimum balance in the account's currency. Unit in cents.
          format: int64
          type: integer
      type: object
    spending_limits_transaction:
      description: Individual transaction limit
      example:
        amount: 0
      properties:
        amount:
          description: Maximum amount allowed. Unit in cents.
          format: int64
          minimum: 0
          type: integer
      type: object
  securitySchemes:
    bearerAuth:
      bearerFormat: api_key
      scheme: bearer
      type: http
x-readme:
  explorer-enabled: true
  proxy-enabled: true
  samples-enabled: true
