/*
Synctera API

<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p> 

API version: 0.17.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"fmt"
)

// AccountVerification - Information about the account verification process. If the account has not been verified, this will be null. 
type AccountVerification struct {
	FinicityAccountVerification *FinicityAccountVerification
	ManualAccountVerification *ManualAccountVerification
	PlaidAccountVerification *PlaidAccountVerification
}

// FinicityAccountVerificationAsAccountVerification is a convenience function that returns FinicityAccountVerification wrapped in AccountVerification
func FinicityAccountVerificationAsAccountVerification(v *FinicityAccountVerification) AccountVerification {
	return AccountVerification{
		FinicityAccountVerification: v,
	}
}

// ManualAccountVerificationAsAccountVerification is a convenience function that returns ManualAccountVerification wrapped in AccountVerification
func ManualAccountVerificationAsAccountVerification(v *ManualAccountVerification) AccountVerification {
	return AccountVerification{
		ManualAccountVerification: v,
	}
}

// PlaidAccountVerificationAsAccountVerification is a convenience function that returns PlaidAccountVerification wrapped in AccountVerification
func PlaidAccountVerificationAsAccountVerification(v *PlaidAccountVerification) AccountVerification {
	return AccountVerification{
		PlaidAccountVerification: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *AccountVerification) UnmarshalJSON(data []byte) error {
	var err error
	// this object is nullable so check if the payload is null or empty string
	if string(data) == "" || string(data) == "{}" {
		return nil
	}

	match := 0
	// try to unmarshal data into FinicityAccountVerification
	err = newStrictDecoder(data).Decode(&dst.FinicityAccountVerification)
	if err == nil {
		jsonFinicityAccountVerification, _ := json.Marshal(dst.FinicityAccountVerification)
		if string(jsonFinicityAccountVerification) == "{}" { // empty struct
			dst.FinicityAccountVerification = nil
		} else {
			match++
		}
	} else {
		dst.FinicityAccountVerification = nil
	}

	// try to unmarshal data into ManualAccountVerification
	err = newStrictDecoder(data).Decode(&dst.ManualAccountVerification)
	if err == nil {
		jsonManualAccountVerification, _ := json.Marshal(dst.ManualAccountVerification)
		if string(jsonManualAccountVerification) == "{}" { // empty struct
			dst.ManualAccountVerification = nil
		} else {
			match++
		}
	} else {
		dst.ManualAccountVerification = nil
	}

	// try to unmarshal data into PlaidAccountVerification
	err = newStrictDecoder(data).Decode(&dst.PlaidAccountVerification)
	if err == nil {
		jsonPlaidAccountVerification, _ := json.Marshal(dst.PlaidAccountVerification)
		if string(jsonPlaidAccountVerification) == "{}" { // empty struct
			dst.PlaidAccountVerification = nil
		} else {
			match++
		}
	} else {
		dst.PlaidAccountVerification = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.FinicityAccountVerification = nil
		dst.ManualAccountVerification = nil
		dst.PlaidAccountVerification = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(AccountVerification)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(AccountVerification)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AccountVerification) MarshalJSON() ([]byte, error) {
	if src.FinicityAccountVerification != nil {
		return json.Marshal(&src.FinicityAccountVerification)
	}

	if src.ManualAccountVerification != nil {
		return json.Marshal(&src.ManualAccountVerification)
	}

	if src.PlaidAccountVerification != nil {
		return json.Marshal(&src.PlaidAccountVerification)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AccountVerification) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.FinicityAccountVerification != nil {
		return obj.FinicityAccountVerification
	}

	if obj.ManualAccountVerification != nil {
		return obj.ManualAccountVerification
	}

	if obj.PlaidAccountVerification != nil {
		return obj.PlaidAccountVerification
	}

	// all schemas are nil
	return nil
}

type NullableAccountVerification struct {
	value *AccountVerification
	isSet bool
}

func (v NullableAccountVerification) Get() *AccountVerification {
	return v.value
}

func (v *NullableAccountVerification) Set(val *AccountVerification) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountVerification) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountVerification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountVerification(val *AccountVerification) *NullableAccountVerification {
	return &NullableAccountVerification{value: val, isSet: true}
}

func (v NullableAccountVerification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountVerification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


