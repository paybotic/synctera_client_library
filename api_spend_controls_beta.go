/*
Synctera API

<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p> 

API version: 0.32.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// SpendControlsBetaApiService SpendControlsBetaApi service
type SpendControlsBetaApiService service

type ApiCreateSpendControlRequest struct {
	ctx context.Context
	ApiService *SpendControlsBetaApiService
	spendControl *SpendControl
}

// Details of the spend control to create
func (r ApiCreateSpendControlRequest) SpendControl(spendControl SpendControl) ApiCreateSpendControlRequest {
	r.spendControl = &spendControl
	return r
}

func (r ApiCreateSpendControlRequest) Execute() (*SpendControlResponse, *http.Response, error) {
	return r.ApiService.CreateSpendControlExecute(r)
}

/*
CreateSpendControl Create Spend Control

Create a spend control


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateSpendControlRequest
*/
func (a *SpendControlsBetaApiService) CreateSpendControl(ctx context.Context) ApiCreateSpendControlRequest {
	return ApiCreateSpendControlRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SpendControlResponse
func (a *SpendControlsBetaApiService) CreateSpendControlExecute(r ApiCreateSpendControlRequest) (*SpendControlResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SpendControlResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SpendControlsBetaApiService.CreateSpendControl")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/spend_controls"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.spendControl == nil {
		return localVarReturnValue, nil, reportError("spendControl is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.spendControl
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSpendControlRequest struct {
	ctx context.Context
	ApiService *SpendControlsBetaApiService
	spendControlId string
}

func (r ApiGetSpendControlRequest) Execute() (*SpendControlResponse, *http.Response, error) {
	return r.ApiService.GetSpendControlExecute(r)
}

/*
GetSpendControl Get Spend Control

Get spend control


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param spendControlId
 @return ApiGetSpendControlRequest
*/
func (a *SpendControlsBetaApiService) GetSpendControl(ctx context.Context, spendControlId string) ApiGetSpendControlRequest {
	return ApiGetSpendControlRequest{
		ApiService: a,
		ctx: ctx,
		spendControlId: spendControlId,
	}
}

// Execute executes the request
//  @return SpendControlResponse
func (a *SpendControlsBetaApiService) GetSpendControlExecute(r ApiGetSpendControlRequest) (*SpendControlResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SpendControlResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SpendControlsBetaApiService.GetSpendControl")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/spend_controls/{spend_control_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"spend_control_id"+"}", url.PathEscape(parameterToString(r.spendControlId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListSpendControlsRequest struct {
	ctx context.Context
	ApiService *SpendControlsBetaApiService
	accountId *string
	paymentType *PaymentType
	amountLimit *int64
	amountLimitGte *int32
	amountLimitLte *int32
	numRelatedAccounts *int32
	numRelatedAccountsGte *int32
	numRelatedAccountsLte *int32
	isActive *bool
	name *string
	direction *SpendControlDirection
	id *[]string
	sortBy *[]string
}

// return results matching this account ID
func (r ApiListSpendControlsRequest) AccountId(accountId string) ApiListSpendControlsRequest {
	r.accountId = &accountId
	return r
}

func (r ApiListSpendControlsRequest) PaymentType(paymentType PaymentType) ApiListSpendControlsRequest {
	r.paymentType = &paymentType
	return r
}

// return results matching this amount limit
func (r ApiListSpendControlsRequest) AmountLimit(amountLimit int64) ApiListSpendControlsRequest {
	r.amountLimit = &amountLimit
	return r
}

// return results with an amount limit greater than or equal to this
func (r ApiListSpendControlsRequest) AmountLimitGte(amountLimitGte int32) ApiListSpendControlsRequest {
	r.amountLimitGte = &amountLimitGte
	return r
}

// return results with an amount limit less than or equal to this
func (r ApiListSpendControlsRequest) AmountLimitLte(amountLimitLte int32) ApiListSpendControlsRequest {
	r.amountLimitLte = &amountLimitLte
	return r
}

// return results that are associated with this many accounts
func (r ApiListSpendControlsRequest) NumRelatedAccounts(numRelatedAccounts int32) ApiListSpendControlsRequest {
	r.numRelatedAccounts = &numRelatedAccounts
	return r
}

// return results that are associated with at least this many accounts
func (r ApiListSpendControlsRequest) NumRelatedAccountsGte(numRelatedAccountsGte int32) ApiListSpendControlsRequest {
	r.numRelatedAccountsGte = &numRelatedAccountsGte
	return r
}

// return results that are associated with at most this many accounts
func (r ApiListSpendControlsRequest) NumRelatedAccountsLte(numRelatedAccountsLte int32) ApiListSpendControlsRequest {
	r.numRelatedAccountsLte = &numRelatedAccountsLte
	return r
}

// return results that match this active status
func (r ApiListSpendControlsRequest) IsActive(isActive bool) ApiListSpendControlsRequest {
	r.isActive = &isActive
	return r
}

// return results that match this name
func (r ApiListSpendControlsRequest) Name(name string) ApiListSpendControlsRequest {
	r.name = &name
	return r
}

func (r ApiListSpendControlsRequest) Direction(direction SpendControlDirection) ApiListSpendControlsRequest {
	r.direction = &direction
	return r
}

// return results with these comma-separated IDs
func (r ApiListSpendControlsRequest) Id(id []string) ApiListSpendControlsRequest {
	r.id = &id
	return r
}

// Specifies the sort order for returned Spend Controls. 
func (r ApiListSpendControlsRequest) SortBy(sortBy []string) ApiListSpendControlsRequest {
	r.sortBy = &sortBy
	return r
}

func (r ApiListSpendControlsRequest) Execute() (*SpendControlResponseList, *http.Response, error) {
	return r.ApiService.ListSpendControlsExecute(r)
}

/*
ListSpendControls List Spend Controls

List spend controls


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListSpendControlsRequest
*/
func (a *SpendControlsBetaApiService) ListSpendControls(ctx context.Context) ApiListSpendControlsRequest {
	return ApiListSpendControlsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SpendControlResponseList
func (a *SpendControlsBetaApiService) ListSpendControlsExecute(r ApiListSpendControlsRequest) (*SpendControlResponseList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SpendControlResponseList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SpendControlsBetaApiService.ListSpendControls")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/spend_controls"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.accountId != nil {
		localVarQueryParams.Add("account_id", parameterToString(*r.accountId, ""))
	}
	if r.paymentType != nil {
		localVarQueryParams.Add("payment_type", parameterToString(*r.paymentType, ""))
	}
	if r.amountLimit != nil {
		localVarQueryParams.Add("amount_limit", parameterToString(*r.amountLimit, ""))
	}
	if r.amountLimitGte != nil {
		localVarQueryParams.Add("amount_limit_gte", parameterToString(*r.amountLimitGte, ""))
	}
	if r.amountLimitLte != nil {
		localVarQueryParams.Add("amount_limit_lte", parameterToString(*r.amountLimitLte, ""))
	}
	if r.numRelatedAccounts != nil {
		localVarQueryParams.Add("num_related_accounts", parameterToString(*r.numRelatedAccounts, ""))
	}
	if r.numRelatedAccountsGte != nil {
		localVarQueryParams.Add("num_related_accounts_gte", parameterToString(*r.numRelatedAccountsGte, ""))
	}
	if r.numRelatedAccountsLte != nil {
		localVarQueryParams.Add("num_related_accounts_lte", parameterToString(*r.numRelatedAccountsLte, ""))
	}
	if r.isActive != nil {
		localVarQueryParams.Add("is_active", parameterToString(*r.isActive, ""))
	}
	if r.name != nil {
		localVarQueryParams.Add("name", parameterToString(*r.name, ""))
	}
	if r.direction != nil {
		localVarQueryParams.Add("direction", parameterToString(*r.direction, ""))
	}
	if r.id != nil {
		localVarQueryParams.Add("id", parameterToString(*r.id, "csv"))
	}
	if r.sortBy != nil {
		localVarQueryParams.Add("sort_by", parameterToString(*r.sortBy, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateSpendControlRequest struct {
	ctx context.Context
	ApiService *SpendControlsBetaApiService
	spendControlId string
	spendControlUpdateRequest *SpendControlUpdateRequest
}

// Fields to update
func (r ApiUpdateSpendControlRequest) SpendControlUpdateRequest(spendControlUpdateRequest SpendControlUpdateRequest) ApiUpdateSpendControlRequest {
	r.spendControlUpdateRequest = &spendControlUpdateRequest
	return r
}

func (r ApiUpdateSpendControlRequest) Execute() (*SpendControlResponse, *http.Response, error) {
	return r.ApiService.UpdateSpendControlExecute(r)
}

/*
UpdateSpendControl Update Spend Control

Update spend control


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param spendControlId
 @return ApiUpdateSpendControlRequest
*/
func (a *SpendControlsBetaApiService) UpdateSpendControl(ctx context.Context, spendControlId string) ApiUpdateSpendControlRequest {
	return ApiUpdateSpendControlRequest{
		ApiService: a,
		ctx: ctx,
		spendControlId: spendControlId,
	}
}

// Execute executes the request
//  @return SpendControlResponse
func (a *SpendControlsBetaApiService) UpdateSpendControlExecute(r ApiUpdateSpendControlRequest) (*SpendControlResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SpendControlResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SpendControlsBetaApiService.UpdateSpendControl")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/spend_controls/{spend_control_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"spend_control_id"+"}", url.PathEscape(parameterToString(r.spendControlId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.spendControlUpdateRequest == nil {
		return localVarReturnValue, nil, reportError("spendControlUpdateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.spendControlUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
