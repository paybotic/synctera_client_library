/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.140.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// DisclosureType Describes the regulatory requirement that triggered the disclosure. One of the following: * `ACH_AUTHORIZATION` –     [US] The ACH Authorization & Agreement Disclosure serves as a method of disclosing     and obtaining consent from a consumer to conduct ACH and pre-authorized     electronic transactions to and from their account. Record of obtaining this     consent should be retained, in accordance with Reg E, for no less than 2 years     from the date the disclosure was made to the consumer.  * `CARDHOLDER_AGREEMENT` –     [US] The Cardholder Agreement is a legal document that details the terms of a card     agreement between either a consumer or a business, and the financial     institution that issues the card. The Agreement governs the use of the     account.      [CA] A legal document that details the terms of a customer’s use of a card and their relationship     with the issuing financial institution, Synctera (if applicable), and the Distributor     of the Card (the FinTech). The Agreement governs the customer’s use of the Card and the account,     including their rights and obligations.   * `CARD_DISCLOSURE` –      [CA] Part of the Cardholder Agreement, the Disclosure highlights prescribed terms and     conditions that apply to the customer's use of the Card. The Disclosure can be      incorporated into the Agreement itself, but is often shown separately to ensure     clear understanding of the regulated terms.  * `E_SIGN` –     [US] US law with rules around electronic agreements/documents/disclosures:     used to obtain consent from consumers to receive electronic communications     (agreements, disclosures, statements, etc) about their accounts.      [CA] In order for you to send customers regulatory notices, disclosures, and     documents electronically and to collect their consent electronically, customers     need to acknowledge an Electronic Consent form. This should happen first so the     disclosures that follow are acknowledged with the customer’s consent to do so electronically.  * `KYC_DATA_COLLECTION` –     [US] Document advising the customer that you will collect their personal information     (name, date of birth, tax ID, etc.)     and will be validating their information against external data/documentation.  * `PAD_AUTHORIZATION` –      [CA] You must record a customer's authorization prior to facilitating a pre-authorized     EFT debit transaction. This form records their authorization for you to facilitate      future EFTs from their account. This can be a sporadic or recurring PAD; if sporadic,      you need to confirm the customer's authorization prior to each future transaction.  * `PRIVACY_NOTICE` –     [US] Document that tells customers what is done with their non-public information,     who it is shared with, how is is secured,     and how they can opt out of it being shared beyond Synctera.      [CA] It is a requirement for you to disclose to customers how you collect, use,     disclose, and store their personal information, including how information is shared     with third parties like Synctera, what their rights are, and how they can withdraw     their consent. You must collect explicit consent from customers to this notice.   * `OWNER_CERTIFICATION` –     [US] Disclosure to certify that the beneficial owners of the business have been correctly entered.      [CA] Applicable to business customers only, this certifies that the beneficial owners of the business     have been correctly entered.  * `REG_CC` –     [US] US regulation that implements the Expedited Funds Availability Act:     describes standards for when a financial institution     makes funds available in a deposit account.  * `REG_DD` –     [US] US regulation that implements the Truth in Savings Act,     to inform customers about the terms and rules for a deposit account.  * `REG_E` –     [US] US regulation that implements the Electronic Funds Transfer Act:     covers liability for electronic transactions,     disputes for fraudulent or unrecognized electronic transactions,     and consent for electronic debits from a consumer's account.  * `TERMS_AND_CONDITIONS` –     [US] A detailed agreement between you and the consumer for the     structure, terms, fees, charges, rates of the product or service,     and the rules for the relationship between you and the consumer.  * `SC_ACCOUNT_AGREEMENT` –     [US] A detailed agreement between you and the consumer for the     structure and terms of service for smart card accounts.  * `SC_SECURITY_AGREEMENT` –     [US] A detailed agreement between you and the consumer for the     terms of service for smart card security account.  * `SC_AUTO_PAYMENT` -     [US] A detailed agreement between you and the consumer for the     structure and terms of service for smart card auto repayment.
type DisclosureType string

// List of disclosure_type
const (
	DISCLOSURETYPE_ACH_AUTHORIZATION     DisclosureType = "ACH_AUTHORIZATION"
	DISCLOSURETYPE_CARDHOLDER_AGREEMENT  DisclosureType = "CARDHOLDER_AGREEMENT"
	DISCLOSURETYPE_CARD_DISCLOSURE       DisclosureType = "CARD_DISCLOSURE"
	DISCLOSURETYPE_E_SIGN                DisclosureType = "E_SIGN"
	DISCLOSURETYPE_KYC_DATA_COLLECTION   DisclosureType = "KYC_DATA_COLLECTION"
	DISCLOSURETYPE_OWNER_CERTIFICATION   DisclosureType = "OWNER_CERTIFICATION"
	DISCLOSURETYPE_PAD_AUTHORIZATION     DisclosureType = "PAD_AUTHORIZATION"
	DISCLOSURETYPE_PRIVACY_NOTICE        DisclosureType = "PRIVACY_NOTICE"
	DISCLOSURETYPE_REG_CC                DisclosureType = "REG_CC"
	DISCLOSURETYPE_REG_DD                DisclosureType = "REG_DD"
	DISCLOSURETYPE_REG_E                 DisclosureType = "REG_E"
	DISCLOSURETYPE_SC_ACCOUNT_AGREEMENT  DisclosureType = "SC_ACCOUNT_AGREEMENT"
	DISCLOSURETYPE_SC_AUTO_PAYMENT       DisclosureType = "SC_AUTO_PAYMENT"
	DISCLOSURETYPE_SC_SECURITY_AGREEMENT DisclosureType = "SC_SECURITY_AGREEMENT"
	DISCLOSURETYPE_TERMS_AND_CONDITIONS  DisclosureType = "TERMS_AND_CONDITIONS"
)

// All allowed values of DisclosureType enum
var AllowedDisclosureTypeEnumValues = []DisclosureType{
	"ACH_AUTHORIZATION",
	"CARDHOLDER_AGREEMENT",
	"CARD_DISCLOSURE",
	"E_SIGN",
	"KYC_DATA_COLLECTION",
	"OWNER_CERTIFICATION",
	"PAD_AUTHORIZATION",
	"PRIVACY_NOTICE",
	"REG_CC",
	"REG_DD",
	"REG_E",
	"SC_ACCOUNT_AGREEMENT",
	"SC_AUTO_PAYMENT",
	"SC_SECURITY_AGREEMENT",
	"TERMS_AND_CONDITIONS",
}

func (v *DisclosureType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DisclosureType(value)
	for _, existing := range AllowedDisclosureTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DisclosureType", value)
}

// NewDisclosureTypeFromValue returns a pointer to a valid DisclosureType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDisclosureTypeFromValue(v string) (*DisclosureType, error) {
	ev := DisclosureType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DisclosureType: valid values are %v", v, AllowedDisclosureTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DisclosureType) IsValid() bool {
	for _, existing := range AllowedDisclosureTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to disclosure_type value
func (v DisclosureType) Ptr() *DisclosureType {
	return &v
}

type NullableDisclosureType struct {
	value *DisclosureType
	isSet bool
}

func (v NullableDisclosureType) Get() *DisclosureType {
	return v.value
}

func (v *NullableDisclosureType) Set(val *DisclosureType) {
	v.value = val
	v.isSet = true
}

func (v NullableDisclosureType) IsSet() bool {
	return v.isSet
}

func (v *NullableDisclosureType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDisclosureType(val *DisclosureType) *NullableDisclosureType {
	return &NullableDisclosureType{value: val, isSet: true}
}

func (v NullableDisclosureType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDisclosureType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
