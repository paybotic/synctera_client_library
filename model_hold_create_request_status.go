/*
Synctera API

<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p> 

API version: 0.32.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// HoldCreateRequestStatus The status of the hold.
type HoldCreateRequestStatus string

// List of hold_create_request_status
const (
	HOLDCREATEREQUESTSTATUS_PENDING HoldCreateRequestStatus = "PENDING"
	HOLDCREATEREQUESTSTATUS_DECLINED HoldCreateRequestStatus = "DECLINED"
)

// All allowed values of HoldCreateRequestStatus enum
var AllowedHoldCreateRequestStatusEnumValues = []HoldCreateRequestStatus{
	"PENDING",
	"DECLINED",
}

func (v *HoldCreateRequestStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := HoldCreateRequestStatus(value)
	for _, existing := range AllowedHoldCreateRequestStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid HoldCreateRequestStatus", value)
}

// NewHoldCreateRequestStatusFromValue returns a pointer to a valid HoldCreateRequestStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewHoldCreateRequestStatusFromValue(v string) (*HoldCreateRequestStatus, error) {
	ev := HoldCreateRequestStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for HoldCreateRequestStatus: valid values are %v", v, AllowedHoldCreateRequestStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v HoldCreateRequestStatus) IsValid() bool {
	for _, existing := range AllowedHoldCreateRequestStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to hold_create_request_status value
func (v HoldCreateRequestStatus) Ptr() *HoldCreateRequestStatus {
	return &v
}

type NullableHoldCreateRequestStatus struct {
	value *HoldCreateRequestStatus
	isSet bool
}

func (v NullableHoldCreateRequestStatus) Get() *HoldCreateRequestStatus {
	return v.value
}

func (v *NullableHoldCreateRequestStatus) Set(val *HoldCreateRequestStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableHoldCreateRequestStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableHoldCreateRequestStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHoldCreateRequestStatus(val *HoldCreateRequestStatus) *NullableHoldCreateRequestStatus {
	return &NullableHoldCreateRequestStatus{value: val, isSet: true}
}

func (v NullableHoldCreateRequestStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHoldCreateRequestStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

