/*
Synctera API

<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p> 

API version: 0.5.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// AchTransactionSubtypes The set of valid ACH transaction subtypes
type AchTransactionSubtypes string

// List of ach_transaction_subtypes
const (
	ACHTRANSACTIONSUBTYPES_INCOMING_CREDIT AchTransactionSubtypes = "INCOMING_CREDIT"
	ACHTRANSACTIONSUBTYPES_INCOMING_CREDIT_CONTESTED_RETURN AchTransactionSubtypes = "INCOMING_CREDIT_CONTESTED_RETURN"
	ACHTRANSACTIONSUBTYPES_INCOMING_CREDIT_DISHONORED_RETURN AchTransactionSubtypes = "INCOMING_CREDIT_DISHONORED_RETURN"
	ACHTRANSACTIONSUBTYPES_INCOMING_CREDIT_RETURN AchTransactionSubtypes = "INCOMING_CREDIT_RETURN"
	ACHTRANSACTIONSUBTYPES_INCOMING_CREDIT_REVERSAL AchTransactionSubtypes = "INCOMING_CREDIT_REVERSAL"
	ACHTRANSACTIONSUBTYPES_INCOMING_DEBIT AchTransactionSubtypes = "INCOMING_DEBIT"
	ACHTRANSACTIONSUBTYPES_INCOMING_DEBIT_CONTESTED_RETURN AchTransactionSubtypes = "INCOMING_DEBIT_CONTESTED_RETURN"
	ACHTRANSACTIONSUBTYPES_INCOMING_DEBIT_DISHONORED_RETURN AchTransactionSubtypes = "INCOMING_DEBIT_DISHONORED_RETURN"
	ACHTRANSACTIONSUBTYPES_INCOMING_DEBIT_DISHONORED_RETURN_REVERSAL AchTransactionSubtypes = "INCOMING_DEBIT_DISHONORED_RETURN_REVERSAL"
	ACHTRANSACTIONSUBTYPES_INCOMING_DEBIT_RETURN AchTransactionSubtypes = "INCOMING_DEBIT_RETURN"
	ACHTRANSACTIONSUBTYPES_INCOMING_DEBIT_RETURN_REVERSAL AchTransactionSubtypes = "INCOMING_DEBIT_RETURN_REVERSAL"
	ACHTRANSACTIONSUBTYPES_INCOMING_DEBIT_REVERSAL AchTransactionSubtypes = "INCOMING_DEBIT_REVERSAL"
	ACHTRANSACTIONSUBTYPES_OUTGOING_CREDIT AchTransactionSubtypes = "OUTGOING_CREDIT"
	ACHTRANSACTIONSUBTYPES_OUTGOING_CREDIT_CONTESTED_RETURN AchTransactionSubtypes = "OUTGOING_CREDIT_CONTESTED_RETURN"
	ACHTRANSACTIONSUBTYPES_OUTGOING_CREDIT_DISHONORED_RETURN AchTransactionSubtypes = "OUTGOING_CREDIT_DISHONORED_RETURN"
	ACHTRANSACTIONSUBTYPES_OUTGOING_CREDIT_RETURN AchTransactionSubtypes = "OUTGOING_CREDIT_RETURN"
	ACHTRANSACTIONSUBTYPES_OUTGOING_CREDIT_REVERSAL AchTransactionSubtypes = "OUTGOING_CREDIT_REVERSAL"
	ACHTRANSACTIONSUBTYPES_OUTGOING_DEBIT AchTransactionSubtypes = "OUTGOING_DEBIT"
	ACHTRANSACTIONSUBTYPES_OUTGOING_DEBIT_CONTESTED_RETURN AchTransactionSubtypes = "OUTGOING_DEBIT_CONTESTED_RETURN"
	ACHTRANSACTIONSUBTYPES_OUTGOING_DEBIT_DISHONORED_RETURN AchTransactionSubtypes = "OUTGOING_DEBIT_DISHONORED_RETURN"
	ACHTRANSACTIONSUBTYPES_OUTGOING_DEBIT_RETURN AchTransactionSubtypes = "OUTGOING_DEBIT_RETURN"
	ACHTRANSACTIONSUBTYPES_OUTGOING_DEBIT_REVERSAL AchTransactionSubtypes = "OUTGOING_DEBIT_REVERSAL"
	ACHTRANSACTIONSUBTYPES_PRENOTE AchTransactionSubtypes = "PRENOTE"
	ACHTRANSACTIONSUBTYPES_TEMP_HOLD AchTransactionSubtypes = "TEMP_HOLD"
)

// All allowed values of AchTransactionSubtypes enum
var AllowedAchTransactionSubtypesEnumValues = []AchTransactionSubtypes{
	"INCOMING_CREDIT",
	"INCOMING_CREDIT_CONTESTED_RETURN",
	"INCOMING_CREDIT_DISHONORED_RETURN",
	"INCOMING_CREDIT_RETURN",
	"INCOMING_CREDIT_REVERSAL",
	"INCOMING_DEBIT",
	"INCOMING_DEBIT_CONTESTED_RETURN",
	"INCOMING_DEBIT_DISHONORED_RETURN",
	"INCOMING_DEBIT_DISHONORED_RETURN_REVERSAL",
	"INCOMING_DEBIT_RETURN",
	"INCOMING_DEBIT_RETURN_REVERSAL",
	"INCOMING_DEBIT_REVERSAL",
	"OUTGOING_CREDIT",
	"OUTGOING_CREDIT_CONTESTED_RETURN",
	"OUTGOING_CREDIT_DISHONORED_RETURN",
	"OUTGOING_CREDIT_RETURN",
	"OUTGOING_CREDIT_REVERSAL",
	"OUTGOING_DEBIT",
	"OUTGOING_DEBIT_CONTESTED_RETURN",
	"OUTGOING_DEBIT_DISHONORED_RETURN",
	"OUTGOING_DEBIT_RETURN",
	"OUTGOING_DEBIT_REVERSAL",
	"PRENOTE",
	"TEMP_HOLD",
}

func (v *AchTransactionSubtypes) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AchTransactionSubtypes(value)
	for _, existing := range AllowedAchTransactionSubtypesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AchTransactionSubtypes", value)
}

// NewAchTransactionSubtypesFromValue returns a pointer to a valid AchTransactionSubtypes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAchTransactionSubtypesFromValue(v string) (*AchTransactionSubtypes, error) {
	ev := AchTransactionSubtypes(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AchTransactionSubtypes: valid values are %v", v, AllowedAchTransactionSubtypesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AchTransactionSubtypes) IsValid() bool {
	for _, existing := range AllowedAchTransactionSubtypesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ach_transaction_subtypes value
func (v AchTransactionSubtypes) Ptr() *AchTransactionSubtypes {
	return &v
}

type NullableAchTransactionSubtypes struct {
	value *AchTransactionSubtypes
	isSet bool
}

func (v NullableAchTransactionSubtypes) Get() *AchTransactionSubtypes {
	return v.value
}

func (v *NullableAchTransactionSubtypes) Set(val *AchTransactionSubtypes) {
	v.value = val
	v.isSet = true
}

func (v NullableAchTransactionSubtypes) IsSet() bool {
	return v.isSet
}

func (v *NullableAchTransactionSubtypes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAchTransactionSubtypes(val *AchTransactionSubtypes) *NullableAchTransactionSubtypes {
	return &NullableAchTransactionSubtypes{value: val, isSet: true}
}

func (v NullableAchTransactionSubtypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAchTransactionSubtypes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

