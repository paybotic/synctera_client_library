/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.140.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the EventTrigger type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventTrigger{}

// EventTrigger Webhook event object that will be returned after triggering the given event. Only id, type and event_time will have value.
type EventTrigger struct {
	// Json string of object associated with the event. For example, if your event is ACCOUNT.CREATED, You can refer to Acccount to parse the account event to obtain the ID, status etc.
	// Deprecated
	EventResource *string `json:"event_resource,omitempty"`
	// Json string of object associated with the event related to a resource change. This only contains those fields that have value changed on the event, and the field values are prior to the resource change event.
	// Deprecated
	EventResourceChangedFields *string `json:"event_resource_changed_fields,omitempty"`
	// Timestamp of the current event raised
	EventTime *time.Time `json:"event_time,omitempty"`
	// Unique event ID of the webhook request. Use event endpoints to get more event summary data
	Id *string `json:"id,omitempty"`
	// Metadata that stored in the webhook subscription
	// Deprecated
	Metadata *string `json:"metadata,omitempty"`
	// Response history of the webhook request
	// Deprecated
	ResponseHistory []ResponseHistoryItem `json:"response_history,omitempty"`
	// Current event status. Failing event will keep retry until it is purged.
	// Deprecated
	Status *string            `json:"status,omitempty"`
	Type   *EventTypeExplicit `json:"type,omitempty"`
	// URL that the current event will be sent to
	// Deprecated
	Url *string `json:"url,omitempty"`
	// Webhook the current event belongs to
	// Deprecated
	WebhookId *string `json:"webhook_id,omitempty"`
}

// NewEventTrigger instantiates a new EventTrigger object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventTrigger() *EventTrigger {
	this := EventTrigger{}
	return &this
}

// NewEventTriggerWithDefaults instantiates a new EventTrigger object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventTriggerWithDefaults() *EventTrigger {
	this := EventTrigger{}
	return &this
}

// GetEventResource returns the EventResource field value if set, zero value otherwise.
// Deprecated
func (o *EventTrigger) GetEventResource() string {
	if o == nil || IsNil(o.EventResource) {
		var ret string
		return ret
	}
	return *o.EventResource
}

// GetEventResourceOk returns a tuple with the EventResource field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *EventTrigger) GetEventResourceOk() (*string, bool) {
	if o == nil || IsNil(o.EventResource) {
		return nil, false
	}
	return o.EventResource, true
}

// HasEventResource returns a boolean if a field has been set.
func (o *EventTrigger) HasEventResource() bool {
	if o != nil && !IsNil(o.EventResource) {
		return true
	}

	return false
}

// SetEventResource gets a reference to the given string and assigns it to the EventResource field.
// Deprecated
func (o *EventTrigger) SetEventResource(v string) {
	o.EventResource = &v
}

// GetEventResourceChangedFields returns the EventResourceChangedFields field value if set, zero value otherwise.
// Deprecated
func (o *EventTrigger) GetEventResourceChangedFields() string {
	if o == nil || IsNil(o.EventResourceChangedFields) {
		var ret string
		return ret
	}
	return *o.EventResourceChangedFields
}

// GetEventResourceChangedFieldsOk returns a tuple with the EventResourceChangedFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *EventTrigger) GetEventResourceChangedFieldsOk() (*string, bool) {
	if o == nil || IsNil(o.EventResourceChangedFields) {
		return nil, false
	}
	return o.EventResourceChangedFields, true
}

// HasEventResourceChangedFields returns a boolean if a field has been set.
func (o *EventTrigger) HasEventResourceChangedFields() bool {
	if o != nil && !IsNil(o.EventResourceChangedFields) {
		return true
	}

	return false
}

// SetEventResourceChangedFields gets a reference to the given string and assigns it to the EventResourceChangedFields field.
// Deprecated
func (o *EventTrigger) SetEventResourceChangedFields(v string) {
	o.EventResourceChangedFields = &v
}

// GetEventTime returns the EventTime field value if set, zero value otherwise.
func (o *EventTrigger) GetEventTime() time.Time {
	if o == nil || IsNil(o.EventTime) {
		var ret time.Time
		return ret
	}
	return *o.EventTime
}

// GetEventTimeOk returns a tuple with the EventTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventTrigger) GetEventTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EventTime) {
		return nil, false
	}
	return o.EventTime, true
}

// HasEventTime returns a boolean if a field has been set.
func (o *EventTrigger) HasEventTime() bool {
	if o != nil && !IsNil(o.EventTime) {
		return true
	}

	return false
}

// SetEventTime gets a reference to the given time.Time and assigns it to the EventTime field.
func (o *EventTrigger) SetEventTime(v time.Time) {
	o.EventTime = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *EventTrigger) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventTrigger) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *EventTrigger) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *EventTrigger) SetId(v string) {
	o.Id = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
// Deprecated
func (o *EventTrigger) GetMetadata() string {
	if o == nil || IsNil(o.Metadata) {
		var ret string
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *EventTrigger) GetMetadataOk() (*string, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *EventTrigger) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given string and assigns it to the Metadata field.
// Deprecated
func (o *EventTrigger) SetMetadata(v string) {
	o.Metadata = &v
}

// GetResponseHistory returns the ResponseHistory field value if set, zero value otherwise.
// Deprecated
func (o *EventTrigger) GetResponseHistory() []ResponseHistoryItem {
	if o == nil || IsNil(o.ResponseHistory) {
		var ret []ResponseHistoryItem
		return ret
	}
	return o.ResponseHistory
}

// GetResponseHistoryOk returns a tuple with the ResponseHistory field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *EventTrigger) GetResponseHistoryOk() ([]ResponseHistoryItem, bool) {
	if o == nil || IsNil(o.ResponseHistory) {
		return nil, false
	}
	return o.ResponseHistory, true
}

// HasResponseHistory returns a boolean if a field has been set.
func (o *EventTrigger) HasResponseHistory() bool {
	if o != nil && !IsNil(o.ResponseHistory) {
		return true
	}

	return false
}

// SetResponseHistory gets a reference to the given []ResponseHistoryItem and assigns it to the ResponseHistory field.
// Deprecated
func (o *EventTrigger) SetResponseHistory(v []ResponseHistoryItem) {
	o.ResponseHistory = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
// Deprecated
func (o *EventTrigger) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *EventTrigger) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *EventTrigger) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
// Deprecated
func (o *EventTrigger) SetStatus(v string) {
	o.Status = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *EventTrigger) GetType() EventTypeExplicit {
	if o == nil || IsNil(o.Type) {
		var ret EventTypeExplicit
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventTrigger) GetTypeOk() (*EventTypeExplicit, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *EventTrigger) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given EventTypeExplicit and assigns it to the Type field.
func (o *EventTrigger) SetType(v EventTypeExplicit) {
	o.Type = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
// Deprecated
func (o *EventTrigger) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *EventTrigger) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *EventTrigger) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
// Deprecated
func (o *EventTrigger) SetUrl(v string) {
	o.Url = &v
}

// GetWebhookId returns the WebhookId field value if set, zero value otherwise.
// Deprecated
func (o *EventTrigger) GetWebhookId() string {
	if o == nil || IsNil(o.WebhookId) {
		var ret string
		return ret
	}
	return *o.WebhookId
}

// GetWebhookIdOk returns a tuple with the WebhookId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *EventTrigger) GetWebhookIdOk() (*string, bool) {
	if o == nil || IsNil(o.WebhookId) {
		return nil, false
	}
	return o.WebhookId, true
}

// HasWebhookId returns a boolean if a field has been set.
func (o *EventTrigger) HasWebhookId() bool {
	if o != nil && !IsNil(o.WebhookId) {
		return true
	}

	return false
}

// SetWebhookId gets a reference to the given string and assigns it to the WebhookId field.
// Deprecated
func (o *EventTrigger) SetWebhookId(v string) {
	o.WebhookId = &v
}

func (o EventTrigger) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventTrigger) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EventResource) {
		toSerialize["event_resource"] = o.EventResource
	}
	if !IsNil(o.EventResourceChangedFields) {
		toSerialize["event_resource_changed_fields"] = o.EventResourceChangedFields
	}
	if !IsNil(o.EventTime) {
		toSerialize["event_time"] = o.EventTime
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.ResponseHistory) {
		toSerialize["response_history"] = o.ResponseHistory
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.WebhookId) {
		toSerialize["webhook_id"] = o.WebhookId
	}
	return toSerialize, nil
}

type NullableEventTrigger struct {
	value *EventTrigger
	isSet bool
}

func (v NullableEventTrigger) Get() *EventTrigger {
	return v.value
}

func (v *NullableEventTrigger) Set(val *EventTrigger) {
	v.value = val
	v.isSet = true
}

func (v NullableEventTrigger) IsSet() bool {
	return v.isSet
}

func (v *NullableEventTrigger) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventTrigger(val *EventTrigger) *NullableEventTrigger {
	return &NullableEventTrigger{value: val, isSet: true}
}

func (v NullableEventTrigger) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventTrigger) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
