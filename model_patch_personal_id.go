/*
Synctera API

<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.69.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PatchPersonalId type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PatchPersonalId{}

// PatchPersonalId struct for PatchPersonalId
type PatchPersonalId struct {
	// The updated ISO 3166 Alpha-2 country code for the country that issued the personal identifier. The country code cannot be modified for personal identifier types that have an implicit country, e.g. SSN. 
	CountryCode *string `json:"country_code,omitempty"`
	IdType PersonalIdType `json:"id_type"`
	// The updated personal identifier
	Identifier *string `json:"identifier,omitempty"`
	// The id of the tenant containing the resource. This is relevant for Fintechs that have multiple workspaces. 
	Tenant *string `json:"tenant,omitempty"`
}

// NewPatchPersonalId instantiates a new PatchPersonalId object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchPersonalId(idType PersonalIdType) *PatchPersonalId {
	this := PatchPersonalId{}
	this.IdType = idType
	return &this
}

// NewPatchPersonalIdWithDefaults instantiates a new PatchPersonalId object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchPersonalIdWithDefaults() *PatchPersonalId {
	this := PatchPersonalId{}
	return &this
}

// GetCountryCode returns the CountryCode field value if set, zero value otherwise.
func (o *PatchPersonalId) GetCountryCode() string {
	if o == nil || IsNil(o.CountryCode) {
		var ret string
		return ret
	}
	return *o.CountryCode
}

// GetCountryCodeOk returns a tuple with the CountryCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPersonalId) GetCountryCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CountryCode) {
		return nil, false
	}
	return o.CountryCode, true
}

// HasCountryCode returns a boolean if a field has been set.
func (o *PatchPersonalId) HasCountryCode() bool {
	if o != nil && !IsNil(o.CountryCode) {
		return true
	}

	return false
}

// SetCountryCode gets a reference to the given string and assigns it to the CountryCode field.
func (o *PatchPersonalId) SetCountryCode(v string) {
	o.CountryCode = &v
}

// GetIdType returns the IdType field value
func (o *PatchPersonalId) GetIdType() PersonalIdType {
	if o == nil {
		var ret PersonalIdType
		return ret
	}

	return o.IdType
}

// GetIdTypeOk returns a tuple with the IdType field value
// and a boolean to check if the value has been set.
func (o *PatchPersonalId) GetIdTypeOk() (*PersonalIdType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IdType, true
}

// SetIdType sets field value
func (o *PatchPersonalId) SetIdType(v PersonalIdType) {
	o.IdType = v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *PatchPersonalId) GetIdentifier() string {
	if o == nil || IsNil(o.Identifier) {
		var ret string
		return ret
	}
	return *o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPersonalId) GetIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *PatchPersonalId) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given string and assigns it to the Identifier field.
func (o *PatchPersonalId) SetIdentifier(v string) {
	o.Identifier = &v
}

// GetTenant returns the Tenant field value if set, zero value otherwise.
func (o *PatchPersonalId) GetTenant() string {
	if o == nil || IsNil(o.Tenant) {
		var ret string
		return ret
	}
	return *o.Tenant
}

// GetTenantOk returns a tuple with the Tenant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchPersonalId) GetTenantOk() (*string, bool) {
	if o == nil || IsNil(o.Tenant) {
		return nil, false
	}
	return o.Tenant, true
}

// HasTenant returns a boolean if a field has been set.
func (o *PatchPersonalId) HasTenant() bool {
	if o != nil && !IsNil(o.Tenant) {
		return true
	}

	return false
}

// SetTenant gets a reference to the given string and assigns it to the Tenant field.
func (o *PatchPersonalId) SetTenant(v string) {
	o.Tenant = &v
}

func (o PatchPersonalId) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchPersonalId) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CountryCode) {
		toSerialize["country_code"] = o.CountryCode
	}
	toSerialize["id_type"] = o.IdType
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.Tenant) {
		toSerialize["tenant"] = o.Tenant
	}
	return toSerialize, nil
}

type NullablePatchPersonalId struct {
	value *PatchPersonalId
	isSet bool
}

func (v NullablePatchPersonalId) Get() *PatchPersonalId {
	return v.value
}

func (v *NullablePatchPersonalId) Set(val *PatchPersonalId) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchPersonalId) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchPersonalId) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchPersonalId(val *PatchPersonalId) *NullablePatchPersonalId {
	return &NullablePatchPersonalId{value: val, isSet: true}
}

func (v NullablePatchPersonalId) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchPersonalId) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


