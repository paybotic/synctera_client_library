/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.150.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the MinimumPaymentTypeRateOrAmount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MinimumPaymentTypeRateOrAmount{}

// MinimumPaymentTypeRateOrAmount struct for MinimumPaymentTypeRateOrAmount
type MinimumPaymentTypeRateOrAmount struct {
	// The minimum amount to charge as a minimum payment, in cents. For example, to set the minimum to $30, set this value to 3000. Note: despite setting this value, the minimum payment will never be greater than the statement balance.
	MinAmount int64 `json:"min_amount"`
	// The percentage of the balance to use, in basis points. For example, to set 12.5% of the balance, set this value to 1250.
	Rate int32              `json:"rate"`
	Type MinimumPaymentType `json:"type"`
}

type _MinimumPaymentTypeRateOrAmount MinimumPaymentTypeRateOrAmount

// NewMinimumPaymentTypeRateOrAmount instantiates a new MinimumPaymentTypeRateOrAmount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMinimumPaymentTypeRateOrAmount(minAmount int64, rate int32, type_ MinimumPaymentType) *MinimumPaymentTypeRateOrAmount {
	this := MinimumPaymentTypeRateOrAmount{}
	this.MinAmount = minAmount
	this.Rate = rate
	this.Type = type_
	return &this
}

// NewMinimumPaymentTypeRateOrAmountWithDefaults instantiates a new MinimumPaymentTypeRateOrAmount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMinimumPaymentTypeRateOrAmountWithDefaults() *MinimumPaymentTypeRateOrAmount {
	this := MinimumPaymentTypeRateOrAmount{}
	return &this
}

// GetMinAmount returns the MinAmount field value
func (o *MinimumPaymentTypeRateOrAmount) GetMinAmount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.MinAmount
}

// GetMinAmountOk returns a tuple with the MinAmount field value
// and a boolean to check if the value has been set.
func (o *MinimumPaymentTypeRateOrAmount) GetMinAmountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MinAmount, true
}

// SetMinAmount sets field value
func (o *MinimumPaymentTypeRateOrAmount) SetMinAmount(v int64) {
	o.MinAmount = v
}

// GetRate returns the Rate field value
func (o *MinimumPaymentTypeRateOrAmount) GetRate() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Rate
}

// GetRateOk returns a tuple with the Rate field value
// and a boolean to check if the value has been set.
func (o *MinimumPaymentTypeRateOrAmount) GetRateOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Rate, true
}

// SetRate sets field value
func (o *MinimumPaymentTypeRateOrAmount) SetRate(v int32) {
	o.Rate = v
}

// GetType returns the Type field value
func (o *MinimumPaymentTypeRateOrAmount) GetType() MinimumPaymentType {
	if o == nil {
		var ret MinimumPaymentType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *MinimumPaymentTypeRateOrAmount) GetTypeOk() (*MinimumPaymentType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *MinimumPaymentTypeRateOrAmount) SetType(v MinimumPaymentType) {
	o.Type = v
}

func (o MinimumPaymentTypeRateOrAmount) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MinimumPaymentTypeRateOrAmount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["min_amount"] = o.MinAmount
	toSerialize["rate"] = o.Rate
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *MinimumPaymentTypeRateOrAmount) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"min_amount",
		"rate",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMinimumPaymentTypeRateOrAmount := _MinimumPaymentTypeRateOrAmount{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMinimumPaymentTypeRateOrAmount)

	if err != nil {
		return err
	}

	*o = MinimumPaymentTypeRateOrAmount(varMinimumPaymentTypeRateOrAmount)

	return err
}

type NullableMinimumPaymentTypeRateOrAmount struct {
	value *MinimumPaymentTypeRateOrAmount
	isSet bool
}

func (v NullableMinimumPaymentTypeRateOrAmount) Get() *MinimumPaymentTypeRateOrAmount {
	return v.value
}

func (v *NullableMinimumPaymentTypeRateOrAmount) Set(val *MinimumPaymentTypeRateOrAmount) {
	v.value = val
	v.isSet = true
}

func (v NullableMinimumPaymentTypeRateOrAmount) IsSet() bool {
	return v.isSet
}

func (v *NullableMinimumPaymentTypeRateOrAmount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMinimumPaymentTypeRateOrAmount(val *MinimumPaymentTypeRateOrAmount) *NullableMinimumPaymentTypeRateOrAmount {
	return &NullableMinimumPaymentTypeRateOrAmount{value: val, isSet: true}
}

func (v NullableMinimumPaymentTypeRateOrAmount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMinimumPaymentTypeRateOrAmount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
