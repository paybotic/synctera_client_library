/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.153.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"encoding/json"
)

// checks if the CardStatusPendingReasons type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CardStatusPendingReasons{}

// CardStatusPendingReasons reasons why the card status is PENDING
type CardStatusPendingReasons struct {
	// The card is to be shipping as part of a bulk shipment but that bulk shipment has not yet been released.
	IsWaitingForBulkShipment *bool `json:"is_waiting_for_bulk_shipment,omitempty"`
	// The card has a custom image and either that image hasn't yet been uploaded and approved or the card has not yet been processed by the periodic daily custom card image processing task.
	IsWaitingForImage *bool `json:"is_waiting_for_image,omitempty"`
	// The card requires a PIN to be set before it can be issued (refer to the pin_issuance_policy of the related card product). The PIN has not yet been set and not enough time has passed to use a random PIN (if applicable).
	IsWaitingForPin *bool `json:"is_waiting_for_pin,omitempty"`
}

// NewCardStatusPendingReasons instantiates a new CardStatusPendingReasons object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCardStatusPendingReasons() *CardStatusPendingReasons {
	this := CardStatusPendingReasons{}
	return &this
}

// NewCardStatusPendingReasonsWithDefaults instantiates a new CardStatusPendingReasons object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCardStatusPendingReasonsWithDefaults() *CardStatusPendingReasons {
	this := CardStatusPendingReasons{}
	return &this
}

// GetIsWaitingForBulkShipment returns the IsWaitingForBulkShipment field value if set, zero value otherwise.
func (o *CardStatusPendingReasons) GetIsWaitingForBulkShipment() bool {
	if o == nil || IsNil(o.IsWaitingForBulkShipment) {
		var ret bool
		return ret
	}
	return *o.IsWaitingForBulkShipment
}

// GetIsWaitingForBulkShipmentOk returns a tuple with the IsWaitingForBulkShipment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardStatusPendingReasons) GetIsWaitingForBulkShipmentOk() (*bool, bool) {
	if o == nil || IsNil(o.IsWaitingForBulkShipment) {
		return nil, false
	}
	return o.IsWaitingForBulkShipment, true
}

// HasIsWaitingForBulkShipment returns a boolean if a field has been set.
func (o *CardStatusPendingReasons) HasIsWaitingForBulkShipment() bool {
	if o != nil && !IsNil(o.IsWaitingForBulkShipment) {
		return true
	}

	return false
}

// SetIsWaitingForBulkShipment gets a reference to the given bool and assigns it to the IsWaitingForBulkShipment field.
func (o *CardStatusPendingReasons) SetIsWaitingForBulkShipment(v bool) {
	o.IsWaitingForBulkShipment = &v
}

// GetIsWaitingForImage returns the IsWaitingForImage field value if set, zero value otherwise.
func (o *CardStatusPendingReasons) GetIsWaitingForImage() bool {
	if o == nil || IsNil(o.IsWaitingForImage) {
		var ret bool
		return ret
	}
	return *o.IsWaitingForImage
}

// GetIsWaitingForImageOk returns a tuple with the IsWaitingForImage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardStatusPendingReasons) GetIsWaitingForImageOk() (*bool, bool) {
	if o == nil || IsNil(o.IsWaitingForImage) {
		return nil, false
	}
	return o.IsWaitingForImage, true
}

// HasIsWaitingForImage returns a boolean if a field has been set.
func (o *CardStatusPendingReasons) HasIsWaitingForImage() bool {
	if o != nil && !IsNil(o.IsWaitingForImage) {
		return true
	}

	return false
}

// SetIsWaitingForImage gets a reference to the given bool and assigns it to the IsWaitingForImage field.
func (o *CardStatusPendingReasons) SetIsWaitingForImage(v bool) {
	o.IsWaitingForImage = &v
}

// GetIsWaitingForPin returns the IsWaitingForPin field value if set, zero value otherwise.
func (o *CardStatusPendingReasons) GetIsWaitingForPin() bool {
	if o == nil || IsNil(o.IsWaitingForPin) {
		var ret bool
		return ret
	}
	return *o.IsWaitingForPin
}

// GetIsWaitingForPinOk returns a tuple with the IsWaitingForPin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardStatusPendingReasons) GetIsWaitingForPinOk() (*bool, bool) {
	if o == nil || IsNil(o.IsWaitingForPin) {
		return nil, false
	}
	return o.IsWaitingForPin, true
}

// HasIsWaitingForPin returns a boolean if a field has been set.
func (o *CardStatusPendingReasons) HasIsWaitingForPin() bool {
	if o != nil && !IsNil(o.IsWaitingForPin) {
		return true
	}

	return false
}

// SetIsWaitingForPin gets a reference to the given bool and assigns it to the IsWaitingForPin field.
func (o *CardStatusPendingReasons) SetIsWaitingForPin(v bool) {
	o.IsWaitingForPin = &v
}

func (o CardStatusPendingReasons) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CardStatusPendingReasons) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IsWaitingForBulkShipment) {
		toSerialize["is_waiting_for_bulk_shipment"] = o.IsWaitingForBulkShipment
	}
	if !IsNil(o.IsWaitingForImage) {
		toSerialize["is_waiting_for_image"] = o.IsWaitingForImage
	}
	if !IsNil(o.IsWaitingForPin) {
		toSerialize["is_waiting_for_pin"] = o.IsWaitingForPin
	}
	return toSerialize, nil
}

type NullableCardStatusPendingReasons struct {
	value *CardStatusPendingReasons
	isSet bool
}

func (v NullableCardStatusPendingReasons) Get() *CardStatusPendingReasons {
	return v.value
}

func (v *NullableCardStatusPendingReasons) Set(val *CardStatusPendingReasons) {
	v.value = val
	v.isSet = true
}

func (v NullableCardStatusPendingReasons) IsSet() bool {
	return v.isSet
}

func (v *NullableCardStatusPendingReasons) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCardStatusPendingReasons(val *CardStatusPendingReasons) *NullableCardStatusPendingReasons {
	return &NullableCardStatusPendingReasons{value: val, isSet: true}
}

func (v NullableCardStatusPendingReasons) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCardStatusPendingReasons) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
