/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.153.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"encoding/json"
	"fmt"
)

// checks if the SpendControlTimeRangeType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SpendControlTimeRangeType{}

// SpendControlTimeRangeType struct for SpendControlTimeRangeType
type SpendControlTimeRangeType struct {
	TimeRangeType        string `json:"time_range_type"`
	AdditionalProperties map[string]interface{}
}

type _SpendControlTimeRangeType SpendControlTimeRangeType

// NewSpendControlTimeRangeType instantiates a new SpendControlTimeRangeType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpendControlTimeRangeType(timeRangeType string) *SpendControlTimeRangeType {
	this := SpendControlTimeRangeType{}
	this.TimeRangeType = timeRangeType
	return &this
}

// NewSpendControlTimeRangeTypeWithDefaults instantiates a new SpendControlTimeRangeType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpendControlTimeRangeTypeWithDefaults() *SpendControlTimeRangeType {
	this := SpendControlTimeRangeType{}
	return &this
}

// GetTimeRangeType returns the TimeRangeType field value
func (o *SpendControlTimeRangeType) GetTimeRangeType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TimeRangeType
}

// GetTimeRangeTypeOk returns a tuple with the TimeRangeType field value
// and a boolean to check if the value has been set.
func (o *SpendControlTimeRangeType) GetTimeRangeTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimeRangeType, true
}

// SetTimeRangeType sets field value
func (o *SpendControlTimeRangeType) SetTimeRangeType(v string) {
	o.TimeRangeType = v
}

func (o SpendControlTimeRangeType) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SpendControlTimeRangeType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["time_range_type"] = o.TimeRangeType

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SpendControlTimeRangeType) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"time_range_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSpendControlTimeRangeType := _SpendControlTimeRangeType{}

	err = json.Unmarshal(data, &varSpendControlTimeRangeType)

	if err != nil {
		return err
	}

	*o = SpendControlTimeRangeType(varSpendControlTimeRangeType)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "time_range_type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSpendControlTimeRangeType struct {
	value *SpendControlTimeRangeType
	isSet bool
}

func (v NullableSpendControlTimeRangeType) Get() *SpendControlTimeRangeType {
	return v.value
}

func (v *NullableSpendControlTimeRangeType) Set(val *SpendControlTimeRangeType) {
	v.value = val
	v.isSet = true
}

func (v NullableSpendControlTimeRangeType) IsSet() bool {
	return v.isSet
}

func (v *NullableSpendControlTimeRangeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpendControlTimeRangeType(val *SpendControlTimeRangeType) *NullableSpendControlTimeRangeType {
	return &NullableSpendControlTimeRangeType{value: val, isSet: true}
}

func (v NullableSpendControlTimeRangeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpendControlTimeRangeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
