/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.153.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"encoding/json"
	"fmt"
)

// checks if the AddressPost type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddressPost{}

// AddressPost struct for AddressPost
type AddressPost struct {
	// Street address line 1
	AddressLine1 string `json:"address_line_1"`
	// Street address line 2
	AddressLine2 *string `json:"address_line_2,omitempty"`
	// City
	City string `json:"city"`
	// ISO-3166-1 Alpha-2 country code
	CountryCode string `json:"country_code" validate:"regexp=^[A-Z]{2}$"`
	// Whether the address is active or not
	IsActive *bool `json:"is_active,omitempty"`
	// Indicates whether an address is a registered agent. Omitted if the address is not a registered agent.
	IsRegisteredAgent *bool `json:"is_registered_agent,omitempty"`
	// A nickname for the address. This is used to identify the address in the UI.
	Nickname *string `json:"nickname,omitempty"`
	// Postal code. For US, formats of 12345 or 12345-1234 are accepted. For CA, formats of A1A 1A1 or A1A1A1 (regardless of case) are accepted, and will be converted to A1A 1A1 format.
	PostalCode *string `json:"postal_code,omitempty"`
	// State, region, province, or prefecture. This is the ISO-3166-2 subdivision code, excluding the country prefix. For example, TX for Texas USA or TAM for Tamaulipas Mexico. Its length varies by country, e.g. 2 characters for US, 3 for MX.
	State string `json:"state"`
	// Specifies the address type.
	AddressType string `json:"address_type"`
	// The identifier for the business customer associated with address.
	BusinessId *string `json:"business_id,omitempty"`
	// The identifier for the personal customer associated with address.
	CustomerId           *string `json:"customer_id,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AddressPost AddressPost

// NewAddressPost instantiates a new AddressPost object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddressPost(addressLine1 string, city string, countryCode string, state string, addressType string) *AddressPost {
	this := AddressPost{}
	this.AddressLine1 = addressLine1
	this.City = city
	this.CountryCode = countryCode
	this.State = state
	this.AddressType = addressType
	return &this
}

// NewAddressPostWithDefaults instantiates a new AddressPost object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddressPostWithDefaults() *AddressPost {
	this := AddressPost{}
	return &this
}

// GetAddressLine1 returns the AddressLine1 field value
func (o *AddressPost) GetAddressLine1() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AddressLine1
}

// GetAddressLine1Ok returns a tuple with the AddressLine1 field value
// and a boolean to check if the value has been set.
func (o *AddressPost) GetAddressLine1Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AddressLine1, true
}

// SetAddressLine1 sets field value
func (o *AddressPost) SetAddressLine1(v string) {
	o.AddressLine1 = v
}

// GetAddressLine2 returns the AddressLine2 field value if set, zero value otherwise.
func (o *AddressPost) GetAddressLine2() string {
	if o == nil || IsNil(o.AddressLine2) {
		var ret string
		return ret
	}
	return *o.AddressLine2
}

// GetAddressLine2Ok returns a tuple with the AddressLine2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressPost) GetAddressLine2Ok() (*string, bool) {
	if o == nil || IsNil(o.AddressLine2) {
		return nil, false
	}
	return o.AddressLine2, true
}

// HasAddressLine2 returns a boolean if a field has been set.
func (o *AddressPost) HasAddressLine2() bool {
	if o != nil && !IsNil(o.AddressLine2) {
		return true
	}

	return false
}

// SetAddressLine2 gets a reference to the given string and assigns it to the AddressLine2 field.
func (o *AddressPost) SetAddressLine2(v string) {
	o.AddressLine2 = &v
}

// GetCity returns the City field value
func (o *AddressPost) GetCity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.City
}

// GetCityOk returns a tuple with the City field value
// and a boolean to check if the value has been set.
func (o *AddressPost) GetCityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.City, true
}

// SetCity sets field value
func (o *AddressPost) SetCity(v string) {
	o.City = v
}

// GetCountryCode returns the CountryCode field value
func (o *AddressPost) GetCountryCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CountryCode
}

// GetCountryCodeOk returns a tuple with the CountryCode field value
// and a boolean to check if the value has been set.
func (o *AddressPost) GetCountryCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CountryCode, true
}

// SetCountryCode sets field value
func (o *AddressPost) SetCountryCode(v string) {
	o.CountryCode = v
}

// GetIsActive returns the IsActive field value if set, zero value otherwise.
func (o *AddressPost) GetIsActive() bool {
	if o == nil || IsNil(o.IsActive) {
		var ret bool
		return ret
	}
	return *o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressPost) GetIsActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.IsActive) {
		return nil, false
	}
	return o.IsActive, true
}

// HasIsActive returns a boolean if a field has been set.
func (o *AddressPost) HasIsActive() bool {
	if o != nil && !IsNil(o.IsActive) {
		return true
	}

	return false
}

// SetIsActive gets a reference to the given bool and assigns it to the IsActive field.
func (o *AddressPost) SetIsActive(v bool) {
	o.IsActive = &v
}

// GetIsRegisteredAgent returns the IsRegisteredAgent field value if set, zero value otherwise.
func (o *AddressPost) GetIsRegisteredAgent() bool {
	if o == nil || IsNil(o.IsRegisteredAgent) {
		var ret bool
		return ret
	}
	return *o.IsRegisteredAgent
}

// GetIsRegisteredAgentOk returns a tuple with the IsRegisteredAgent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressPost) GetIsRegisteredAgentOk() (*bool, bool) {
	if o == nil || IsNil(o.IsRegisteredAgent) {
		return nil, false
	}
	return o.IsRegisteredAgent, true
}

// HasIsRegisteredAgent returns a boolean if a field has been set.
func (o *AddressPost) HasIsRegisteredAgent() bool {
	if o != nil && !IsNil(o.IsRegisteredAgent) {
		return true
	}

	return false
}

// SetIsRegisteredAgent gets a reference to the given bool and assigns it to the IsRegisteredAgent field.
func (o *AddressPost) SetIsRegisteredAgent(v bool) {
	o.IsRegisteredAgent = &v
}

// GetNickname returns the Nickname field value if set, zero value otherwise.
func (o *AddressPost) GetNickname() string {
	if o == nil || IsNil(o.Nickname) {
		var ret string
		return ret
	}
	return *o.Nickname
}

// GetNicknameOk returns a tuple with the Nickname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressPost) GetNicknameOk() (*string, bool) {
	if o == nil || IsNil(o.Nickname) {
		return nil, false
	}
	return o.Nickname, true
}

// HasNickname returns a boolean if a field has been set.
func (o *AddressPost) HasNickname() bool {
	if o != nil && !IsNil(o.Nickname) {
		return true
	}

	return false
}

// SetNickname gets a reference to the given string and assigns it to the Nickname field.
func (o *AddressPost) SetNickname(v string) {
	o.Nickname = &v
}

// GetPostalCode returns the PostalCode field value if set, zero value otherwise.
func (o *AddressPost) GetPostalCode() string {
	if o == nil || IsNil(o.PostalCode) {
		var ret string
		return ret
	}
	return *o.PostalCode
}

// GetPostalCodeOk returns a tuple with the PostalCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressPost) GetPostalCodeOk() (*string, bool) {
	if o == nil || IsNil(o.PostalCode) {
		return nil, false
	}
	return o.PostalCode, true
}

// HasPostalCode returns a boolean if a field has been set.
func (o *AddressPost) HasPostalCode() bool {
	if o != nil && !IsNil(o.PostalCode) {
		return true
	}

	return false
}

// SetPostalCode gets a reference to the given string and assigns it to the PostalCode field.
func (o *AddressPost) SetPostalCode(v string) {
	o.PostalCode = &v
}

// GetState returns the State field value
func (o *AddressPost) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *AddressPost) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *AddressPost) SetState(v string) {
	o.State = v
}

// GetAddressType returns the AddressType field value
func (o *AddressPost) GetAddressType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AddressType
}

// GetAddressTypeOk returns a tuple with the AddressType field value
// and a boolean to check if the value has been set.
func (o *AddressPost) GetAddressTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AddressType, true
}

// SetAddressType sets field value
func (o *AddressPost) SetAddressType(v string) {
	o.AddressType = v
}

// GetBusinessId returns the BusinessId field value if set, zero value otherwise.
func (o *AddressPost) GetBusinessId() string {
	if o == nil || IsNil(o.BusinessId) {
		var ret string
		return ret
	}
	return *o.BusinessId
}

// GetBusinessIdOk returns a tuple with the BusinessId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressPost) GetBusinessIdOk() (*string, bool) {
	if o == nil || IsNil(o.BusinessId) {
		return nil, false
	}
	return o.BusinessId, true
}

// HasBusinessId returns a boolean if a field has been set.
func (o *AddressPost) HasBusinessId() bool {
	if o != nil && !IsNil(o.BusinessId) {
		return true
	}

	return false
}

// SetBusinessId gets a reference to the given string and assigns it to the BusinessId field.
func (o *AddressPost) SetBusinessId(v string) {
	o.BusinessId = &v
}

// GetCustomerId returns the CustomerId field value if set, zero value otherwise.
func (o *AddressPost) GetCustomerId() string {
	if o == nil || IsNil(o.CustomerId) {
		var ret string
		return ret
	}
	return *o.CustomerId
}

// GetCustomerIdOk returns a tuple with the CustomerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressPost) GetCustomerIdOk() (*string, bool) {
	if o == nil || IsNil(o.CustomerId) {
		return nil, false
	}
	return o.CustomerId, true
}

// HasCustomerId returns a boolean if a field has been set.
func (o *AddressPost) HasCustomerId() bool {
	if o != nil && !IsNil(o.CustomerId) {
		return true
	}

	return false
}

// SetCustomerId gets a reference to the given string and assigns it to the CustomerId field.
func (o *AddressPost) SetCustomerId(v string) {
	o.CustomerId = &v
}

func (o AddressPost) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddressPost) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["address_line_1"] = o.AddressLine1
	if !IsNil(o.AddressLine2) {
		toSerialize["address_line_2"] = o.AddressLine2
	}
	toSerialize["city"] = o.City
	toSerialize["country_code"] = o.CountryCode
	if !IsNil(o.IsActive) {
		toSerialize["is_active"] = o.IsActive
	}
	if !IsNil(o.IsRegisteredAgent) {
		toSerialize["is_registered_agent"] = o.IsRegisteredAgent
	}
	if !IsNil(o.Nickname) {
		toSerialize["nickname"] = o.Nickname
	}
	if !IsNil(o.PostalCode) {
		toSerialize["postal_code"] = o.PostalCode
	}
	toSerialize["state"] = o.State
	toSerialize["address_type"] = o.AddressType
	if !IsNil(o.BusinessId) {
		toSerialize["business_id"] = o.BusinessId
	}
	if !IsNil(o.CustomerId) {
		toSerialize["customer_id"] = o.CustomerId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AddressPost) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"address_line_1",
		"city",
		"country_code",
		"state",
		"address_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAddressPost := _AddressPost{}

	err = json.Unmarshal(data, &varAddressPost)

	if err != nil {
		return err
	}

	*o = AddressPost(varAddressPost)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "address_line_1")
		delete(additionalProperties, "address_line_2")
		delete(additionalProperties, "city")
		delete(additionalProperties, "country_code")
		delete(additionalProperties, "is_active")
		delete(additionalProperties, "is_registered_agent")
		delete(additionalProperties, "nickname")
		delete(additionalProperties, "postal_code")
		delete(additionalProperties, "state")
		delete(additionalProperties, "address_type")
		delete(additionalProperties, "business_id")
		delete(additionalProperties, "customer_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAddressPost struct {
	value *AddressPost
	isSet bool
}

func (v NullableAddressPost) Get() *AddressPost {
	return v.value
}

func (v *NullableAddressPost) Set(val *AddressPost) {
	v.value = val
	v.isSet = true
}

func (v NullableAddressPost) IsSet() bool {
	return v.isSet
}

func (v *NullableAddressPost) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddressPost(val *AddressPost) *NullableAddressPost {
	return &NullableAddressPost{value: val, isSet: true}
}

func (v NullableAddressPost) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddressPost) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
