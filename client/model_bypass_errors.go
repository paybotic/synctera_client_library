/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.150.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"encoding/json"
	"fmt"
)

// BypassErrors the model 'BypassErrors'
type BypassErrors string

// List of bypass_errors
const (
	BYPASSERRORS_IMPROPER_ACCOUNT_CUSTOMER_RELATIONSHIP BypassErrors = "IMPROPER_ACCOUNT_CUSTOMER_RELATIONSHIP"
	BYPASSERRORS_IMPROPER_ACCOUNT_STATUS                BypassErrors = "IMPROPER_ACCOUNT_STATUS"
	BYPASSERRORS_IMPROPER_CUSTOMER_STATUS               BypassErrors = "IMPROPER_CUSTOMER_STATUS"
	BYPASSERRORS_IMPROPER_CUSTOMER_VERIFICATION_STATUS  BypassErrors = "IMPROPER_CUSTOMER_VERIFICATION_STATUS"
	BYPASSERRORS_IMPROPER_PARTNER_LIFECYCLE_STATUS      BypassErrors = "IMPROPER_PARTNER_LIFECYCLE_STATUS"
	BYPASSERRORS_IMPROPER_PARTNER_VERIFICATION_STATUS   BypassErrors = "IMPROPER_PARTNER_VERIFICATION_STATUS"
	BYPASSERRORS_PARTNER_RAIL_NOT_ENABLED               BypassErrors = "PARTNER_RAIL_NOT_ENABLED"
	BYPASSERRORS_SUSPECTED_FRAUD                        BypassErrors = "SUSPECTED_FRAUD"
)

// All allowed values of BypassErrors enum
var AllowedBypassErrorsEnumValues = []BypassErrors{
	"IMPROPER_ACCOUNT_CUSTOMER_RELATIONSHIP",
	"IMPROPER_ACCOUNT_STATUS",
	"IMPROPER_CUSTOMER_STATUS",
	"IMPROPER_CUSTOMER_VERIFICATION_STATUS",
	"IMPROPER_PARTNER_LIFECYCLE_STATUS",
	"IMPROPER_PARTNER_VERIFICATION_STATUS",
	"PARTNER_RAIL_NOT_ENABLED",
	"SUSPECTED_FRAUD",
}

func (v *BypassErrors) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BypassErrors(value)
	for _, existing := range AllowedBypassErrorsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BypassErrors", value)
}

// NewBypassErrorsFromValue returns a pointer to a valid BypassErrors
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBypassErrorsFromValue(v string) (*BypassErrors, error) {
	ev := BypassErrors(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BypassErrors: valid values are %v", v, AllowedBypassErrorsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BypassErrors) IsValid() bool {
	for _, existing := range AllowedBypassErrorsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to bypass_errors value
func (v BypassErrors) Ptr() *BypassErrors {
	return &v
}

type NullableBypassErrors struct {
	value *BypassErrors
	isSet bool
}

func (v NullableBypassErrors) Get() *BypassErrors {
	return v.value
}

func (v *NullableBypassErrors) Set(val *BypassErrors) {
	v.value = val
	v.isSet = true
}

func (v NullableBypassErrors) IsSet() bool {
	return v.isSet
}

func (v *NullableBypassErrors) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBypassErrors(val *BypassErrors) *NullableBypassErrors {
	return &NullableBypassErrors{value: val, isSet: true}
}

func (v NullableBypassErrors) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBypassErrors) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
