/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.150.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the GatewayPost type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GatewayPost{}

// GatewayPost Gateway Config Create Request
type GatewayPost struct {
	// Optional parameter that allows to configure custom http headers for the Auth request to Gateway URL if needed
	CustomHeaders *map[string][]string `json:"custom_headers,omitempty"`
	// Setting this parameter to 'true' allows create Gateway Config as inactive ( can be useful as a preparation step)
	Disabled *bool `json:"disabled,omitempty"`
	// Optional parameter that configures the maximum amount of time in milliseconds that we will wait for the response from Gateway URL request. Default value is used if empty
	MaxWaitMs *int32 `json:"max_wait_ms,omitempty"`
	// The URL address which will be used for the ACH in Auth Flow requests to get authorization from the fintech to process the transaction
	Url string `json:"url"`
}

type _GatewayPost GatewayPost

// NewGatewayPost instantiates a new GatewayPost object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGatewayPost(url string) *GatewayPost {
	this := GatewayPost{}
	var disabled bool = false
	this.Disabled = &disabled
	var maxWaitMs int32 = 1500
	this.MaxWaitMs = &maxWaitMs
	this.Url = url
	return &this
}

// NewGatewayPostWithDefaults instantiates a new GatewayPost object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGatewayPostWithDefaults() *GatewayPost {
	this := GatewayPost{}
	var disabled bool = false
	this.Disabled = &disabled
	var maxWaitMs int32 = 1500
	this.MaxWaitMs = &maxWaitMs
	return &this
}

// GetCustomHeaders returns the CustomHeaders field value if set, zero value otherwise.
func (o *GatewayPost) GetCustomHeaders() map[string][]string {
	if o == nil || IsNil(o.CustomHeaders) {
		var ret map[string][]string
		return ret
	}
	return *o.CustomHeaders
}

// GetCustomHeadersOk returns a tuple with the CustomHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GatewayPost) GetCustomHeadersOk() (*map[string][]string, bool) {
	if o == nil || IsNil(o.CustomHeaders) {
		return nil, false
	}
	return o.CustomHeaders, true
}

// HasCustomHeaders returns a boolean if a field has been set.
func (o *GatewayPost) HasCustomHeaders() bool {
	if o != nil && !IsNil(o.CustomHeaders) {
		return true
	}

	return false
}

// SetCustomHeaders gets a reference to the given map[string][]string and assigns it to the CustomHeaders field.
func (o *GatewayPost) SetCustomHeaders(v map[string][]string) {
	o.CustomHeaders = &v
}

// GetDisabled returns the Disabled field value if set, zero value otherwise.
func (o *GatewayPost) GetDisabled() bool {
	if o == nil || IsNil(o.Disabled) {
		var ret bool
		return ret
	}
	return *o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GatewayPost) GetDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Disabled) {
		return nil, false
	}
	return o.Disabled, true
}

// HasDisabled returns a boolean if a field has been set.
func (o *GatewayPost) HasDisabled() bool {
	if o != nil && !IsNil(o.Disabled) {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given bool and assigns it to the Disabled field.
func (o *GatewayPost) SetDisabled(v bool) {
	o.Disabled = &v
}

// GetMaxWaitMs returns the MaxWaitMs field value if set, zero value otherwise.
func (o *GatewayPost) GetMaxWaitMs() int32 {
	if o == nil || IsNil(o.MaxWaitMs) {
		var ret int32
		return ret
	}
	return *o.MaxWaitMs
}

// GetMaxWaitMsOk returns a tuple with the MaxWaitMs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GatewayPost) GetMaxWaitMsOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxWaitMs) {
		return nil, false
	}
	return o.MaxWaitMs, true
}

// HasMaxWaitMs returns a boolean if a field has been set.
func (o *GatewayPost) HasMaxWaitMs() bool {
	if o != nil && !IsNil(o.MaxWaitMs) {
		return true
	}

	return false
}

// SetMaxWaitMs gets a reference to the given int32 and assigns it to the MaxWaitMs field.
func (o *GatewayPost) SetMaxWaitMs(v int32) {
	o.MaxWaitMs = &v
}

// GetUrl returns the Url field value
func (o *GatewayPost) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *GatewayPost) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *GatewayPost) SetUrl(v string) {
	o.Url = v
}

func (o GatewayPost) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GatewayPost) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CustomHeaders) {
		toSerialize["custom_headers"] = o.CustomHeaders
	}
	if !IsNil(o.Disabled) {
		toSerialize["disabled"] = o.Disabled
	}
	if !IsNil(o.MaxWaitMs) {
		toSerialize["max_wait_ms"] = o.MaxWaitMs
	}
	toSerialize["url"] = o.Url
	return toSerialize, nil
}

func (o *GatewayPost) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGatewayPost := _GatewayPost{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGatewayPost)

	if err != nil {
		return err
	}

	*o = GatewayPost(varGatewayPost)

	return err
}

type NullableGatewayPost struct {
	value *GatewayPost
	isSet bool
}

func (v NullableGatewayPost) Get() *GatewayPost {
	return v.value
}

func (v *NullableGatewayPost) Set(val *GatewayPost) {
	v.value = val
	v.isSet = true
}

func (v NullableGatewayPost) IsSet() bool {
	return v.isSet
}

func (v *NullableGatewayPost) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGatewayPost(val *GatewayPost) *NullableGatewayPost {
	return &NullableGatewayPost{value: val, isSet: true}
}

func (v NullableGatewayPost) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGatewayPost) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
