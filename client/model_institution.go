/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.153.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"encoding/json"
	"fmt"
)

// checks if the Institution type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Institution{}

// Institution struct for Institution
type Institution struct {
	// The countries of operation of the financial institution
	CountryCodes []string `json:"country_codes"`
	// Base64 encoded representation of the institution's logo, returned as a base64 encoded 152x152 PNG
	Logo *string `json:"logo,omitempty"`
	// The name of the financial institution
	Name string `json:"name"`
	// Array of routing identifier objects
	RoutingIdentifiers   []RoutingIdentifier `json:"routing_identifiers"`
	AdditionalProperties map[string]interface{}
}

type _Institution Institution

// NewInstitution instantiates a new Institution object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstitution(countryCodes []string, name string, routingIdentifiers []RoutingIdentifier) *Institution {
	this := Institution{}
	this.CountryCodes = countryCodes
	this.Name = name
	this.RoutingIdentifiers = routingIdentifiers
	return &this
}

// NewInstitutionWithDefaults instantiates a new Institution object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstitutionWithDefaults() *Institution {
	this := Institution{}
	return &this
}

// GetCountryCodes returns the CountryCodes field value
func (o *Institution) GetCountryCodes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.CountryCodes
}

// GetCountryCodesOk returns a tuple with the CountryCodes field value
// and a boolean to check if the value has been set.
func (o *Institution) GetCountryCodesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CountryCodes, true
}

// SetCountryCodes sets field value
func (o *Institution) SetCountryCodes(v []string) {
	o.CountryCodes = v
}

// GetLogo returns the Logo field value if set, zero value otherwise.
func (o *Institution) GetLogo() string {
	if o == nil || IsNil(o.Logo) {
		var ret string
		return ret
	}
	return *o.Logo
}

// GetLogoOk returns a tuple with the Logo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Institution) GetLogoOk() (*string, bool) {
	if o == nil || IsNil(o.Logo) {
		return nil, false
	}
	return o.Logo, true
}

// HasLogo returns a boolean if a field has been set.
func (o *Institution) HasLogo() bool {
	if o != nil && !IsNil(o.Logo) {
		return true
	}

	return false
}

// SetLogo gets a reference to the given string and assigns it to the Logo field.
func (o *Institution) SetLogo(v string) {
	o.Logo = &v
}

// GetName returns the Name field value
func (o *Institution) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Institution) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Institution) SetName(v string) {
	o.Name = v
}

// GetRoutingIdentifiers returns the RoutingIdentifiers field value
func (o *Institution) GetRoutingIdentifiers() []RoutingIdentifier {
	if o == nil {
		var ret []RoutingIdentifier
		return ret
	}

	return o.RoutingIdentifiers
}

// GetRoutingIdentifiersOk returns a tuple with the RoutingIdentifiers field value
// and a boolean to check if the value has been set.
func (o *Institution) GetRoutingIdentifiersOk() ([]RoutingIdentifier, bool) {
	if o == nil {
		return nil, false
	}
	return o.RoutingIdentifiers, true
}

// SetRoutingIdentifiers sets field value
func (o *Institution) SetRoutingIdentifiers(v []RoutingIdentifier) {
	o.RoutingIdentifiers = v
}

func (o Institution) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Institution) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["country_codes"] = o.CountryCodes
	if !IsNil(o.Logo) {
		toSerialize["logo"] = o.Logo
	}
	toSerialize["name"] = o.Name
	toSerialize["routing_identifiers"] = o.RoutingIdentifiers

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Institution) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"country_codes",
		"name",
		"routing_identifiers",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInstitution := _Institution{}

	err = json.Unmarshal(data, &varInstitution)

	if err != nil {
		return err
	}

	*o = Institution(varInstitution)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "country_codes")
		delete(additionalProperties, "logo")
		delete(additionalProperties, "name")
		delete(additionalProperties, "routing_identifiers")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInstitution struct {
	value *Institution
	isSet bool
}

func (v NullableInstitution) Get() *Institution {
	return v.value
}

func (v *NullableInstitution) Set(val *Institution) {
	v.value = val
	v.isSet = true
}

func (v NullableInstitution) IsSet() bool {
	return v.isSet
}

func (v *NullableInstitution) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstitution(val *Institution) *NullableInstitution {
	return &NullableInstitution{value: val, isSet: true}
}

func (v NullableInstitution) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstitution) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
