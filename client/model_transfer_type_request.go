/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.153.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"encoding/json"
	"fmt"
)

// TransferTypeRequest Type of operation for transfer.  Type | Description --- | --- PUSH | Push fund to the external card from the account_id PULL | Pull funds from the external card to the account_id
type TransferTypeRequest string

// List of transfer_type_request
const (
	TRANSFERTYPEREQUEST_PULL TransferTypeRequest = "PULL"
	TRANSFERTYPEREQUEST_PUSH TransferTypeRequest = "PUSH"
)

// All allowed values of TransferTypeRequest enum
var AllowedTransferTypeRequestEnumValues = []TransferTypeRequest{
	"PULL",
	"PUSH",
}

func (v *TransferTypeRequest) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TransferTypeRequest(value)
	for _, existing := range AllowedTransferTypeRequestEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TransferTypeRequest", value)
}

// NewTransferTypeRequestFromValue returns a pointer to a valid TransferTypeRequest
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTransferTypeRequestFromValue(v string) (*TransferTypeRequest, error) {
	ev := TransferTypeRequest(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TransferTypeRequest: valid values are %v", v, AllowedTransferTypeRequestEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TransferTypeRequest) IsValid() bool {
	for _, existing := range AllowedTransferTypeRequestEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to transfer_type_request value
func (v TransferTypeRequest) Ptr() *TransferTypeRequest {
	return &v
}

type NullableTransferTypeRequest struct {
	value *TransferTypeRequest
	isSet bool
}

func (v NullableTransferTypeRequest) Get() *TransferTypeRequest {
	return v.value
}

func (v *NullableTransferTypeRequest) Set(val *TransferTypeRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTransferTypeRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTransferTypeRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransferTypeRequest(val *TransferTypeRequest) *NullableTransferTypeRequest {
	return &NullableTransferTypeRequest{value: val, isSet: true}
}

func (v NullableTransferTypeRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransferTypeRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
