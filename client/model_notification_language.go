/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.150.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"encoding/json"
	"fmt"
)

// NotificationLanguage Specifies the language for 3D Secure and digital wallet token notifications sent to cardholders. By default, notifications are sent in English. Limited list of ISO 639-3 languages codes are supported.
type NotificationLanguage string

// List of notification_language
const (
	NOTIFICATIONLANGUAGE_CES NotificationLanguage = "ces"
	NOTIFICATIONLANGUAGE_DEU NotificationLanguage = "deu"
	NOTIFICATIONLANGUAGE_ELL NotificationLanguage = "ell"
	NOTIFICATIONLANGUAGE_ENG NotificationLanguage = "eng"
	NOTIFICATIONLANGUAGE_FRA NotificationLanguage = "fra"
	NOTIFICATIONLANGUAGE_ITA NotificationLanguage = "ita"
	NOTIFICATIONLANGUAGE_NLD NotificationLanguage = "nld"
	NOTIFICATIONLANGUAGE_POL NotificationLanguage = "pol"
	NOTIFICATIONLANGUAGE_POR NotificationLanguage = "por"
	NOTIFICATIONLANGUAGE_RON NotificationLanguage = "ron"
	NOTIFICATIONLANGUAGE_SPA NotificationLanguage = "spa"
)

// All allowed values of NotificationLanguage enum
var AllowedNotificationLanguageEnumValues = []NotificationLanguage{
	"ces",
	"deu",
	"ell",
	"eng",
	"fra",
	"ita",
	"nld",
	"pol",
	"por",
	"ron",
	"spa",
}

func (v *NotificationLanguage) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NotificationLanguage(value)
	for _, existing := range AllowedNotificationLanguageEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NotificationLanguage", value)
}

// NewNotificationLanguageFromValue returns a pointer to a valid NotificationLanguage
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNotificationLanguageFromValue(v string) (*NotificationLanguage, error) {
	ev := NotificationLanguage(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NotificationLanguage: valid values are %v", v, AllowedNotificationLanguageEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NotificationLanguage) IsValid() bool {
	for _, existing := range AllowedNotificationLanguageEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to notification_language value
func (v NotificationLanguage) Ptr() *NotificationLanguage {
	return &v
}

type NullableNotificationLanguage struct {
	value *NotificationLanguage
	isSet bool
}

func (v NullableNotificationLanguage) Get() *NotificationLanguage {
	return v.value
}

func (v *NullableNotificationLanguage) Set(val *NotificationLanguage) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationLanguage) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationLanguage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationLanguage(val *NotificationLanguage) *NullableNotificationLanguage {
	return &NullableNotificationLanguage{value: val, isSet: true}
}

func (v NullableNotificationLanguage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationLanguage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
