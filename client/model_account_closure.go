/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.150.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the AccountClosure type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccountClosure{}

// AccountClosure Account closing details when attempting to close an account and status is being changed to `IN_CLOSING`.
type AccountClosure struct {
	// Cases associated with the account closure
	Cases []ModelCase `json:"cases,omitempty"`
	// For an ACH payment, this is the external account UUID. For an internal payment, this is the account UUID.
	DestinationId NullableString `json:"destination_id"`
	// Payment method for the final payment if the account being closed carries a balance. A BANK_DRAFT payment method is issued by the sponsor bank to the account holder.
	PaymentMethod NullableString       `json:"payment_method"`
	Reason        AccountClosureReason `json:"reason"`
	// Additional details about the reason for closing the account
	ReasonDetails       string                             `json:"reason_details"`
	ValidationResponses []AccountClosureValidationResponse `json:"validation_responses,omitempty"`
}

type _AccountClosure AccountClosure

// NewAccountClosure instantiates a new AccountClosure object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountClosure(destinationId NullableString, paymentMethod NullableString, reason AccountClosureReason, reasonDetails string) *AccountClosure {
	this := AccountClosure{}
	this.DestinationId = destinationId
	this.PaymentMethod = paymentMethod
	this.Reason = reason
	this.ReasonDetails = reasonDetails
	return &this
}

// NewAccountClosureWithDefaults instantiates a new AccountClosure object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountClosureWithDefaults() *AccountClosure {
	this := AccountClosure{}
	return &this
}

// GetCases returns the Cases field value if set, zero value otherwise.
func (o *AccountClosure) GetCases() []ModelCase {
	if o == nil || IsNil(o.Cases) {
		var ret []ModelCase
		return ret
	}
	return o.Cases
}

// GetCasesOk returns a tuple with the Cases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountClosure) GetCasesOk() ([]ModelCase, bool) {
	if o == nil || IsNil(o.Cases) {
		return nil, false
	}
	return o.Cases, true
}

// HasCases returns a boolean if a field has been set.
func (o *AccountClosure) HasCases() bool {
	if o != nil && !IsNil(o.Cases) {
		return true
	}

	return false
}

// SetCases gets a reference to the given []ModelCase and assigns it to the Cases field.
func (o *AccountClosure) SetCases(v []ModelCase) {
	o.Cases = v
}

// GetDestinationId returns the DestinationId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *AccountClosure) GetDestinationId() string {
	if o == nil || o.DestinationId.Get() == nil {
		var ret string
		return ret
	}

	return *o.DestinationId.Get()
}

// GetDestinationIdOk returns a tuple with the DestinationId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AccountClosure) GetDestinationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DestinationId.Get(), o.DestinationId.IsSet()
}

// SetDestinationId sets field value
func (o *AccountClosure) SetDestinationId(v string) {
	o.DestinationId.Set(&v)
}

// GetPaymentMethod returns the PaymentMethod field value
// If the value is explicit nil, the zero value for string will be returned
func (o *AccountClosure) GetPaymentMethod() string {
	if o == nil || o.PaymentMethod.Get() == nil {
		var ret string
		return ret
	}

	return *o.PaymentMethod.Get()
}

// GetPaymentMethodOk returns a tuple with the PaymentMethod field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AccountClosure) GetPaymentMethodOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PaymentMethod.Get(), o.PaymentMethod.IsSet()
}

// SetPaymentMethod sets field value
func (o *AccountClosure) SetPaymentMethod(v string) {
	o.PaymentMethod.Set(&v)
}

// GetReason returns the Reason field value
func (o *AccountClosure) GetReason() AccountClosureReason {
	if o == nil {
		var ret AccountClosureReason
		return ret
	}

	return o.Reason
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
func (o *AccountClosure) GetReasonOk() (*AccountClosureReason, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reason, true
}

// SetReason sets field value
func (o *AccountClosure) SetReason(v AccountClosureReason) {
	o.Reason = v
}

// GetReasonDetails returns the ReasonDetails field value
func (o *AccountClosure) GetReasonDetails() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReasonDetails
}

// GetReasonDetailsOk returns a tuple with the ReasonDetails field value
// and a boolean to check if the value has been set.
func (o *AccountClosure) GetReasonDetailsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReasonDetails, true
}

// SetReasonDetails sets field value
func (o *AccountClosure) SetReasonDetails(v string) {
	o.ReasonDetails = v
}

// GetValidationResponses returns the ValidationResponses field value if set, zero value otherwise.
func (o *AccountClosure) GetValidationResponses() []AccountClosureValidationResponse {
	if o == nil || IsNil(o.ValidationResponses) {
		var ret []AccountClosureValidationResponse
		return ret
	}
	return o.ValidationResponses
}

// GetValidationResponsesOk returns a tuple with the ValidationResponses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountClosure) GetValidationResponsesOk() ([]AccountClosureValidationResponse, bool) {
	if o == nil || IsNil(o.ValidationResponses) {
		return nil, false
	}
	return o.ValidationResponses, true
}

// HasValidationResponses returns a boolean if a field has been set.
func (o *AccountClosure) HasValidationResponses() bool {
	if o != nil && !IsNil(o.ValidationResponses) {
		return true
	}

	return false
}

// SetValidationResponses gets a reference to the given []AccountClosureValidationResponse and assigns it to the ValidationResponses field.
func (o *AccountClosure) SetValidationResponses(v []AccountClosureValidationResponse) {
	o.ValidationResponses = v
}

func (o AccountClosure) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccountClosure) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cases) {
		toSerialize["cases"] = o.Cases
	}
	toSerialize["destination_id"] = o.DestinationId.Get()
	toSerialize["payment_method"] = o.PaymentMethod.Get()
	toSerialize["reason"] = o.Reason
	toSerialize["reason_details"] = o.ReasonDetails
	if !IsNil(o.ValidationResponses) {
		toSerialize["validation_responses"] = o.ValidationResponses
	}
	return toSerialize, nil
}

func (o *AccountClosure) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"destination_id",
		"payment_method",
		"reason",
		"reason_details",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAccountClosure := _AccountClosure{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAccountClosure)

	if err != nil {
		return err
	}

	*o = AccountClosure(varAccountClosure)

	return err
}

type NullableAccountClosure struct {
	value *AccountClosure
	isSet bool
}

func (v NullableAccountClosure) Get() *AccountClosure {
	return v.value
}

func (v *NullableAccountClosure) Set(val *AccountClosure) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountClosure) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountClosure) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountClosure(val *AccountClosure) *NullableAccountClosure {
	return &NullableAccountClosure{value: val, isSet: true}
}

func (v NullableAccountClosure) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountClosure) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
