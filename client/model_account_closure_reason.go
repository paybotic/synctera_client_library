/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.153.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"encoding/json"
	"fmt"
)

// AccountClosureReason The enumerated reason for closing the account. This is a required field when closing an account; the given value will be validated against the caller's permissions.
type AccountClosureReason string

// List of account_closure_reason
const (
	ACCOUNTCLOSUREREASON_BANK_REQUEST_FRAUD                               AccountClosureReason = "BANK_REQUEST_FRAUD"
	ACCOUNTCLOSUREREASON_BANK_REQUEST_INACTIVITY                          AccountClosureReason = "BANK_REQUEST_INACTIVITY"
	ACCOUNTCLOSUREREASON_BANK_REQUEST_REDEEMED_OR_REINSTATED_REPOSSESSION AccountClosureReason = "BANK_REQUEST_REDEEMED_OR_REINSTATED_REPOSSESSION"
	ACCOUNTCLOSUREREASON_BANK_REQUEST_REGULATORY_REASONS                  AccountClosureReason = "BANK_REQUEST_REGULATORY_REASONS"
	ACCOUNTCLOSUREREASON_CUSTOMER_REQUEST_CREDIT_CARD_LOST_OR_STOLEN      AccountClosureReason = "CUSTOMER_REQUEST_CREDIT_CARD_LOST_OR_STOLEN"
	ACCOUNTCLOSUREREASON_CUSTOMER_REQUEST_REFINANCE                       AccountClosureReason = "CUSTOMER_REQUEST_REFINANCE"
	ACCOUNTCLOSUREREASON_CUSTOMER_REQUEST_TRANSFER                        AccountClosureReason = "CUSTOMER_REQUEST_TRANSFER"
	ACCOUNTCLOSUREREASON_CUSTOMER_REQUEST_VOLUNTARILY_SURRENDERED         AccountClosureReason = "CUSTOMER_REQUEST_VOLUNTARILY_SURRENDERED"
	ACCOUNTCLOSUREREASON_PROGRAM_SHUT_DOWN_BANK                           AccountClosureReason = "PROGRAM_SHUT_DOWN_BANK"
	ACCOUNTCLOSUREREASON_PROGRAM_SHUT_DOWN_FINTECH                        AccountClosureReason = "PROGRAM_SHUT_DOWN_FINTECH"
)

// All allowed values of AccountClosureReason enum
var AllowedAccountClosureReasonEnumValues = []AccountClosureReason{
	"BANK_REQUEST_FRAUD",
	"BANK_REQUEST_INACTIVITY",
	"BANK_REQUEST_REDEEMED_OR_REINSTATED_REPOSSESSION",
	"BANK_REQUEST_REGULATORY_REASONS",
	"CUSTOMER_REQUEST_CREDIT_CARD_LOST_OR_STOLEN",
	"CUSTOMER_REQUEST_REFINANCE",
	"CUSTOMER_REQUEST_TRANSFER",
	"CUSTOMER_REQUEST_VOLUNTARILY_SURRENDERED",
	"PROGRAM_SHUT_DOWN_BANK",
	"PROGRAM_SHUT_DOWN_FINTECH",
}

func (v *AccountClosureReason) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AccountClosureReason(value)
	for _, existing := range AllowedAccountClosureReasonEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AccountClosureReason", value)
}

// NewAccountClosureReasonFromValue returns a pointer to a valid AccountClosureReason
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAccountClosureReasonFromValue(v string) (*AccountClosureReason, error) {
	ev := AccountClosureReason(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AccountClosureReason: valid values are %v", v, AllowedAccountClosureReasonEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AccountClosureReason) IsValid() bool {
	for _, existing := range AllowedAccountClosureReasonEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to account_closure_reason value
func (v AccountClosureReason) Ptr() *AccountClosureReason {
	return &v
}

type NullableAccountClosureReason struct {
	value *AccountClosureReason
	isSet bool
}

func (v NullableAccountClosureReason) Get() *AccountClosureReason {
	return v.value
}

func (v *NullableAccountClosureReason) Set(val *AccountClosureReason) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountClosureReason) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountClosureReason) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountClosureReason(val *AccountClosureReason) *NullableAccountClosureReason {
	return &NullableAccountClosureReason{value: val, isSet: true}
}

func (v NullableAccountClosureReason) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountClosureReason) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
