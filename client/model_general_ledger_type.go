/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.153.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"encoding/json"
	"fmt"
)

// GeneralLedgerType The type of general ledger account. This is required when creating a general ledger account.
type GeneralLedgerType string

// List of general_ledger_type
const (
	GENERALLEDGERTYPE_ACH_SETTLEMENT                GeneralLedgerType = "ACH_SETTLEMENT"
	GENERALLEDGERTYPE_ACH_SUSPENSE                  GeneralLedgerType = "ACH_SUSPENSE"
	GENERALLEDGERTYPE_ALLOCATED_SUSPENSE            GeneralLedgerType = "ALLOCATED_SUSPENSE"
	GENERALLEDGERTYPE_BANK_DRAFT                    GeneralLedgerType = "BANK_DRAFT"
	GENERALLEDGERTYPE_BILLING_EXPENSE               GeneralLedgerType = "BILLING_EXPENSE"
	GENERALLEDGERTYPE_BILLING_REVENUE               GeneralLedgerType = "BILLING_REVENUE"
	GENERALLEDGERTYPE_CARD_AFT_PREFUNDING           GeneralLedgerType = "CARD_AFT_PREFUNDING"
	GENERALLEDGERTYPE_CARD_OCT_SETTLEMENT           GeneralLedgerType = "CARD_OCT_SETTLEMENT"
	GENERALLEDGERTYPE_CARD_SETTLEMENT               GeneralLedgerType = "CARD_SETTLEMENT"
	GENERALLEDGERTYPE_CASH_SETTLEMENT               GeneralLedgerType = "CASH_SETTLEMENT"
	GENERALLEDGERTYPE_CASH_SUSPENSE                 GeneralLedgerType = "CASH_SUSPENSE"
	GENERALLEDGERTYPE_CHECK_SETTLEMENT              GeneralLedgerType = "CHECK_SETTLEMENT"
	GENERALLEDGERTYPE_DISPUTE_WRITE_OFF_PNL         GeneralLedgerType = "DISPUTE_WRITE_OFF_PNL"
	GENERALLEDGERTYPE_EFT_CA_SETTLEMENT             GeneralLedgerType = "EFT_CA_SETTLEMENT"
	GENERALLEDGERTYPE_EFT_CA_SUSPENSE               GeneralLedgerType = "EFT_CA_SUSPENSE"
	GENERALLEDGERTYPE_EXTERNAL_CARD_AFT_SETTLEMENT  GeneralLedgerType = "EXTERNAL_CARD_AFT_SETTLEMENT"
	GENERALLEDGERTYPE_EXTERNAL_CARD_OCT_SETTLEMENT  GeneralLedgerType = "EXTERNAL_CARD_OCT_SETTLEMENT"
	GENERALLEDGERTYPE_FEDNOW_SETTLEMENT             GeneralLedgerType = "FEDNOW_SETTLEMENT"
	GENERALLEDGERTYPE_FEES                          GeneralLedgerType = "FEES"
	GENERALLEDGERTYPE_FRAUD_LOSSES                  GeneralLedgerType = "FRAUD_LOSSES"
	GENERALLEDGERTYPE_FUNDING_ACCOUNTS              GeneralLedgerType = "FUNDING_ACCOUNTS"
	GENERALLEDGERTYPE_GENERAL_PNL                   GeneralLedgerType = "GENERAL_PNL"
	GENERALLEDGERTYPE_INTEREST_PAYOUT               GeneralLedgerType = "INTEREST_PAYOUT"
	GENERALLEDGERTYPE_INTERNATIONAL_WIRE_SETTLEMENT GeneralLedgerType = "INTERNATIONAL_WIRE_SETTLEMENT"
	GENERALLEDGERTYPE_LOC_INTEREST_INCOME           GeneralLedgerType = "LOC_INTEREST_INCOME"
	GENERALLEDGERTYPE_LOC_INVESTOR_PORTFOLIO        GeneralLedgerType = "LOC_INVESTOR_PORTFOLIO"
	GENERALLEDGERTYPE_LOC_REPURCHASE                GeneralLedgerType = "LOC_REPURCHASE"
	GENERALLEDGERTYPE_MONEY_IN_AND_OUT              GeneralLedgerType = "MONEY_IN_AND_OUT"
	GENERALLEDGERTYPE_NEGATIVE_BALANCE              GeneralLedgerType = "NEGATIVE_BALANCE"
	GENERALLEDGERTYPE_NETWORK_ADJUSTMENT            GeneralLedgerType = "NETWORK_ADJUSTMENT"
	GENERALLEDGERTYPE_NETWORK_CHARGEBACK            GeneralLedgerType = "NETWORK_CHARGEBACK"
	GENERALLEDGERTYPE_NEW_FUNDING_ACCOUNT           GeneralLedgerType = "NEW_FUNDING_ACCOUNT"
	GENERALLEDGERTYPE_PROVISIONAL_CREDIT_PNL        GeneralLedgerType = "PROVISIONAL_CREDIT_PNL"
	GENERALLEDGERTYPE_RESERVE                       GeneralLedgerType = "RESERVE"
	GENERALLEDGERTYPE_REWARDS                       GeneralLedgerType = "REWARDS"
	GENERALLEDGERTYPE_SYNCTERA_PAY_SUSPENSE         GeneralLedgerType = "SYNCTERA_PAY_SUSPENSE"
	GENERALLEDGERTYPE_USC_INTEREST_INCOME           GeneralLedgerType = "USC_INTEREST_INCOME"
	GENERALLEDGERTYPE_USC_INVESTOR_PORTFOLIO        GeneralLedgerType = "USC_INVESTOR_PORTFOLIO"
	GENERALLEDGERTYPE_USC_REPURCHASE                GeneralLedgerType = "USC_REPURCHASE"
	GENERALLEDGERTYPE_WIRE_SETTLEMENT               GeneralLedgerType = "WIRE_SETTLEMENT"
	GENERALLEDGERTYPE_WIRE_SUSPENSE                 GeneralLedgerType = "WIRE_SUSPENSE"
	GENERALLEDGERTYPE_WRITE_OFF                     GeneralLedgerType = "WRITE_OFF"
)

// All allowed values of GeneralLedgerType enum
var AllowedGeneralLedgerTypeEnumValues = []GeneralLedgerType{
	"ACH_SETTLEMENT",
	"ACH_SUSPENSE",
	"ALLOCATED_SUSPENSE",
	"BANK_DRAFT",
	"BILLING_EXPENSE",
	"BILLING_REVENUE",
	"CARD_AFT_PREFUNDING",
	"CARD_OCT_SETTLEMENT",
	"CARD_SETTLEMENT",
	"CASH_SETTLEMENT",
	"CASH_SUSPENSE",
	"CHECK_SETTLEMENT",
	"DISPUTE_WRITE_OFF_PNL",
	"EFT_CA_SETTLEMENT",
	"EFT_CA_SUSPENSE",
	"EXTERNAL_CARD_AFT_SETTLEMENT",
	"EXTERNAL_CARD_OCT_SETTLEMENT",
	"FEDNOW_SETTLEMENT",
	"FEES",
	"FRAUD_LOSSES",
	"FUNDING_ACCOUNTS",
	"GENERAL_PNL",
	"INTEREST_PAYOUT",
	"INTERNATIONAL_WIRE_SETTLEMENT",
	"LOC_INTEREST_INCOME",
	"LOC_INVESTOR_PORTFOLIO",
	"LOC_REPURCHASE",
	"MONEY_IN_AND_OUT",
	"NEGATIVE_BALANCE",
	"NETWORK_ADJUSTMENT",
	"NETWORK_CHARGEBACK",
	"NEW_FUNDING_ACCOUNT",
	"PROVISIONAL_CREDIT_PNL",
	"RESERVE",
	"REWARDS",
	"SYNCTERA_PAY_SUSPENSE",
	"USC_INTEREST_INCOME",
	"USC_INVESTOR_PORTFOLIO",
	"USC_REPURCHASE",
	"WIRE_SETTLEMENT",
	"WIRE_SUSPENSE",
	"WRITE_OFF",
}

func (v *GeneralLedgerType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GeneralLedgerType(value)
	for _, existing := range AllowedGeneralLedgerTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GeneralLedgerType", value)
}

// NewGeneralLedgerTypeFromValue returns a pointer to a valid GeneralLedgerType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGeneralLedgerTypeFromValue(v string) (*GeneralLedgerType, error) {
	ev := GeneralLedgerType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GeneralLedgerType: valid values are %v", v, AllowedGeneralLedgerTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GeneralLedgerType) IsValid() bool {
	for _, existing := range AllowedGeneralLedgerTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to general_ledger_type value
func (v GeneralLedgerType) Ptr() *GeneralLedgerType {
	return &v
}

type NullableGeneralLedgerType struct {
	value *GeneralLedgerType
	isSet bool
}

func (v NullableGeneralLedgerType) Get() *GeneralLedgerType {
	return v.value
}

func (v *NullableGeneralLedgerType) Set(val *GeneralLedgerType) {
	v.value = val
	v.isSet = true
}

func (v NullableGeneralLedgerType) IsSet() bool {
	return v.isSet
}

func (v *NullableGeneralLedgerType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGeneralLedgerType(val *GeneralLedgerType) *NullableGeneralLedgerType {
	return &NullableGeneralLedgerType{value: val, isSet: true}
}

func (v NullableGeneralLedgerType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGeneralLedgerType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
