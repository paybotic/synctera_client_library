/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.150.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"encoding/json"
	"fmt"
)

// BanStatus (beta) Ban status of the person. One of the following: * `ALLOWED` – person is not banned or suspended * `SUSPENDED` - person is manually suspended due to fraud * `BANNED` – person is banned due to matching ban rules Note: changing the ban status to or from BANNED can only be performed by the Synctera platform based on ban rules.
type BanStatus string

// List of ban_status
const (
	BANSTATUS_ALLOWED   BanStatus = "ALLOWED"
	BANSTATUS_BANNED    BanStatus = "BANNED"
	BANSTATUS_SUSPENDED BanStatus = "SUSPENDED"
)

// All allowed values of BanStatus enum
var AllowedBanStatusEnumValues = []BanStatus{
	"ALLOWED",
	"BANNED",
	"SUSPENDED",
}

func (v *BanStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BanStatus(value)
	for _, existing := range AllowedBanStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BanStatus", value)
}

// NewBanStatusFromValue returns a pointer to a valid BanStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBanStatusFromValue(v string) (*BanStatus, error) {
	ev := BanStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BanStatus: valid values are %v", v, AllowedBanStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BanStatus) IsValid() bool {
	for _, existing := range AllowedBanStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ban_status value
func (v BanStatus) Ptr() *BanStatus {
	return &v
}

type NullableBanStatus struct {
	value *BanStatus
	isSet bool
}

func (v NullableBanStatus) Get() *BanStatus {
	return v.value
}

func (v *NullableBanStatus) Set(val *BanStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableBanStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableBanStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBanStatus(val *BanStatus) *NullableBanStatus {
	return &NullableBanStatus{value: val, isSet: true}
}

func (v NullableBanStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBanStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
