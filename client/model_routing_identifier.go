/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.153.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"encoding/json"
	"fmt"
)

// checks if the RoutingIdentifier type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoutingIdentifier{}

// RoutingIdentifier An object that holds a routing number and its corresponding information
type RoutingIdentifier struct {
	// The address of the institution with the routing number specified in the routing_idetifier object
	Location *string `json:"location,omitempty"`
	// The supported payment types by the routing number specified in routing_identifier
	PaymentRails []string `json:"payment_rails,omitempty"`
	// A sequence of digits used to identify specific financial institution
	RoutingNumber        string `json:"routing_number"`
	AdditionalProperties map[string]interface{}
}

type _RoutingIdentifier RoutingIdentifier

// NewRoutingIdentifier instantiates a new RoutingIdentifier object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoutingIdentifier(routingNumber string) *RoutingIdentifier {
	this := RoutingIdentifier{}
	this.RoutingNumber = routingNumber
	return &this
}

// NewRoutingIdentifierWithDefaults instantiates a new RoutingIdentifier object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoutingIdentifierWithDefaults() *RoutingIdentifier {
	this := RoutingIdentifier{}
	return &this
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *RoutingIdentifier) GetLocation() string {
	if o == nil || IsNil(o.Location) {
		var ret string
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutingIdentifier) GetLocationOk() (*string, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *RoutingIdentifier) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given string and assigns it to the Location field.
func (o *RoutingIdentifier) SetLocation(v string) {
	o.Location = &v
}

// GetPaymentRails returns the PaymentRails field value if set, zero value otherwise.
func (o *RoutingIdentifier) GetPaymentRails() []string {
	if o == nil || IsNil(o.PaymentRails) {
		var ret []string
		return ret
	}
	return o.PaymentRails
}

// GetPaymentRailsOk returns a tuple with the PaymentRails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutingIdentifier) GetPaymentRailsOk() ([]string, bool) {
	if o == nil || IsNil(o.PaymentRails) {
		return nil, false
	}
	return o.PaymentRails, true
}

// HasPaymentRails returns a boolean if a field has been set.
func (o *RoutingIdentifier) HasPaymentRails() bool {
	if o != nil && !IsNil(o.PaymentRails) {
		return true
	}

	return false
}

// SetPaymentRails gets a reference to the given []string and assigns it to the PaymentRails field.
func (o *RoutingIdentifier) SetPaymentRails(v []string) {
	o.PaymentRails = v
}

// GetRoutingNumber returns the RoutingNumber field value
func (o *RoutingIdentifier) GetRoutingNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RoutingNumber
}

// GetRoutingNumberOk returns a tuple with the RoutingNumber field value
// and a boolean to check if the value has been set.
func (o *RoutingIdentifier) GetRoutingNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RoutingNumber, true
}

// SetRoutingNumber sets field value
func (o *RoutingIdentifier) SetRoutingNumber(v string) {
	o.RoutingNumber = v
}

func (o RoutingIdentifier) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoutingIdentifier) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.PaymentRails) {
		toSerialize["payment_rails"] = o.PaymentRails
	}
	toSerialize["routing_number"] = o.RoutingNumber

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RoutingIdentifier) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"routing_number",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRoutingIdentifier := _RoutingIdentifier{}

	err = json.Unmarshal(data, &varRoutingIdentifier)

	if err != nil {
		return err
	}

	*o = RoutingIdentifier(varRoutingIdentifier)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "location")
		delete(additionalProperties, "payment_rails")
		delete(additionalProperties, "routing_number")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRoutingIdentifier struct {
	value *RoutingIdentifier
	isSet bool
}

func (v NullableRoutingIdentifier) Get() *RoutingIdentifier {
	return v.value
}

func (v *NullableRoutingIdentifier) Set(val *RoutingIdentifier) {
	v.value = val
	v.isSet = true
}

func (v NullableRoutingIdentifier) IsSet() bool {
	return v.isSet
}

func (v *NullableRoutingIdentifier) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoutingIdentifier(val *RoutingIdentifier) *NullableRoutingIdentifier {
	return &NullableRoutingIdentifier{value: val, isSet: true}
}

func (v NullableRoutingIdentifier) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoutingIdentifier) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
