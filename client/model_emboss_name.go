/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.153.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"encoding/json"
	"fmt"
)

// checks if the EmbossName type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmbossName{}

// EmbossName The customer details to emboss on the card - Defaults to customer first and last name. Is limited to 21 characters. Valid characters are A-Z, a-z, 0-9, space ( ), period (.), comma (,), forward slash (/), hyphen (-), ampersand (&), single quote (').
type EmbossName struct {
	// line 1
	Line1 string `json:"line_1"`
	// line 2
	Line2                *string `json:"line_2,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EmbossName EmbossName

// NewEmbossName instantiates a new EmbossName object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmbossName(line1 string) *EmbossName {
	this := EmbossName{}
	this.Line1 = line1
	return &this
}

// NewEmbossNameWithDefaults instantiates a new EmbossName object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmbossNameWithDefaults() *EmbossName {
	this := EmbossName{}
	return &this
}

// GetLine1 returns the Line1 field value
func (o *EmbossName) GetLine1() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Line1
}

// GetLine1Ok returns a tuple with the Line1 field value
// and a boolean to check if the value has been set.
func (o *EmbossName) GetLine1Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Line1, true
}

// SetLine1 sets field value
func (o *EmbossName) SetLine1(v string) {
	o.Line1 = v
}

// GetLine2 returns the Line2 field value if set, zero value otherwise.
func (o *EmbossName) GetLine2() string {
	if o == nil || IsNil(o.Line2) {
		var ret string
		return ret
	}
	return *o.Line2
}

// GetLine2Ok returns a tuple with the Line2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmbossName) GetLine2Ok() (*string, bool) {
	if o == nil || IsNil(o.Line2) {
		return nil, false
	}
	return o.Line2, true
}

// HasLine2 returns a boolean if a field has been set.
func (o *EmbossName) HasLine2() bool {
	if o != nil && !IsNil(o.Line2) {
		return true
	}

	return false
}

// SetLine2 gets a reference to the given string and assigns it to the Line2 field.
func (o *EmbossName) SetLine2(v string) {
	o.Line2 = &v
}

func (o EmbossName) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmbossName) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["line_1"] = o.Line1
	if !IsNil(o.Line2) {
		toSerialize["line_2"] = o.Line2
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EmbossName) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"line_1",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEmbossName := _EmbossName{}

	err = json.Unmarshal(data, &varEmbossName)

	if err != nil {
		return err
	}

	*o = EmbossName(varEmbossName)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "line_1")
		delete(additionalProperties, "line_2")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEmbossName struct {
	value *EmbossName
	isSet bool
}

func (v NullableEmbossName) Get() *EmbossName {
	return v.value
}

func (v *NullableEmbossName) Set(val *EmbossName) {
	v.value = val
	v.isSet = true
}

func (v NullableEmbossName) IsSet() bool {
	return v.isSet
}

func (v *NullableEmbossName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmbossName(val *EmbossName) *NullableEmbossName {
	return &NullableEmbossName{value: val, isSet: true}
}

func (v NullableEmbossName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmbossName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
