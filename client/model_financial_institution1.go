/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.153.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"encoding/json"
)

// checks if the FinancialInstitution1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FinancialInstitution1{}

// FinancialInstitution1 struct for FinancialInstitution1
type FinancialInstitution1 struct {
	Address *Address3 `json:"address,omitempty"`
	// A code describing the type of identifier in the \"identifier\" field.
	IdCode *string `json:"id_code,omitempty"`
	// The identifier for the Financial Institution. See \"id_code\" for possible values.
	Identifier           *string `json:"identifier,omitempty"`
	Name                 *string `json:"name,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _FinancialInstitution1 FinancialInstitution1

// NewFinancialInstitution1 instantiates a new FinancialInstitution1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFinancialInstitution1() *FinancialInstitution1 {
	this := FinancialInstitution1{}
	return &this
}

// NewFinancialInstitution1WithDefaults instantiates a new FinancialInstitution1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFinancialInstitution1WithDefaults() *FinancialInstitution1 {
	this := FinancialInstitution1{}
	return &this
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *FinancialInstitution1) GetAddress() Address3 {
	if o == nil || IsNil(o.Address) {
		var ret Address3
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FinancialInstitution1) GetAddressOk() (*Address3, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *FinancialInstitution1) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given Address3 and assigns it to the Address field.
func (o *FinancialInstitution1) SetAddress(v Address3) {
	o.Address = &v
}

// GetIdCode returns the IdCode field value if set, zero value otherwise.
func (o *FinancialInstitution1) GetIdCode() string {
	if o == nil || IsNil(o.IdCode) {
		var ret string
		return ret
	}
	return *o.IdCode
}

// GetIdCodeOk returns a tuple with the IdCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FinancialInstitution1) GetIdCodeOk() (*string, bool) {
	if o == nil || IsNil(o.IdCode) {
		return nil, false
	}
	return o.IdCode, true
}

// HasIdCode returns a boolean if a field has been set.
func (o *FinancialInstitution1) HasIdCode() bool {
	if o != nil && !IsNil(o.IdCode) {
		return true
	}

	return false
}

// SetIdCode gets a reference to the given string and assigns it to the IdCode field.
func (o *FinancialInstitution1) SetIdCode(v string) {
	o.IdCode = &v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *FinancialInstitution1) GetIdentifier() string {
	if o == nil || IsNil(o.Identifier) {
		var ret string
		return ret
	}
	return *o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FinancialInstitution1) GetIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *FinancialInstitution1) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given string and assigns it to the Identifier field.
func (o *FinancialInstitution1) SetIdentifier(v string) {
	o.Identifier = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *FinancialInstitution1) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FinancialInstitution1) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *FinancialInstitution1) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *FinancialInstitution1) SetName(v string) {
	o.Name = &v
}

func (o FinancialInstitution1) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FinancialInstitution1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !IsNil(o.IdCode) {
		toSerialize["id_code"] = o.IdCode
	}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FinancialInstitution1) UnmarshalJSON(data []byte) (err error) {
	varFinancialInstitution1 := _FinancialInstitution1{}

	err = json.Unmarshal(data, &varFinancialInstitution1)

	if err != nil {
		return err
	}

	*o = FinancialInstitution1(varFinancialInstitution1)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "address")
		delete(additionalProperties, "id_code")
		delete(additionalProperties, "identifier")
		delete(additionalProperties, "name")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFinancialInstitution1 struct {
	value *FinancialInstitution1
	isSet bool
}

func (v NullableFinancialInstitution1) Get() *FinancialInstitution1 {
	return v.value
}

func (v *NullableFinancialInstitution1) Set(val *FinancialInstitution1) {
	v.value = val
	v.isSet = true
}

func (v NullableFinancialInstitution1) IsSet() bool {
	return v.isSet
}

func (v *NullableFinancialInstitution1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFinancialInstitution1(val *FinancialInstitution1) *NullableFinancialInstitution1 {
	return &NullableFinancialInstitution1{value: val, isSet: true}
}

func (v NullableFinancialInstitution1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFinancialInstitution1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
