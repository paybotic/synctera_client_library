/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.153.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"encoding/json"
)

// checks if the SpendControlUpdateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SpendControlUpdateRequest{}

// SpendControlUpdateRequest struct for SpendControlUpdateRequest
type SpendControlUpdateRequest struct {
	// If set, create a case for transactions that do not conform to the spend control
	ActionCase *bool `json:"action_case,omitempty"`
	// If set, decline transactions that do not conform to the spend control
	ActionDecline *bool `json:"action_decline,omitempty"`
	// Monetary limit for the spend control in the smallest currency unit (eg cents)
	AmountLimit *int64                 `json:"amount_limit,omitempty"`
	Direction   *SpendControlDirection `json:"direction,omitempty"`
	// Indicates if spend control is active
	IsActive *bool `json:"is_active,omitempty"`
	// merchant category codes for spend control
	MerchantCategoryCodes []string `json:"merchant_category_codes,omitempty"`
	// Name assigned to spend control
	Name *string `json:"name,omitempty"`
	// A list of payment sub-types to which a spend control will apply, if set. If not set or the array is empty, then the spend control will apply to all sub-types.
	PaymentSubTypes []PaymentSubType `json:"payment_sub_types,omitempty"`
	// A list of payment types to which a spend control will apply, if set. If not set or the array is empty, then the spend control will apply to all types of payments.
	PaymentTypes []PaymentType          `json:"payment_types,omitempty"`
	TimeRange    *SpendControlTimeRange `json:"time_range,omitempty"`
}

// NewSpendControlUpdateRequest instantiates a new SpendControlUpdateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpendControlUpdateRequest() *SpendControlUpdateRequest {
	this := SpendControlUpdateRequest{}
	return &this
}

// NewSpendControlUpdateRequestWithDefaults instantiates a new SpendControlUpdateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpendControlUpdateRequestWithDefaults() *SpendControlUpdateRequest {
	this := SpendControlUpdateRequest{}
	return &this
}

// GetActionCase returns the ActionCase field value if set, zero value otherwise.
func (o *SpendControlUpdateRequest) GetActionCase() bool {
	if o == nil || IsNil(o.ActionCase) {
		var ret bool
		return ret
	}
	return *o.ActionCase
}

// GetActionCaseOk returns a tuple with the ActionCase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpendControlUpdateRequest) GetActionCaseOk() (*bool, bool) {
	if o == nil || IsNil(o.ActionCase) {
		return nil, false
	}
	return o.ActionCase, true
}

// HasActionCase returns a boolean if a field has been set.
func (o *SpendControlUpdateRequest) HasActionCase() bool {
	if o != nil && !IsNil(o.ActionCase) {
		return true
	}

	return false
}

// SetActionCase gets a reference to the given bool and assigns it to the ActionCase field.
func (o *SpendControlUpdateRequest) SetActionCase(v bool) {
	o.ActionCase = &v
}

// GetActionDecline returns the ActionDecline field value if set, zero value otherwise.
func (o *SpendControlUpdateRequest) GetActionDecline() bool {
	if o == nil || IsNil(o.ActionDecline) {
		var ret bool
		return ret
	}
	return *o.ActionDecline
}

// GetActionDeclineOk returns a tuple with the ActionDecline field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpendControlUpdateRequest) GetActionDeclineOk() (*bool, bool) {
	if o == nil || IsNil(o.ActionDecline) {
		return nil, false
	}
	return o.ActionDecline, true
}

// HasActionDecline returns a boolean if a field has been set.
func (o *SpendControlUpdateRequest) HasActionDecline() bool {
	if o != nil && !IsNil(o.ActionDecline) {
		return true
	}

	return false
}

// SetActionDecline gets a reference to the given bool and assigns it to the ActionDecline field.
func (o *SpendControlUpdateRequest) SetActionDecline(v bool) {
	o.ActionDecline = &v
}

// GetAmountLimit returns the AmountLimit field value if set, zero value otherwise.
func (o *SpendControlUpdateRequest) GetAmountLimit() int64 {
	if o == nil || IsNil(o.AmountLimit) {
		var ret int64
		return ret
	}
	return *o.AmountLimit
}

// GetAmountLimitOk returns a tuple with the AmountLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpendControlUpdateRequest) GetAmountLimitOk() (*int64, bool) {
	if o == nil || IsNil(o.AmountLimit) {
		return nil, false
	}
	return o.AmountLimit, true
}

// HasAmountLimit returns a boolean if a field has been set.
func (o *SpendControlUpdateRequest) HasAmountLimit() bool {
	if o != nil && !IsNil(o.AmountLimit) {
		return true
	}

	return false
}

// SetAmountLimit gets a reference to the given int64 and assigns it to the AmountLimit field.
func (o *SpendControlUpdateRequest) SetAmountLimit(v int64) {
	o.AmountLimit = &v
}

// GetDirection returns the Direction field value if set, zero value otherwise.
func (o *SpendControlUpdateRequest) GetDirection() SpendControlDirection {
	if o == nil || IsNil(o.Direction) {
		var ret SpendControlDirection
		return ret
	}
	return *o.Direction
}

// GetDirectionOk returns a tuple with the Direction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpendControlUpdateRequest) GetDirectionOk() (*SpendControlDirection, bool) {
	if o == nil || IsNil(o.Direction) {
		return nil, false
	}
	return o.Direction, true
}

// HasDirection returns a boolean if a field has been set.
func (o *SpendControlUpdateRequest) HasDirection() bool {
	if o != nil && !IsNil(o.Direction) {
		return true
	}

	return false
}

// SetDirection gets a reference to the given SpendControlDirection and assigns it to the Direction field.
func (o *SpendControlUpdateRequest) SetDirection(v SpendControlDirection) {
	o.Direction = &v
}

// GetIsActive returns the IsActive field value if set, zero value otherwise.
func (o *SpendControlUpdateRequest) GetIsActive() bool {
	if o == nil || IsNil(o.IsActive) {
		var ret bool
		return ret
	}
	return *o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpendControlUpdateRequest) GetIsActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.IsActive) {
		return nil, false
	}
	return o.IsActive, true
}

// HasIsActive returns a boolean if a field has been set.
func (o *SpendControlUpdateRequest) HasIsActive() bool {
	if o != nil && !IsNil(o.IsActive) {
		return true
	}

	return false
}

// SetIsActive gets a reference to the given bool and assigns it to the IsActive field.
func (o *SpendControlUpdateRequest) SetIsActive(v bool) {
	o.IsActive = &v
}

// GetMerchantCategoryCodes returns the MerchantCategoryCodes field value if set, zero value otherwise.
func (o *SpendControlUpdateRequest) GetMerchantCategoryCodes() []string {
	if o == nil || IsNil(o.MerchantCategoryCodes) {
		var ret []string
		return ret
	}
	return o.MerchantCategoryCodes
}

// GetMerchantCategoryCodesOk returns a tuple with the MerchantCategoryCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpendControlUpdateRequest) GetMerchantCategoryCodesOk() ([]string, bool) {
	if o == nil || IsNil(o.MerchantCategoryCodes) {
		return nil, false
	}
	return o.MerchantCategoryCodes, true
}

// HasMerchantCategoryCodes returns a boolean if a field has been set.
func (o *SpendControlUpdateRequest) HasMerchantCategoryCodes() bool {
	if o != nil && !IsNil(o.MerchantCategoryCodes) {
		return true
	}

	return false
}

// SetMerchantCategoryCodes gets a reference to the given []string and assigns it to the MerchantCategoryCodes field.
func (o *SpendControlUpdateRequest) SetMerchantCategoryCodes(v []string) {
	o.MerchantCategoryCodes = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SpendControlUpdateRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpendControlUpdateRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SpendControlUpdateRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SpendControlUpdateRequest) SetName(v string) {
	o.Name = &v
}

// GetPaymentSubTypes returns the PaymentSubTypes field value if set, zero value otherwise.
func (o *SpendControlUpdateRequest) GetPaymentSubTypes() []PaymentSubType {
	if o == nil || IsNil(o.PaymentSubTypes) {
		var ret []PaymentSubType
		return ret
	}
	return o.PaymentSubTypes
}

// GetPaymentSubTypesOk returns a tuple with the PaymentSubTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpendControlUpdateRequest) GetPaymentSubTypesOk() ([]PaymentSubType, bool) {
	if o == nil || IsNil(o.PaymentSubTypes) {
		return nil, false
	}
	return o.PaymentSubTypes, true
}

// HasPaymentSubTypes returns a boolean if a field has been set.
func (o *SpendControlUpdateRequest) HasPaymentSubTypes() bool {
	if o != nil && !IsNil(o.PaymentSubTypes) {
		return true
	}

	return false
}

// SetPaymentSubTypes gets a reference to the given []PaymentSubType and assigns it to the PaymentSubTypes field.
func (o *SpendControlUpdateRequest) SetPaymentSubTypes(v []PaymentSubType) {
	o.PaymentSubTypes = v
}

// GetPaymentTypes returns the PaymentTypes field value if set, zero value otherwise.
func (o *SpendControlUpdateRequest) GetPaymentTypes() []PaymentType {
	if o == nil || IsNil(o.PaymentTypes) {
		var ret []PaymentType
		return ret
	}
	return o.PaymentTypes
}

// GetPaymentTypesOk returns a tuple with the PaymentTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpendControlUpdateRequest) GetPaymentTypesOk() ([]PaymentType, bool) {
	if o == nil || IsNil(o.PaymentTypes) {
		return nil, false
	}
	return o.PaymentTypes, true
}

// HasPaymentTypes returns a boolean if a field has been set.
func (o *SpendControlUpdateRequest) HasPaymentTypes() bool {
	if o != nil && !IsNil(o.PaymentTypes) {
		return true
	}

	return false
}

// SetPaymentTypes gets a reference to the given []PaymentType and assigns it to the PaymentTypes field.
func (o *SpendControlUpdateRequest) SetPaymentTypes(v []PaymentType) {
	o.PaymentTypes = v
}

// GetTimeRange returns the TimeRange field value if set, zero value otherwise.
func (o *SpendControlUpdateRequest) GetTimeRange() SpendControlTimeRange {
	if o == nil || IsNil(o.TimeRange) {
		var ret SpendControlTimeRange
		return ret
	}
	return *o.TimeRange
}

// GetTimeRangeOk returns a tuple with the TimeRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpendControlUpdateRequest) GetTimeRangeOk() (*SpendControlTimeRange, bool) {
	if o == nil || IsNil(o.TimeRange) {
		return nil, false
	}
	return o.TimeRange, true
}

// HasTimeRange returns a boolean if a field has been set.
func (o *SpendControlUpdateRequest) HasTimeRange() bool {
	if o != nil && !IsNil(o.TimeRange) {
		return true
	}

	return false
}

// SetTimeRange gets a reference to the given SpendControlTimeRange and assigns it to the TimeRange field.
func (o *SpendControlUpdateRequest) SetTimeRange(v SpendControlTimeRange) {
	o.TimeRange = &v
}

func (o SpendControlUpdateRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SpendControlUpdateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ActionCase) {
		toSerialize["action_case"] = o.ActionCase
	}
	if !IsNil(o.ActionDecline) {
		toSerialize["action_decline"] = o.ActionDecline
	}
	if !IsNil(o.AmountLimit) {
		toSerialize["amount_limit"] = o.AmountLimit
	}
	if !IsNil(o.Direction) {
		toSerialize["direction"] = o.Direction
	}
	if !IsNil(o.IsActive) {
		toSerialize["is_active"] = o.IsActive
	}
	if !IsNil(o.MerchantCategoryCodes) {
		toSerialize["merchant_category_codes"] = o.MerchantCategoryCodes
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.PaymentSubTypes) {
		toSerialize["payment_sub_types"] = o.PaymentSubTypes
	}
	if !IsNil(o.PaymentTypes) {
		toSerialize["payment_types"] = o.PaymentTypes
	}
	if !IsNil(o.TimeRange) {
		toSerialize["time_range"] = o.TimeRange
	}
	return toSerialize, nil
}

type NullableSpendControlUpdateRequest struct {
	value *SpendControlUpdateRequest
	isSet bool
}

func (v NullableSpendControlUpdateRequest) Get() *SpendControlUpdateRequest {
	return v.value
}

func (v *NullableSpendControlUpdateRequest) Set(val *SpendControlUpdateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSpendControlUpdateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSpendControlUpdateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpendControlUpdateRequest(val *SpendControlUpdateRequest) *NullableSpendControlUpdateRequest {
	return &NullableSpendControlUpdateRequest{value: val, isSet: true}
}

func (v NullableSpendControlUpdateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpendControlUpdateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
