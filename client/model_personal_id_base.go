/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.153.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"encoding/json"
)

// checks if the PersonalIdBase type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PersonalIdBase{}

// PersonalIdBase struct for PersonalIdBase
type PersonalIdBase struct {
	// UUID for the personal identifier for subsequent changes and deletion
	Id     *string         `json:"id,omitempty"`
	IdType *PersonalIdType `json:"id_type,omitempty"`
	// The personal identifier. Format varies by personal identifier type.
	Identifier *string `json:"identifier,omitempty"`
	// True if the identifier was provided by the system, e.g. via SSN Prefill.
	SystemProvided *bool `json:"system_provided,omitempty"`
}

// NewPersonalIdBase instantiates a new PersonalIdBase object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPersonalIdBase() *PersonalIdBase {
	this := PersonalIdBase{}
	return &this
}

// NewPersonalIdBaseWithDefaults instantiates a new PersonalIdBase object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPersonalIdBaseWithDefaults() *PersonalIdBase {
	this := PersonalIdBase{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PersonalIdBase) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PersonalIdBase) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PersonalIdBase) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *PersonalIdBase) SetId(v string) {
	o.Id = &v
}

// GetIdType returns the IdType field value if set, zero value otherwise.
func (o *PersonalIdBase) GetIdType() PersonalIdType {
	if o == nil || IsNil(o.IdType) {
		var ret PersonalIdType
		return ret
	}
	return *o.IdType
}

// GetIdTypeOk returns a tuple with the IdType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PersonalIdBase) GetIdTypeOk() (*PersonalIdType, bool) {
	if o == nil || IsNil(o.IdType) {
		return nil, false
	}
	return o.IdType, true
}

// HasIdType returns a boolean if a field has been set.
func (o *PersonalIdBase) HasIdType() bool {
	if o != nil && !IsNil(o.IdType) {
		return true
	}

	return false
}

// SetIdType gets a reference to the given PersonalIdType and assigns it to the IdType field.
func (o *PersonalIdBase) SetIdType(v PersonalIdType) {
	o.IdType = &v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *PersonalIdBase) GetIdentifier() string {
	if o == nil || IsNil(o.Identifier) {
		var ret string
		return ret
	}
	return *o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PersonalIdBase) GetIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *PersonalIdBase) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given string and assigns it to the Identifier field.
func (o *PersonalIdBase) SetIdentifier(v string) {
	o.Identifier = &v
}

// GetSystemProvided returns the SystemProvided field value if set, zero value otherwise.
func (o *PersonalIdBase) GetSystemProvided() bool {
	if o == nil || IsNil(o.SystemProvided) {
		var ret bool
		return ret
	}
	return *o.SystemProvided
}

// GetSystemProvidedOk returns a tuple with the SystemProvided field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PersonalIdBase) GetSystemProvidedOk() (*bool, bool) {
	if o == nil || IsNil(o.SystemProvided) {
		return nil, false
	}
	return o.SystemProvided, true
}

// HasSystemProvided returns a boolean if a field has been set.
func (o *PersonalIdBase) HasSystemProvided() bool {
	if o != nil && !IsNil(o.SystemProvided) {
		return true
	}

	return false
}

// SetSystemProvided gets a reference to the given bool and assigns it to the SystemProvided field.
func (o *PersonalIdBase) SetSystemProvided(v bool) {
	o.SystemProvided = &v
}

func (o PersonalIdBase) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PersonalIdBase) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IdType) {
		toSerialize["id_type"] = o.IdType
	}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.SystemProvided) {
		toSerialize["system_provided"] = o.SystemProvided
	}
	return toSerialize, nil
}

type NullablePersonalIdBase struct {
	value *PersonalIdBase
	isSet bool
}

func (v NullablePersonalIdBase) Get() *PersonalIdBase {
	return v.value
}

func (v *NullablePersonalIdBase) Set(val *PersonalIdBase) {
	v.value = val
	v.isSet = true
}

func (v NullablePersonalIdBase) IsSet() bool {
	return v.isSet
}

func (v *NullablePersonalIdBase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePersonalIdBase(val *PersonalIdBase) *NullablePersonalIdBase {
	return &NullablePersonalIdBase{value: val, isSet: true}
}

func (v NullablePersonalIdBase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePersonalIdBase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
