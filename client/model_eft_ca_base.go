/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.153.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"encoding/json"
	"fmt"
)

// checks if the EftCaBase type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EftCaBase{}

// EftCaBase EFT transfer specific to Canada
type EftCaBase struct {
	// Transfer amount in cents
	Amount int64 `json:"amount"`
	// The UUID of the Synctera customer resource that is the originator of the transfer.
	CustomerId string `json:"customer_id"`
	// Debit or credit sign
	DcSign string `json:"dc_sign"`
	// Additional information to be added to the transfer
	SourceData map[string]interface{} `json:"source_data,omitempty"`
	// The three digit transaction code that identifies the type of transaction. More information can be found here: https://www.payments.ca/sites/default/files/standard007eng.pdf.
	TransactionCode      string `json:"transaction_code"`
	AdditionalProperties map[string]interface{}
}

type _EftCaBase EftCaBase

// NewEftCaBase instantiates a new EftCaBase object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEftCaBase(amount int64, customerId string, dcSign string, transactionCode string) *EftCaBase {
	this := EftCaBase{}
	this.Amount = amount
	this.CustomerId = customerId
	this.DcSign = dcSign
	this.TransactionCode = transactionCode
	return &this
}

// NewEftCaBaseWithDefaults instantiates a new EftCaBase object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEftCaBaseWithDefaults() *EftCaBase {
	this := EftCaBase{}
	return &this
}

// GetAmount returns the Amount field value
func (o *EftCaBase) GetAmount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *EftCaBase) GetAmountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *EftCaBase) SetAmount(v int64) {
	o.Amount = v
}

// GetCustomerId returns the CustomerId field value
func (o *EftCaBase) GetCustomerId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CustomerId
}

// GetCustomerIdOk returns a tuple with the CustomerId field value
// and a boolean to check if the value has been set.
func (o *EftCaBase) GetCustomerIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CustomerId, true
}

// SetCustomerId sets field value
func (o *EftCaBase) SetCustomerId(v string) {
	o.CustomerId = v
}

// GetDcSign returns the DcSign field value
func (o *EftCaBase) GetDcSign() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DcSign
}

// GetDcSignOk returns a tuple with the DcSign field value
// and a boolean to check if the value has been set.
func (o *EftCaBase) GetDcSignOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DcSign, true
}

// SetDcSign sets field value
func (o *EftCaBase) SetDcSign(v string) {
	o.DcSign = v
}

// GetSourceData returns the SourceData field value if set, zero value otherwise.
func (o *EftCaBase) GetSourceData() map[string]interface{} {
	if o == nil || IsNil(o.SourceData) {
		var ret map[string]interface{}
		return ret
	}
	return o.SourceData
}

// GetSourceDataOk returns a tuple with the SourceData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EftCaBase) GetSourceDataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.SourceData) {
		return map[string]interface{}{}, false
	}
	return o.SourceData, true
}

// HasSourceData returns a boolean if a field has been set.
func (o *EftCaBase) HasSourceData() bool {
	if o != nil && !IsNil(o.SourceData) {
		return true
	}

	return false
}

// SetSourceData gets a reference to the given map[string]interface{} and assigns it to the SourceData field.
func (o *EftCaBase) SetSourceData(v map[string]interface{}) {
	o.SourceData = v
}

// GetTransactionCode returns the TransactionCode field value
func (o *EftCaBase) GetTransactionCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransactionCode
}

// GetTransactionCodeOk returns a tuple with the TransactionCode field value
// and a boolean to check if the value has been set.
func (o *EftCaBase) GetTransactionCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransactionCode, true
}

// SetTransactionCode sets field value
func (o *EftCaBase) SetTransactionCode(v string) {
	o.TransactionCode = v
}

func (o EftCaBase) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EftCaBase) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["amount"] = o.Amount
	toSerialize["customer_id"] = o.CustomerId
	toSerialize["dc_sign"] = o.DcSign
	if !IsNil(o.SourceData) {
		toSerialize["source_data"] = o.SourceData
	}
	toSerialize["transaction_code"] = o.TransactionCode

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EftCaBase) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"amount",
		"customer_id",
		"dc_sign",
		"transaction_code",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEftCaBase := _EftCaBase{}

	err = json.Unmarshal(data, &varEftCaBase)

	if err != nil {
		return err
	}

	*o = EftCaBase(varEftCaBase)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "amount")
		delete(additionalProperties, "customer_id")
		delete(additionalProperties, "dc_sign")
		delete(additionalProperties, "source_data")
		delete(additionalProperties, "transaction_code")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEftCaBase struct {
	value *EftCaBase
	isSet bool
}

func (v NullableEftCaBase) Get() *EftCaBase {
	return v.value
}

func (v *NullableEftCaBase) Set(val *EftCaBase) {
	v.value = val
	v.isSet = true
}

func (v NullableEftCaBase) IsSet() bool {
	return v.isSet
}

func (v *NullableEftCaBase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEftCaBase(val *EftCaBase) *NullableEftCaBase {
	return &NullableEftCaBase{value: val, isSet: true}
}

func (v NullableEftCaBase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEftCaBase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
