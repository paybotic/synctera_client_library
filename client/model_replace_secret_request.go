/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.153.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"encoding/json"
)

// checks if the ReplaceSecretRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReplaceSecretRequest{}

// ReplaceSecretRequest struct for ReplaceSecretRequest
type ReplaceSecretRequest struct {
	// Set true to let the current secret expire in the next 24 hours. Set false to let the current secret expire immediately.
	IsRollingSecret *bool `json:"is_rolling_secret,omitempty"`
}

// NewReplaceSecretRequest instantiates a new ReplaceSecretRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReplaceSecretRequest() *ReplaceSecretRequest {
	this := ReplaceSecretRequest{}
	return &this
}

// NewReplaceSecretRequestWithDefaults instantiates a new ReplaceSecretRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReplaceSecretRequestWithDefaults() *ReplaceSecretRequest {
	this := ReplaceSecretRequest{}
	return &this
}

// GetIsRollingSecret returns the IsRollingSecret field value if set, zero value otherwise.
func (o *ReplaceSecretRequest) GetIsRollingSecret() bool {
	if o == nil || IsNil(o.IsRollingSecret) {
		var ret bool
		return ret
	}
	return *o.IsRollingSecret
}

// GetIsRollingSecretOk returns a tuple with the IsRollingSecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplaceSecretRequest) GetIsRollingSecretOk() (*bool, bool) {
	if o == nil || IsNil(o.IsRollingSecret) {
		return nil, false
	}
	return o.IsRollingSecret, true
}

// HasIsRollingSecret returns a boolean if a field has been set.
func (o *ReplaceSecretRequest) HasIsRollingSecret() bool {
	if o != nil && !IsNil(o.IsRollingSecret) {
		return true
	}

	return false
}

// SetIsRollingSecret gets a reference to the given bool and assigns it to the IsRollingSecret field.
func (o *ReplaceSecretRequest) SetIsRollingSecret(v bool) {
	o.IsRollingSecret = &v
}

func (o ReplaceSecretRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReplaceSecretRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IsRollingSecret) {
		toSerialize["is_rolling_secret"] = o.IsRollingSecret
	}
	return toSerialize, nil
}

type NullableReplaceSecretRequest struct {
	value *ReplaceSecretRequest
	isSet bool
}

func (v NullableReplaceSecretRequest) Get() *ReplaceSecretRequest {
	return v.value
}

func (v *NullableReplaceSecretRequest) Set(val *ReplaceSecretRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableReplaceSecretRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableReplaceSecretRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplaceSecretRequest(val *ReplaceSecretRequest) *NullableReplaceSecretRequest {
	return &NullableReplaceSecretRequest{value: val, isSet: true}
}

func (v NullableReplaceSecretRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplaceSecretRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
