/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.153.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"encoding/json"
	"fmt"
)

// CashAuthorizationPost - Cash Authorization post
type CashAuthorizationPost struct {
	CashOrderAuthorizationPost *CashOrderAuthorizationPost
}

// CashOrderAuthorizationPostAsCashAuthorizationPost is a convenience function that returns CashOrderAuthorizationPost wrapped in CashAuthorizationPost
func CashOrderAuthorizationPostAsCashAuthorizationPost(v *CashOrderAuthorizationPost) CashAuthorizationPost {
	return CashAuthorizationPost{
		CashOrderAuthorizationPost: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *CashAuthorizationPost) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'CASH_ORDER'
	if jsonDict["authorization_type"] == "CASH_ORDER" {
		// try to unmarshal JSON data into CashOrderAuthorizationPost
		err = json.Unmarshal(data, &dst.CashOrderAuthorizationPost)
		if err == nil {
			return nil // data stored in dst.CashOrderAuthorizationPost, return on the first match
		} else {
			dst.CashOrderAuthorizationPost = nil
			return fmt.Errorf("failed to unmarshal CashAuthorizationPost as CashOrderAuthorizationPost: %s", err.Error())
		}
	}

	// check if the discriminator value is 'cash_order_authorization_post'
	if jsonDict["authorization_type"] == "cash_order_authorization_post" {
		// try to unmarshal JSON data into CashOrderAuthorizationPost
		err = json.Unmarshal(data, &dst.CashOrderAuthorizationPost)
		if err == nil {
			return nil // data stored in dst.CashOrderAuthorizationPost, return on the first match
		} else {
			dst.CashOrderAuthorizationPost = nil
			return fmt.Errorf("failed to unmarshal CashAuthorizationPost as CashOrderAuthorizationPost: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CashAuthorizationPost) MarshalJSON() ([]byte, error) {
	if src.CashOrderAuthorizationPost != nil {
		return json.Marshal(&src.CashOrderAuthorizationPost)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CashAuthorizationPost) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.CashOrderAuthorizationPost != nil {
		return obj.CashOrderAuthorizationPost
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj CashAuthorizationPost) GetActualInstanceValue() interface{} {
	if obj.CashOrderAuthorizationPost != nil {
		return *obj.CashOrderAuthorizationPost
	}

	// all schemas are nil
	return nil
}

type NullableCashAuthorizationPost struct {
	value *CashAuthorizationPost
	isSet bool
}

func (v NullableCashAuthorizationPost) Get() *CashAuthorizationPost {
	return v.value
}

func (v *NullableCashAuthorizationPost) Set(val *CashAuthorizationPost) {
	v.value = val
	v.isSet = true
}

func (v NullableCashAuthorizationPost) IsSet() bool {
	return v.isSet
}

func (v *NullableCashAuthorizationPost) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCashAuthorizationPost(val *CashAuthorizationPost) *NullableCashAuthorizationPost {
	return &NullableCashAuthorizationPost{value: val, isSet: true}
}

func (v NullableCashAuthorizationPost) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCashAuthorizationPost) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
