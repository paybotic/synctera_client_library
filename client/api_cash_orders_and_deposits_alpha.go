/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.150.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// CashOrdersAndDepositsAlphaAPIService CashOrdersAndDepositsAlphaAPI service
type CashOrdersAndDepositsAlphaAPIService service

type ApiCreateCashAuthorizationRequest struct {
	ctx                   context.Context
	ApiService            *CashOrdersAndDepositsAlphaAPIService
	idempotencyKey        *string
	cashAuthorizationPost *CashAuthorizationPost
}

// An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
func (r ApiCreateCashAuthorizationRequest) IdempotencyKey(idempotencyKey string) ApiCreateCashAuthorizationRequest {
	r.idempotencyKey = &idempotencyKey
	return r
}

// The cash authorization to be created.
func (r ApiCreateCashAuthorizationRequest) CashAuthorizationPost(cashAuthorizationPost CashAuthorizationPost) ApiCreateCashAuthorizationRequest {
	r.cashAuthorizationPost = &cashAuthorizationPost
	return r
}

func (r ApiCreateCashAuthorizationRequest) Execute() (*CashAuthorizationResponse, *http.Response, error) {
	return r.ApiService.CreateCashAuthorizationExecute(r)
}

/*
CreateCashAuthorization Cash Authorization for an upcoming transfer

Create a new cash authorization
> ðŸš§ Alpha > This is an Alpha spec-only endpoint. Feedback from the community is welcome. We may make breaking changes.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateCashAuthorizationRequest
*/
func (a *CashOrdersAndDepositsAlphaAPIService) CreateCashAuthorization(ctx context.Context) ApiCreateCashAuthorizationRequest {
	return ApiCreateCashAuthorizationRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CashAuthorizationResponse
func (a *CashOrdersAndDepositsAlphaAPIService) CreateCashAuthorizationExecute(r ApiCreateCashAuthorizationRequest) (*CashAuthorizationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CashAuthorizationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CashOrdersAndDepositsAlphaAPIService.CreateCashAuthorization")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cash/authorization"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.idempotencyKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Idempotency-Key", r.idempotencyKey, "simple", "")
	}
	// body params
	localVarPostBody = r.cashAuthorizationPost
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCashAuthorizationsRequest struct {
	ctx                  context.Context
	ApiService           *CashOrdersAndDepositsAlphaAPIService
	maxAmount            *int32
	destinationAccountId *string
	clientName           *string
	fromOrderDate        *string
	toOrderDate          *string
	id                   *[]string
	orderDate            *string
	originatingAccountId *string
	partnerId            *string
	bankId               *string
	accountNumber        *string
	amount               *string
	minAmount            *int32
}

// Maximum amount of the transfer
func (r ApiGetCashAuthorizationsRequest) MaxAmount(maxAmount int32) ApiGetCashAuthorizationsRequest {
	r.maxAmount = &maxAmount
	return r
}

// Destination account ID
func (r ApiGetCashAuthorizationsRequest) DestinationAccountId(destinationAccountId string) ApiGetCashAuthorizationsRequest {
	r.destinationAccountId = &destinationAccountId
	return r
}

// Client name of the transfer
func (r ApiGetCashAuthorizationsRequest) ClientName(clientName string) ApiGetCashAuthorizationsRequest {
	r.clientName = &clientName
	return r
}

// From order date of the transfer
func (r ApiGetCashAuthorizationsRequest) FromOrderDate(fromOrderDate string) ApiGetCashAuthorizationsRequest {
	r.fromOrderDate = &fromOrderDate
	return r
}

// To order date of the transfer
func (r ApiGetCashAuthorizationsRequest) ToOrderDate(toOrderDate string) ApiGetCashAuthorizationsRequest {
	r.toOrderDate = &toOrderDate
	return r
}

// Cashier Authorization ID
func (r ApiGetCashAuthorizationsRequest) Id(id []string) ApiGetCashAuthorizationsRequest {
	r.id = &id
	return r
}

// order date of the transfer
func (r ApiGetCashAuthorizationsRequest) OrderDate(orderDate string) ApiGetCashAuthorizationsRequest {
	r.orderDate = &orderDate
	return r
}

// Originating account ID
func (r ApiGetCashAuthorizationsRequest) OriginatingAccountId(originatingAccountId string) ApiGetCashAuthorizationsRequest {
	r.originatingAccountId = &originatingAccountId
	return r
}

// Partner ID of the transfer
func (r ApiGetCashAuthorizationsRequest) PartnerId(partnerId string) ApiGetCashAuthorizationsRequest {
	r.partnerId = &partnerId
	return r
}

// Bank ID of the transfer
func (r ApiGetCashAuthorizationsRequest) BankId(bankId string) ApiGetCashAuthorizationsRequest {
	r.bankId = &bankId
	return r
}

// Account number of the transfer, known as \&quot;Location ID\&quot; in the cash order csv
func (r ApiGetCashAuthorizationsRequest) AccountNumber(accountNumber string) ApiGetCashAuthorizationsRequest {
	r.accountNumber = &accountNumber
	return r
}

// Amount of the transfer
func (r ApiGetCashAuthorizationsRequest) Amount(amount string) ApiGetCashAuthorizationsRequest {
	r.amount = &amount
	return r
}

// Minimum amount of the transfer
func (r ApiGetCashAuthorizationsRequest) MinAmount(minAmount int32) ApiGetCashAuthorizationsRequest {
	r.minAmount = &minAmount
	return r
}

func (r ApiGetCashAuthorizationsRequest) Execute() (*CashAuthorizationResponseList, *http.Response, error) {
	return r.ApiService.GetCashAuthorizationsExecute(r)
}

/*
GetCashAuthorizations Get cash authorizations

Get all cash authorizations
> ðŸš§ Alpha > This is an Alpha spec-only endpoint. Feedback from the community is welcome. We may make breaking changes.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetCashAuthorizationsRequest
*/
func (a *CashOrdersAndDepositsAlphaAPIService) GetCashAuthorizations(ctx context.Context) ApiGetCashAuthorizationsRequest {
	return ApiGetCashAuthorizationsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CashAuthorizationResponseList
func (a *CashOrdersAndDepositsAlphaAPIService) GetCashAuthorizationsExecute(r ApiGetCashAuthorizationsRequest) (*CashAuthorizationResponseList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CashAuthorizationResponseList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CashOrdersAndDepositsAlphaAPIService.GetCashAuthorizations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cash/authorization"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.maxAmount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "max_amount", r.maxAmount, "form", "")
	}
	if r.destinationAccountId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "destination_account_id", r.destinationAccountId, "form", "")
	}
	if r.clientName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "client_name", r.clientName, "form", "")
	}
	if r.fromOrderDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "from_order_date", r.fromOrderDate, "form", "")
	}
	if r.toOrderDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "to_order_date", r.toOrderDate, "form", "")
	}
	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "form", "csv")
	}
	if r.orderDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order_date", r.orderDate, "form", "")
	}
	if r.originatingAccountId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "originating_account_id", r.originatingAccountId, "form", "")
	}
	if r.partnerId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "partner_id", r.partnerId, "form", "")
	}
	if r.bankId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "bank_id", r.bankId, "form", "")
	}
	if r.accountNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "account_number", r.accountNumber, "form", "")
	}
	if r.amount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "amount", r.amount, "form", "")
	}
	if r.minAmount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "min_amount", r.minAmount, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCashOrderAuthorizationRequest struct {
	ctx        context.Context
	ApiService *CashOrdersAndDepositsAlphaAPIService
	id         string
}

func (r ApiGetCashOrderAuthorizationRequest) Execute() (*CashOrderAuthorizationResponse, *http.Response, error) {
	return r.ApiService.GetCashOrderAuthorizationExecute(r)
}

/*
GetCashOrderAuthorization Get cash order authorization

Get a specific cash order authorization
> ðŸš§ Alpha > This is an Alpha spec-only endpoint. Feedback from the community is welcome. We may make breaking changes.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Cashier Authorization ID
	@return ApiGetCashOrderAuthorizationRequest
*/
func (a *CashOrdersAndDepositsAlphaAPIService) GetCashOrderAuthorization(ctx context.Context, id string) ApiGetCashOrderAuthorizationRequest {
	return ApiGetCashOrderAuthorizationRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return CashOrderAuthorizationResponse
func (a *CashOrdersAndDepositsAlphaAPIService) GetCashOrderAuthorizationExecute(r ApiGetCashOrderAuthorizationRequest) (*CashOrderAuthorizationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CashOrderAuthorizationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CashOrdersAndDepositsAlphaAPIService.GetCashOrderAuthorization")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cash/authorization/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCashTransferRequest struct {
	ctx        context.Context
	ApiService *CashOrdersAndDepositsAlphaAPIService
	id         string
}

func (r ApiGetCashTransferRequest) Execute() (*CashResponse, *http.Response, error) {
	return r.ApiService.GetCashTransferExecute(r)
}

/*
GetCashTransfer Get cash transfer

Get a specific cash transfer
> ðŸš§ Alpha > This is an Alpha spec-only endpoint. Feedback from the community is welcome. We may make breaking changes.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Cashier Transfer ID
	@return ApiGetCashTransferRequest
*/
func (a *CashOrdersAndDepositsAlphaAPIService) GetCashTransfer(ctx context.Context, id string) ApiGetCashTransferRequest {
	return ApiGetCashTransferRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return CashResponse
func (a *CashOrdersAndDepositsAlphaAPIService) GetCashTransferExecute(r ApiGetCashTransferRequest) (*CashResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CashResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CashOrdersAndDepositsAlphaAPIService.GetCashTransfer")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cash/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCashTransfersRequest struct {
	ctx                         context.Context
	ApiService                  *CashOrdersAndDepositsAlphaAPIService
	fromPostingDate             *string
	currency                    *string
	toEffectiveDate             *string
	toPostingDate               *string
	customerId                  *string
	dcSign                      *string
	fromEffectiveDate           *string
	maxAmount                   *int32
	destinationAccountId        *string
	isSameDay                   *bool
	id                          *string
	effectiveDate               *string
	destinationAccountNumber    *string
	postingDate                 *string
	networkStatus               *string
	originatingAccountNumber    *string
	subtype                     *string
	originatingAccountId        *string
	partnerId                   *string
	destinationAccountOwnerName *string
	bankId                      *string
	referenceId                 *string
	status                      *string
	amount                      *string
	minAmount                   *int32
	originatingAccountOwnerName *string
}

// From posting date of the transfer
func (r ApiGetCashTransfersRequest) FromPostingDate(fromPostingDate string) ApiGetCashTransfersRequest {
	r.fromPostingDate = &fromPostingDate
	return r
}

// Currency of the transfer
func (r ApiGetCashTransfersRequest) Currency(currency string) ApiGetCashTransfersRequest {
	r.currency = &currency
	return r
}

// To effective date of the transfer
func (r ApiGetCashTransfersRequest) ToEffectiveDate(toEffectiveDate string) ApiGetCashTransfersRequest {
	r.toEffectiveDate = &toEffectiveDate
	return r
}

// To posting date of the transfer
func (r ApiGetCashTransfersRequest) ToPostingDate(toPostingDate string) ApiGetCashTransfersRequest {
	r.toPostingDate = &toPostingDate
	return r
}

// Customer ID of the transfer
func (r ApiGetCashTransfersRequest) CustomerId(customerId string) ApiGetCashTransfersRequest {
	r.customerId = &customerId
	return r
}

// DC sign of the transfer
func (r ApiGetCashTransfersRequest) DcSign(dcSign string) ApiGetCashTransfersRequest {
	r.dcSign = &dcSign
	return r
}

// From effective date of the transfer
func (r ApiGetCashTransfersRequest) FromEffectiveDate(fromEffectiveDate string) ApiGetCashTransfersRequest {
	r.fromEffectiveDate = &fromEffectiveDate
	return r
}

// Maximum amount of the transfer
func (r ApiGetCashTransfersRequest) MaxAmount(maxAmount int32) ApiGetCashTransfersRequest {
	r.maxAmount = &maxAmount
	return r
}

// Destination account ID
func (r ApiGetCashTransfersRequest) DestinationAccountId(destinationAccountId string) ApiGetCashTransfersRequest {
	r.destinationAccountId = &destinationAccountId
	return r
}

// Is same day transfer
func (r ApiGetCashTransfersRequest) IsSameDay(isSameDay bool) ApiGetCashTransfersRequest {
	r.isSameDay = &isSameDay
	return r
}

// Cashier Transfer ID
func (r ApiGetCashTransfersRequest) Id(id string) ApiGetCashTransfersRequest {
	r.id = &id
	return r
}

// Effective date of the transfer
func (r ApiGetCashTransfersRequest) EffectiveDate(effectiveDate string) ApiGetCashTransfersRequest {
	r.effectiveDate = &effectiveDate
	return r
}

// Destination account number
func (r ApiGetCashTransfersRequest) DestinationAccountNumber(destinationAccountNumber string) ApiGetCashTransfersRequest {
	r.destinationAccountNumber = &destinationAccountNumber
	return r
}

// Posting date of the transfer
func (r ApiGetCashTransfersRequest) PostingDate(postingDate string) ApiGetCashTransfersRequest {
	r.postingDate = &postingDate
	return r
}

// Network status of the transfer
func (r ApiGetCashTransfersRequest) NetworkStatus(networkStatus string) ApiGetCashTransfersRequest {
	r.networkStatus = &networkStatus
	return r
}

// Originating account number
func (r ApiGetCashTransfersRequest) OriginatingAccountNumber(originatingAccountNumber string) ApiGetCashTransfersRequest {
	r.originatingAccountNumber = &originatingAccountNumber
	return r
}

// Subtype of the transfer
func (r ApiGetCashTransfersRequest) Subtype(subtype string) ApiGetCashTransfersRequest {
	r.subtype = &subtype
	return r
}

// Originating account ID
func (r ApiGetCashTransfersRequest) OriginatingAccountId(originatingAccountId string) ApiGetCashTransfersRequest {
	r.originatingAccountId = &originatingAccountId
	return r
}

// Partner ID of the transfer
func (r ApiGetCashTransfersRequest) PartnerId(partnerId string) ApiGetCashTransfersRequest {
	r.partnerId = &partnerId
	return r
}

// Destination account owner name
func (r ApiGetCashTransfersRequest) DestinationAccountOwnerName(destinationAccountOwnerName string) ApiGetCashTransfersRequest {
	r.destinationAccountOwnerName = &destinationAccountOwnerName
	return r
}

// Bank ID of the transfer
func (r ApiGetCashTransfersRequest) BankId(bankId string) ApiGetCashTransfersRequest {
	r.bankId = &bankId
	return r
}

// Reference ID of the transfer
func (r ApiGetCashTransfersRequest) ReferenceId(referenceId string) ApiGetCashTransfersRequest {
	r.referenceId = &referenceId
	return r
}

// Status of the transfer
func (r ApiGetCashTransfersRequest) Status(status string) ApiGetCashTransfersRequest {
	r.status = &status
	return r
}

// Amount of the transfer
func (r ApiGetCashTransfersRequest) Amount(amount string) ApiGetCashTransfersRequest {
	r.amount = &amount
	return r
}

// Minimum amount of the transfer
func (r ApiGetCashTransfersRequest) MinAmount(minAmount int32) ApiGetCashTransfersRequest {
	r.minAmount = &minAmount
	return r
}

// Originating account owner name
func (r ApiGetCashTransfersRequest) OriginatingAccountOwnerName(originatingAccountOwnerName string) ApiGetCashTransfersRequest {
	r.originatingAccountOwnerName = &originatingAccountOwnerName
	return r
}

func (r ApiGetCashTransfersRequest) Execute() (*CashList, *http.Response, error) {
	return r.ApiService.GetCashTransfersExecute(r)
}

/*
GetCashTransfers Get cash transfers

Get all cash transfers
> ðŸš§ Alpha > This is an Alpha spec-only endpoint. Feedback from the community is welcome. We may make breaking changes.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetCashTransfersRequest
*/
func (a *CashOrdersAndDepositsAlphaAPIService) GetCashTransfers(ctx context.Context) ApiGetCashTransfersRequest {
	return ApiGetCashTransfersRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CashList
func (a *CashOrdersAndDepositsAlphaAPIService) GetCashTransfersExecute(r ApiGetCashTransfersRequest) (*CashList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CashList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CashOrdersAndDepositsAlphaAPIService.GetCashTransfers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cash"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fromPostingDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "from_posting_date", r.fromPostingDate, "form", "")
	}
	if r.currency != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "currency", r.currency, "form", "")
	}
	if r.toEffectiveDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "to_effective_date", r.toEffectiveDate, "form", "")
	}
	if r.toPostingDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "to_posting_date", r.toPostingDate, "form", "")
	}
	if r.customerId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customer_id", r.customerId, "form", "")
	}
	if r.dcSign != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dc_sign", r.dcSign, "form", "")
	}
	if r.fromEffectiveDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "from_effective_date", r.fromEffectiveDate, "form", "")
	}
	if r.maxAmount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "max_amount", r.maxAmount, "form", "")
	}
	if r.destinationAccountId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "destination_account_id", r.destinationAccountId, "form", "")
	}
	if r.isSameDay != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "is_same_day", r.isSameDay, "form", "")
	}
	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "form", "")
	}
	if r.effectiveDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "effective_date", r.effectiveDate, "form", "")
	}
	if r.destinationAccountNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "destination_account_number", r.destinationAccountNumber, "form", "")
	}
	if r.postingDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "posting_date", r.postingDate, "form", "")
	}
	if r.networkStatus != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "network_status", r.networkStatus, "form", "")
	}
	if r.originatingAccountNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "originating_account_number", r.originatingAccountNumber, "form", "")
	}
	if r.subtype != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subtype", r.subtype, "form", "")
	}
	if r.originatingAccountId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "originating_account_id", r.originatingAccountId, "form", "")
	}
	if r.partnerId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "partner_id", r.partnerId, "form", "")
	}
	if r.destinationAccountOwnerName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "destination_account_owner_name", r.destinationAccountOwnerName, "form", "")
	}
	if r.bankId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "bank_id", r.bankId, "form", "")
	}
	if r.referenceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "reference_id", r.referenceId, "form", "")
	}
	if r.status != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "status", r.status, "form", "")
	}
	if r.amount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "amount", r.amount, "form", "")
	}
	if r.minAmount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "min_amount", r.minAmount, "form", "")
	}
	if r.originatingAccountOwnerName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "originating_account_owner_name", r.originatingAccountOwnerName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchCashOrderAuthorizationRequest struct {
	ctx                         context.Context
	ApiService                  *CashOrdersAndDepositsAlphaAPIService
	id                          string
	idempotencyKey              *string
	cashOrderAuthorizationPatch *CashOrderAuthorizationPatch
}

// An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
func (r ApiPatchCashOrderAuthorizationRequest) IdempotencyKey(idempotencyKey string) ApiPatchCashOrderAuthorizationRequest {
	r.idempotencyKey = &idempotencyKey
	return r
}

// Properties of the Cashier order authorization to update.
func (r ApiPatchCashOrderAuthorizationRequest) CashOrderAuthorizationPatch(cashOrderAuthorizationPatch CashOrderAuthorizationPatch) ApiPatchCashOrderAuthorizationRequest {
	r.cashOrderAuthorizationPatch = &cashOrderAuthorizationPatch
	return r
}

func (r ApiPatchCashOrderAuthorizationRequest) Execute() (*CashOrderAuthorizationResponse, *http.Response, error) {
	return r.ApiService.PatchCashOrderAuthorizationExecute(r)
}

/*
PatchCashOrderAuthorization Update a cash order authorization

> ðŸš§ Alpha > This is an Alpha spec-only endpoint. Feedback from the community is welcome. We may make breaking changes.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Cashier Authorization ID
	@return ApiPatchCashOrderAuthorizationRequest
*/
func (a *CashOrdersAndDepositsAlphaAPIService) PatchCashOrderAuthorization(ctx context.Context, id string) ApiPatchCashOrderAuthorizationRequest {
	return ApiPatchCashOrderAuthorizationRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return CashOrderAuthorizationResponse
func (a *CashOrdersAndDepositsAlphaAPIService) PatchCashOrderAuthorizationExecute(r ApiPatchCashOrderAuthorizationRequest) (*CashOrderAuthorizationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CashOrderAuthorizationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CashOrdersAndDepositsAlphaAPIService.PatchCashOrderAuthorization")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cash/authorization/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.idempotencyKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Idempotency-Key", r.idempotencyKey, "simple", "")
	}
	// body params
	localVarPostBody = r.cashOrderAuthorizationPatch
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchCashTransferRequest struct {
	ctx            context.Context
	ApiService     *CashOrdersAndDepositsAlphaAPIService
	id             string
	idempotencyKey *string
	cashPatch      *CashPatch
}

// An idempotency key is an arbitrary unique value generated by client to detect subsequent retries of the same request. It is recommended that a UUID or a similar random identifier be used as an idempotency key. A different key must be used for each request, unless it is a retry.
func (r ApiPatchCashTransferRequest) IdempotencyKey(idempotencyKey string) ApiPatchCashTransferRequest {
	r.idempotencyKey = &idempotencyKey
	return r
}

// Properties of the Cashier transfer to update.
func (r ApiPatchCashTransferRequest) CashPatch(cashPatch CashPatch) ApiPatchCashTransferRequest {
	r.cashPatch = &cashPatch
	return r
}

func (r ApiPatchCashTransferRequest) Execute() (*CashResponse, *http.Response, error) {
	return r.ApiService.PatchCashTransferExecute(r)
}

/*
PatchCashTransfer Update a cash transfer

To cancel a transfer, update the status to 'CANCELLED'. Only 'INITIATED' or 'PENDING` transfers can be cancelled.
> ðŸš§ Alpha > This is an Alpha spec-only endpoint. Feedback from the community is welcome. We may make breaking changes.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Cashier Transfer ID
	@return ApiPatchCashTransferRequest
*/
func (a *CashOrdersAndDepositsAlphaAPIService) PatchCashTransfer(ctx context.Context, id string) ApiPatchCashTransferRequest {
	return ApiPatchCashTransferRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return CashResponse
func (a *CashOrdersAndDepositsAlphaAPIService) PatchCashTransferExecute(r ApiPatchCashTransferRequest) (*CashResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CashResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CashOrdersAndDepositsAlphaAPIService.PatchCashTransfer")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cash/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.idempotencyKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Idempotency-Key", r.idempotencyKey, "simple", "")
	}
	// body params
	localVarPostBody = r.cashPatch
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
