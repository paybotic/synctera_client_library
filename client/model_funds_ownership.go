/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.153.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"encoding/json"
	"fmt"
)

// FundsOwnership An account's funds ownership indicates which organization owns the funds in the account. For example, some GENERAL_LEDGER accounts have funds owned by the bank, even though the account is in the fintech tenant. Fintechs are not able to perform money movement on accounts where the bank or platform owns the funds. This read-only property is determined by the account_type and general_ledger_type.
type FundsOwnership string

// List of funds_ownership
const (
	FUNDSOWNERSHIP_BANK     FundsOwnership = "BANK"
	FUNDSOWNERSHIP_FINTECH  FundsOwnership = "FINTECH"
	FUNDSOWNERSHIP_PLATFORM FundsOwnership = "PLATFORM"
)

// All allowed values of FundsOwnership enum
var AllowedFundsOwnershipEnumValues = []FundsOwnership{
	"BANK",
	"FINTECH",
	"PLATFORM",
}

func (v *FundsOwnership) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FundsOwnership(value)
	for _, existing := range AllowedFundsOwnershipEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FundsOwnership", value)
}

// NewFundsOwnershipFromValue returns a pointer to a valid FundsOwnership
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFundsOwnershipFromValue(v string) (*FundsOwnership, error) {
	ev := FundsOwnership(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FundsOwnership: valid values are %v", v, AllowedFundsOwnershipEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FundsOwnership) IsValid() bool {
	for _, existing := range AllowedFundsOwnershipEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to funds_ownership value
func (v FundsOwnership) Ptr() *FundsOwnership {
	return &v
}

type NullableFundsOwnership struct {
	value *FundsOwnership
	isSet bool
}

func (v NullableFundsOwnership) Get() *FundsOwnership {
	return v.value
}

func (v *NullableFundsOwnership) Set(val *FundsOwnership) {
	v.value = val
	v.isSet = true
}

func (v NullableFundsOwnership) IsSet() bool {
	return v.isSet
}

func (v *NullableFundsOwnership) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFundsOwnership(val *FundsOwnership) *NullableFundsOwnership {
	return &NullableFundsOwnership{value: val, isSet: true}
}

func (v NullableFundsOwnership) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFundsOwnership) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
