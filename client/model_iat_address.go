/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.153.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"encoding/json"
	"fmt"
)

// checks if the IatAddress type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IatAddress{}

// IatAddress struct for IatAddress
type IatAddress struct {
	// City and State / Province. Should be separated with an asterisk (*) as a delimiter.
	CityStateProvince string `json:"city_state_province"`
	// Country and Postal Code. Should be separated with an asterisk (*) as a delimiter.
	CountryPostalCode string `json:"country_postal_code"`
	// The street address
	Street               string `json:"street"`
	AdditionalProperties map[string]interface{}
}

type _IatAddress IatAddress

// NewIatAddress instantiates a new IatAddress object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIatAddress(cityStateProvince string, countryPostalCode string, street string) *IatAddress {
	this := IatAddress{}
	this.CityStateProvince = cityStateProvince
	this.CountryPostalCode = countryPostalCode
	this.Street = street
	return &this
}

// NewIatAddressWithDefaults instantiates a new IatAddress object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIatAddressWithDefaults() *IatAddress {
	this := IatAddress{}
	return &this
}

// GetCityStateProvince returns the CityStateProvince field value
func (o *IatAddress) GetCityStateProvince() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CityStateProvince
}

// GetCityStateProvinceOk returns a tuple with the CityStateProvince field value
// and a boolean to check if the value has been set.
func (o *IatAddress) GetCityStateProvinceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CityStateProvince, true
}

// SetCityStateProvince sets field value
func (o *IatAddress) SetCityStateProvince(v string) {
	o.CityStateProvince = v
}

// GetCountryPostalCode returns the CountryPostalCode field value
func (o *IatAddress) GetCountryPostalCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CountryPostalCode
}

// GetCountryPostalCodeOk returns a tuple with the CountryPostalCode field value
// and a boolean to check if the value has been set.
func (o *IatAddress) GetCountryPostalCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CountryPostalCode, true
}

// SetCountryPostalCode sets field value
func (o *IatAddress) SetCountryPostalCode(v string) {
	o.CountryPostalCode = v
}

// GetStreet returns the Street field value
func (o *IatAddress) GetStreet() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Street
}

// GetStreetOk returns a tuple with the Street field value
// and a boolean to check if the value has been set.
func (o *IatAddress) GetStreetOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Street, true
}

// SetStreet sets field value
func (o *IatAddress) SetStreet(v string) {
	o.Street = v
}

func (o IatAddress) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IatAddress) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["city_state_province"] = o.CityStateProvince
	toSerialize["country_postal_code"] = o.CountryPostalCode
	toSerialize["street"] = o.Street

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IatAddress) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"city_state_province",
		"country_postal_code",
		"street",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIatAddress := _IatAddress{}

	err = json.Unmarshal(data, &varIatAddress)

	if err != nil {
		return err
	}

	*o = IatAddress(varIatAddress)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "city_state_province")
		delete(additionalProperties, "country_postal_code")
		delete(additionalProperties, "street")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIatAddress struct {
	value *IatAddress
	isSet bool
}

func (v NullableIatAddress) Get() *IatAddress {
	return v.value
}

func (v *NullableIatAddress) Set(val *IatAddress) {
	v.value = val
	v.isSet = true
}

func (v NullableIatAddress) IsSet() bool {
	return v.isSet
}

func (v *NullableIatAddress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIatAddress(val *IatAddress) *NullableIatAddress {
	return &NullableIatAddress{value: val, isSet: true}
}

func (v NullableIatAddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIatAddress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
