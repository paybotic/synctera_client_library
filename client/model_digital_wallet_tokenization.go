/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.153.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"encoding/json"
)

// checks if the DigitalWalletTokenization type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DigitalWalletTokenization{}

// DigitalWalletTokenization struct for DigitalWalletTokenization
type DigitalWalletTokenization struct {
	// Specifies the digital wallet card art identifier for the card product.
	CardArtId            *string               `json:"card_art_id,omitempty"`
	ProvisioningControls *ProvisioningControls `json:"provisioning_controls,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DigitalWalletTokenization DigitalWalletTokenization

// NewDigitalWalletTokenization instantiates a new DigitalWalletTokenization object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDigitalWalletTokenization() *DigitalWalletTokenization {
	this := DigitalWalletTokenization{}
	return &this
}

// NewDigitalWalletTokenizationWithDefaults instantiates a new DigitalWalletTokenization object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDigitalWalletTokenizationWithDefaults() *DigitalWalletTokenization {
	this := DigitalWalletTokenization{}
	return &this
}

// GetCardArtId returns the CardArtId field value if set, zero value otherwise.
func (o *DigitalWalletTokenization) GetCardArtId() string {
	if o == nil || IsNil(o.CardArtId) {
		var ret string
		return ret
	}
	return *o.CardArtId
}

// GetCardArtIdOk returns a tuple with the CardArtId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DigitalWalletTokenization) GetCardArtIdOk() (*string, bool) {
	if o == nil || IsNil(o.CardArtId) {
		return nil, false
	}
	return o.CardArtId, true
}

// HasCardArtId returns a boolean if a field has been set.
func (o *DigitalWalletTokenization) HasCardArtId() bool {
	if o != nil && !IsNil(o.CardArtId) {
		return true
	}

	return false
}

// SetCardArtId gets a reference to the given string and assigns it to the CardArtId field.
func (o *DigitalWalletTokenization) SetCardArtId(v string) {
	o.CardArtId = &v
}

// GetProvisioningControls returns the ProvisioningControls field value if set, zero value otherwise.
func (o *DigitalWalletTokenization) GetProvisioningControls() ProvisioningControls {
	if o == nil || IsNil(o.ProvisioningControls) {
		var ret ProvisioningControls
		return ret
	}
	return *o.ProvisioningControls
}

// GetProvisioningControlsOk returns a tuple with the ProvisioningControls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DigitalWalletTokenization) GetProvisioningControlsOk() (*ProvisioningControls, bool) {
	if o == nil || IsNil(o.ProvisioningControls) {
		return nil, false
	}
	return o.ProvisioningControls, true
}

// HasProvisioningControls returns a boolean if a field has been set.
func (o *DigitalWalletTokenization) HasProvisioningControls() bool {
	if o != nil && !IsNil(o.ProvisioningControls) {
		return true
	}

	return false
}

// SetProvisioningControls gets a reference to the given ProvisioningControls and assigns it to the ProvisioningControls field.
func (o *DigitalWalletTokenization) SetProvisioningControls(v ProvisioningControls) {
	o.ProvisioningControls = &v
}

func (o DigitalWalletTokenization) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DigitalWalletTokenization) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CardArtId) {
		toSerialize["card_art_id"] = o.CardArtId
	}
	if !IsNil(o.ProvisioningControls) {
		toSerialize["provisioning_controls"] = o.ProvisioningControls
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DigitalWalletTokenization) UnmarshalJSON(data []byte) (err error) {
	varDigitalWalletTokenization := _DigitalWalletTokenization{}

	err = json.Unmarshal(data, &varDigitalWalletTokenization)

	if err != nil {
		return err
	}

	*o = DigitalWalletTokenization(varDigitalWalletTokenization)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "card_art_id")
		delete(additionalProperties, "provisioning_controls")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDigitalWalletTokenization struct {
	value *DigitalWalletTokenization
	isSet bool
}

func (v NullableDigitalWalletTokenization) Get() *DigitalWalletTokenization {
	return v.value
}

func (v *NullableDigitalWalletTokenization) Set(val *DigitalWalletTokenization) {
	v.value = val
	v.isSet = true
}

func (v NullableDigitalWalletTokenization) IsSet() bool {
	return v.isSet
}

func (v *NullableDigitalWalletTokenization) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDigitalWalletTokenization(val *DigitalWalletTokenization) *NullableDigitalWalletTokenization {
	return &NullableDigitalWalletTokenization{value: val, isSet: true}
}

func (v NullableDigitalWalletTokenization) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDigitalWalletTokenization) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
