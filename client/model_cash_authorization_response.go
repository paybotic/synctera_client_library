/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.153.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"encoding/json"
	"fmt"
)

// CashAuthorizationResponse - Cash authorization response
type CashAuthorizationResponse struct {
	CashOrderAuthorizationResponse *CashOrderAuthorizationResponse
}

// CashOrderAuthorizationResponseAsCashAuthorizationResponse is a convenience function that returns CashOrderAuthorizationResponse wrapped in CashAuthorizationResponse
func CashOrderAuthorizationResponseAsCashAuthorizationResponse(v *CashOrderAuthorizationResponse) CashAuthorizationResponse {
	return CashAuthorizationResponse{
		CashOrderAuthorizationResponse: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *CashAuthorizationResponse) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'CASH_ORDER'
	if jsonDict["authorization_type"] == "CASH_ORDER" {
		// try to unmarshal JSON data into CashOrderAuthorizationResponse
		err = json.Unmarshal(data, &dst.CashOrderAuthorizationResponse)
		if err == nil {
			return nil // data stored in dst.CashOrderAuthorizationResponse, return on the first match
		} else {
			dst.CashOrderAuthorizationResponse = nil
			return fmt.Errorf("failed to unmarshal CashAuthorizationResponse as CashOrderAuthorizationResponse: %s", err.Error())
		}
	}

	// check if the discriminator value is 'cash_order_authorization_response'
	if jsonDict["authorization_type"] == "cash_order_authorization_response" {
		// try to unmarshal JSON data into CashOrderAuthorizationResponse
		err = json.Unmarshal(data, &dst.CashOrderAuthorizationResponse)
		if err == nil {
			return nil // data stored in dst.CashOrderAuthorizationResponse, return on the first match
		} else {
			dst.CashOrderAuthorizationResponse = nil
			return fmt.Errorf("failed to unmarshal CashAuthorizationResponse as CashOrderAuthorizationResponse: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CashAuthorizationResponse) MarshalJSON() ([]byte, error) {
	if src.CashOrderAuthorizationResponse != nil {
		return json.Marshal(&src.CashOrderAuthorizationResponse)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CashAuthorizationResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.CashOrderAuthorizationResponse != nil {
		return obj.CashOrderAuthorizationResponse
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj CashAuthorizationResponse) GetActualInstanceValue() interface{} {
	if obj.CashOrderAuthorizationResponse != nil {
		return *obj.CashOrderAuthorizationResponse
	}

	// all schemas are nil
	return nil
}

type NullableCashAuthorizationResponse struct {
	value *CashAuthorizationResponse
	isSet bool
}

func (v NullableCashAuthorizationResponse) Get() *CashAuthorizationResponse {
	return v.value
}

func (v *NullableCashAuthorizationResponse) Set(val *CashAuthorizationResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCashAuthorizationResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCashAuthorizationResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCashAuthorizationResponse(val *CashAuthorizationResponse) *NullableCashAuthorizationResponse {
	return &NullableCashAuthorizationResponse{value: val, isSet: true}
}

func (v NullableCashAuthorizationResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCashAuthorizationResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
