/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.150.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"encoding/json"
	"fmt"
)

// CreateEddResponse - struct for CreateEddResponse
type CreateEddResponse struct {
	EddAccountResponse     *EddAccountResponse
	EddBusinessResponse    *EddBusinessResponse
	EddCustomerResponse    *EddCustomerResponse
	EddTransactionResponse *EddTransactionResponse
}

// EddAccountResponseAsCreateEddResponse is a convenience function that returns EddAccountResponse wrapped in CreateEddResponse
func EddAccountResponseAsCreateEddResponse(v *EddAccountResponse) CreateEddResponse {
	return CreateEddResponse{
		EddAccountResponse: v,
	}
}

// EddBusinessResponseAsCreateEddResponse is a convenience function that returns EddBusinessResponse wrapped in CreateEddResponse
func EddBusinessResponseAsCreateEddResponse(v *EddBusinessResponse) CreateEddResponse {
	return CreateEddResponse{
		EddBusinessResponse: v,
	}
}

// EddCustomerResponseAsCreateEddResponse is a convenience function that returns EddCustomerResponse wrapped in CreateEddResponse
func EddCustomerResponseAsCreateEddResponse(v *EddCustomerResponse) CreateEddResponse {
	return CreateEddResponse{
		EddCustomerResponse: v,
	}
}

// EddTransactionResponseAsCreateEddResponse is a convenience function that returns EddTransactionResponse wrapped in CreateEddResponse
func EddTransactionResponseAsCreateEddResponse(v *EddTransactionResponse) CreateEddResponse {
	return CreateEddResponse{
		EddTransactionResponse: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *CreateEddResponse) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'ACCOUNT'
	if jsonDict["related_resource_type"] == "ACCOUNT" {
		// try to unmarshal JSON data into EddAccountResponse
		err = json.Unmarshal(data, &dst.EddAccountResponse)
		if err == nil {
			return nil // data stored in dst.EddAccountResponse, return on the first match
		} else {
			dst.EddAccountResponse = nil
			return fmt.Errorf("failed to unmarshal CreateEddResponse as EddAccountResponse: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BUSINESS'
	if jsonDict["related_resource_type"] == "BUSINESS" {
		// try to unmarshal JSON data into EddBusinessResponse
		err = json.Unmarshal(data, &dst.EddBusinessResponse)
		if err == nil {
			return nil // data stored in dst.EddBusinessResponse, return on the first match
		} else {
			dst.EddBusinessResponse = nil
			return fmt.Errorf("failed to unmarshal CreateEddResponse as EddBusinessResponse: %s", err.Error())
		}
	}

	// check if the discriminator value is 'CUSTOMER'
	if jsonDict["related_resource_type"] == "CUSTOMER" {
		// try to unmarshal JSON data into EddCustomerResponse
		err = json.Unmarshal(data, &dst.EddCustomerResponse)
		if err == nil {
			return nil // data stored in dst.EddCustomerResponse, return on the first match
		} else {
			dst.EddCustomerResponse = nil
			return fmt.Errorf("failed to unmarshal CreateEddResponse as EddCustomerResponse: %s", err.Error())
		}
	}

	// check if the discriminator value is 'TRANSACTION'
	if jsonDict["related_resource_type"] == "TRANSACTION" {
		// try to unmarshal JSON data into EddTransactionResponse
		err = json.Unmarshal(data, &dst.EddTransactionResponse)
		if err == nil {
			return nil // data stored in dst.EddTransactionResponse, return on the first match
		} else {
			dst.EddTransactionResponse = nil
			return fmt.Errorf("failed to unmarshal CreateEddResponse as EddTransactionResponse: %s", err.Error())
		}
	}

	// check if the discriminator value is 'edd_account_response'
	if jsonDict["related_resource_type"] == "edd_account_response" {
		// try to unmarshal JSON data into EddAccountResponse
		err = json.Unmarshal(data, &dst.EddAccountResponse)
		if err == nil {
			return nil // data stored in dst.EddAccountResponse, return on the first match
		} else {
			dst.EddAccountResponse = nil
			return fmt.Errorf("failed to unmarshal CreateEddResponse as EddAccountResponse: %s", err.Error())
		}
	}

	// check if the discriminator value is 'edd_business_response'
	if jsonDict["related_resource_type"] == "edd_business_response" {
		// try to unmarshal JSON data into EddBusinessResponse
		err = json.Unmarshal(data, &dst.EddBusinessResponse)
		if err == nil {
			return nil // data stored in dst.EddBusinessResponse, return on the first match
		} else {
			dst.EddBusinessResponse = nil
			return fmt.Errorf("failed to unmarshal CreateEddResponse as EddBusinessResponse: %s", err.Error())
		}
	}

	// check if the discriminator value is 'edd_customer_response'
	if jsonDict["related_resource_type"] == "edd_customer_response" {
		// try to unmarshal JSON data into EddCustomerResponse
		err = json.Unmarshal(data, &dst.EddCustomerResponse)
		if err == nil {
			return nil // data stored in dst.EddCustomerResponse, return on the first match
		} else {
			dst.EddCustomerResponse = nil
			return fmt.Errorf("failed to unmarshal CreateEddResponse as EddCustomerResponse: %s", err.Error())
		}
	}

	// check if the discriminator value is 'edd_transaction_response'
	if jsonDict["related_resource_type"] == "edd_transaction_response" {
		// try to unmarshal JSON data into EddTransactionResponse
		err = json.Unmarshal(data, &dst.EddTransactionResponse)
		if err == nil {
			return nil // data stored in dst.EddTransactionResponse, return on the first match
		} else {
			dst.EddTransactionResponse = nil
			return fmt.Errorf("failed to unmarshal CreateEddResponse as EddTransactionResponse: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateEddResponse) MarshalJSON() ([]byte, error) {
	if src.EddAccountResponse != nil {
		return json.Marshal(&src.EddAccountResponse)
	}

	if src.EddBusinessResponse != nil {
		return json.Marshal(&src.EddBusinessResponse)
	}

	if src.EddCustomerResponse != nil {
		return json.Marshal(&src.EddCustomerResponse)
	}

	if src.EddTransactionResponse != nil {
		return json.Marshal(&src.EddTransactionResponse)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CreateEddResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.EddAccountResponse != nil {
		return obj.EddAccountResponse
	}

	if obj.EddBusinessResponse != nil {
		return obj.EddBusinessResponse
	}

	if obj.EddCustomerResponse != nil {
		return obj.EddCustomerResponse
	}

	if obj.EddTransactionResponse != nil {
		return obj.EddTransactionResponse
	}

	// all schemas are nil
	return nil
}

type NullableCreateEddResponse struct {
	value *CreateEddResponse
	isSet bool
}

func (v NullableCreateEddResponse) Get() *CreateEddResponse {
	return v.value
}

func (v *NullableCreateEddResponse) Set(val *CreateEddResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateEddResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateEddResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateEddResponse(val *CreateEddResponse) *NullableCreateEddResponse {
	return &NullableCreateEddResponse{value: val, isSet: true}
}

func (v NullableCreateEddResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateEddResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
