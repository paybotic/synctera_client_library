/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.153.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"encoding/json"
	"fmt"
)

// KycVerificationType The type of check run on the customer.
type KycVerificationType string

// List of kyc_verification_type
const (
	KYCVERIFICATIONTYPE_ADDRESSRISK          KycVerificationType = "addressrisk"
	KYCVERIFICATIONTYPE_ALERTLIST            KycVerificationType = "alertlist"
	KYCVERIFICATIONTYPE_DECISION             KycVerificationType = "decision"
	KYCVERIFICATIONTYPE_DOCUMENTVERIFICATION KycVerificationType = "documentverification"
	KYCVERIFICATIONTYPE_EMAILRISK            KycVerificationType = "emailrisk"
	KYCVERIFICATIONTYPE_FRAUD                KycVerificationType = "fraud"
	KYCVERIFICATIONTYPE_KYC                  KycVerificationType = "kyc"
	KYCVERIFICATIONTYPE_PHONERISK            KycVerificationType = "phonerisk"
	KYCVERIFICATIONTYPE_SOCIAL               KycVerificationType = "social"
	KYCVERIFICATIONTYPE_SYNTHETIC            KycVerificationType = "synthetic"
	KYCVERIFICATIONTYPE_WATCHLISTPLUS        KycVerificationType = "watchlistplus"
	KYCVERIFICATIONTYPE_WATCHLISTPREMIER     KycVerificationType = "watchlistpremier"
	KYCVERIFICATIONTYPE_WATCHLISTSTANDARD    KycVerificationType = "watchliststandard"
)

// All allowed values of KycVerificationType enum
var AllowedKycVerificationTypeEnumValues = []KycVerificationType{
	"addressrisk",
	"alertlist",
	"decision",
	"documentverification",
	"emailrisk",
	"fraud",
	"kyc",
	"phonerisk",
	"social",
	"synthetic",
	"watchlistplus",
	"watchlistpremier",
	"watchliststandard",
}

func (v *KycVerificationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := KycVerificationType(value)
	for _, existing := range AllowedKycVerificationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid KycVerificationType", value)
}

// NewKycVerificationTypeFromValue returns a pointer to a valid KycVerificationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewKycVerificationTypeFromValue(v string) (*KycVerificationType, error) {
	ev := KycVerificationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for KycVerificationType: valid values are %v", v, AllowedKycVerificationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v KycVerificationType) IsValid() bool {
	for _, existing := range AllowedKycVerificationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to kyc_verification_type value
func (v KycVerificationType) Ptr() *KycVerificationType {
	return &v
}

type NullableKycVerificationType struct {
	value *KycVerificationType
	isSet bool
}

func (v NullableKycVerificationType) Get() *KycVerificationType {
	return v.value
}

func (v *NullableKycVerificationType) Set(val *KycVerificationType) {
	v.value = val
	v.isSet = true
}

func (v NullableKycVerificationType) IsSet() bool {
	return v.isSet
}

func (v *NullableKycVerificationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKycVerificationType(val *KycVerificationType) *NullableKycVerificationType {
	return &NullableKycVerificationType{value: val, isSet: true}
}

func (v NullableKycVerificationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKycVerificationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
