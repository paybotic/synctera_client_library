/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.153.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"encoding/json"
)

// checks if the FleetsEmv type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FleetsEmv{}

// FleetsEmv struct for FleetsEmv
type FleetsEmv struct {
	EmployeeNumber       *string              `json:"employee_number,omitempty"`
	ExpandedFuelType     *string              `json:"expanded_fuel_type,omitempty"`
	FuelGrossAmount      *int64               `json:"fuel_gross_amount,omitempty"`
	FuelNetAmount        *int64               `json:"fuel_net_amount,omitempty"`
	FuelQuantity         *float32             `json:"fuel_quantity,omitempty"`
	FuelUnitOfMeasure    *string              `json:"fuel_unit_of_measure,omitempty"`
	FuelUnitPrice        *float32             `json:"fuel_unit_price,omitempty"`
	NonFuelGrossAmount   *int64               `json:"non_fuel_gross_amount,omitempty"`
	NonFuelItemDetails   []NonFuelItemDetails `json:"non_fuel_item_details,omitempty"`
	NonFuelNetAmount     *int64               `json:"non_fuel_net_amount,omitempty"`
	OdometerReading      *string              `json:"odometer_reading,omitempty"`
	ServiceType          *string              `json:"service_type,omitempty"`
	TrailerNumber        *string              `json:"trailer_number,omitempty"`
	TypeOfPurchase       *string              `json:"type_of_purchase,omitempty"`
	VatTaxRate           *float32             `json:"vat_tax_rate,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _FleetsEmv FleetsEmv

// NewFleetsEmv instantiates a new FleetsEmv object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFleetsEmv() *FleetsEmv {
	this := FleetsEmv{}
	return &this
}

// NewFleetsEmvWithDefaults instantiates a new FleetsEmv object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFleetsEmvWithDefaults() *FleetsEmv {
	this := FleetsEmv{}
	return &this
}

// GetEmployeeNumber returns the EmployeeNumber field value if set, zero value otherwise.
func (o *FleetsEmv) GetEmployeeNumber() string {
	if o == nil || IsNil(o.EmployeeNumber) {
		var ret string
		return ret
	}
	return *o.EmployeeNumber
}

// GetEmployeeNumberOk returns a tuple with the EmployeeNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FleetsEmv) GetEmployeeNumberOk() (*string, bool) {
	if o == nil || IsNil(o.EmployeeNumber) {
		return nil, false
	}
	return o.EmployeeNumber, true
}

// HasEmployeeNumber returns a boolean if a field has been set.
func (o *FleetsEmv) HasEmployeeNumber() bool {
	if o != nil && !IsNil(o.EmployeeNumber) {
		return true
	}

	return false
}

// SetEmployeeNumber gets a reference to the given string and assigns it to the EmployeeNumber field.
func (o *FleetsEmv) SetEmployeeNumber(v string) {
	o.EmployeeNumber = &v
}

// GetExpandedFuelType returns the ExpandedFuelType field value if set, zero value otherwise.
func (o *FleetsEmv) GetExpandedFuelType() string {
	if o == nil || IsNil(o.ExpandedFuelType) {
		var ret string
		return ret
	}
	return *o.ExpandedFuelType
}

// GetExpandedFuelTypeOk returns a tuple with the ExpandedFuelType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FleetsEmv) GetExpandedFuelTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ExpandedFuelType) {
		return nil, false
	}
	return o.ExpandedFuelType, true
}

// HasExpandedFuelType returns a boolean if a field has been set.
func (o *FleetsEmv) HasExpandedFuelType() bool {
	if o != nil && !IsNil(o.ExpandedFuelType) {
		return true
	}

	return false
}

// SetExpandedFuelType gets a reference to the given string and assigns it to the ExpandedFuelType field.
func (o *FleetsEmv) SetExpandedFuelType(v string) {
	o.ExpandedFuelType = &v
}

// GetFuelGrossAmount returns the FuelGrossAmount field value if set, zero value otherwise.
func (o *FleetsEmv) GetFuelGrossAmount() int64 {
	if o == nil || IsNil(o.FuelGrossAmount) {
		var ret int64
		return ret
	}
	return *o.FuelGrossAmount
}

// GetFuelGrossAmountOk returns a tuple with the FuelGrossAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FleetsEmv) GetFuelGrossAmountOk() (*int64, bool) {
	if o == nil || IsNil(o.FuelGrossAmount) {
		return nil, false
	}
	return o.FuelGrossAmount, true
}

// HasFuelGrossAmount returns a boolean if a field has been set.
func (o *FleetsEmv) HasFuelGrossAmount() bool {
	if o != nil && !IsNil(o.FuelGrossAmount) {
		return true
	}

	return false
}

// SetFuelGrossAmount gets a reference to the given int64 and assigns it to the FuelGrossAmount field.
func (o *FleetsEmv) SetFuelGrossAmount(v int64) {
	o.FuelGrossAmount = &v
}

// GetFuelNetAmount returns the FuelNetAmount field value if set, zero value otherwise.
func (o *FleetsEmv) GetFuelNetAmount() int64 {
	if o == nil || IsNil(o.FuelNetAmount) {
		var ret int64
		return ret
	}
	return *o.FuelNetAmount
}

// GetFuelNetAmountOk returns a tuple with the FuelNetAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FleetsEmv) GetFuelNetAmountOk() (*int64, bool) {
	if o == nil || IsNil(o.FuelNetAmount) {
		return nil, false
	}
	return o.FuelNetAmount, true
}

// HasFuelNetAmount returns a boolean if a field has been set.
func (o *FleetsEmv) HasFuelNetAmount() bool {
	if o != nil && !IsNil(o.FuelNetAmount) {
		return true
	}

	return false
}

// SetFuelNetAmount gets a reference to the given int64 and assigns it to the FuelNetAmount field.
func (o *FleetsEmv) SetFuelNetAmount(v int64) {
	o.FuelNetAmount = &v
}

// GetFuelQuantity returns the FuelQuantity field value if set, zero value otherwise.
func (o *FleetsEmv) GetFuelQuantity() float32 {
	if o == nil || IsNil(o.FuelQuantity) {
		var ret float32
		return ret
	}
	return *o.FuelQuantity
}

// GetFuelQuantityOk returns a tuple with the FuelQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FleetsEmv) GetFuelQuantityOk() (*float32, bool) {
	if o == nil || IsNil(o.FuelQuantity) {
		return nil, false
	}
	return o.FuelQuantity, true
}

// HasFuelQuantity returns a boolean if a field has been set.
func (o *FleetsEmv) HasFuelQuantity() bool {
	if o != nil && !IsNil(o.FuelQuantity) {
		return true
	}

	return false
}

// SetFuelQuantity gets a reference to the given float32 and assigns it to the FuelQuantity field.
func (o *FleetsEmv) SetFuelQuantity(v float32) {
	o.FuelQuantity = &v
}

// GetFuelUnitOfMeasure returns the FuelUnitOfMeasure field value if set, zero value otherwise.
func (o *FleetsEmv) GetFuelUnitOfMeasure() string {
	if o == nil || IsNil(o.FuelUnitOfMeasure) {
		var ret string
		return ret
	}
	return *o.FuelUnitOfMeasure
}

// GetFuelUnitOfMeasureOk returns a tuple with the FuelUnitOfMeasure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FleetsEmv) GetFuelUnitOfMeasureOk() (*string, bool) {
	if o == nil || IsNil(o.FuelUnitOfMeasure) {
		return nil, false
	}
	return o.FuelUnitOfMeasure, true
}

// HasFuelUnitOfMeasure returns a boolean if a field has been set.
func (o *FleetsEmv) HasFuelUnitOfMeasure() bool {
	if o != nil && !IsNil(o.FuelUnitOfMeasure) {
		return true
	}

	return false
}

// SetFuelUnitOfMeasure gets a reference to the given string and assigns it to the FuelUnitOfMeasure field.
func (o *FleetsEmv) SetFuelUnitOfMeasure(v string) {
	o.FuelUnitOfMeasure = &v
}

// GetFuelUnitPrice returns the FuelUnitPrice field value if set, zero value otherwise.
func (o *FleetsEmv) GetFuelUnitPrice() float32 {
	if o == nil || IsNil(o.FuelUnitPrice) {
		var ret float32
		return ret
	}
	return *o.FuelUnitPrice
}

// GetFuelUnitPriceOk returns a tuple with the FuelUnitPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FleetsEmv) GetFuelUnitPriceOk() (*float32, bool) {
	if o == nil || IsNil(o.FuelUnitPrice) {
		return nil, false
	}
	return o.FuelUnitPrice, true
}

// HasFuelUnitPrice returns a boolean if a field has been set.
func (o *FleetsEmv) HasFuelUnitPrice() bool {
	if o != nil && !IsNil(o.FuelUnitPrice) {
		return true
	}

	return false
}

// SetFuelUnitPrice gets a reference to the given float32 and assigns it to the FuelUnitPrice field.
func (o *FleetsEmv) SetFuelUnitPrice(v float32) {
	o.FuelUnitPrice = &v
}

// GetNonFuelGrossAmount returns the NonFuelGrossAmount field value if set, zero value otherwise.
func (o *FleetsEmv) GetNonFuelGrossAmount() int64 {
	if o == nil || IsNil(o.NonFuelGrossAmount) {
		var ret int64
		return ret
	}
	return *o.NonFuelGrossAmount
}

// GetNonFuelGrossAmountOk returns a tuple with the NonFuelGrossAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FleetsEmv) GetNonFuelGrossAmountOk() (*int64, bool) {
	if o == nil || IsNil(o.NonFuelGrossAmount) {
		return nil, false
	}
	return o.NonFuelGrossAmount, true
}

// HasNonFuelGrossAmount returns a boolean if a field has been set.
func (o *FleetsEmv) HasNonFuelGrossAmount() bool {
	if o != nil && !IsNil(o.NonFuelGrossAmount) {
		return true
	}

	return false
}

// SetNonFuelGrossAmount gets a reference to the given int64 and assigns it to the NonFuelGrossAmount field.
func (o *FleetsEmv) SetNonFuelGrossAmount(v int64) {
	o.NonFuelGrossAmount = &v
}

// GetNonFuelItemDetails returns the NonFuelItemDetails field value if set, zero value otherwise.
func (o *FleetsEmv) GetNonFuelItemDetails() []NonFuelItemDetails {
	if o == nil || IsNil(o.NonFuelItemDetails) {
		var ret []NonFuelItemDetails
		return ret
	}
	return o.NonFuelItemDetails
}

// GetNonFuelItemDetailsOk returns a tuple with the NonFuelItemDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FleetsEmv) GetNonFuelItemDetailsOk() ([]NonFuelItemDetails, bool) {
	if o == nil || IsNil(o.NonFuelItemDetails) {
		return nil, false
	}
	return o.NonFuelItemDetails, true
}

// HasNonFuelItemDetails returns a boolean if a field has been set.
func (o *FleetsEmv) HasNonFuelItemDetails() bool {
	if o != nil && !IsNil(o.NonFuelItemDetails) {
		return true
	}

	return false
}

// SetNonFuelItemDetails gets a reference to the given []NonFuelItemDetails and assigns it to the NonFuelItemDetails field.
func (o *FleetsEmv) SetNonFuelItemDetails(v []NonFuelItemDetails) {
	o.NonFuelItemDetails = v
}

// GetNonFuelNetAmount returns the NonFuelNetAmount field value if set, zero value otherwise.
func (o *FleetsEmv) GetNonFuelNetAmount() int64 {
	if o == nil || IsNil(o.NonFuelNetAmount) {
		var ret int64
		return ret
	}
	return *o.NonFuelNetAmount
}

// GetNonFuelNetAmountOk returns a tuple with the NonFuelNetAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FleetsEmv) GetNonFuelNetAmountOk() (*int64, bool) {
	if o == nil || IsNil(o.NonFuelNetAmount) {
		return nil, false
	}
	return o.NonFuelNetAmount, true
}

// HasNonFuelNetAmount returns a boolean if a field has been set.
func (o *FleetsEmv) HasNonFuelNetAmount() bool {
	if o != nil && !IsNil(o.NonFuelNetAmount) {
		return true
	}

	return false
}

// SetNonFuelNetAmount gets a reference to the given int64 and assigns it to the NonFuelNetAmount field.
func (o *FleetsEmv) SetNonFuelNetAmount(v int64) {
	o.NonFuelNetAmount = &v
}

// GetOdometerReading returns the OdometerReading field value if set, zero value otherwise.
func (o *FleetsEmv) GetOdometerReading() string {
	if o == nil || IsNil(o.OdometerReading) {
		var ret string
		return ret
	}
	return *o.OdometerReading
}

// GetOdometerReadingOk returns a tuple with the OdometerReading field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FleetsEmv) GetOdometerReadingOk() (*string, bool) {
	if o == nil || IsNil(o.OdometerReading) {
		return nil, false
	}
	return o.OdometerReading, true
}

// HasOdometerReading returns a boolean if a field has been set.
func (o *FleetsEmv) HasOdometerReading() bool {
	if o != nil && !IsNil(o.OdometerReading) {
		return true
	}

	return false
}

// SetOdometerReading gets a reference to the given string and assigns it to the OdometerReading field.
func (o *FleetsEmv) SetOdometerReading(v string) {
	o.OdometerReading = &v
}

// GetServiceType returns the ServiceType field value if set, zero value otherwise.
func (o *FleetsEmv) GetServiceType() string {
	if o == nil || IsNil(o.ServiceType) {
		var ret string
		return ret
	}
	return *o.ServiceType
}

// GetServiceTypeOk returns a tuple with the ServiceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FleetsEmv) GetServiceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceType) {
		return nil, false
	}
	return o.ServiceType, true
}

// HasServiceType returns a boolean if a field has been set.
func (o *FleetsEmv) HasServiceType() bool {
	if o != nil && !IsNil(o.ServiceType) {
		return true
	}

	return false
}

// SetServiceType gets a reference to the given string and assigns it to the ServiceType field.
func (o *FleetsEmv) SetServiceType(v string) {
	o.ServiceType = &v
}

// GetTrailerNumber returns the TrailerNumber field value if set, zero value otherwise.
func (o *FleetsEmv) GetTrailerNumber() string {
	if o == nil || IsNil(o.TrailerNumber) {
		var ret string
		return ret
	}
	return *o.TrailerNumber
}

// GetTrailerNumberOk returns a tuple with the TrailerNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FleetsEmv) GetTrailerNumberOk() (*string, bool) {
	if o == nil || IsNil(o.TrailerNumber) {
		return nil, false
	}
	return o.TrailerNumber, true
}

// HasTrailerNumber returns a boolean if a field has been set.
func (o *FleetsEmv) HasTrailerNumber() bool {
	if o != nil && !IsNil(o.TrailerNumber) {
		return true
	}

	return false
}

// SetTrailerNumber gets a reference to the given string and assigns it to the TrailerNumber field.
func (o *FleetsEmv) SetTrailerNumber(v string) {
	o.TrailerNumber = &v
}

// GetTypeOfPurchase returns the TypeOfPurchase field value if set, zero value otherwise.
func (o *FleetsEmv) GetTypeOfPurchase() string {
	if o == nil || IsNil(o.TypeOfPurchase) {
		var ret string
		return ret
	}
	return *o.TypeOfPurchase
}

// GetTypeOfPurchaseOk returns a tuple with the TypeOfPurchase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FleetsEmv) GetTypeOfPurchaseOk() (*string, bool) {
	if o == nil || IsNil(o.TypeOfPurchase) {
		return nil, false
	}
	return o.TypeOfPurchase, true
}

// HasTypeOfPurchase returns a boolean if a field has been set.
func (o *FleetsEmv) HasTypeOfPurchase() bool {
	if o != nil && !IsNil(o.TypeOfPurchase) {
		return true
	}

	return false
}

// SetTypeOfPurchase gets a reference to the given string and assigns it to the TypeOfPurchase field.
func (o *FleetsEmv) SetTypeOfPurchase(v string) {
	o.TypeOfPurchase = &v
}

// GetVatTaxRate returns the VatTaxRate field value if set, zero value otherwise.
func (o *FleetsEmv) GetVatTaxRate() float32 {
	if o == nil || IsNil(o.VatTaxRate) {
		var ret float32
		return ret
	}
	return *o.VatTaxRate
}

// GetVatTaxRateOk returns a tuple with the VatTaxRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FleetsEmv) GetVatTaxRateOk() (*float32, bool) {
	if o == nil || IsNil(o.VatTaxRate) {
		return nil, false
	}
	return o.VatTaxRate, true
}

// HasVatTaxRate returns a boolean if a field has been set.
func (o *FleetsEmv) HasVatTaxRate() bool {
	if o != nil && !IsNil(o.VatTaxRate) {
		return true
	}

	return false
}

// SetVatTaxRate gets a reference to the given float32 and assigns it to the VatTaxRate field.
func (o *FleetsEmv) SetVatTaxRate(v float32) {
	o.VatTaxRate = &v
}

func (o FleetsEmv) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FleetsEmv) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EmployeeNumber) {
		toSerialize["employee_number"] = o.EmployeeNumber
	}
	if !IsNil(o.ExpandedFuelType) {
		toSerialize["expanded_fuel_type"] = o.ExpandedFuelType
	}
	if !IsNil(o.FuelGrossAmount) {
		toSerialize["fuel_gross_amount"] = o.FuelGrossAmount
	}
	if !IsNil(o.FuelNetAmount) {
		toSerialize["fuel_net_amount"] = o.FuelNetAmount
	}
	if !IsNil(o.FuelQuantity) {
		toSerialize["fuel_quantity"] = o.FuelQuantity
	}
	if !IsNil(o.FuelUnitOfMeasure) {
		toSerialize["fuel_unit_of_measure"] = o.FuelUnitOfMeasure
	}
	if !IsNil(o.FuelUnitPrice) {
		toSerialize["fuel_unit_price"] = o.FuelUnitPrice
	}
	if !IsNil(o.NonFuelGrossAmount) {
		toSerialize["non_fuel_gross_amount"] = o.NonFuelGrossAmount
	}
	if !IsNil(o.NonFuelItemDetails) {
		toSerialize["non_fuel_item_details"] = o.NonFuelItemDetails
	}
	if !IsNil(o.NonFuelNetAmount) {
		toSerialize["non_fuel_net_amount"] = o.NonFuelNetAmount
	}
	if !IsNil(o.OdometerReading) {
		toSerialize["odometer_reading"] = o.OdometerReading
	}
	if !IsNil(o.ServiceType) {
		toSerialize["service_type"] = o.ServiceType
	}
	if !IsNil(o.TrailerNumber) {
		toSerialize["trailer_number"] = o.TrailerNumber
	}
	if !IsNil(o.TypeOfPurchase) {
		toSerialize["type_of_purchase"] = o.TypeOfPurchase
	}
	if !IsNil(o.VatTaxRate) {
		toSerialize["vat_tax_rate"] = o.VatTaxRate
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FleetsEmv) UnmarshalJSON(data []byte) (err error) {
	varFleetsEmv := _FleetsEmv{}

	err = json.Unmarshal(data, &varFleetsEmv)

	if err != nil {
		return err
	}

	*o = FleetsEmv(varFleetsEmv)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "employee_number")
		delete(additionalProperties, "expanded_fuel_type")
		delete(additionalProperties, "fuel_gross_amount")
		delete(additionalProperties, "fuel_net_amount")
		delete(additionalProperties, "fuel_quantity")
		delete(additionalProperties, "fuel_unit_of_measure")
		delete(additionalProperties, "fuel_unit_price")
		delete(additionalProperties, "non_fuel_gross_amount")
		delete(additionalProperties, "non_fuel_item_details")
		delete(additionalProperties, "non_fuel_net_amount")
		delete(additionalProperties, "odometer_reading")
		delete(additionalProperties, "service_type")
		delete(additionalProperties, "trailer_number")
		delete(additionalProperties, "type_of_purchase")
		delete(additionalProperties, "vat_tax_rate")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFleetsEmv struct {
	value *FleetsEmv
	isSet bool
}

func (v NullableFleetsEmv) Get() *FleetsEmv {
	return v.value
}

func (v *NullableFleetsEmv) Set(val *FleetsEmv) {
	v.value = val
	v.isSet = true
}

func (v NullableFleetsEmv) IsSet() bool {
	return v.isSet
}

func (v *NullableFleetsEmv) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFleetsEmv(val *FleetsEmv) *NullableFleetsEmv {
	return &NullableFleetsEmv{value: val, isSet: true}
}

func (v NullableFleetsEmv) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFleetsEmv) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
