/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.153.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"encoding/json"
	"fmt"
)

// checks if the Question type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Question{}

// Question struct for Question
type Question struct {
	// The answer
	Answer string `json:"answer"`
	// The question
	Question string `json:"question"`
	// The section of the question
	Section              *string `json:"section,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Question Question

// NewQuestion instantiates a new Question object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuestion(answer string, question string) *Question {
	this := Question{}
	this.Answer = answer
	this.Question = question
	return &this
}

// NewQuestionWithDefaults instantiates a new Question object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuestionWithDefaults() *Question {
	this := Question{}
	return &this
}

// GetAnswer returns the Answer field value
func (o *Question) GetAnswer() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Answer
}

// GetAnswerOk returns a tuple with the Answer field value
// and a boolean to check if the value has been set.
func (o *Question) GetAnswerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Answer, true
}

// SetAnswer sets field value
func (o *Question) SetAnswer(v string) {
	o.Answer = v
}

// GetQuestion returns the Question field value
func (o *Question) GetQuestion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Question
}

// GetQuestionOk returns a tuple with the Question field value
// and a boolean to check if the value has been set.
func (o *Question) GetQuestionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Question, true
}

// SetQuestion sets field value
func (o *Question) SetQuestion(v string) {
	o.Question = v
}

// GetSection returns the Section field value if set, zero value otherwise.
func (o *Question) GetSection() string {
	if o == nil || IsNil(o.Section) {
		var ret string
		return ret
	}
	return *o.Section
}

// GetSectionOk returns a tuple with the Section field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Question) GetSectionOk() (*string, bool) {
	if o == nil || IsNil(o.Section) {
		return nil, false
	}
	return o.Section, true
}

// HasSection returns a boolean if a field has been set.
func (o *Question) HasSection() bool {
	if o != nil && !IsNil(o.Section) {
		return true
	}

	return false
}

// SetSection gets a reference to the given string and assigns it to the Section field.
func (o *Question) SetSection(v string) {
	o.Section = &v
}

func (o Question) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Question) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["answer"] = o.Answer
	toSerialize["question"] = o.Question
	if !IsNil(o.Section) {
		toSerialize["section"] = o.Section
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Question) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"answer",
		"question",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQuestion := _Question{}

	err = json.Unmarshal(data, &varQuestion)

	if err != nil {
		return err
	}

	*o = Question(varQuestion)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "answer")
		delete(additionalProperties, "question")
		delete(additionalProperties, "section")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableQuestion struct {
	value *Question
	isSet bool
}

func (v NullableQuestion) Get() *Question {
	return v.value
}

func (v *NullableQuestion) Set(val *Question) {
	v.value = val
	v.isSet = true
}

func (v NullableQuestion) IsSet() bool {
	return v.isSet
}

func (v *NullableQuestion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuestion(val *Question) *NullableQuestion {
	return &NullableQuestion{value: val, isSet: true}
}

func (v NullableQuestion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuestion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
