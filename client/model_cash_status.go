/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.150.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"encoding/json"
	"fmt"
)

// CashStatus The status of the transfer in the Synctera platform. This is automatically set upon the creation of a transfer. To cancel a transfer, the current status must be 'INITIATED' or 'PENDING' and the request status set to 'CANCELLED'. To trigger a return, the current status must be 'POSTED' and the returned status will be set to 'RETURNED' if successful.
type CashStatus string

// List of cash_status
const (
	CASHSTATUS_CANCELLED CashStatus = "CANCELLED"
	CASHSTATUS_EXPIRED   CashStatus = "EXPIRED"
	CASHSTATUS_INITIATED CashStatus = "INITIATED"
	CASHSTATUS_PENDING   CashStatus = "PENDING"
	CASHSTATUS_POSTED    CashStatus = "POSTED"
)

// All allowed values of CashStatus enum
var AllowedCashStatusEnumValues = []CashStatus{
	"CANCELLED",
	"EXPIRED",
	"INITIATED",
	"PENDING",
	"POSTED",
}

func (v *CashStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CashStatus(value)
	for _, existing := range AllowedCashStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CashStatus", value)
}

// NewCashStatusFromValue returns a pointer to a valid CashStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCashStatusFromValue(v string) (*CashStatus, error) {
	ev := CashStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CashStatus: valid values are %v", v, AllowedCashStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CashStatus) IsValid() bool {
	for _, existing := range AllowedCashStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to cash_status value
func (v CashStatus) Ptr() *CashStatus {
	return &v
}

type NullableCashStatus struct {
	value *CashStatus
	isSet bool
}

func (v NullableCashStatus) Get() *CashStatus {
	return v.value
}

func (v *NullableCashStatus) Set(val *CashStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableCashStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableCashStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCashStatus(val *CashStatus) *NullableCashStatus {
	return &NullableCashStatus{value: val, isSet: true}
}

func (v NullableCashStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCashStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
