/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.153.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"encoding/json"
	"fmt"
)

// CashAuthorizationType the model 'CashAuthorizationType'
type CashAuthorizationType string

// List of cash_authorization_type
const (
	CASHAUTHORIZATIONTYPE_CASH_ORDER CashAuthorizationType = "CASH_ORDER"
	CASHAUTHORIZATIONTYPE_DEPOSIT    CashAuthorizationType = "DEPOSIT"
)

// All allowed values of CashAuthorizationType enum
var AllowedCashAuthorizationTypeEnumValues = []CashAuthorizationType{
	"CASH_ORDER",
	"DEPOSIT",
}

func (v *CashAuthorizationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CashAuthorizationType(value)
	for _, existing := range AllowedCashAuthorizationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CashAuthorizationType", value)
}

// NewCashAuthorizationTypeFromValue returns a pointer to a valid CashAuthorizationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCashAuthorizationTypeFromValue(v string) (*CashAuthorizationType, error) {
	ev := CashAuthorizationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CashAuthorizationType: valid values are %v", v, AllowedCashAuthorizationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CashAuthorizationType) IsValid() bool {
	for _, existing := range AllowedCashAuthorizationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to cash_authorization_type value
func (v CashAuthorizationType) Ptr() *CashAuthorizationType {
	return &v
}

type NullableCashAuthorizationType struct {
	value *CashAuthorizationType
	isSet bool
}

func (v NullableCashAuthorizationType) Get() *CashAuthorizationType {
	return v.value
}

func (v *NullableCashAuthorizationType) Set(val *CashAuthorizationType) {
	v.value = val
	v.isSet = true
}

func (v NullableCashAuthorizationType) IsSet() bool {
	return v.isSet
}

func (v *NullableCashAuthorizationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCashAuthorizationType(val *CashAuthorizationType) *NullableCashAuthorizationType {
	return &NullableCashAuthorizationType{value: val, isSet: true}
}

func (v NullableCashAuthorizationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCashAuthorizationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
