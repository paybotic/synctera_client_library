/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.150.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the AchTransactionSimulationRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AchTransactionSimulationRequest{}

// AchTransactionSimulationRequest Simulate receiving an ACH transaction
type AchTransactionSimulationRequest struct {
	// Number of the receiving account
	AccountNumber string `json:"account_number"`
	// Amount to transfer in cents (e.g. 100 = $1). Generates a prenote if set to 0.
	Amount int32 `json:"amount"`
	// The type of transaction (debit or credit) in relation to the receiving account. A credit is a transfer in and a debit is a transfer pulling money out of the receiving account.
	DcSign string `json:"dc_sign"`
	// Effective date of the transaction. Transactions with the current date or date in the past are posted immediately. Future-dated transactions are scheduled to be posted on the chosen date.
	EffectiveDate string `json:"effective_date"`
}

type _AchTransactionSimulationRequest AchTransactionSimulationRequest

// NewAchTransactionSimulationRequest instantiates a new AchTransactionSimulationRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAchTransactionSimulationRequest(accountNumber string, amount int32, dcSign string, effectiveDate string) *AchTransactionSimulationRequest {
	this := AchTransactionSimulationRequest{}
	this.AccountNumber = accountNumber
	this.Amount = amount
	this.DcSign = dcSign
	this.EffectiveDate = effectiveDate
	return &this
}

// NewAchTransactionSimulationRequestWithDefaults instantiates a new AchTransactionSimulationRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAchTransactionSimulationRequestWithDefaults() *AchTransactionSimulationRequest {
	this := AchTransactionSimulationRequest{}
	return &this
}

// GetAccountNumber returns the AccountNumber field value
func (o *AchTransactionSimulationRequest) GetAccountNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountNumber
}

// GetAccountNumberOk returns a tuple with the AccountNumber field value
// and a boolean to check if the value has been set.
func (o *AchTransactionSimulationRequest) GetAccountNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountNumber, true
}

// SetAccountNumber sets field value
func (o *AchTransactionSimulationRequest) SetAccountNumber(v string) {
	o.AccountNumber = v
}

// GetAmount returns the Amount field value
func (o *AchTransactionSimulationRequest) GetAmount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *AchTransactionSimulationRequest) GetAmountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *AchTransactionSimulationRequest) SetAmount(v int32) {
	o.Amount = v
}

// GetDcSign returns the DcSign field value
func (o *AchTransactionSimulationRequest) GetDcSign() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DcSign
}

// GetDcSignOk returns a tuple with the DcSign field value
// and a boolean to check if the value has been set.
func (o *AchTransactionSimulationRequest) GetDcSignOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DcSign, true
}

// SetDcSign sets field value
func (o *AchTransactionSimulationRequest) SetDcSign(v string) {
	o.DcSign = v
}

// GetEffectiveDate returns the EffectiveDate field value
func (o *AchTransactionSimulationRequest) GetEffectiveDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EffectiveDate
}

// GetEffectiveDateOk returns a tuple with the EffectiveDate field value
// and a boolean to check if the value has been set.
func (o *AchTransactionSimulationRequest) GetEffectiveDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EffectiveDate, true
}

// SetEffectiveDate sets field value
func (o *AchTransactionSimulationRequest) SetEffectiveDate(v string) {
	o.EffectiveDate = v
}

func (o AchTransactionSimulationRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AchTransactionSimulationRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["account_number"] = o.AccountNumber
	toSerialize["amount"] = o.Amount
	toSerialize["dc_sign"] = o.DcSign
	toSerialize["effective_date"] = o.EffectiveDate
	return toSerialize, nil
}

func (o *AchTransactionSimulationRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"account_number",
		"amount",
		"dc_sign",
		"effective_date",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAchTransactionSimulationRequest := _AchTransactionSimulationRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAchTransactionSimulationRequest)

	if err != nil {
		return err
	}

	*o = AchTransactionSimulationRequest(varAchTransactionSimulationRequest)

	return err
}

type NullableAchTransactionSimulationRequest struct {
	value *AchTransactionSimulationRequest
	isSet bool
}

func (v NullableAchTransactionSimulationRequest) Get() *AchTransactionSimulationRequest {
	return v.value
}

func (v *NullableAchTransactionSimulationRequest) Set(val *AchTransactionSimulationRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAchTransactionSimulationRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAchTransactionSimulationRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAchTransactionSimulationRequest(val *AchTransactionSimulationRequest) *NullableAchTransactionSimulationRequest {
	return &NullableAchTransactionSimulationRequest{value: val, isSet: true}
}

func (v NullableAchTransactionSimulationRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAchTransactionSimulationRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
