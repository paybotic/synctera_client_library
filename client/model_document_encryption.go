/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.153.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"encoding/json"
	"fmt"
)

// DocumentEncryption Whether the file will be encrypted by the Synctera platform before storing. All documents containing PII must be encrypted.  Creating and retrieving encrypted documents requires documents_encrypted:write and documents_encrypted:read permissions, respectively.  If encryption is not specified, a default will be chosen based on the document type. See the following table.  Document types with a default of REQUIRED must be encrypted. It is an error to explicitly set encryption to NOT_REQUIRED for these document types.  Document types with a default of NOT_REQUIRED may optionally be encrypted by explicitly setting encryption to REQUIRED.  | Document Type | Default Encryption | |---------------|---------------------| | ADDRESS_VERIFICATION       | REQUIRED | | APPLICATION_DOCUMENTATION  | NOT_REQUIRED | | BILLING_DOCUMENT           | NOT_REQUIRED | | CHECK_IMAGE                | REQUIRED | | COMPANY_PROFILE_DOCUMENT   | NOT_REQUIRED | | COMPLIANCE_REPORT          | REQUIRED | | DATE_OF_BIRTH_VERIFICATION | REQUIRED | | FINANCIAL_FILE             | REQUIRED | | IDENTITY_DOCUMENTATION     | REQUIRED | | INCOME_DOCUMENTATION       | REQUIRED | | STATEMENT                  | NOT_REQUIRED | | STATEMENT_DISCLOSURE       | NOT_REQUIRED | | TAX_FORM                   | REQUIRED | | TERMS_OF_SERVICE           | NOT_REQUIRED |
type DocumentEncryption string

// List of document_encryption
const (
	DOCUMENTENCRYPTION_NOT_REQUIRED DocumentEncryption = "NOT_REQUIRED"
	DOCUMENTENCRYPTION_REQUIRED     DocumentEncryption = "REQUIRED"
)

// All allowed values of DocumentEncryption enum
var AllowedDocumentEncryptionEnumValues = []DocumentEncryption{
	"NOT_REQUIRED",
	"REQUIRED",
}

func (v *DocumentEncryption) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DocumentEncryption(value)
	for _, existing := range AllowedDocumentEncryptionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DocumentEncryption", value)
}

// NewDocumentEncryptionFromValue returns a pointer to a valid DocumentEncryption
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDocumentEncryptionFromValue(v string) (*DocumentEncryption, error) {
	ev := DocumentEncryption(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DocumentEncryption: valid values are %v", v, AllowedDocumentEncryptionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DocumentEncryption) IsValid() bool {
	for _, existing := range AllowedDocumentEncryptionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to document_encryption value
func (v DocumentEncryption) Ptr() *DocumentEncryption {
	return &v
}

type NullableDocumentEncryption struct {
	value *DocumentEncryption
	isSet bool
}

func (v NullableDocumentEncryption) Get() *DocumentEncryption {
	return v.value
}

func (v *NullableDocumentEncryption) Set(val *DocumentEncryption) {
	v.value = val
	v.isSet = true
}

func (v NullableDocumentEncryption) IsSet() bool {
	return v.isSet
}

func (v *NullableDocumentEncryption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocumentEncryption(val *DocumentEncryption) *NullableDocumentEncryption {
	return &NullableDocumentEncryption{value: val, isSet: true}
}

func (v NullableDocumentEncryption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocumentEncryption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
