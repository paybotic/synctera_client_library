/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.153.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"encoding/json"
	"fmt"
)

// PersonStatus Status of the person. One of the following: * `ACTIVE` – is an integrator defined status.  Integrators should set a person to active if they believe the person to be qualified for conducting business.  Synctera will combine this status with other statuses such a verification to determine if the person is eligible for specific actions such as initiating transactions or issuing a card. * `DECEASED` – person is deceased. * `DENIED` – customer was turned down. * `DORMANT` – person is no longer active. * `ESCHEAT` – person's assets are abandoned and are property of the state. * `FROZEN` – person's actions are blocked for security, legal, or other reasons. * `INACTIVE` – an inactive status indicating that the person is no longer active. * `PROSPECT` – a potential customer, used for information-gathering and disclosures. * `SANCTION` – person is on a sanctions list and should be carefully monitored.
type PersonStatus string

// List of person_status
const (
	PERSONSTATUS_ACTIVE   PersonStatus = "ACTIVE"
	PERSONSTATUS_DECEASED PersonStatus = "DECEASED"
	PERSONSTATUS_DENIED   PersonStatus = "DENIED"
	PERSONSTATUS_DORMANT  PersonStatus = "DORMANT"
	PERSONSTATUS_ESCHEAT  PersonStatus = "ESCHEAT"
	PERSONSTATUS_FROZEN   PersonStatus = "FROZEN"
	PERSONSTATUS_INACTIVE PersonStatus = "INACTIVE"
	PERSONSTATUS_PROSPECT PersonStatus = "PROSPECT"
	PERSONSTATUS_SANCTION PersonStatus = "SANCTION"
)

// All allowed values of PersonStatus enum
var AllowedPersonStatusEnumValues = []PersonStatus{
	"ACTIVE",
	"DECEASED",
	"DENIED",
	"DORMANT",
	"ESCHEAT",
	"FROZEN",
	"INACTIVE",
	"PROSPECT",
	"SANCTION",
}

func (v *PersonStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PersonStatus(value)
	for _, existing := range AllowedPersonStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PersonStatus", value)
}

// NewPersonStatusFromValue returns a pointer to a valid PersonStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPersonStatusFromValue(v string) (*PersonStatus, error) {
	ev := PersonStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PersonStatus: valid values are %v", v, AllowedPersonStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PersonStatus) IsValid() bool {
	for _, existing := range AllowedPersonStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to person_status value
func (v PersonStatus) Ptr() *PersonStatus {
	return &v
}

type NullablePersonStatus struct {
	value *PersonStatus
	isSet bool
}

func (v NullablePersonStatus) Get() *PersonStatus {
	return v.value
}

func (v *NullablePersonStatus) Set(val *PersonStatus) {
	v.value = val
	v.isSet = true
}

func (v NullablePersonStatus) IsSet() bool {
	return v.isSet
}

func (v *NullablePersonStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePersonStatus(val *PersonStatus) *NullablePersonStatus {
	return &NullablePersonStatus{value: val, isSet: true}
}

func (v NullablePersonStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePersonStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
