/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.150.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the AddressResponseBase type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddressResponseBase{}

// AddressResponseBase struct for AddressResponseBase
type AddressResponseBase struct {
	// The identifier for the business customer associated with address.
	BusinessId *string `json:"business_id,omitempty"`
	// Date and time when the address was created.
	CreationDate time.Time `json:"creation_date"`
	// The identifier for the personal customer associated with address.
	CustomerId *string `json:"customer_id,omitempty"`
	// Whether the address is active or not
	IsActive        bool      `json:"is_active"`
	LastUpdatedTime time.Time `json:"last_updated_time"`
}

type _AddressResponseBase AddressResponseBase

// NewAddressResponseBase instantiates a new AddressResponseBase object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddressResponseBase(creationDate time.Time, isActive bool, lastUpdatedTime time.Time) *AddressResponseBase {
	this := AddressResponseBase{}
	this.CreationDate = creationDate
	this.IsActive = isActive
	this.LastUpdatedTime = lastUpdatedTime
	return &this
}

// NewAddressResponseBaseWithDefaults instantiates a new AddressResponseBase object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddressResponseBaseWithDefaults() *AddressResponseBase {
	this := AddressResponseBase{}
	return &this
}

// GetBusinessId returns the BusinessId field value if set, zero value otherwise.
func (o *AddressResponseBase) GetBusinessId() string {
	if o == nil || IsNil(o.BusinessId) {
		var ret string
		return ret
	}
	return *o.BusinessId
}

// GetBusinessIdOk returns a tuple with the BusinessId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressResponseBase) GetBusinessIdOk() (*string, bool) {
	if o == nil || IsNil(o.BusinessId) {
		return nil, false
	}
	return o.BusinessId, true
}

// HasBusinessId returns a boolean if a field has been set.
func (o *AddressResponseBase) HasBusinessId() bool {
	if o != nil && !IsNil(o.BusinessId) {
		return true
	}

	return false
}

// SetBusinessId gets a reference to the given string and assigns it to the BusinessId field.
func (o *AddressResponseBase) SetBusinessId(v string) {
	o.BusinessId = &v
}

// GetCreationDate returns the CreationDate field value
func (o *AddressResponseBase) GetCreationDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreationDate
}

// GetCreationDateOk returns a tuple with the CreationDate field value
// and a boolean to check if the value has been set.
func (o *AddressResponseBase) GetCreationDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreationDate, true
}

// SetCreationDate sets field value
func (o *AddressResponseBase) SetCreationDate(v time.Time) {
	o.CreationDate = v
}

// GetCustomerId returns the CustomerId field value if set, zero value otherwise.
func (o *AddressResponseBase) GetCustomerId() string {
	if o == nil || IsNil(o.CustomerId) {
		var ret string
		return ret
	}
	return *o.CustomerId
}

// GetCustomerIdOk returns a tuple with the CustomerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressResponseBase) GetCustomerIdOk() (*string, bool) {
	if o == nil || IsNil(o.CustomerId) {
		return nil, false
	}
	return o.CustomerId, true
}

// HasCustomerId returns a boolean if a field has been set.
func (o *AddressResponseBase) HasCustomerId() bool {
	if o != nil && !IsNil(o.CustomerId) {
		return true
	}

	return false
}

// SetCustomerId gets a reference to the given string and assigns it to the CustomerId field.
func (o *AddressResponseBase) SetCustomerId(v string) {
	o.CustomerId = &v
}

// GetIsActive returns the IsActive field value
func (o *AddressResponseBase) GetIsActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value
// and a boolean to check if the value has been set.
func (o *AddressResponseBase) GetIsActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsActive, true
}

// SetIsActive sets field value
func (o *AddressResponseBase) SetIsActive(v bool) {
	o.IsActive = v
}

// GetLastUpdatedTime returns the LastUpdatedTime field value
func (o *AddressResponseBase) GetLastUpdatedTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.LastUpdatedTime
}

// GetLastUpdatedTimeOk returns a tuple with the LastUpdatedTime field value
// and a boolean to check if the value has been set.
func (o *AddressResponseBase) GetLastUpdatedTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastUpdatedTime, true
}

// SetLastUpdatedTime sets field value
func (o *AddressResponseBase) SetLastUpdatedTime(v time.Time) {
	o.LastUpdatedTime = v
}

func (o AddressResponseBase) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddressResponseBase) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BusinessId) {
		toSerialize["business_id"] = o.BusinessId
	}
	toSerialize["creation_date"] = o.CreationDate
	if !IsNil(o.CustomerId) {
		toSerialize["customer_id"] = o.CustomerId
	}
	toSerialize["is_active"] = o.IsActive
	toSerialize["last_updated_time"] = o.LastUpdatedTime
	return toSerialize, nil
}

func (o *AddressResponseBase) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"creation_date",
		"is_active",
		"last_updated_time",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAddressResponseBase := _AddressResponseBase{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAddressResponseBase)

	if err != nil {
		return err
	}

	*o = AddressResponseBase(varAddressResponseBase)

	return err
}

type NullableAddressResponseBase struct {
	value *AddressResponseBase
	isSet bool
}

func (v NullableAddressResponseBase) Get() *AddressResponseBase {
	return v.value
}

func (v *NullableAddressResponseBase) Set(val *AddressResponseBase) {
	v.value = val
	v.isSet = true
}

func (v NullableAddressResponseBase) IsSet() bool {
	return v.isSet
}

func (v *NullableAddressResponseBase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddressResponseBase(val *AddressResponseBase) *NullableAddressResponseBase {
	return &NullableAddressResponseBase{value: val, isSet: true}
}

func (v NullableAddressResponseBase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddressResponseBase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
