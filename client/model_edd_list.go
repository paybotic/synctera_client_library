/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.153.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"encoding/json"
	"fmt"
)

// checks if the EddList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EddList{}

// EddList struct for EddList
type EddList struct {
	// If returned, use the next_page_token to query for the next page of results. Not returned if there are no more rows.
	NextPageToken *string `json:"next_page_token,omitempty"`
	// Array of edd reports.
	EddReports           []CreateEddResponse `json:"edd_reports"`
	AdditionalProperties map[string]interface{}
}

type _EddList EddList

// NewEddList instantiates a new EddList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEddList(eddReports []CreateEddResponse) *EddList {
	this := EddList{}
	this.EddReports = eddReports
	return &this
}

// NewEddListWithDefaults instantiates a new EddList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEddListWithDefaults() *EddList {
	this := EddList{}
	return &this
}

// GetNextPageToken returns the NextPageToken field value if set, zero value otherwise.
func (o *EddList) GetNextPageToken() string {
	if o == nil || IsNil(o.NextPageToken) {
		var ret string
		return ret
	}
	return *o.NextPageToken
}

// GetNextPageTokenOk returns a tuple with the NextPageToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EddList) GetNextPageTokenOk() (*string, bool) {
	if o == nil || IsNil(o.NextPageToken) {
		return nil, false
	}
	return o.NextPageToken, true
}

// HasNextPageToken returns a boolean if a field has been set.
func (o *EddList) HasNextPageToken() bool {
	if o != nil && !IsNil(o.NextPageToken) {
		return true
	}

	return false
}

// SetNextPageToken gets a reference to the given string and assigns it to the NextPageToken field.
func (o *EddList) SetNextPageToken(v string) {
	o.NextPageToken = &v
}

// GetEddReports returns the EddReports field value
func (o *EddList) GetEddReports() []CreateEddResponse {
	if o == nil {
		var ret []CreateEddResponse
		return ret
	}

	return o.EddReports
}

// GetEddReportsOk returns a tuple with the EddReports field value
// and a boolean to check if the value has been set.
func (o *EddList) GetEddReportsOk() ([]CreateEddResponse, bool) {
	if o == nil {
		return nil, false
	}
	return o.EddReports, true
}

// SetEddReports sets field value
func (o *EddList) SetEddReports(v []CreateEddResponse) {
	o.EddReports = v
}

func (o EddList) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EddList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NextPageToken) {
		toSerialize["next_page_token"] = o.NextPageToken
	}
	toSerialize["edd_reports"] = o.EddReports

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EddList) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"edd_reports",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEddList := _EddList{}

	err = json.Unmarshal(data, &varEddList)

	if err != nil {
		return err
	}

	*o = EddList(varEddList)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "next_page_token")
		delete(additionalProperties, "edd_reports")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEddList struct {
	value *EddList
	isSet bool
}

func (v NullableEddList) Get() *EddList {
	return v.value
}

func (v *NullableEddList) Set(val *EddList) {
	v.value = val
	v.isSet = true
}

func (v NullableEddList) IsSet() bool {
	return v.isSet
}

func (v *NullableEddList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEddList(val *EddList) *NullableEddList {
	return &NullableEddList{value: val, isSet: true}
}

func (v NullableEddList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEddList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
