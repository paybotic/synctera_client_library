/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.153.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"encoding/json"
)

// checks if the ItemDetailTaxes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ItemDetailTaxes{}

// ItemDetailTaxes struct for ItemDetailTaxes
type ItemDetailTaxes struct {
	DetailTaxAmount                   *int64  `json:"detail_tax_amount,omitempty"`
	DetailTaxAmountInclusionIndicator *string `json:"detail_tax_amount_inclusion_indicator,omitempty"`
	DetailTaxAmountIndicator          *string `json:"detail_tax_amount_indicator,omitempty"`
	DetailTaxRate                     *int64  `json:"detail_tax_rate,omitempty"`
	DetailTaxTypeApplied              *string `json:"detail_tax_type_applied,omitempty"`
	DetailTaxTypeIdentifier           *string `json:"detail_tax_type_identifier,omitempty"`
	AdditionalProperties              map[string]interface{}
}

type _ItemDetailTaxes ItemDetailTaxes

// NewItemDetailTaxes instantiates a new ItemDetailTaxes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewItemDetailTaxes() *ItemDetailTaxes {
	this := ItemDetailTaxes{}
	return &this
}

// NewItemDetailTaxesWithDefaults instantiates a new ItemDetailTaxes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewItemDetailTaxesWithDefaults() *ItemDetailTaxes {
	this := ItemDetailTaxes{}
	return &this
}

// GetDetailTaxAmount returns the DetailTaxAmount field value if set, zero value otherwise.
func (o *ItemDetailTaxes) GetDetailTaxAmount() int64 {
	if o == nil || IsNil(o.DetailTaxAmount) {
		var ret int64
		return ret
	}
	return *o.DetailTaxAmount
}

// GetDetailTaxAmountOk returns a tuple with the DetailTaxAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemDetailTaxes) GetDetailTaxAmountOk() (*int64, bool) {
	if o == nil || IsNil(o.DetailTaxAmount) {
		return nil, false
	}
	return o.DetailTaxAmount, true
}

// HasDetailTaxAmount returns a boolean if a field has been set.
func (o *ItemDetailTaxes) HasDetailTaxAmount() bool {
	if o != nil && !IsNil(o.DetailTaxAmount) {
		return true
	}

	return false
}

// SetDetailTaxAmount gets a reference to the given int64 and assigns it to the DetailTaxAmount field.
func (o *ItemDetailTaxes) SetDetailTaxAmount(v int64) {
	o.DetailTaxAmount = &v
}

// GetDetailTaxAmountInclusionIndicator returns the DetailTaxAmountInclusionIndicator field value if set, zero value otherwise.
func (o *ItemDetailTaxes) GetDetailTaxAmountInclusionIndicator() string {
	if o == nil || IsNil(o.DetailTaxAmountInclusionIndicator) {
		var ret string
		return ret
	}
	return *o.DetailTaxAmountInclusionIndicator
}

// GetDetailTaxAmountInclusionIndicatorOk returns a tuple with the DetailTaxAmountInclusionIndicator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemDetailTaxes) GetDetailTaxAmountInclusionIndicatorOk() (*string, bool) {
	if o == nil || IsNil(o.DetailTaxAmountInclusionIndicator) {
		return nil, false
	}
	return o.DetailTaxAmountInclusionIndicator, true
}

// HasDetailTaxAmountInclusionIndicator returns a boolean if a field has been set.
func (o *ItemDetailTaxes) HasDetailTaxAmountInclusionIndicator() bool {
	if o != nil && !IsNil(o.DetailTaxAmountInclusionIndicator) {
		return true
	}

	return false
}

// SetDetailTaxAmountInclusionIndicator gets a reference to the given string and assigns it to the DetailTaxAmountInclusionIndicator field.
func (o *ItemDetailTaxes) SetDetailTaxAmountInclusionIndicator(v string) {
	o.DetailTaxAmountInclusionIndicator = &v
}

// GetDetailTaxAmountIndicator returns the DetailTaxAmountIndicator field value if set, zero value otherwise.
func (o *ItemDetailTaxes) GetDetailTaxAmountIndicator() string {
	if o == nil || IsNil(o.DetailTaxAmountIndicator) {
		var ret string
		return ret
	}
	return *o.DetailTaxAmountIndicator
}

// GetDetailTaxAmountIndicatorOk returns a tuple with the DetailTaxAmountIndicator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemDetailTaxes) GetDetailTaxAmountIndicatorOk() (*string, bool) {
	if o == nil || IsNil(o.DetailTaxAmountIndicator) {
		return nil, false
	}
	return o.DetailTaxAmountIndicator, true
}

// HasDetailTaxAmountIndicator returns a boolean if a field has been set.
func (o *ItemDetailTaxes) HasDetailTaxAmountIndicator() bool {
	if o != nil && !IsNil(o.DetailTaxAmountIndicator) {
		return true
	}

	return false
}

// SetDetailTaxAmountIndicator gets a reference to the given string and assigns it to the DetailTaxAmountIndicator field.
func (o *ItemDetailTaxes) SetDetailTaxAmountIndicator(v string) {
	o.DetailTaxAmountIndicator = &v
}

// GetDetailTaxRate returns the DetailTaxRate field value if set, zero value otherwise.
func (o *ItemDetailTaxes) GetDetailTaxRate() int64 {
	if o == nil || IsNil(o.DetailTaxRate) {
		var ret int64
		return ret
	}
	return *o.DetailTaxRate
}

// GetDetailTaxRateOk returns a tuple with the DetailTaxRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemDetailTaxes) GetDetailTaxRateOk() (*int64, bool) {
	if o == nil || IsNil(o.DetailTaxRate) {
		return nil, false
	}
	return o.DetailTaxRate, true
}

// HasDetailTaxRate returns a boolean if a field has been set.
func (o *ItemDetailTaxes) HasDetailTaxRate() bool {
	if o != nil && !IsNil(o.DetailTaxRate) {
		return true
	}

	return false
}

// SetDetailTaxRate gets a reference to the given int64 and assigns it to the DetailTaxRate field.
func (o *ItemDetailTaxes) SetDetailTaxRate(v int64) {
	o.DetailTaxRate = &v
}

// GetDetailTaxTypeApplied returns the DetailTaxTypeApplied field value if set, zero value otherwise.
func (o *ItemDetailTaxes) GetDetailTaxTypeApplied() string {
	if o == nil || IsNil(o.DetailTaxTypeApplied) {
		var ret string
		return ret
	}
	return *o.DetailTaxTypeApplied
}

// GetDetailTaxTypeAppliedOk returns a tuple with the DetailTaxTypeApplied field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemDetailTaxes) GetDetailTaxTypeAppliedOk() (*string, bool) {
	if o == nil || IsNil(o.DetailTaxTypeApplied) {
		return nil, false
	}
	return o.DetailTaxTypeApplied, true
}

// HasDetailTaxTypeApplied returns a boolean if a field has been set.
func (o *ItemDetailTaxes) HasDetailTaxTypeApplied() bool {
	if o != nil && !IsNil(o.DetailTaxTypeApplied) {
		return true
	}

	return false
}

// SetDetailTaxTypeApplied gets a reference to the given string and assigns it to the DetailTaxTypeApplied field.
func (o *ItemDetailTaxes) SetDetailTaxTypeApplied(v string) {
	o.DetailTaxTypeApplied = &v
}

// GetDetailTaxTypeIdentifier returns the DetailTaxTypeIdentifier field value if set, zero value otherwise.
func (o *ItemDetailTaxes) GetDetailTaxTypeIdentifier() string {
	if o == nil || IsNil(o.DetailTaxTypeIdentifier) {
		var ret string
		return ret
	}
	return *o.DetailTaxTypeIdentifier
}

// GetDetailTaxTypeIdentifierOk returns a tuple with the DetailTaxTypeIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemDetailTaxes) GetDetailTaxTypeIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.DetailTaxTypeIdentifier) {
		return nil, false
	}
	return o.DetailTaxTypeIdentifier, true
}

// HasDetailTaxTypeIdentifier returns a boolean if a field has been set.
func (o *ItemDetailTaxes) HasDetailTaxTypeIdentifier() bool {
	if o != nil && !IsNil(o.DetailTaxTypeIdentifier) {
		return true
	}

	return false
}

// SetDetailTaxTypeIdentifier gets a reference to the given string and assigns it to the DetailTaxTypeIdentifier field.
func (o *ItemDetailTaxes) SetDetailTaxTypeIdentifier(v string) {
	o.DetailTaxTypeIdentifier = &v
}

func (o ItemDetailTaxes) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ItemDetailTaxes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DetailTaxAmount) {
		toSerialize["detail_tax_amount"] = o.DetailTaxAmount
	}
	if !IsNil(o.DetailTaxAmountInclusionIndicator) {
		toSerialize["detail_tax_amount_inclusion_indicator"] = o.DetailTaxAmountInclusionIndicator
	}
	if !IsNil(o.DetailTaxAmountIndicator) {
		toSerialize["detail_tax_amount_indicator"] = o.DetailTaxAmountIndicator
	}
	if !IsNil(o.DetailTaxRate) {
		toSerialize["detail_tax_rate"] = o.DetailTaxRate
	}
	if !IsNil(o.DetailTaxTypeApplied) {
		toSerialize["detail_tax_type_applied"] = o.DetailTaxTypeApplied
	}
	if !IsNil(o.DetailTaxTypeIdentifier) {
		toSerialize["detail_tax_type_identifier"] = o.DetailTaxTypeIdentifier
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ItemDetailTaxes) UnmarshalJSON(data []byte) (err error) {
	varItemDetailTaxes := _ItemDetailTaxes{}

	err = json.Unmarshal(data, &varItemDetailTaxes)

	if err != nil {
		return err
	}

	*o = ItemDetailTaxes(varItemDetailTaxes)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "detail_tax_amount")
		delete(additionalProperties, "detail_tax_amount_inclusion_indicator")
		delete(additionalProperties, "detail_tax_amount_indicator")
		delete(additionalProperties, "detail_tax_rate")
		delete(additionalProperties, "detail_tax_type_applied")
		delete(additionalProperties, "detail_tax_type_identifier")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableItemDetailTaxes struct {
	value *ItemDetailTaxes
	isSet bool
}

func (v NullableItemDetailTaxes) Get() *ItemDetailTaxes {
	return v.value
}

func (v *NullableItemDetailTaxes) Set(val *ItemDetailTaxes) {
	v.value = val
	v.isSet = true
}

func (v NullableItemDetailTaxes) IsSet() bool {
	return v.isSet
}

func (v *NullableItemDetailTaxes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableItemDetailTaxes(val *ItemDetailTaxes) *NullableItemDetailTaxes {
	return &NullableItemDetailTaxes{value: val, isSet: true}
}

func (v NullableItemDetailTaxes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableItemDetailTaxes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
