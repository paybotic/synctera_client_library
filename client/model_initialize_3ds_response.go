/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.153.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"encoding/json"
	"fmt"
)

// checks if the Initialize3dsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Initialize3dsResponse{}

// Initialize3dsResponse Initialization for an External Card Transfer 3-D Secure Authentication response
type Initialize3dsResponse struct {
	// JWT used for device data collection
	DeviceDataCollectionJwt string `json:"device_data_collection_jwt"`
	// URL used for device data collection
	DeviceDataCollectionUrl string `json:"device_data_collection_url"`
	// The unique identifier of the 3DS authentication
	Id                   string `json:"id"`
	AdditionalProperties map[string]interface{}
}

type _Initialize3dsResponse Initialize3dsResponse

// NewInitialize3dsResponse instantiates a new Initialize3dsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInitialize3dsResponse(deviceDataCollectionJwt string, deviceDataCollectionUrl string, id string) *Initialize3dsResponse {
	this := Initialize3dsResponse{}
	this.DeviceDataCollectionJwt = deviceDataCollectionJwt
	this.DeviceDataCollectionUrl = deviceDataCollectionUrl
	this.Id = id
	return &this
}

// NewInitialize3dsResponseWithDefaults instantiates a new Initialize3dsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInitialize3dsResponseWithDefaults() *Initialize3dsResponse {
	this := Initialize3dsResponse{}
	return &this
}

// GetDeviceDataCollectionJwt returns the DeviceDataCollectionJwt field value
func (o *Initialize3dsResponse) GetDeviceDataCollectionJwt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeviceDataCollectionJwt
}

// GetDeviceDataCollectionJwtOk returns a tuple with the DeviceDataCollectionJwt field value
// and a boolean to check if the value has been set.
func (o *Initialize3dsResponse) GetDeviceDataCollectionJwtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeviceDataCollectionJwt, true
}

// SetDeviceDataCollectionJwt sets field value
func (o *Initialize3dsResponse) SetDeviceDataCollectionJwt(v string) {
	o.DeviceDataCollectionJwt = v
}

// GetDeviceDataCollectionUrl returns the DeviceDataCollectionUrl field value
func (o *Initialize3dsResponse) GetDeviceDataCollectionUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeviceDataCollectionUrl
}

// GetDeviceDataCollectionUrlOk returns a tuple with the DeviceDataCollectionUrl field value
// and a boolean to check if the value has been set.
func (o *Initialize3dsResponse) GetDeviceDataCollectionUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeviceDataCollectionUrl, true
}

// SetDeviceDataCollectionUrl sets field value
func (o *Initialize3dsResponse) SetDeviceDataCollectionUrl(v string) {
	o.DeviceDataCollectionUrl = v
}

// GetId returns the Id field value
func (o *Initialize3dsResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Initialize3dsResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Initialize3dsResponse) SetId(v string) {
	o.Id = v
}

func (o Initialize3dsResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Initialize3dsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["device_data_collection_jwt"] = o.DeviceDataCollectionJwt
	toSerialize["device_data_collection_url"] = o.DeviceDataCollectionUrl
	toSerialize["id"] = o.Id

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Initialize3dsResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"device_data_collection_jwt",
		"device_data_collection_url",
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInitialize3dsResponse := _Initialize3dsResponse{}

	err = json.Unmarshal(data, &varInitialize3dsResponse)

	if err != nil {
		return err
	}

	*o = Initialize3dsResponse(varInitialize3dsResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "device_data_collection_jwt")
		delete(additionalProperties, "device_data_collection_url")
		delete(additionalProperties, "id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInitialize3dsResponse struct {
	value *Initialize3dsResponse
	isSet bool
}

func (v NullableInitialize3dsResponse) Get() *Initialize3dsResponse {
	return v.value
}

func (v *NullableInitialize3dsResponse) Set(val *Initialize3dsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableInitialize3dsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableInitialize3dsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInitialize3dsResponse(val *Initialize3dsResponse) *NullableInitialize3dsResponse {
	return &NullableInitialize3dsResponse{value: val, isSet: true}
}

func (v NullableInitialize3dsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInitialize3dsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
