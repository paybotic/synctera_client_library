/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.153.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"encoding/json"
	"fmt"
)

// checks if the AdditionalOwnerData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdditionalOwnerData{}

// AdditionalOwnerData Contains additional information about the relationship.
type AdditionalOwnerData struct {
	// Percentage ownership of the related business.
	PercentOwnership     float64 `json:"percent_ownership"`
	AdditionalProperties map[string]interface{}
}

type _AdditionalOwnerData AdditionalOwnerData

// NewAdditionalOwnerData instantiates a new AdditionalOwnerData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdditionalOwnerData(percentOwnership float64) *AdditionalOwnerData {
	this := AdditionalOwnerData{}
	this.PercentOwnership = percentOwnership
	return &this
}

// NewAdditionalOwnerDataWithDefaults instantiates a new AdditionalOwnerData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdditionalOwnerDataWithDefaults() *AdditionalOwnerData {
	this := AdditionalOwnerData{}
	return &this
}

// GetPercentOwnership returns the PercentOwnership field value
func (o *AdditionalOwnerData) GetPercentOwnership() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.PercentOwnership
}

// GetPercentOwnershipOk returns a tuple with the PercentOwnership field value
// and a boolean to check if the value has been set.
func (o *AdditionalOwnerData) GetPercentOwnershipOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PercentOwnership, true
}

// SetPercentOwnership sets field value
func (o *AdditionalOwnerData) SetPercentOwnership(v float64) {
	o.PercentOwnership = v
}

func (o AdditionalOwnerData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdditionalOwnerData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["percent_ownership"] = o.PercentOwnership

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AdditionalOwnerData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"percent_ownership",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAdditionalOwnerData := _AdditionalOwnerData{}

	err = json.Unmarshal(data, &varAdditionalOwnerData)

	if err != nil {
		return err
	}

	*o = AdditionalOwnerData(varAdditionalOwnerData)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "percent_ownership")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAdditionalOwnerData struct {
	value *AdditionalOwnerData
	isSet bool
}

func (v NullableAdditionalOwnerData) Get() *AdditionalOwnerData {
	return v.value
}

func (v *NullableAdditionalOwnerData) Set(val *AdditionalOwnerData) {
	v.value = val
	v.isSet = true
}

func (v NullableAdditionalOwnerData) IsSet() bool {
	return v.isSet
}

func (v *NullableAdditionalOwnerData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdditionalOwnerData(val *AdditionalOwnerData) *NullableAdditionalOwnerData {
	return &NullableAdditionalOwnerData{value: val, isSet: true}
}

func (v NullableAdditionalOwnerData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdditionalOwnerData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
