/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.150.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"encoding/json"
)

// checks if the DocumentPatch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DocumentPatch{}

// DocumentPatch struct for DocumentPatch
type DocumentPatch struct {
	// The ID of the batch that the document belongs to
	BatchId *string `json:"batch_id,omitempty"`
	// An explanation why the file was deleted. You must set a document's deletion_reason before deleting it.
	DeletionReason *string `json:"deletion_reason,omitempty"`
	// A description of the document
	Description *string `json:"description,omitempty"`
	// A user-friendly name for the document
	Name *string       `json:"name,omitempty"`
	Type *DocumentType `json:"type,omitempty"`
}

// NewDocumentPatch instantiates a new DocumentPatch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDocumentPatch() *DocumentPatch {
	this := DocumentPatch{}
	return &this
}

// NewDocumentPatchWithDefaults instantiates a new DocumentPatch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDocumentPatchWithDefaults() *DocumentPatch {
	this := DocumentPatch{}
	return &this
}

// GetBatchId returns the BatchId field value if set, zero value otherwise.
func (o *DocumentPatch) GetBatchId() string {
	if o == nil || IsNil(o.BatchId) {
		var ret string
		return ret
	}
	return *o.BatchId
}

// GetBatchIdOk returns a tuple with the BatchId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentPatch) GetBatchIdOk() (*string, bool) {
	if o == nil || IsNil(o.BatchId) {
		return nil, false
	}
	return o.BatchId, true
}

// HasBatchId returns a boolean if a field has been set.
func (o *DocumentPatch) HasBatchId() bool {
	if o != nil && !IsNil(o.BatchId) {
		return true
	}

	return false
}

// SetBatchId gets a reference to the given string and assigns it to the BatchId field.
func (o *DocumentPatch) SetBatchId(v string) {
	o.BatchId = &v
}

// GetDeletionReason returns the DeletionReason field value if set, zero value otherwise.
func (o *DocumentPatch) GetDeletionReason() string {
	if o == nil || IsNil(o.DeletionReason) {
		var ret string
		return ret
	}
	return *o.DeletionReason
}

// GetDeletionReasonOk returns a tuple with the DeletionReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentPatch) GetDeletionReasonOk() (*string, bool) {
	if o == nil || IsNil(o.DeletionReason) {
		return nil, false
	}
	return o.DeletionReason, true
}

// HasDeletionReason returns a boolean if a field has been set.
func (o *DocumentPatch) HasDeletionReason() bool {
	if o != nil && !IsNil(o.DeletionReason) {
		return true
	}

	return false
}

// SetDeletionReason gets a reference to the given string and assigns it to the DeletionReason field.
func (o *DocumentPatch) SetDeletionReason(v string) {
	o.DeletionReason = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DocumentPatch) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentPatch) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DocumentPatch) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DocumentPatch) SetDescription(v string) {
	o.Description = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DocumentPatch) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentPatch) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DocumentPatch) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DocumentPatch) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *DocumentPatch) GetType() DocumentType {
	if o == nil || IsNil(o.Type) {
		var ret DocumentType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentPatch) GetTypeOk() (*DocumentType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *DocumentPatch) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given DocumentType and assigns it to the Type field.
func (o *DocumentPatch) SetType(v DocumentType) {
	o.Type = &v
}

func (o DocumentPatch) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DocumentPatch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BatchId) {
		toSerialize["batch_id"] = o.BatchId
	}
	if !IsNil(o.DeletionReason) {
		toSerialize["deletion_reason"] = o.DeletionReason
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableDocumentPatch struct {
	value *DocumentPatch
	isSet bool
}

func (v NullableDocumentPatch) Get() *DocumentPatch {
	return v.value
}

func (v *NullableDocumentPatch) Set(val *DocumentPatch) {
	v.value = val
	v.isSet = true
}

func (v NullableDocumentPatch) IsSet() bool {
	return v.isSet
}

func (v *NullableDocumentPatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocumentPatch(val *DocumentPatch) *NullableDocumentPatch {
	return &NullableDocumentPatch{value: val, isSet: true}
}

func (v NullableDocumentPatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocumentPatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
