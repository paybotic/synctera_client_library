/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.153.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"encoding/json"
)

// checks if the Detail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Detail{}

// Detail An object containing information about an individual check performed.
type Detail struct {
	// Machine-readable identifier to allow grouping details into subsets.  Checks for the following categories should typcially be provided when onboarding personal customers: * `CIP` – Checks relating to a Customer Identification Program (CIP) including name, ID verification, and date of birth. * `ADDRESS` – Address check done either through a bureau or document verification. * `PHONE` – Phone checks, including verifying number and other correlation methods. * `EMAIL` – Email checks, including verifying email address and other correlation methods. * `FRAUD` – Checks relating to elements of fraud. * `SYNTHETIC` – Check relating to elements of synthetic identity. * `DEVICE` – Checks relating to elements of device risk. Can include SDK or IP screening. * `DOC_VERIFICATION` – Document Verification checks, where ID documents are submitted for verification, including liveness test, or other anti-forgery verification. * `SELFIE_CAPTURE` – Selfie capture check, including liveness test, or other anti-fake verification. * `SELFIE_DOCUMENT` – Check if selfie matches with photo on document. * `DOC_DETAILS` – Check if details on ID documents matches with supplied information. * `WATCHLIST` – Outcome from watchlist screenings (especially OFAC/SDN and other sanctions lists).  Checks for the following categories should typcially be provided when onboarding businesses customers: * `BUSINESS_NAME` – Business name check done against a bureau. * `OFFICE_ADDRESS` – Address check done either through a bureau or document verification. * `SOS_FILINGS` – Findings from a Secretary of State (SOS) filings check. * `WEBSITE` – Business website check. * `TIN_MATCH` – Taxpayer Identification Number (TIN) check from tax bureau. * `BANKRUPTCIES` – Check for any bankruptcy filings. * `SOS_DOMESTIC` – Outcome from a Domestic Secretary of State (SOS) filings check * `LICENSE` –  * `WATCHLIST` – Outcome from watchlist screenings (especially OFAC/SDN and other sanctions lists).  If you would like to provide additional information that doesn't fit with an existing category you may provide: * `OTHER` – A category for miscellaneous or uncategorized checks.
	Category *string `json:"category,omitempty"`
	// Human-readable description explaining the individual check.
	Description *string `json:"description,omitempty"`
	// Human-readable grouping describing the aspect of the customer's identity examined by this check.
	Label *string `json:"label,omitempty"`
	// The result of the individual check. One of the following: * `PASS` – the check passed contributing to a positive outcome (or accepted verification result). * `INFO` – the check returned neutral information which may or may not explain a negative result. * `WARN` – the check was inconclusive and might require review. * `FAIL` – the check failed and might result in a failing outcome (or rejected verification_result).
	Result *string `json:"result,omitempty"`
	// An arbitrary floating point score value which may be used to contextualize the human readable description.
	Score *float64 `json:"score,omitempty"`
	// A URL containing supporting information for this individual check.
	Url *string `json:"url,omitempty"`
	// Machine-readable description of the individual check. This field contains vendor-specific terms and may not be populated in all cases.
	VendorCode *string `json:"vendor_code,omitempty"`
}

// NewDetail instantiates a new Detail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDetail() *Detail {
	this := Detail{}
	return &this
}

// NewDetailWithDefaults instantiates a new Detail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDetailWithDefaults() *Detail {
	this := Detail{}
	return &this
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *Detail) GetCategory() string {
	if o == nil || IsNil(o.Category) {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Detail) GetCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *Detail) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *Detail) SetCategory(v string) {
	o.Category = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Detail) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Detail) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Detail) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Detail) SetDescription(v string) {
	o.Description = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *Detail) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Detail) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *Detail) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *Detail) SetLabel(v string) {
	o.Label = &v
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *Detail) GetResult() string {
	if o == nil || IsNil(o.Result) {
		var ret string
		return ret
	}
	return *o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Detail) GetResultOk() (*string, bool) {
	if o == nil || IsNil(o.Result) {
		return nil, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *Detail) HasResult() bool {
	if o != nil && !IsNil(o.Result) {
		return true
	}

	return false
}

// SetResult gets a reference to the given string and assigns it to the Result field.
func (o *Detail) SetResult(v string) {
	o.Result = &v
}

// GetScore returns the Score field value if set, zero value otherwise.
func (o *Detail) GetScore() float64 {
	if o == nil || IsNil(o.Score) {
		var ret float64
		return ret
	}
	return *o.Score
}

// GetScoreOk returns a tuple with the Score field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Detail) GetScoreOk() (*float64, bool) {
	if o == nil || IsNil(o.Score) {
		return nil, false
	}
	return o.Score, true
}

// HasScore returns a boolean if a field has been set.
func (o *Detail) HasScore() bool {
	if o != nil && !IsNil(o.Score) {
		return true
	}

	return false
}

// SetScore gets a reference to the given float64 and assigns it to the Score field.
func (o *Detail) SetScore(v float64) {
	o.Score = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *Detail) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Detail) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *Detail) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *Detail) SetUrl(v string) {
	o.Url = &v
}

// GetVendorCode returns the VendorCode field value if set, zero value otherwise.
func (o *Detail) GetVendorCode() string {
	if o == nil || IsNil(o.VendorCode) {
		var ret string
		return ret
	}
	return *o.VendorCode
}

// GetVendorCodeOk returns a tuple with the VendorCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Detail) GetVendorCodeOk() (*string, bool) {
	if o == nil || IsNil(o.VendorCode) {
		return nil, false
	}
	return o.VendorCode, true
}

// HasVendorCode returns a boolean if a field has been set.
func (o *Detail) HasVendorCode() bool {
	if o != nil && !IsNil(o.VendorCode) {
		return true
	}

	return false
}

// SetVendorCode gets a reference to the given string and assigns it to the VendorCode field.
func (o *Detail) SetVendorCode(v string) {
	o.VendorCode = &v
}

func (o Detail) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Detail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.Result) {
		toSerialize["result"] = o.Result
	}
	if !IsNil(o.Score) {
		toSerialize["score"] = o.Score
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.VendorCode) {
		toSerialize["vendor_code"] = o.VendorCode
	}
	return toSerialize, nil
}

type NullableDetail struct {
	value *Detail
	isSet bool
}

func (v NullableDetail) Get() *Detail {
	return v.value
}

func (v *NullableDetail) Set(val *Detail) {
	v.value = val
	v.isSet = true
}

func (v NullableDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDetail(val *Detail) *NullableDetail {
	return &NullableDetail{value: val, isSet: true}
}

func (v NullableDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
