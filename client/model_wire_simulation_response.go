/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.150.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"encoding/json"
	"fmt"
)

// WireSimulationResponse - struct for WireSimulationResponse
type WireSimulationResponse struct {
	WireSimulationDatasoftResponse *WireSimulationDatasoftResponse
	WireSimulationFedwireResponse  *WireSimulationFedwireResponse
}

// WireSimulationDatasoftResponseAsWireSimulationResponse is a convenience function that returns WireSimulationDatasoftResponse wrapped in WireSimulationResponse
func WireSimulationDatasoftResponseAsWireSimulationResponse(v *WireSimulationDatasoftResponse) WireSimulationResponse {
	return WireSimulationResponse{
		WireSimulationDatasoftResponse: v,
	}
}

// WireSimulationFedwireResponseAsWireSimulationResponse is a convenience function that returns WireSimulationFedwireResponse wrapped in WireSimulationResponse
func WireSimulationFedwireResponseAsWireSimulationResponse(v *WireSimulationFedwireResponse) WireSimulationResponse {
	return WireSimulationResponse{
		WireSimulationFedwireResponse: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *WireSimulationResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into WireSimulationDatasoftResponse
	err = json.Unmarshal(data, &dst.WireSimulationDatasoftResponse)
	if err == nil {
		jsonWireSimulationDatasoftResponse, _ := json.Marshal(dst.WireSimulationDatasoftResponse)
		if string(jsonWireSimulationDatasoftResponse) == "{}" { // empty struct
			dst.WireSimulationDatasoftResponse = nil
		} else {
			match++
		}
	} else {
		dst.WireSimulationDatasoftResponse = nil
	}

	// try to unmarshal data into WireSimulationFedwireResponse
	err = json.Unmarshal(data, &dst.WireSimulationFedwireResponse)
	if err == nil {
		jsonWireSimulationFedwireResponse, _ := json.Marshal(dst.WireSimulationFedwireResponse)
		if string(jsonWireSimulationFedwireResponse) == "{}" { // empty struct
			dst.WireSimulationFedwireResponse = nil
		} else {
			match++
		}
	} else {
		dst.WireSimulationFedwireResponse = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.WireSimulationDatasoftResponse = nil
		dst.WireSimulationFedwireResponse = nil

		return fmt.Errorf("data matches more than one schema in oneOf(WireSimulationResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(WireSimulationResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src WireSimulationResponse) MarshalJSON() ([]byte, error) {
	if src.WireSimulationDatasoftResponse != nil {
		return json.Marshal(&src.WireSimulationDatasoftResponse)
	}

	if src.WireSimulationFedwireResponse != nil {
		return json.Marshal(&src.WireSimulationFedwireResponse)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *WireSimulationResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.WireSimulationDatasoftResponse != nil {
		return obj.WireSimulationDatasoftResponse
	}

	if obj.WireSimulationFedwireResponse != nil {
		return obj.WireSimulationFedwireResponse
	}

	// all schemas are nil
	return nil
}

type NullableWireSimulationResponse struct {
	value *WireSimulationResponse
	isSet bool
}

func (v NullableWireSimulationResponse) Get() *WireSimulationResponse {
	return v.value
}

func (v *NullableWireSimulationResponse) Set(val *WireSimulationResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableWireSimulationResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableWireSimulationResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWireSimulationResponse(val *WireSimulationResponse) *NullableWireSimulationResponse {
	return &NullableWireSimulationResponse{value: val, isSet: true}
}

func (v NullableWireSimulationResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWireSimulationResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
