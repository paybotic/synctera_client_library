/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.150.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the NoteCreate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NoteCreate{}

// NoteCreate struct for NoteCreate
type NoteCreate struct {
	// The note's text content.
	Content string `json:"content"`
	// Optional field to store additional information about the resource. Intended to be used by the integrator to store non-sensitive data.
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// ðŸš§ Beta This is a Beta property. Feedback from the community is welcome. We may make breaking changes to this property. Path to the field in the related resource that the note pertains to. This uses a dot notation like the following: Examples: * a field in the resource: first_name * a sub-field: legal_address.city * nested arrays: application_details.sections[1].pages[2].items[0].answer
	RelatedResourceField *string `json:"related_resource_field,omitempty"`
	// The id of the resource that is associated with the note. This is typically a UUID. For TENANT it is a string tenant ID.
	RelatedResourceId   string               `json:"related_resource_id"`
	RelatedResourceType RelatedResourceType2 `json:"related_resource_type"`
	Status              *NoteStatus          `json:"status,omitempty"`
	// The id of the tenant containing the resource. This is relevant for Fintechs that have multiple workspaces.
	Tenant *string    `json:"tenant,omitempty"`
	Type   *ModelType `json:"type,omitempty"`
}

type _NoteCreate NoteCreate

// NewNoteCreate instantiates a new NoteCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNoteCreate(content string, relatedResourceId string, relatedResourceType RelatedResourceType2) *NoteCreate {
	this := NoteCreate{}
	this.Content = content
	this.RelatedResourceId = relatedResourceId
	this.RelatedResourceType = relatedResourceType
	var type_ ModelType = MODELTYPE_NOTE
	this.Type = &type_
	return &this
}

// NewNoteCreateWithDefaults instantiates a new NoteCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNoteCreateWithDefaults() *NoteCreate {
	this := NoteCreate{}
	var type_ ModelType = MODELTYPE_NOTE
	this.Type = &type_
	return &this
}

// GetContent returns the Content field value
func (o *NoteCreate) GetContent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *NoteCreate) GetContentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Content, true
}

// SetContent sets field value
func (o *NoteCreate) SetContent(v string) {
	o.Content = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *NoteCreate) GetMetadata() map[string]interface{} {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoteCreate) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Metadata) {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *NoteCreate) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *NoteCreate) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

// GetRelatedResourceField returns the RelatedResourceField field value if set, zero value otherwise.
func (o *NoteCreate) GetRelatedResourceField() string {
	if o == nil || IsNil(o.RelatedResourceField) {
		var ret string
		return ret
	}
	return *o.RelatedResourceField
}

// GetRelatedResourceFieldOk returns a tuple with the RelatedResourceField field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoteCreate) GetRelatedResourceFieldOk() (*string, bool) {
	if o == nil || IsNil(o.RelatedResourceField) {
		return nil, false
	}
	return o.RelatedResourceField, true
}

// HasRelatedResourceField returns a boolean if a field has been set.
func (o *NoteCreate) HasRelatedResourceField() bool {
	if o != nil && !IsNil(o.RelatedResourceField) {
		return true
	}

	return false
}

// SetRelatedResourceField gets a reference to the given string and assigns it to the RelatedResourceField field.
func (o *NoteCreate) SetRelatedResourceField(v string) {
	o.RelatedResourceField = &v
}

// GetRelatedResourceId returns the RelatedResourceId field value
func (o *NoteCreate) GetRelatedResourceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RelatedResourceId
}

// GetRelatedResourceIdOk returns a tuple with the RelatedResourceId field value
// and a boolean to check if the value has been set.
func (o *NoteCreate) GetRelatedResourceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RelatedResourceId, true
}

// SetRelatedResourceId sets field value
func (o *NoteCreate) SetRelatedResourceId(v string) {
	o.RelatedResourceId = v
}

// GetRelatedResourceType returns the RelatedResourceType field value
func (o *NoteCreate) GetRelatedResourceType() RelatedResourceType2 {
	if o == nil {
		var ret RelatedResourceType2
		return ret
	}

	return o.RelatedResourceType
}

// GetRelatedResourceTypeOk returns a tuple with the RelatedResourceType field value
// and a boolean to check if the value has been set.
func (o *NoteCreate) GetRelatedResourceTypeOk() (*RelatedResourceType2, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RelatedResourceType, true
}

// SetRelatedResourceType sets field value
func (o *NoteCreate) SetRelatedResourceType(v RelatedResourceType2) {
	o.RelatedResourceType = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *NoteCreate) GetStatus() NoteStatus {
	if o == nil || IsNil(o.Status) {
		var ret NoteStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoteCreate) GetStatusOk() (*NoteStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *NoteCreate) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given NoteStatus and assigns it to the Status field.
func (o *NoteCreate) SetStatus(v NoteStatus) {
	o.Status = &v
}

// GetTenant returns the Tenant field value if set, zero value otherwise.
func (o *NoteCreate) GetTenant() string {
	if o == nil || IsNil(o.Tenant) {
		var ret string
		return ret
	}
	return *o.Tenant
}

// GetTenantOk returns a tuple with the Tenant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoteCreate) GetTenantOk() (*string, bool) {
	if o == nil || IsNil(o.Tenant) {
		return nil, false
	}
	return o.Tenant, true
}

// HasTenant returns a boolean if a field has been set.
func (o *NoteCreate) HasTenant() bool {
	if o != nil && !IsNil(o.Tenant) {
		return true
	}

	return false
}

// SetTenant gets a reference to the given string and assigns it to the Tenant field.
func (o *NoteCreate) SetTenant(v string) {
	o.Tenant = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *NoteCreate) GetType() ModelType {
	if o == nil || IsNil(o.Type) {
		var ret ModelType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoteCreate) GetTypeOk() (*ModelType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *NoteCreate) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given ModelType and assigns it to the Type field.
func (o *NoteCreate) SetType(v ModelType) {
	o.Type = &v
}

func (o NoteCreate) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NoteCreate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["content"] = o.Content
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.RelatedResourceField) {
		toSerialize["related_resource_field"] = o.RelatedResourceField
	}
	toSerialize["related_resource_id"] = o.RelatedResourceId
	toSerialize["related_resource_type"] = o.RelatedResourceType
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Tenant) {
		toSerialize["tenant"] = o.Tenant
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

func (o *NoteCreate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"content",
		"related_resource_id",
		"related_resource_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNoteCreate := _NoteCreate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNoteCreate)

	if err != nil {
		return err
	}

	*o = NoteCreate(varNoteCreate)

	return err
}

type NullableNoteCreate struct {
	value *NoteCreate
	isSet bool
}

func (v NullableNoteCreate) Get() *NoteCreate {
	return v.value
}

func (v *NullableNoteCreate) Set(val *NoteCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableNoteCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableNoteCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNoteCreate(val *NoteCreate) *NullableNoteCreate {
	return &NullableNoteCreate{value: val, isSet: true}
}

func (v NullableNoteCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNoteCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
