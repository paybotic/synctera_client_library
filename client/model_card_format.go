/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.150.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CardFormat type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CardFormat{}

// CardFormat struct for CardFormat
type CardFormat struct {
	// PHYSICAL or VIRTUAL.
	Form string `json:"form"`
}

type _CardFormat CardFormat

// NewCardFormat instantiates a new CardFormat object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCardFormat(form string) *CardFormat {
	this := CardFormat{}
	this.Form = form
	return &this
}

// NewCardFormatWithDefaults instantiates a new CardFormat object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCardFormatWithDefaults() *CardFormat {
	this := CardFormat{}
	return &this
}

// GetForm returns the Form field value
func (o *CardFormat) GetForm() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Form
}

// GetFormOk returns a tuple with the Form field value
// and a boolean to check if the value has been set.
func (o *CardFormat) GetFormOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Form, true
}

// SetForm sets field value
func (o *CardFormat) SetForm(v string) {
	o.Form = v
}

func (o CardFormat) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CardFormat) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["form"] = o.Form
	return toSerialize, nil
}

func (o *CardFormat) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"form",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCardFormat := _CardFormat{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCardFormat)

	if err != nil {
		return err
	}

	*o = CardFormat(varCardFormat)

	return err
}

type NullableCardFormat struct {
	value *CardFormat
	isSet bool
}

func (v NullableCardFormat) Get() *CardFormat {
	return v.value
}

func (v *NullableCardFormat) Set(val *CardFormat) {
	v.value = val
	v.isSet = true
}

func (v NullableCardFormat) IsSet() bool {
	return v.isSet
}

func (v *NullableCardFormat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCardFormat(val *CardFormat) *NullableCardFormat {
	return &NullableCardFormat{value: val, isSet: true}
}

func (v NullableCardFormat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCardFormat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
