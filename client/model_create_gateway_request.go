/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.153.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CreateGatewayRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateGatewayRequest{}

// CreateGatewayRequest struct for CreateGatewayRequest
type CreateGatewayRequest struct {
	// Current status of the Authorization gateway
	Active *bool `json:"active,omitempty"`
	// List of Card Product unique identifiers that will utilize the Gateway
	CardProducts []string `json:"card_products"`
	// Custom Headers of the Authorization gateway
	CustomHeaders *map[string]string `json:"custom_headers,omitempty"`
	Standin       *GatewayStandin    `json:"standin,omitempty"`
	// URL of the Authorization gateway
	Url string `json:"url"`
}

type _CreateGatewayRequest CreateGatewayRequest

// NewCreateGatewayRequest instantiates a new CreateGatewayRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateGatewayRequest(cardProducts []string, url string) *CreateGatewayRequest {
	this := CreateGatewayRequest{}
	var active bool = true
	this.Active = &active
	this.CardProducts = cardProducts
	this.Url = url
	return &this
}

// NewCreateGatewayRequestWithDefaults instantiates a new CreateGatewayRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateGatewayRequestWithDefaults() *CreateGatewayRequest {
	this := CreateGatewayRequest{}
	var active bool = true
	this.Active = &active
	return &this
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *CreateGatewayRequest) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateGatewayRequest) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *CreateGatewayRequest) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *CreateGatewayRequest) SetActive(v bool) {
	o.Active = &v
}

// GetCardProducts returns the CardProducts field value
func (o *CreateGatewayRequest) GetCardProducts() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.CardProducts
}

// GetCardProductsOk returns a tuple with the CardProducts field value
// and a boolean to check if the value has been set.
func (o *CreateGatewayRequest) GetCardProductsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CardProducts, true
}

// SetCardProducts sets field value
func (o *CreateGatewayRequest) SetCardProducts(v []string) {
	o.CardProducts = v
}

// GetCustomHeaders returns the CustomHeaders field value if set, zero value otherwise.
func (o *CreateGatewayRequest) GetCustomHeaders() map[string]string {
	if o == nil || IsNil(o.CustomHeaders) {
		var ret map[string]string
		return ret
	}
	return *o.CustomHeaders
}

// GetCustomHeadersOk returns a tuple with the CustomHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateGatewayRequest) GetCustomHeadersOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.CustomHeaders) {
		return nil, false
	}
	return o.CustomHeaders, true
}

// HasCustomHeaders returns a boolean if a field has been set.
func (o *CreateGatewayRequest) HasCustomHeaders() bool {
	if o != nil && !IsNil(o.CustomHeaders) {
		return true
	}

	return false
}

// SetCustomHeaders gets a reference to the given map[string]string and assigns it to the CustomHeaders field.
func (o *CreateGatewayRequest) SetCustomHeaders(v map[string]string) {
	o.CustomHeaders = &v
}

// GetStandin returns the Standin field value if set, zero value otherwise.
func (o *CreateGatewayRequest) GetStandin() GatewayStandin {
	if o == nil || IsNil(o.Standin) {
		var ret GatewayStandin
		return ret
	}
	return *o.Standin
}

// GetStandinOk returns a tuple with the Standin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateGatewayRequest) GetStandinOk() (*GatewayStandin, bool) {
	if o == nil || IsNil(o.Standin) {
		return nil, false
	}
	return o.Standin, true
}

// HasStandin returns a boolean if a field has been set.
func (o *CreateGatewayRequest) HasStandin() bool {
	if o != nil && !IsNil(o.Standin) {
		return true
	}

	return false
}

// SetStandin gets a reference to the given GatewayStandin and assigns it to the Standin field.
func (o *CreateGatewayRequest) SetStandin(v GatewayStandin) {
	o.Standin = &v
}

// GetUrl returns the Url field value
func (o *CreateGatewayRequest) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *CreateGatewayRequest) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *CreateGatewayRequest) SetUrl(v string) {
	o.Url = v
}

func (o CreateGatewayRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateGatewayRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	toSerialize["card_products"] = o.CardProducts
	if !IsNil(o.CustomHeaders) {
		toSerialize["custom_headers"] = o.CustomHeaders
	}
	if !IsNil(o.Standin) {
		toSerialize["standin"] = o.Standin
	}
	toSerialize["url"] = o.Url
	return toSerialize, nil
}

func (o *CreateGatewayRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"card_products",
		"url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateGatewayRequest := _CreateGatewayRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateGatewayRequest)

	if err != nil {
		return err
	}

	*o = CreateGatewayRequest(varCreateGatewayRequest)

	return err
}

type NullableCreateGatewayRequest struct {
	value *CreateGatewayRequest
	isSet bool
}

func (v NullableCreateGatewayRequest) Get() *CreateGatewayRequest {
	return v.value
}

func (v *NullableCreateGatewayRequest) Set(val *CreateGatewayRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateGatewayRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateGatewayRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateGatewayRequest(val *CreateGatewayRequest) *NullableCreateGatewayRequest {
	return &NullableCreateGatewayRequest{value: val, isSet: true}
}

func (v NullableCreateGatewayRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateGatewayRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
