/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.153.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"encoding/json"
	"fmt"
)

// RelatedResourceType1 related resource type
type RelatedResourceType1 string

// List of related_resource_type1
const (
	RELATEDRESOURCETYPE1_ACCOUNT     RelatedResourceType1 = "ACCOUNT"
	RELATEDRESOURCETYPE1_BUSINESS    RelatedResourceType1 = "BUSINESS"
	RELATEDRESOURCETYPE1_CUSTOMER    RelatedResourceType1 = "CUSTOMER"
	RELATEDRESOURCETYPE1_TRANSACTION RelatedResourceType1 = "TRANSACTION"
)

// All allowed values of RelatedResourceType1 enum
var AllowedRelatedResourceType1EnumValues = []RelatedResourceType1{
	"ACCOUNT",
	"BUSINESS",
	"CUSTOMER",
	"TRANSACTION",
}

func (v *RelatedResourceType1) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RelatedResourceType1(value)
	for _, existing := range AllowedRelatedResourceType1EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RelatedResourceType1", value)
}

// NewRelatedResourceType1FromValue returns a pointer to a valid RelatedResourceType1
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRelatedResourceType1FromValue(v string) (*RelatedResourceType1, error) {
	ev := RelatedResourceType1(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RelatedResourceType1: valid values are %v", v, AllowedRelatedResourceType1EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RelatedResourceType1) IsValid() bool {
	for _, existing := range AllowedRelatedResourceType1EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to related_resource_type1 value
func (v RelatedResourceType1) Ptr() *RelatedResourceType1 {
	return &v
}

type NullableRelatedResourceType1 struct {
	value *RelatedResourceType1
	isSet bool
}

func (v NullableRelatedResourceType1) Get() *RelatedResourceType1 {
	return v.value
}

func (v *NullableRelatedResourceType1) Set(val *RelatedResourceType1) {
	v.value = val
	v.isSet = true
}

func (v NullableRelatedResourceType1) IsSet() bool {
	return v.isSet
}

func (v *NullableRelatedResourceType1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRelatedResourceType1(val *RelatedResourceType1) *NullableRelatedResourceType1 {
	return &NullableRelatedResourceType1{value: val, isSet: true}
}

func (v NullableRelatedResourceType1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRelatedResourceType1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
