/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.153.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"encoding/json"
	"fmt"
)

// CashNetworkStatus The network status of the transfer in the Synctera platform.
type CashNetworkStatus string

// List of cash_network_status
const (
	CASHNETWORKSTATUS_PENDING  CashNetworkStatus = "PENDING"
	CASHNETWORKSTATUS_POSTED   CashNetworkStatus = "POSTED"
	CASHNETWORKSTATUS_RETURNED CashNetworkStatus = "RETURNED"
	CASHNETWORKSTATUS_REVERSED CashNetworkStatus = "REVERSED"
)

// All allowed values of CashNetworkStatus enum
var AllowedCashNetworkStatusEnumValues = []CashNetworkStatus{
	"PENDING",
	"POSTED",
	"RETURNED",
	"REVERSED",
}

func (v *CashNetworkStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CashNetworkStatus(value)
	for _, existing := range AllowedCashNetworkStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CashNetworkStatus", value)
}

// NewCashNetworkStatusFromValue returns a pointer to a valid CashNetworkStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCashNetworkStatusFromValue(v string) (*CashNetworkStatus, error) {
	ev := CashNetworkStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CashNetworkStatus: valid values are %v", v, AllowedCashNetworkStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CashNetworkStatus) IsValid() bool {
	for _, existing := range AllowedCashNetworkStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to cash_network_status value
func (v CashNetworkStatus) Ptr() *CashNetworkStatus {
	return &v
}

type NullableCashNetworkStatus struct {
	value *CashNetworkStatus
	isSet bool
}

func (v NullableCashNetworkStatus) Get() *CashNetworkStatus {
	return v.value
}

func (v *NullableCashNetworkStatus) Set(val *CashNetworkStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableCashNetworkStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableCashNetworkStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCashNetworkStatus(val *CashNetworkStatus) *NullableCashNetworkStatus {
	return &NullableCashNetworkStatus{value: val, isSet: true}
}

func (v NullableCashNetworkStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCashNetworkStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
