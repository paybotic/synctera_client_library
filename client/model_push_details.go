/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.153.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"encoding/json"
)

// checks if the PushDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PushDetails{}

// PushDetails Additional PUSH transfer details
type PushDetails struct {
	// ISO-3166-1 Alpha-2 country code
	Country *string `json:"country,omitempty"`
	// ISO 4217  Alpha-3 currency code
	Currency          *string                         `json:"currency,omitempty"`
	FundsAvailability *ExternalCardsFundsAvailability `json:"funds_availability,omitempty"`
	// Payment network
	Network     *string                  `json:"network,omitempty"`
	ProductType *ExternalCardProductType `json:"product_type,omitempty"`
	// Exemption status from debit card interchange fee standards
	Regulated *bool `json:"regulated,omitempty"`
}

// NewPushDetails instantiates a new PushDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPushDetails() *PushDetails {
	this := PushDetails{}
	return &this
}

// NewPushDetailsWithDefaults instantiates a new PushDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPushDetailsWithDefaults() *PushDetails {
	this := PushDetails{}
	return &this
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *PushDetails) GetCountry() string {
	if o == nil || IsNil(o.Country) {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PushDetails) GetCountryOk() (*string, bool) {
	if o == nil || IsNil(o.Country) {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *PushDetails) HasCountry() bool {
	if o != nil && !IsNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *PushDetails) SetCountry(v string) {
	o.Country = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *PushDetails) GetCurrency() string {
	if o == nil || IsNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PushDetails) GetCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *PushDetails) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *PushDetails) SetCurrency(v string) {
	o.Currency = &v
}

// GetFundsAvailability returns the FundsAvailability field value if set, zero value otherwise.
func (o *PushDetails) GetFundsAvailability() ExternalCardsFundsAvailability {
	if o == nil || IsNil(o.FundsAvailability) {
		var ret ExternalCardsFundsAvailability
		return ret
	}
	return *o.FundsAvailability
}

// GetFundsAvailabilityOk returns a tuple with the FundsAvailability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PushDetails) GetFundsAvailabilityOk() (*ExternalCardsFundsAvailability, bool) {
	if o == nil || IsNil(o.FundsAvailability) {
		return nil, false
	}
	return o.FundsAvailability, true
}

// HasFundsAvailability returns a boolean if a field has been set.
func (o *PushDetails) HasFundsAvailability() bool {
	if o != nil && !IsNil(o.FundsAvailability) {
		return true
	}

	return false
}

// SetFundsAvailability gets a reference to the given ExternalCardsFundsAvailability and assigns it to the FundsAvailability field.
func (o *PushDetails) SetFundsAvailability(v ExternalCardsFundsAvailability) {
	o.FundsAvailability = &v
}

// GetNetwork returns the Network field value if set, zero value otherwise.
func (o *PushDetails) GetNetwork() string {
	if o == nil || IsNil(o.Network) {
		var ret string
		return ret
	}
	return *o.Network
}

// GetNetworkOk returns a tuple with the Network field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PushDetails) GetNetworkOk() (*string, bool) {
	if o == nil || IsNil(o.Network) {
		return nil, false
	}
	return o.Network, true
}

// HasNetwork returns a boolean if a field has been set.
func (o *PushDetails) HasNetwork() bool {
	if o != nil && !IsNil(o.Network) {
		return true
	}

	return false
}

// SetNetwork gets a reference to the given string and assigns it to the Network field.
func (o *PushDetails) SetNetwork(v string) {
	o.Network = &v
}

// GetProductType returns the ProductType field value if set, zero value otherwise.
func (o *PushDetails) GetProductType() ExternalCardProductType {
	if o == nil || IsNil(o.ProductType) {
		var ret ExternalCardProductType
		return ret
	}
	return *o.ProductType
}

// GetProductTypeOk returns a tuple with the ProductType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PushDetails) GetProductTypeOk() (*ExternalCardProductType, bool) {
	if o == nil || IsNil(o.ProductType) {
		return nil, false
	}
	return o.ProductType, true
}

// HasProductType returns a boolean if a field has been set.
func (o *PushDetails) HasProductType() bool {
	if o != nil && !IsNil(o.ProductType) {
		return true
	}

	return false
}

// SetProductType gets a reference to the given ExternalCardProductType and assigns it to the ProductType field.
func (o *PushDetails) SetProductType(v ExternalCardProductType) {
	o.ProductType = &v
}

// GetRegulated returns the Regulated field value if set, zero value otherwise.
func (o *PushDetails) GetRegulated() bool {
	if o == nil || IsNil(o.Regulated) {
		var ret bool
		return ret
	}
	return *o.Regulated
}

// GetRegulatedOk returns a tuple with the Regulated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PushDetails) GetRegulatedOk() (*bool, bool) {
	if o == nil || IsNil(o.Regulated) {
		return nil, false
	}
	return o.Regulated, true
}

// HasRegulated returns a boolean if a field has been set.
func (o *PushDetails) HasRegulated() bool {
	if o != nil && !IsNil(o.Regulated) {
		return true
	}

	return false
}

// SetRegulated gets a reference to the given bool and assigns it to the Regulated field.
func (o *PushDetails) SetRegulated(v bool) {
	o.Regulated = &v
}

func (o PushDetails) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PushDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Country) {
		toSerialize["country"] = o.Country
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.FundsAvailability) {
		toSerialize["funds_availability"] = o.FundsAvailability
	}
	if !IsNil(o.Network) {
		toSerialize["network"] = o.Network
	}
	if !IsNil(o.ProductType) {
		toSerialize["product_type"] = o.ProductType
	}
	if !IsNil(o.Regulated) {
		toSerialize["regulated"] = o.Regulated
	}
	return toSerialize, nil
}

type NullablePushDetails struct {
	value *PushDetails
	isSet bool
}

func (v NullablePushDetails) Get() *PushDetails {
	return v.value
}

func (v *NullablePushDetails) Set(val *PushDetails) {
	v.value = val
	v.isSet = true
}

func (v NullablePushDetails) IsSet() bool {
	return v.isSet
}

func (v *NullablePushDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePushDetails(val *PushDetails) *NullablePushDetails {
	return &NullablePushDetails{value: val, isSet: true}
}

func (v NullablePushDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePushDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
