/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.153.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ReturnData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReturnData{}

// ReturnData Filled if the entry is a return.
type ReturnData struct {
	// Return reason code, i.e. why is the entry being returned.
	Code string `json:"code"`
	// Code of the original dishonored return (without \"R\"). Filled only if this is a contested return.
	DishonoredReturnCode *string `json:"dishonored_return_code,omitempty"`
	// Settlement date of the original dishonored return. Filled only if this is a contested return. Formatted as an ordinal date, a single day-of-year number between 1-366.
	DishonoredReturnSettlementDate *string `json:"dishonored_return_settlement_date,omitempty"`
	// Trace number of the original dishonored return. Filled only if this is a contested return.
	DishonoredReturnTrace *string `json:"dishonored_return_trace,omitempty"`
	// Required for return reason code R69. Contains the code(s) to indicate the field(s) in which erroneous information in the original return is located.
	FieldErrors *string `json:"field_errors,omitempty"`
	// Receiving financial institution of the original entry.
	OriginalDfiNo string `json:"original_dfi_no"`
	// Trace number of the original entry that is being returned.
	OriginalTrace string `json:"original_trace"`
	// Return reason code of the original return (just the number). Filled only if this is a dishonored return.
	ReturnCode *string `json:"return_code,omitempty"`
	// Settlement date of the original return. Filled only if this is a dishonored return. Formatted as an ordinal date, a single day-of-year number between 1-366.
	ReturnSettlementDate *string `json:"return_settlement_date,omitempty"`
	// Trace number of the original return. Filled only if this is a dishonored return.
	ReturnTrace *string `json:"return_trace,omitempty"`
}

type _ReturnData ReturnData

// NewReturnData instantiates a new ReturnData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReturnData(code string, originalDfiNo string, originalTrace string) *ReturnData {
	this := ReturnData{}
	this.Code = code
	this.OriginalDfiNo = originalDfiNo
	this.OriginalTrace = originalTrace
	return &this
}

// NewReturnDataWithDefaults instantiates a new ReturnData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReturnDataWithDefaults() *ReturnData {
	this := ReturnData{}
	return &this
}

// GetCode returns the Code field value
func (o *ReturnData) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *ReturnData) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *ReturnData) SetCode(v string) {
	o.Code = v
}

// GetDishonoredReturnCode returns the DishonoredReturnCode field value if set, zero value otherwise.
func (o *ReturnData) GetDishonoredReturnCode() string {
	if o == nil || IsNil(o.DishonoredReturnCode) {
		var ret string
		return ret
	}
	return *o.DishonoredReturnCode
}

// GetDishonoredReturnCodeOk returns a tuple with the DishonoredReturnCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReturnData) GetDishonoredReturnCodeOk() (*string, bool) {
	if o == nil || IsNil(o.DishonoredReturnCode) {
		return nil, false
	}
	return o.DishonoredReturnCode, true
}

// HasDishonoredReturnCode returns a boolean if a field has been set.
func (o *ReturnData) HasDishonoredReturnCode() bool {
	if o != nil && !IsNil(o.DishonoredReturnCode) {
		return true
	}

	return false
}

// SetDishonoredReturnCode gets a reference to the given string and assigns it to the DishonoredReturnCode field.
func (o *ReturnData) SetDishonoredReturnCode(v string) {
	o.DishonoredReturnCode = &v
}

// GetDishonoredReturnSettlementDate returns the DishonoredReturnSettlementDate field value if set, zero value otherwise.
func (o *ReturnData) GetDishonoredReturnSettlementDate() string {
	if o == nil || IsNil(o.DishonoredReturnSettlementDate) {
		var ret string
		return ret
	}
	return *o.DishonoredReturnSettlementDate
}

// GetDishonoredReturnSettlementDateOk returns a tuple with the DishonoredReturnSettlementDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReturnData) GetDishonoredReturnSettlementDateOk() (*string, bool) {
	if o == nil || IsNil(o.DishonoredReturnSettlementDate) {
		return nil, false
	}
	return o.DishonoredReturnSettlementDate, true
}

// HasDishonoredReturnSettlementDate returns a boolean if a field has been set.
func (o *ReturnData) HasDishonoredReturnSettlementDate() bool {
	if o != nil && !IsNil(o.DishonoredReturnSettlementDate) {
		return true
	}

	return false
}

// SetDishonoredReturnSettlementDate gets a reference to the given string and assigns it to the DishonoredReturnSettlementDate field.
func (o *ReturnData) SetDishonoredReturnSettlementDate(v string) {
	o.DishonoredReturnSettlementDate = &v
}

// GetDishonoredReturnTrace returns the DishonoredReturnTrace field value if set, zero value otherwise.
func (o *ReturnData) GetDishonoredReturnTrace() string {
	if o == nil || IsNil(o.DishonoredReturnTrace) {
		var ret string
		return ret
	}
	return *o.DishonoredReturnTrace
}

// GetDishonoredReturnTraceOk returns a tuple with the DishonoredReturnTrace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReturnData) GetDishonoredReturnTraceOk() (*string, bool) {
	if o == nil || IsNil(o.DishonoredReturnTrace) {
		return nil, false
	}
	return o.DishonoredReturnTrace, true
}

// HasDishonoredReturnTrace returns a boolean if a field has been set.
func (o *ReturnData) HasDishonoredReturnTrace() bool {
	if o != nil && !IsNil(o.DishonoredReturnTrace) {
		return true
	}

	return false
}

// SetDishonoredReturnTrace gets a reference to the given string and assigns it to the DishonoredReturnTrace field.
func (o *ReturnData) SetDishonoredReturnTrace(v string) {
	o.DishonoredReturnTrace = &v
}

// GetFieldErrors returns the FieldErrors field value if set, zero value otherwise.
func (o *ReturnData) GetFieldErrors() string {
	if o == nil || IsNil(o.FieldErrors) {
		var ret string
		return ret
	}
	return *o.FieldErrors
}

// GetFieldErrorsOk returns a tuple with the FieldErrors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReturnData) GetFieldErrorsOk() (*string, bool) {
	if o == nil || IsNil(o.FieldErrors) {
		return nil, false
	}
	return o.FieldErrors, true
}

// HasFieldErrors returns a boolean if a field has been set.
func (o *ReturnData) HasFieldErrors() bool {
	if o != nil && !IsNil(o.FieldErrors) {
		return true
	}

	return false
}

// SetFieldErrors gets a reference to the given string and assigns it to the FieldErrors field.
func (o *ReturnData) SetFieldErrors(v string) {
	o.FieldErrors = &v
}

// GetOriginalDfiNo returns the OriginalDfiNo field value
func (o *ReturnData) GetOriginalDfiNo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OriginalDfiNo
}

// GetOriginalDfiNoOk returns a tuple with the OriginalDfiNo field value
// and a boolean to check if the value has been set.
func (o *ReturnData) GetOriginalDfiNoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OriginalDfiNo, true
}

// SetOriginalDfiNo sets field value
func (o *ReturnData) SetOriginalDfiNo(v string) {
	o.OriginalDfiNo = v
}

// GetOriginalTrace returns the OriginalTrace field value
func (o *ReturnData) GetOriginalTrace() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OriginalTrace
}

// GetOriginalTraceOk returns a tuple with the OriginalTrace field value
// and a boolean to check if the value has been set.
func (o *ReturnData) GetOriginalTraceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OriginalTrace, true
}

// SetOriginalTrace sets field value
func (o *ReturnData) SetOriginalTrace(v string) {
	o.OriginalTrace = v
}

// GetReturnCode returns the ReturnCode field value if set, zero value otherwise.
func (o *ReturnData) GetReturnCode() string {
	if o == nil || IsNil(o.ReturnCode) {
		var ret string
		return ret
	}
	return *o.ReturnCode
}

// GetReturnCodeOk returns a tuple with the ReturnCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReturnData) GetReturnCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ReturnCode) {
		return nil, false
	}
	return o.ReturnCode, true
}

// HasReturnCode returns a boolean if a field has been set.
func (o *ReturnData) HasReturnCode() bool {
	if o != nil && !IsNil(o.ReturnCode) {
		return true
	}

	return false
}

// SetReturnCode gets a reference to the given string and assigns it to the ReturnCode field.
func (o *ReturnData) SetReturnCode(v string) {
	o.ReturnCode = &v
}

// GetReturnSettlementDate returns the ReturnSettlementDate field value if set, zero value otherwise.
func (o *ReturnData) GetReturnSettlementDate() string {
	if o == nil || IsNil(o.ReturnSettlementDate) {
		var ret string
		return ret
	}
	return *o.ReturnSettlementDate
}

// GetReturnSettlementDateOk returns a tuple with the ReturnSettlementDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReturnData) GetReturnSettlementDateOk() (*string, bool) {
	if o == nil || IsNil(o.ReturnSettlementDate) {
		return nil, false
	}
	return o.ReturnSettlementDate, true
}

// HasReturnSettlementDate returns a boolean if a field has been set.
func (o *ReturnData) HasReturnSettlementDate() bool {
	if o != nil && !IsNil(o.ReturnSettlementDate) {
		return true
	}

	return false
}

// SetReturnSettlementDate gets a reference to the given string and assigns it to the ReturnSettlementDate field.
func (o *ReturnData) SetReturnSettlementDate(v string) {
	o.ReturnSettlementDate = &v
}

// GetReturnTrace returns the ReturnTrace field value if set, zero value otherwise.
func (o *ReturnData) GetReturnTrace() string {
	if o == nil || IsNil(o.ReturnTrace) {
		var ret string
		return ret
	}
	return *o.ReturnTrace
}

// GetReturnTraceOk returns a tuple with the ReturnTrace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReturnData) GetReturnTraceOk() (*string, bool) {
	if o == nil || IsNil(o.ReturnTrace) {
		return nil, false
	}
	return o.ReturnTrace, true
}

// HasReturnTrace returns a boolean if a field has been set.
func (o *ReturnData) HasReturnTrace() bool {
	if o != nil && !IsNil(o.ReturnTrace) {
		return true
	}

	return false
}

// SetReturnTrace gets a reference to the given string and assigns it to the ReturnTrace field.
func (o *ReturnData) SetReturnTrace(v string) {
	o.ReturnTrace = &v
}

func (o ReturnData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReturnData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["code"] = o.Code
	if !IsNil(o.DishonoredReturnCode) {
		toSerialize["dishonored_return_code"] = o.DishonoredReturnCode
	}
	if !IsNil(o.DishonoredReturnSettlementDate) {
		toSerialize["dishonored_return_settlement_date"] = o.DishonoredReturnSettlementDate
	}
	if !IsNil(o.DishonoredReturnTrace) {
		toSerialize["dishonored_return_trace"] = o.DishonoredReturnTrace
	}
	if !IsNil(o.FieldErrors) {
		toSerialize["field_errors"] = o.FieldErrors
	}
	toSerialize["original_dfi_no"] = o.OriginalDfiNo
	toSerialize["original_trace"] = o.OriginalTrace
	if !IsNil(o.ReturnCode) {
		toSerialize["return_code"] = o.ReturnCode
	}
	if !IsNil(o.ReturnSettlementDate) {
		toSerialize["return_settlement_date"] = o.ReturnSettlementDate
	}
	if !IsNil(o.ReturnTrace) {
		toSerialize["return_trace"] = o.ReturnTrace
	}
	return toSerialize, nil
}

func (o *ReturnData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"code",
		"original_dfi_no",
		"original_trace",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varReturnData := _ReturnData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varReturnData)

	if err != nil {
		return err
	}

	*o = ReturnData(varReturnData)

	return err
}

type NullableReturnData struct {
	value *ReturnData
	isSet bool
}

func (v NullableReturnData) Get() *ReturnData {
	return v.value
}

func (v *NullableReturnData) Set(val *ReturnData) {
	v.value = val
	v.isSet = true
}

func (v NullableReturnData) IsSet() bool {
	return v.isSet
}

func (v *NullableReturnData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReturnData(val *ReturnData) *NullableReturnData {
	return &NullableReturnData{value: val, isSet: true}
}

func (v NullableReturnData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReturnData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
