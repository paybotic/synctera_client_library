/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.153.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"encoding/json"
	"fmt"
)

// checks if the Lookup3dsRequestBase type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Lookup3dsRequestBase{}

// Lookup3dsRequestBase Details for an External Card Transfer 3-D Secure Authentication lookup request
type Lookup3dsRequestBase struct {
	AuthenticationIndicator string `json:"authentication_indicator"`
	// Channel through which Device Data Collection was performed  Channel | Description --- | --- `BROWSER` | Internet browser `SDK` | Mobile app
	DeviceChannel string `json:"device_channel"`
	// The unique identifier of the 3DS authentication
	Id                   string `json:"id"`
	TransactionMode      string `json:"transaction_mode"`
	AdditionalProperties map[string]interface{}
}

type _Lookup3dsRequestBase Lookup3dsRequestBase

// NewLookup3dsRequestBase instantiates a new Lookup3dsRequestBase object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLookup3dsRequestBase(authenticationIndicator string, deviceChannel string, id string, transactionMode string) *Lookup3dsRequestBase {
	this := Lookup3dsRequestBase{}
	this.AuthenticationIndicator = authenticationIndicator
	this.DeviceChannel = deviceChannel
	this.Id = id
	this.TransactionMode = transactionMode
	return &this
}

// NewLookup3dsRequestBaseWithDefaults instantiates a new Lookup3dsRequestBase object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLookup3dsRequestBaseWithDefaults() *Lookup3dsRequestBase {
	this := Lookup3dsRequestBase{}
	return &this
}

// GetAuthenticationIndicator returns the AuthenticationIndicator field value
func (o *Lookup3dsRequestBase) GetAuthenticationIndicator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AuthenticationIndicator
}

// GetAuthenticationIndicatorOk returns a tuple with the AuthenticationIndicator field value
// and a boolean to check if the value has been set.
func (o *Lookup3dsRequestBase) GetAuthenticationIndicatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuthenticationIndicator, true
}

// SetAuthenticationIndicator sets field value
func (o *Lookup3dsRequestBase) SetAuthenticationIndicator(v string) {
	o.AuthenticationIndicator = v
}

// GetDeviceChannel returns the DeviceChannel field value
func (o *Lookup3dsRequestBase) GetDeviceChannel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeviceChannel
}

// GetDeviceChannelOk returns a tuple with the DeviceChannel field value
// and a boolean to check if the value has been set.
func (o *Lookup3dsRequestBase) GetDeviceChannelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeviceChannel, true
}

// SetDeviceChannel sets field value
func (o *Lookup3dsRequestBase) SetDeviceChannel(v string) {
	o.DeviceChannel = v
}

// GetId returns the Id field value
func (o *Lookup3dsRequestBase) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Lookup3dsRequestBase) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Lookup3dsRequestBase) SetId(v string) {
	o.Id = v
}

// GetTransactionMode returns the TransactionMode field value
func (o *Lookup3dsRequestBase) GetTransactionMode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransactionMode
}

// GetTransactionModeOk returns a tuple with the TransactionMode field value
// and a boolean to check if the value has been set.
func (o *Lookup3dsRequestBase) GetTransactionModeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransactionMode, true
}

// SetTransactionMode sets field value
func (o *Lookup3dsRequestBase) SetTransactionMode(v string) {
	o.TransactionMode = v
}

func (o Lookup3dsRequestBase) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Lookup3dsRequestBase) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["authentication_indicator"] = o.AuthenticationIndicator
	toSerialize["device_channel"] = o.DeviceChannel
	toSerialize["id"] = o.Id
	toSerialize["transaction_mode"] = o.TransactionMode

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Lookup3dsRequestBase) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"authentication_indicator",
		"device_channel",
		"id",
		"transaction_mode",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLookup3dsRequestBase := _Lookup3dsRequestBase{}

	err = json.Unmarshal(data, &varLookup3dsRequestBase)

	if err != nil {
		return err
	}

	*o = Lookup3dsRequestBase(varLookup3dsRequestBase)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "authentication_indicator")
		delete(additionalProperties, "device_channel")
		delete(additionalProperties, "id")
		delete(additionalProperties, "transaction_mode")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLookup3dsRequestBase struct {
	value *Lookup3dsRequestBase
	isSet bool
}

func (v NullableLookup3dsRequestBase) Get() *Lookup3dsRequestBase {
	return v.value
}

func (v *NullableLookup3dsRequestBase) Set(val *Lookup3dsRequestBase) {
	v.value = val
	v.isSet = true
}

func (v NullableLookup3dsRequestBase) IsSet() bool {
	return v.isSet
}

func (v *NullableLookup3dsRequestBase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLookup3dsRequestBase(val *Lookup3dsRequestBase) *NullableLookup3dsRequestBase {
	return &NullableLookup3dsRequestBase{value: val, isSet: true}
}

func (v NullableLookup3dsRequestBase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLookup3dsRequestBase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
