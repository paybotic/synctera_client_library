/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.153.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"encoding/json"
	"fmt"
)

// checks if the PatchInterest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PatchInterest{}

// PatchInterest struct for PatchInterest
type PatchInterest struct {
	AccrualPayoutSchedule *AccrualPayoutSchedule `json:"accrual_payout_schedule,omitempty"`
	CalculationMethod     *CalculationMethod     `json:"calculation_method,omitempty"`
	// User provided description for the current interest.
	Description *string `json:"description,omitempty"`
	// Interest ID
	Id          *string `json:"id,omitempty"`
	ProductType string  `json:"product_type"`
	// A list of interest rate. Date intervals between valid_from and valid_to expect to have no overlap.
	Rates                []RateDetails `json:"rates,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PatchInterest PatchInterest

// NewPatchInterest instantiates a new PatchInterest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchInterest(productType string) *PatchInterest {
	this := PatchInterest{}
	this.ProductType = productType
	return &this
}

// NewPatchInterestWithDefaults instantiates a new PatchInterest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchInterestWithDefaults() *PatchInterest {
	this := PatchInterest{}
	return &this
}

// GetAccrualPayoutSchedule returns the AccrualPayoutSchedule field value if set, zero value otherwise.
func (o *PatchInterest) GetAccrualPayoutSchedule() AccrualPayoutSchedule {
	if o == nil || IsNil(o.AccrualPayoutSchedule) {
		var ret AccrualPayoutSchedule
		return ret
	}
	return *o.AccrualPayoutSchedule
}

// GetAccrualPayoutScheduleOk returns a tuple with the AccrualPayoutSchedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchInterest) GetAccrualPayoutScheduleOk() (*AccrualPayoutSchedule, bool) {
	if o == nil || IsNil(o.AccrualPayoutSchedule) {
		return nil, false
	}
	return o.AccrualPayoutSchedule, true
}

// HasAccrualPayoutSchedule returns a boolean if a field has been set.
func (o *PatchInterest) HasAccrualPayoutSchedule() bool {
	if o != nil && !IsNil(o.AccrualPayoutSchedule) {
		return true
	}

	return false
}

// SetAccrualPayoutSchedule gets a reference to the given AccrualPayoutSchedule and assigns it to the AccrualPayoutSchedule field.
func (o *PatchInterest) SetAccrualPayoutSchedule(v AccrualPayoutSchedule) {
	o.AccrualPayoutSchedule = &v
}

// GetCalculationMethod returns the CalculationMethod field value if set, zero value otherwise.
func (o *PatchInterest) GetCalculationMethod() CalculationMethod {
	if o == nil || IsNil(o.CalculationMethod) {
		var ret CalculationMethod
		return ret
	}
	return *o.CalculationMethod
}

// GetCalculationMethodOk returns a tuple with the CalculationMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchInterest) GetCalculationMethodOk() (*CalculationMethod, bool) {
	if o == nil || IsNil(o.CalculationMethod) {
		return nil, false
	}
	return o.CalculationMethod, true
}

// HasCalculationMethod returns a boolean if a field has been set.
func (o *PatchInterest) HasCalculationMethod() bool {
	if o != nil && !IsNil(o.CalculationMethod) {
		return true
	}

	return false
}

// SetCalculationMethod gets a reference to the given CalculationMethod and assigns it to the CalculationMethod field.
func (o *PatchInterest) SetCalculationMethod(v CalculationMethod) {
	o.CalculationMethod = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PatchInterest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchInterest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PatchInterest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PatchInterest) SetDescription(v string) {
	o.Description = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PatchInterest) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchInterest) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PatchInterest) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *PatchInterest) SetId(v string) {
	o.Id = &v
}

// GetProductType returns the ProductType field value
func (o *PatchInterest) GetProductType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProductType
}

// GetProductTypeOk returns a tuple with the ProductType field value
// and a boolean to check if the value has been set.
func (o *PatchInterest) GetProductTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductType, true
}

// SetProductType sets field value
func (o *PatchInterest) SetProductType(v string) {
	o.ProductType = v
}

// GetRates returns the Rates field value if set, zero value otherwise.
func (o *PatchInterest) GetRates() []RateDetails {
	if o == nil || IsNil(o.Rates) {
		var ret []RateDetails
		return ret
	}
	return o.Rates
}

// GetRatesOk returns a tuple with the Rates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchInterest) GetRatesOk() ([]RateDetails, bool) {
	if o == nil || IsNil(o.Rates) {
		return nil, false
	}
	return o.Rates, true
}

// HasRates returns a boolean if a field has been set.
func (o *PatchInterest) HasRates() bool {
	if o != nil && !IsNil(o.Rates) {
		return true
	}

	return false
}

// SetRates gets a reference to the given []RateDetails and assigns it to the Rates field.
func (o *PatchInterest) SetRates(v []RateDetails) {
	o.Rates = v
}

func (o PatchInterest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchInterest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccrualPayoutSchedule) {
		toSerialize["accrual_payout_schedule"] = o.AccrualPayoutSchedule
	}
	if !IsNil(o.CalculationMethod) {
		toSerialize["calculation_method"] = o.CalculationMethod
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["product_type"] = o.ProductType
	if !IsNil(o.Rates) {
		toSerialize["rates"] = o.Rates
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PatchInterest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"product_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPatchInterest := _PatchInterest{}

	err = json.Unmarshal(data, &varPatchInterest)

	if err != nil {
		return err
	}

	*o = PatchInterest(varPatchInterest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "accrual_payout_schedule")
		delete(additionalProperties, "calculation_method")
		delete(additionalProperties, "description")
		delete(additionalProperties, "id")
		delete(additionalProperties, "product_type")
		delete(additionalProperties, "rates")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePatchInterest struct {
	value *PatchInterest
	isSet bool
}

func (v NullablePatchInterest) Get() *PatchInterest {
	return v.value
}

func (v *NullablePatchInterest) Set(val *PatchInterest) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchInterest) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchInterest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchInterest(val *PatchInterest) *NullablePatchInterest {
	return &NullablePatchInterest{value: val, isSet: true}
}

func (v NullablePatchInterest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchInterest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
