/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.153.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"encoding/json"
	"fmt"
)

// NoteStatus The state of the FEEDBACK, use this field to mark fields as RESOLVED or UNRESOLVED. This is required when creating a note with type FEEDBACK. Providing a status with note type NOTE will result in a Bad Request error.
type NoteStatus string

// List of note_status
const (
	NOTESTATUS_RESOLVED   NoteStatus = "RESOLVED"
	NOTESTATUS_UNRESOLVED NoteStatus = "UNRESOLVED"
)

// All allowed values of NoteStatus enum
var AllowedNoteStatusEnumValues = []NoteStatus{
	"RESOLVED",
	"UNRESOLVED",
}

func (v *NoteStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NoteStatus(value)
	for _, existing := range AllowedNoteStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NoteStatus", value)
}

// NewNoteStatusFromValue returns a pointer to a valid NoteStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNoteStatusFromValue(v string) (*NoteStatus, error) {
	ev := NoteStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NoteStatus: valid values are %v", v, AllowedNoteStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NoteStatus) IsValid() bool {
	for _, existing := range AllowedNoteStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to note_status value
func (v NoteStatus) Ptr() *NoteStatus {
	return &v
}

type NullableNoteStatus struct {
	value *NoteStatus
	isSet bool
}

func (v NullableNoteStatus) Get() *NoteStatus {
	return v.value
}

func (v *NullableNoteStatus) Set(val *NoteStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableNoteStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableNoteStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNoteStatus(val *NoteStatus) *NullableNoteStatus {
	return &NullableNoteStatus{value: val, isSet: true}
}

func (v NullableNoteStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNoteStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
