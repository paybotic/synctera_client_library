/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.150.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the EddBaseResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EddBaseResponse{}

// EddBaseResponse struct for EddBaseResponse
type EddBaseResponse struct {
	CreationTime time.Time    `json:"creation_time"`
	DeletionTime NullableTime `json:"deletion_time"`
	// EDD record unique identifier
	Id string `json:"id"`
}

type _EddBaseResponse EddBaseResponse

// NewEddBaseResponse instantiates a new EddBaseResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEddBaseResponse(creationTime time.Time, deletionTime NullableTime, id string) *EddBaseResponse {
	this := EddBaseResponse{}
	this.CreationTime = creationTime
	this.DeletionTime = deletionTime
	this.Id = id
	return &this
}

// NewEddBaseResponseWithDefaults instantiates a new EddBaseResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEddBaseResponseWithDefaults() *EddBaseResponse {
	this := EddBaseResponse{}
	return &this
}

// GetCreationTime returns the CreationTime field value
func (o *EddBaseResponse) GetCreationTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreationTime
}

// GetCreationTimeOk returns a tuple with the CreationTime field value
// and a boolean to check if the value has been set.
func (o *EddBaseResponse) GetCreationTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreationTime, true
}

// SetCreationTime sets field value
func (o *EddBaseResponse) SetCreationTime(v time.Time) {
	o.CreationTime = v
}

// GetDeletionTime returns the DeletionTime field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *EddBaseResponse) GetDeletionTime() time.Time {
	if o == nil || o.DeletionTime.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.DeletionTime.Get()
}

// GetDeletionTimeOk returns a tuple with the DeletionTime field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EddBaseResponse) GetDeletionTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.DeletionTime.Get(), o.DeletionTime.IsSet()
}

// SetDeletionTime sets field value
func (o *EddBaseResponse) SetDeletionTime(v time.Time) {
	o.DeletionTime.Set(&v)
}

// GetId returns the Id field value
func (o *EddBaseResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *EddBaseResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *EddBaseResponse) SetId(v string) {
	o.Id = v
}

func (o EddBaseResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EddBaseResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["creation_time"] = o.CreationTime
	toSerialize["deletion_time"] = o.DeletionTime.Get()
	toSerialize["id"] = o.Id
	return toSerialize, nil
}

func (o *EddBaseResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"creation_time",
		"deletion_time",
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEddBaseResponse := _EddBaseResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEddBaseResponse)

	if err != nil {
		return err
	}

	*o = EddBaseResponse(varEddBaseResponse)

	return err
}

type NullableEddBaseResponse struct {
	value *EddBaseResponse
	isSet bool
}

func (v NullableEddBaseResponse) Get() *EddBaseResponse {
	return v.value
}

func (v *NullableEddBaseResponse) Set(val *EddBaseResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableEddBaseResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableEddBaseResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEddBaseResponse(val *EddBaseResponse) *NullableEddBaseResponse {
	return &NullableEddBaseResponse{value: val, isSet: true}
}

func (v NullableEddBaseResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEddBaseResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
