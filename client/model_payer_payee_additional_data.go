/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.153.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"encoding/json"
	"fmt"
)

// checks if the PayerPayeeAdditionalData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PayerPayeeAdditionalData{}

// PayerPayeeAdditionalData Contains the type of transfer for the payer and payee relationship
type PayerPayeeAdditionalData struct {
	TransferType         string `json:"transfer_type"`
	AdditionalProperties map[string]interface{}
}

type _PayerPayeeAdditionalData PayerPayeeAdditionalData

// NewPayerPayeeAdditionalData instantiates a new PayerPayeeAdditionalData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPayerPayeeAdditionalData(transferType string) *PayerPayeeAdditionalData {
	this := PayerPayeeAdditionalData{}
	this.TransferType = transferType
	return &this
}

// NewPayerPayeeAdditionalDataWithDefaults instantiates a new PayerPayeeAdditionalData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPayerPayeeAdditionalDataWithDefaults() *PayerPayeeAdditionalData {
	this := PayerPayeeAdditionalData{}
	return &this
}

// GetTransferType returns the TransferType field value
func (o *PayerPayeeAdditionalData) GetTransferType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransferType
}

// GetTransferTypeOk returns a tuple with the TransferType field value
// and a boolean to check if the value has been set.
func (o *PayerPayeeAdditionalData) GetTransferTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransferType, true
}

// SetTransferType sets field value
func (o *PayerPayeeAdditionalData) SetTransferType(v string) {
	o.TransferType = v
}

func (o PayerPayeeAdditionalData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PayerPayeeAdditionalData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["transfer_type"] = o.TransferType

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PayerPayeeAdditionalData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"transfer_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPayerPayeeAdditionalData := _PayerPayeeAdditionalData{}

	err = json.Unmarshal(data, &varPayerPayeeAdditionalData)

	if err != nil {
		return err
	}

	*o = PayerPayeeAdditionalData(varPayerPayeeAdditionalData)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "transfer_type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePayerPayeeAdditionalData struct {
	value *PayerPayeeAdditionalData
	isSet bool
}

func (v NullablePayerPayeeAdditionalData) Get() *PayerPayeeAdditionalData {
	return v.value
}

func (v *NullablePayerPayeeAdditionalData) Set(val *PayerPayeeAdditionalData) {
	v.value = val
	v.isSet = true
}

func (v NullablePayerPayeeAdditionalData) IsSet() bool {
	return v.isSet
}

func (v *NullablePayerPayeeAdditionalData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePayerPayeeAdditionalData(val *PayerPayeeAdditionalData) *NullablePayerPayeeAdditionalData {
	return &NullablePayerPayeeAdditionalData{value: val, isSet: true}
}

func (v NullablePayerPayeeAdditionalData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePayerPayeeAdditionalData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
