/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.150.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the TransferResponseBase type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransferResponseBase{}

// TransferResponseBase struct for TransferResponseBase
type TransferResponseBase struct {
	// The ID of the account to which the card will be linked
	AccountId string `json:"account_id"`
	// Amount of the transfer in cents
	Amount int32 `json:"amount"`
	// ISO-3166-1 Alpha-2 country code
	CountryCode string    `json:"country_code"`
	CreatedTime time.Time `json:"created_time"`
	// ISO 4217  Alpha-3 currency code
	Currency string `json:"currency"`
	// The ID of the customer to whom the card belongs
	CustomerId string `json:"customer_id"`
	// The ID of the external card from/to which the transfer was initiated/received
	ExternalCardId string `json:"external_card_id"`
	// The ID of the transfer
	Id               string    `json:"id"`
	LastModifiedTime time.Time `json:"last_modified_time"`
	Merchant         Merchant  `json:"merchant"`
	// If available, a human readable string indicating why a transfer was declined downstream of our system
	NetworkDeclineDetails *string `json:"network_decline_details,omitempty"`
	// The reason for the status, e.g. INSUFFICIENT_FUNDS, SUSPECTED_FRAUD, NETWORK_DECLINED
	Reason *string `json:"reason,omitempty"`
	// The status of the transfer
	Status string `json:"status"`
	// The transaction ID
	TransactionId *string      `json:"transaction_id,omitempty"`
	Type          TransferType `json:"type"`
}

type _TransferResponseBase TransferResponseBase

// NewTransferResponseBase instantiates a new TransferResponseBase object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransferResponseBase(accountId string, amount int32, countryCode string, createdTime time.Time, currency string, customerId string, externalCardId string, id string, lastModifiedTime time.Time, merchant Merchant, status string, type_ TransferType) *TransferResponseBase {
	this := TransferResponseBase{}
	this.AccountId = accountId
	this.Amount = amount
	this.CountryCode = countryCode
	this.CreatedTime = createdTime
	this.Currency = currency
	this.CustomerId = customerId
	this.ExternalCardId = externalCardId
	this.Id = id
	this.LastModifiedTime = lastModifiedTime
	this.Merchant = merchant
	this.Status = status
	this.Type = type_
	return &this
}

// NewTransferResponseBaseWithDefaults instantiates a new TransferResponseBase object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransferResponseBaseWithDefaults() *TransferResponseBase {
	this := TransferResponseBase{}
	return &this
}

// GetAccountId returns the AccountId field value
func (o *TransferResponseBase) GetAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value
// and a boolean to check if the value has been set.
func (o *TransferResponseBase) GetAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountId, true
}

// SetAccountId sets field value
func (o *TransferResponseBase) SetAccountId(v string) {
	o.AccountId = v
}

// GetAmount returns the Amount field value
func (o *TransferResponseBase) GetAmount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *TransferResponseBase) GetAmountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *TransferResponseBase) SetAmount(v int32) {
	o.Amount = v
}

// GetCountryCode returns the CountryCode field value
func (o *TransferResponseBase) GetCountryCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CountryCode
}

// GetCountryCodeOk returns a tuple with the CountryCode field value
// and a boolean to check if the value has been set.
func (o *TransferResponseBase) GetCountryCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CountryCode, true
}

// SetCountryCode sets field value
func (o *TransferResponseBase) SetCountryCode(v string) {
	o.CountryCode = v
}

// GetCreatedTime returns the CreatedTime field value
func (o *TransferResponseBase) GetCreatedTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedTime
}

// GetCreatedTimeOk returns a tuple with the CreatedTime field value
// and a boolean to check if the value has been set.
func (o *TransferResponseBase) GetCreatedTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedTime, true
}

// SetCreatedTime sets field value
func (o *TransferResponseBase) SetCreatedTime(v time.Time) {
	o.CreatedTime = v
}

// GetCurrency returns the Currency field value
func (o *TransferResponseBase) GetCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *TransferResponseBase) GetCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *TransferResponseBase) SetCurrency(v string) {
	o.Currency = v
}

// GetCustomerId returns the CustomerId field value
func (o *TransferResponseBase) GetCustomerId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CustomerId
}

// GetCustomerIdOk returns a tuple with the CustomerId field value
// and a boolean to check if the value has been set.
func (o *TransferResponseBase) GetCustomerIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CustomerId, true
}

// SetCustomerId sets field value
func (o *TransferResponseBase) SetCustomerId(v string) {
	o.CustomerId = v
}

// GetExternalCardId returns the ExternalCardId field value
func (o *TransferResponseBase) GetExternalCardId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExternalCardId
}

// GetExternalCardIdOk returns a tuple with the ExternalCardId field value
// and a boolean to check if the value has been set.
func (o *TransferResponseBase) GetExternalCardIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExternalCardId, true
}

// SetExternalCardId sets field value
func (o *TransferResponseBase) SetExternalCardId(v string) {
	o.ExternalCardId = v
}

// GetId returns the Id field value
func (o *TransferResponseBase) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *TransferResponseBase) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *TransferResponseBase) SetId(v string) {
	o.Id = v
}

// GetLastModifiedTime returns the LastModifiedTime field value
func (o *TransferResponseBase) GetLastModifiedTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.LastModifiedTime
}

// GetLastModifiedTimeOk returns a tuple with the LastModifiedTime field value
// and a boolean to check if the value has been set.
func (o *TransferResponseBase) GetLastModifiedTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastModifiedTime, true
}

// SetLastModifiedTime sets field value
func (o *TransferResponseBase) SetLastModifiedTime(v time.Time) {
	o.LastModifiedTime = v
}

// GetMerchant returns the Merchant field value
func (o *TransferResponseBase) GetMerchant() Merchant {
	if o == nil {
		var ret Merchant
		return ret
	}

	return o.Merchant
}

// GetMerchantOk returns a tuple with the Merchant field value
// and a boolean to check if the value has been set.
func (o *TransferResponseBase) GetMerchantOk() (*Merchant, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Merchant, true
}

// SetMerchant sets field value
func (o *TransferResponseBase) SetMerchant(v Merchant) {
	o.Merchant = v
}

// GetNetworkDeclineDetails returns the NetworkDeclineDetails field value if set, zero value otherwise.
func (o *TransferResponseBase) GetNetworkDeclineDetails() string {
	if o == nil || IsNil(o.NetworkDeclineDetails) {
		var ret string
		return ret
	}
	return *o.NetworkDeclineDetails
}

// GetNetworkDeclineDetailsOk returns a tuple with the NetworkDeclineDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferResponseBase) GetNetworkDeclineDetailsOk() (*string, bool) {
	if o == nil || IsNil(o.NetworkDeclineDetails) {
		return nil, false
	}
	return o.NetworkDeclineDetails, true
}

// HasNetworkDeclineDetails returns a boolean if a field has been set.
func (o *TransferResponseBase) HasNetworkDeclineDetails() bool {
	if o != nil && !IsNil(o.NetworkDeclineDetails) {
		return true
	}

	return false
}

// SetNetworkDeclineDetails gets a reference to the given string and assigns it to the NetworkDeclineDetails field.
func (o *TransferResponseBase) SetNetworkDeclineDetails(v string) {
	o.NetworkDeclineDetails = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *TransferResponseBase) GetReason() string {
	if o == nil || IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferResponseBase) GetReasonOk() (*string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *TransferResponseBase) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *TransferResponseBase) SetReason(v string) {
	o.Reason = &v
}

// GetStatus returns the Status field value
func (o *TransferResponseBase) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *TransferResponseBase) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *TransferResponseBase) SetStatus(v string) {
	o.Status = v
}

// GetTransactionId returns the TransactionId field value if set, zero value otherwise.
func (o *TransferResponseBase) GetTransactionId() string {
	if o == nil || IsNil(o.TransactionId) {
		var ret string
		return ret
	}
	return *o.TransactionId
}

// GetTransactionIdOk returns a tuple with the TransactionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferResponseBase) GetTransactionIdOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionId) {
		return nil, false
	}
	return o.TransactionId, true
}

// HasTransactionId returns a boolean if a field has been set.
func (o *TransferResponseBase) HasTransactionId() bool {
	if o != nil && !IsNil(o.TransactionId) {
		return true
	}

	return false
}

// SetTransactionId gets a reference to the given string and assigns it to the TransactionId field.
func (o *TransferResponseBase) SetTransactionId(v string) {
	o.TransactionId = &v
}

// GetType returns the Type field value
func (o *TransferResponseBase) GetType() TransferType {
	if o == nil {
		var ret TransferType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TransferResponseBase) GetTypeOk() (*TransferType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TransferResponseBase) SetType(v TransferType) {
	o.Type = v
}

func (o TransferResponseBase) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransferResponseBase) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["account_id"] = o.AccountId
	toSerialize["amount"] = o.Amount
	toSerialize["country_code"] = o.CountryCode
	toSerialize["created_time"] = o.CreatedTime
	toSerialize["currency"] = o.Currency
	toSerialize["customer_id"] = o.CustomerId
	toSerialize["external_card_id"] = o.ExternalCardId
	toSerialize["id"] = o.Id
	toSerialize["last_modified_time"] = o.LastModifiedTime
	toSerialize["merchant"] = o.Merchant
	if !IsNil(o.NetworkDeclineDetails) {
		toSerialize["network_decline_details"] = o.NetworkDeclineDetails
	}
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	toSerialize["status"] = o.Status
	if !IsNil(o.TransactionId) {
		toSerialize["transaction_id"] = o.TransactionId
	}
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *TransferResponseBase) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"account_id",
		"amount",
		"country_code",
		"created_time",
		"currency",
		"customer_id",
		"external_card_id",
		"id",
		"last_modified_time",
		"merchant",
		"status",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransferResponseBase := _TransferResponseBase{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransferResponseBase)

	if err != nil {
		return err
	}

	*o = TransferResponseBase(varTransferResponseBase)

	return err
}

type NullableTransferResponseBase struct {
	value *TransferResponseBase
	isSet bool
}

func (v NullableTransferResponseBase) Get() *TransferResponseBase {
	return v.value
}

func (v *NullableTransferResponseBase) Set(val *TransferResponseBase) {
	v.value = val
	v.isSet = true
}

func (v NullableTransferResponseBase) IsSet() bool {
	return v.isSet
}

func (v *NullableTransferResponseBase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransferResponseBase(val *TransferResponseBase) *NullableTransferResponseBase {
	return &NullableTransferResponseBase{value: val, isSet: true}
}

func (v NullableTransferResponseBase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransferResponseBase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
