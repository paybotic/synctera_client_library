/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.153.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"encoding/json"
)

// checks if the SpendingLimitWithTime type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SpendingLimitWithTime{}

// SpendingLimitWithTime Limit over a specific time period.
type SpendingLimitWithTime struct {
	// Maximum amount allowed within the time range. Unit in cents.
	Amount *int64 `json:"amount,omitempty"`
	// Maximum number of transactions allowed within the time range
	Transactions         *int64 `json:"transactions,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SpendingLimitWithTime SpendingLimitWithTime

// NewSpendingLimitWithTime instantiates a new SpendingLimitWithTime object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpendingLimitWithTime() *SpendingLimitWithTime {
	this := SpendingLimitWithTime{}
	return &this
}

// NewSpendingLimitWithTimeWithDefaults instantiates a new SpendingLimitWithTime object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpendingLimitWithTimeWithDefaults() *SpendingLimitWithTime {
	this := SpendingLimitWithTime{}
	return &this
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *SpendingLimitWithTime) GetAmount() int64 {
	if o == nil || IsNil(o.Amount) {
		var ret int64
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpendingLimitWithTime) GetAmountOk() (*int64, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *SpendingLimitWithTime) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given int64 and assigns it to the Amount field.
func (o *SpendingLimitWithTime) SetAmount(v int64) {
	o.Amount = &v
}

// GetTransactions returns the Transactions field value if set, zero value otherwise.
func (o *SpendingLimitWithTime) GetTransactions() int64 {
	if o == nil || IsNil(o.Transactions) {
		var ret int64
		return ret
	}
	return *o.Transactions
}

// GetTransactionsOk returns a tuple with the Transactions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpendingLimitWithTime) GetTransactionsOk() (*int64, bool) {
	if o == nil || IsNil(o.Transactions) {
		return nil, false
	}
	return o.Transactions, true
}

// HasTransactions returns a boolean if a field has been set.
func (o *SpendingLimitWithTime) HasTransactions() bool {
	if o != nil && !IsNil(o.Transactions) {
		return true
	}

	return false
}

// SetTransactions gets a reference to the given int64 and assigns it to the Transactions field.
func (o *SpendingLimitWithTime) SetTransactions(v int64) {
	o.Transactions = &v
}

func (o SpendingLimitWithTime) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SpendingLimitWithTime) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.Transactions) {
		toSerialize["transactions"] = o.Transactions
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SpendingLimitWithTime) UnmarshalJSON(data []byte) (err error) {
	varSpendingLimitWithTime := _SpendingLimitWithTime{}

	err = json.Unmarshal(data, &varSpendingLimitWithTime)

	if err != nil {
		return err
	}

	*o = SpendingLimitWithTime(varSpendingLimitWithTime)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "amount")
		delete(additionalProperties, "transactions")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSpendingLimitWithTime struct {
	value *SpendingLimitWithTime
	isSet bool
}

func (v NullableSpendingLimitWithTime) Get() *SpendingLimitWithTime {
	return v.value
}

func (v *NullableSpendingLimitWithTime) Set(val *SpendingLimitWithTime) {
	v.value = val
	v.isSet = true
}

func (v NullableSpendingLimitWithTime) IsSet() bool {
	return v.isSet
}

func (v *NullableSpendingLimitWithTime) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpendingLimitWithTime(val *SpendingLimitWithTime) *NullableSpendingLimitWithTime {
	return &NullableSpendingLimitWithTime{value: val, isSet: true}
}

func (v NullableSpendingLimitWithTime) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpendingLimitWithTime) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
