/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.153.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"encoding/json"
	"fmt"
)

// TransferRequest - struct for TransferRequest
type TransferRequest struct {
	TransferRequestPull *TransferRequestPull
	TransferRequestPush *TransferRequestPush
}

// TransferRequestPullAsTransferRequest is a convenience function that returns TransferRequestPull wrapped in TransferRequest
func TransferRequestPullAsTransferRequest(v *TransferRequestPull) TransferRequest {
	return TransferRequest{
		TransferRequestPull: v,
	}
}

// TransferRequestPushAsTransferRequest is a convenience function that returns TransferRequestPush wrapped in TransferRequest
func TransferRequestPushAsTransferRequest(v *TransferRequestPush) TransferRequest {
	return TransferRequest{
		TransferRequestPush: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *TransferRequest) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'PULL'
	if jsonDict["type"] == "PULL" {
		// try to unmarshal JSON data into TransferRequestPull
		err = json.Unmarshal(data, &dst.TransferRequestPull)
		if err == nil {
			return nil // data stored in dst.TransferRequestPull, return on the first match
		} else {
			dst.TransferRequestPull = nil
			return fmt.Errorf("failed to unmarshal TransferRequest as TransferRequestPull: %s", err.Error())
		}
	}

	// check if the discriminator value is 'PUSH'
	if jsonDict["type"] == "PUSH" {
		// try to unmarshal JSON data into TransferRequestPush
		err = json.Unmarshal(data, &dst.TransferRequestPush)
		if err == nil {
			return nil // data stored in dst.TransferRequestPush, return on the first match
		} else {
			dst.TransferRequestPush = nil
			return fmt.Errorf("failed to unmarshal TransferRequest as TransferRequestPush: %s", err.Error())
		}
	}

	// check if the discriminator value is 'transfer_request_pull'
	if jsonDict["type"] == "transfer_request_pull" {
		// try to unmarshal JSON data into TransferRequestPull
		err = json.Unmarshal(data, &dst.TransferRequestPull)
		if err == nil {
			return nil // data stored in dst.TransferRequestPull, return on the first match
		} else {
			dst.TransferRequestPull = nil
			return fmt.Errorf("failed to unmarshal TransferRequest as TransferRequestPull: %s", err.Error())
		}
	}

	// check if the discriminator value is 'transfer_request_push'
	if jsonDict["type"] == "transfer_request_push" {
		// try to unmarshal JSON data into TransferRequestPush
		err = json.Unmarshal(data, &dst.TransferRequestPush)
		if err == nil {
			return nil // data stored in dst.TransferRequestPush, return on the first match
		} else {
			dst.TransferRequestPush = nil
			return fmt.Errorf("failed to unmarshal TransferRequest as TransferRequestPush: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src TransferRequest) MarshalJSON() ([]byte, error) {
	if src.TransferRequestPull != nil {
		return json.Marshal(&src.TransferRequestPull)
	}

	if src.TransferRequestPush != nil {
		return json.Marshal(&src.TransferRequestPush)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *TransferRequest) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.TransferRequestPull != nil {
		return obj.TransferRequestPull
	}

	if obj.TransferRequestPush != nil {
		return obj.TransferRequestPush
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj TransferRequest) GetActualInstanceValue() interface{} {
	if obj.TransferRequestPull != nil {
		return *obj.TransferRequestPull
	}

	if obj.TransferRequestPush != nil {
		return *obj.TransferRequestPush
	}

	// all schemas are nil
	return nil
}

type NullableTransferRequest struct {
	value *TransferRequest
	isSet bool
}

func (v NullableTransferRequest) Get() *TransferRequest {
	return v.value
}

func (v *NullableTransferRequest) Set(val *TransferRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTransferRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTransferRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransferRequest(val *TransferRequest) *NullableTransferRequest {
	return &NullableTransferRequest{value: val, isSet: true}
}

func (v NullableTransferRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransferRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
