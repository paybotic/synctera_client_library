/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.153.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"encoding/json"
	"fmt"
)

// GeneralLedgerCategory The category of the general ledger account. This read-only property is determined by the general_ledger_type.
type GeneralLedgerCategory string

// List of general_ledger_category
const (
	GENERALLEDGERCATEGORY_CORE            GeneralLedgerCategory = "CORE"
	GENERALLEDGERCATEGORY_PROFIT_AND_LOSS GeneralLedgerCategory = "PROFIT_AND_LOSS"
	GENERALLEDGERCATEGORY_RESERVE         GeneralLedgerCategory = "RESERVE"
	GENERALLEDGERCATEGORY_SETTLEMENT      GeneralLedgerCategory = "SETTLEMENT"
	GENERALLEDGERCATEGORY_SUSPENSE        GeneralLedgerCategory = "SUSPENSE"
	GENERALLEDGERCATEGORY_TREASURY        GeneralLedgerCategory = "TREASURY"
)

// All allowed values of GeneralLedgerCategory enum
var AllowedGeneralLedgerCategoryEnumValues = []GeneralLedgerCategory{
	"CORE",
	"PROFIT_AND_LOSS",
	"RESERVE",
	"SETTLEMENT",
	"SUSPENSE",
	"TREASURY",
}

func (v *GeneralLedgerCategory) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GeneralLedgerCategory(value)
	for _, existing := range AllowedGeneralLedgerCategoryEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GeneralLedgerCategory", value)
}

// NewGeneralLedgerCategoryFromValue returns a pointer to a valid GeneralLedgerCategory
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGeneralLedgerCategoryFromValue(v string) (*GeneralLedgerCategory, error) {
	ev := GeneralLedgerCategory(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GeneralLedgerCategory: valid values are %v", v, AllowedGeneralLedgerCategoryEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GeneralLedgerCategory) IsValid() bool {
	for _, existing := range AllowedGeneralLedgerCategoryEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to general_ledger_category value
func (v GeneralLedgerCategory) Ptr() *GeneralLedgerCategory {
	return &v
}

type NullableGeneralLedgerCategory struct {
	value *GeneralLedgerCategory
	isSet bool
}

func (v NullableGeneralLedgerCategory) Get() *GeneralLedgerCategory {
	return v.value
}

func (v *NullableGeneralLedgerCategory) Set(val *GeneralLedgerCategory) {
	v.value = val
	v.isSet = true
}

func (v NullableGeneralLedgerCategory) IsSet() bool {
	return v.isSet
}

func (v *NullableGeneralLedgerCategory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGeneralLedgerCategory(val *GeneralLedgerCategory) *NullableGeneralLedgerCategory {
	return &NullableGeneralLedgerCategory{value: val, isSet: true}
}

func (v NullableGeneralLedgerCategory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGeneralLedgerCategory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
