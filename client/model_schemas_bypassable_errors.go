/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.150.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"encoding/json"
	"fmt"
)

// SchemasBypassableErrors the model 'SchemasBypassableErrors'
type SchemasBypassableErrors string

// List of schemas-bypassable_errors
const (
	SCHEMASBYPASSABLEERRORS_ACCOUNT_CLOSED                         SchemasBypassableErrors = "ACCOUNT_CLOSED"
	SCHEMASBYPASSABLEERRORS_ACCOUNT_OWNER_WATCHLIST                SchemasBypassableErrors = "ACCOUNT_OWNER_WATCHLIST"
	SCHEMASBYPASSABLEERRORS_BALANCE_VIOLATION                      SchemasBypassableErrors = "BALANCE_VIOLATION"
	SCHEMASBYPASSABLEERRORS_IMPROPER_ACCOUNT_CUSTOMER_RELATIONSHIP SchemasBypassableErrors = "IMPROPER_ACCOUNT_CUSTOMER_RELATIONSHIP"
	SCHEMASBYPASSABLEERRORS_IMPROPER_ACCOUNT_STATUS                SchemasBypassableErrors = "IMPROPER_ACCOUNT_STATUS"
	SCHEMASBYPASSABLEERRORS_IMPROPER_CUSTOMER_STATUS               SchemasBypassableErrors = "IMPROPER_CUSTOMER_STATUS"
	SCHEMASBYPASSABLEERRORS_IMPROPER_CUSTOMER_VERIFICATION_STATUS  SchemasBypassableErrors = "IMPROPER_CUSTOMER_VERIFICATION_STATUS"
	SCHEMASBYPASSABLEERRORS_IMPROPER_PARTNER_LIFECYCLE_STATUS      SchemasBypassableErrors = "IMPROPER_PARTNER_LIFECYCLE_STATUS"
	SCHEMASBYPASSABLEERRORS_IMPROPER_PARTNER_VERIFICATION_STATUS   SchemasBypassableErrors = "IMPROPER_PARTNER_VERIFICATION_STATUS"
	SCHEMASBYPASSABLEERRORS_INSUFFICIENT_FUNDS                     SchemasBypassableErrors = "INSUFFICIENT_FUNDS"
	SCHEMASBYPASSABLEERRORS_SPEND_CONTROL_VIOLATION                SchemasBypassableErrors = "SPEND_CONTROL_VIOLATION"
	SCHEMASBYPASSABLEERRORS_SUSPECTED_FRAUD                        SchemasBypassableErrors = "SUSPECTED_FRAUD"
)

// All allowed values of SchemasBypassableErrors enum
var AllowedSchemasBypassableErrorsEnumValues = []SchemasBypassableErrors{
	"ACCOUNT_CLOSED",
	"ACCOUNT_OWNER_WATCHLIST",
	"BALANCE_VIOLATION",
	"IMPROPER_ACCOUNT_CUSTOMER_RELATIONSHIP",
	"IMPROPER_ACCOUNT_STATUS",
	"IMPROPER_CUSTOMER_STATUS",
	"IMPROPER_CUSTOMER_VERIFICATION_STATUS",
	"IMPROPER_PARTNER_LIFECYCLE_STATUS",
	"IMPROPER_PARTNER_VERIFICATION_STATUS",
	"INSUFFICIENT_FUNDS",
	"SPEND_CONTROL_VIOLATION",
	"SUSPECTED_FRAUD",
}

func (v *SchemasBypassableErrors) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SchemasBypassableErrors(value)
	for _, existing := range AllowedSchemasBypassableErrorsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SchemasBypassableErrors", value)
}

// NewSchemasBypassableErrorsFromValue returns a pointer to a valid SchemasBypassableErrors
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSchemasBypassableErrorsFromValue(v string) (*SchemasBypassableErrors, error) {
	ev := SchemasBypassableErrors(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SchemasBypassableErrors: valid values are %v", v, AllowedSchemasBypassableErrorsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SchemasBypassableErrors) IsValid() bool {
	for _, existing := range AllowedSchemasBypassableErrorsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to schemas-bypassable_errors value
func (v SchemasBypassableErrors) Ptr() *SchemasBypassableErrors {
	return &v
}

type NullableSchemasBypassableErrors struct {
	value *SchemasBypassableErrors
	isSet bool
}

func (v NullableSchemasBypassableErrors) Get() *SchemasBypassableErrors {
	return v.value
}

func (v *NullableSchemasBypassableErrors) Set(val *SchemasBypassableErrors) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemasBypassableErrors) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemasBypassableErrors) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemasBypassableErrors(val *SchemasBypassableErrors) *NullableSchemasBypassableErrors {
	return &NullableSchemasBypassableErrors{value: val, isSet: true}
}

func (v NullableSchemasBypassableErrors) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemasBypassableErrors) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
