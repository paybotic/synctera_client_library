/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.153.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"encoding/json"
	"fmt"
)

// TransferResponse - struct for TransferResponse
type TransferResponse struct {
	TransferResponsePull *TransferResponsePull
	TransferResponsePush *TransferResponsePush
}

// TransferResponsePullAsTransferResponse is a convenience function that returns TransferResponsePull wrapped in TransferResponse
func TransferResponsePullAsTransferResponse(v *TransferResponsePull) TransferResponse {
	return TransferResponse{
		TransferResponsePull: v,
	}
}

// TransferResponsePushAsTransferResponse is a convenience function that returns TransferResponsePush wrapped in TransferResponse
func TransferResponsePushAsTransferResponse(v *TransferResponsePush) TransferResponse {
	return TransferResponse{
		TransferResponsePush: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *TransferResponse) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'PULL'
	if jsonDict["type"] == "PULL" {
		// try to unmarshal JSON data into TransferResponsePull
		err = json.Unmarshal(data, &dst.TransferResponsePull)
		if err == nil {
			return nil // data stored in dst.TransferResponsePull, return on the first match
		} else {
			dst.TransferResponsePull = nil
			return fmt.Errorf("failed to unmarshal TransferResponse as TransferResponsePull: %s", err.Error())
		}
	}

	// check if the discriminator value is 'PULL_REVERSAL'
	if jsonDict["type"] == "PULL_REVERSAL" {
		// try to unmarshal JSON data into TransferResponsePull
		err = json.Unmarshal(data, &dst.TransferResponsePull)
		if err == nil {
			return nil // data stored in dst.TransferResponsePull, return on the first match
		} else {
			dst.TransferResponsePull = nil
			return fmt.Errorf("failed to unmarshal TransferResponse as TransferResponsePull: %s", err.Error())
		}
	}

	// check if the discriminator value is 'PUSH'
	if jsonDict["type"] == "PUSH" {
		// try to unmarshal JSON data into TransferResponsePush
		err = json.Unmarshal(data, &dst.TransferResponsePush)
		if err == nil {
			return nil // data stored in dst.TransferResponsePush, return on the first match
		} else {
			dst.TransferResponsePush = nil
			return fmt.Errorf("failed to unmarshal TransferResponse as TransferResponsePush: %s", err.Error())
		}
	}

	// check if the discriminator value is 'transfer_response_pull'
	if jsonDict["type"] == "transfer_response_pull" {
		// try to unmarshal JSON data into TransferResponsePull
		err = json.Unmarshal(data, &dst.TransferResponsePull)
		if err == nil {
			return nil // data stored in dst.TransferResponsePull, return on the first match
		} else {
			dst.TransferResponsePull = nil
			return fmt.Errorf("failed to unmarshal TransferResponse as TransferResponsePull: %s", err.Error())
		}
	}

	// check if the discriminator value is 'transfer_response_push'
	if jsonDict["type"] == "transfer_response_push" {
		// try to unmarshal JSON data into TransferResponsePush
		err = json.Unmarshal(data, &dst.TransferResponsePush)
		if err == nil {
			return nil // data stored in dst.TransferResponsePush, return on the first match
		} else {
			dst.TransferResponsePush = nil
			return fmt.Errorf("failed to unmarshal TransferResponse as TransferResponsePush: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src TransferResponse) MarshalJSON() ([]byte, error) {
	if src.TransferResponsePull != nil {
		return json.Marshal(&src.TransferResponsePull)
	}

	if src.TransferResponsePush != nil {
		return json.Marshal(&src.TransferResponsePush)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *TransferResponse) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.TransferResponsePull != nil {
		return obj.TransferResponsePull
	}

	if obj.TransferResponsePush != nil {
		return obj.TransferResponsePush
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj TransferResponse) GetActualInstanceValue() interface{} {
	if obj.TransferResponsePull != nil {
		return *obj.TransferResponsePull
	}

	if obj.TransferResponsePush != nil {
		return *obj.TransferResponsePush
	}

	// all schemas are nil
	return nil
}

type NullableTransferResponse struct {
	value *TransferResponse
	isSet bool
}

func (v NullableTransferResponse) Get() *TransferResponse {
	return v.value
}

func (v *NullableTransferResponse) Set(val *TransferResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableTransferResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableTransferResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransferResponse(val *TransferResponse) *NullableTransferResponse {
	return &NullableTransferResponse{value: val, isSet: true}
}

func (v NullableTransferResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransferResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
