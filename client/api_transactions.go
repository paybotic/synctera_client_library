/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.150.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// TransactionsAPIService TransactionsAPI service
type TransactionsAPIService service

type ApiGetPendingTransactionByIDRequest struct {
	ctx        context.Context
	ApiService *TransactionsAPIService
	id         string
}

func (r ApiGetPendingTransactionByIDRequest) Execute() (*PendingTransaction, *http.Response, error) {
	return r.ApiService.GetPendingTransactionByIDExecute(r)
}

/*
GetPendingTransactionByID Get a pending transaction

# Get a pending transaction by its uuid

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Transaction ID
	@return ApiGetPendingTransactionByIDRequest
*/
func (a *TransactionsAPIService) GetPendingTransactionByID(ctx context.Context, id string) ApiGetPendingTransactionByIDRequest {
	return ApiGetPendingTransactionByIDRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return PendingTransaction
func (a *TransactionsAPIService) GetPendingTransactionByIDExecute(r ApiGetPendingTransactionByIDRequest) (*PendingTransaction, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PendingTransaction
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TransactionsAPIService.GetPendingTransactionByID")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/transactions/pending/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetPostedTransactionByIDRequest struct {
	ctx        context.Context
	ApiService *TransactionsAPIService
	id         string
}

func (r ApiGetPostedTransactionByIDRequest) Execute() (*PostedTransaction, *http.Response, error) {
	return r.ApiService.GetPostedTransactionByIDExecute(r)
}

/*
GetPostedTransactionByID Get a posted transaction

# Get a posted transaction by its uuid

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Transaction ID
	@return ApiGetPostedTransactionByIDRequest
*/
func (a *TransactionsAPIService) GetPostedTransactionByID(ctx context.Context, id string) ApiGetPostedTransactionByIDRequest {
	return ApiGetPostedTransactionByIDRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return PostedTransaction
func (a *TransactionsAPIService) GetPostedTransactionByIDExecute(r ApiGetPostedTransactionByIDRequest) (*PostedTransaction, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PostedTransaction
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TransactionsAPIService.GetPostedTransactionByID")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/transactions/posted/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTransactionsBatchPaymentsRequest struct {
	ctx        context.Context
	ApiService *TransactionsAPIService
	enabled    *bool
}

func (r ApiGetTransactionsBatchPaymentsRequest) Enabled(enabled bool) ApiGetTransactionsBatchPaymentsRequest {
	r.enabled = &enabled
	return r
}

func (r ApiGetTransactionsBatchPaymentsRequest) Execute() (*PostedTransactions, *http.Response, error) {
	return r.ApiService.GetTransactionsBatchPaymentsExecute(r)
}

/*
GetTransactionsBatchPayments Get Transactions From Batch Payments Templates

Get all transactions that have the potential to be included in a batch payment.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetTransactionsBatchPaymentsRequest
*/
func (a *TransactionsAPIService) GetTransactionsBatchPayments(ctx context.Context) ApiGetTransactionsBatchPaymentsRequest {
	return ApiGetTransactionsBatchPaymentsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PostedTransactions
func (a *TransactionsAPIService) GetTransactionsBatchPaymentsExecute(r ApiGetTransactionsBatchPaymentsRequest) (*PostedTransactions, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PostedTransactions
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TransactionsAPIService.GetTransactionsBatchPayments")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/transactions/batchable"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.enabled != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enabled", r.enabled, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListPendingTransactionsRequest struct {
	ctx                      context.Context
	ApiService               *TransactionsAPIService
	includeChildTransactions *bool
	status                   *[]string
	accountId                *[]string
	fromDate                 *string
	toDate                   *string
	transactionId            *string
	type_                    *string
	idempotencyKey           *[]string
	accountNo                *string
	excludeJitTransactions   *bool
	uuid                     *[]string
	pageToken                *string
	cardId                   *string
	referenceId              *string
	limit                    *int32
	subtype                  *string
}

// Include transactions from sub-accounts when listing transactions for a given account
func (r ApiListPendingTransactionsRequest) IncludeChildTransactions(includeChildTransactions bool) ApiListPendingTransactionsRequest {
	r.includeChildTransactions = &includeChildTransactions
	return r
}

// The status of the transaction
func (r ApiListPendingTransactionsRequest) Status(status []string) ApiListPendingTransactionsRequest {
	r.status = &status
	return r
}

// Account ID
func (r ApiListPendingTransactionsRequest) AccountId(accountId []string) ApiListPendingTransactionsRequest {
	r.accountId = &accountId
	return r
}

// Only display transactions with a posting date greater than from_date
func (r ApiListPendingTransactionsRequest) FromDate(fromDate string) ApiListPendingTransactionsRequest {
	r.fromDate = &fromDate
	return r
}

// Only display transactions with a posting date less than or equal to to_date
func (r ApiListPendingTransactionsRequest) ToDate(toDate string) ApiListPendingTransactionsRequest {
	r.toDate = &toDate
	return r
}

// Only display holds linked to the provided transaction id
func (r ApiListPendingTransactionsRequest) TransactionId(transactionId string) ApiListPendingTransactionsRequest {
	r.transactionId = &transactionId
	return r
}

// Only display transactions matching the given type
func (r ApiListPendingTransactionsRequest) Type_(type_ string) ApiListPendingTransactionsRequest {
	r.type_ = &type_
	return r
}

// Transaction Idempotency Key(s). Multiple keys can be provided as a comma-separated list.
func (r ApiListPendingTransactionsRequest) IdempotencyKey(idempotencyKey []string) ApiListPendingTransactionsRequest {
	r.idempotencyKey = &idempotencyKey
	return r
}

// Account number
func (r ApiListPendingTransactionsRequest) AccountNo(accountNo string) ApiListPendingTransactionsRequest {
	r.accountNo = &accountNo
	return r
}

// Hide \&quot;JIT funding\&quot; transactions from results
func (r ApiListPendingTransactionsRequest) ExcludeJitTransactions(excludeJitTransactions bool) ApiListPendingTransactionsRequest {
	r.excludeJitTransactions = &excludeJitTransactions
	return r
}

// Transaction UUID(s). Multiple UUIDs can be provided as a comma-separated list.
func (r ApiListPendingTransactionsRequest) Uuid(uuid []string) ApiListPendingTransactionsRequest {
	r.uuid = &uuid
	return r
}

func (r ApiListPendingTransactionsRequest) PageToken(pageToken string) ApiListPendingTransactionsRequest {
	r.pageToken = &pageToken
	return r
}

// Card ID
func (r ApiListPendingTransactionsRequest) CardId(cardId string) ApiListPendingTransactionsRequest {
	r.cardId = &cardId
	return r
}

// Reference ID
func (r ApiListPendingTransactionsRequest) ReferenceId(referenceId string) ApiListPendingTransactionsRequest {
	r.referenceId = &referenceId
	return r
}

func (r ApiListPendingTransactionsRequest) Limit(limit int32) ApiListPendingTransactionsRequest {
	r.limit = &limit
	return r
}

// Only display transactions matching the given subtype
func (r ApiListPendingTransactionsRequest) Subtype(subtype string) ApiListPendingTransactionsRequest {
	r.subtype = &subtype
	return r
}

func (r ApiListPendingTransactionsRequest) Execute() (*PendingTransactions, *http.Response, error) {
	return r.ApiService.ListPendingTransactionsExecute(r)
}

/*
ListPendingTransactions List pending transactions

# Get paginated list of pending transactions matching the provided filters

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiListPendingTransactionsRequest
*/
func (a *TransactionsAPIService) ListPendingTransactions(ctx context.Context) ApiListPendingTransactionsRequest {
	return ApiListPendingTransactionsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PendingTransactions
func (a *TransactionsAPIService) ListPendingTransactionsExecute(r ApiListPendingTransactionsRequest) (*PendingTransactions, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PendingTransactions
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TransactionsAPIService.ListPendingTransactions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/transactions/pending"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.includeChildTransactions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include_child_transactions", r.includeChildTransactions, "form", "")
	}
	if r.status != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "status", r.status, "form", "csv")
	}
	if r.accountId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "account_id", r.accountId, "form", "csv")
	}
	if r.fromDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "from_date", r.fromDate, "form", "")
	}
	if r.toDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "to_date", r.toDate, "form", "")
	}
	if r.transactionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "transaction_id", r.transactionId, "form", "")
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "form", "")
	}
	if r.idempotencyKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "idempotency_key", r.idempotencyKey, "form", "csv")
	}
	if r.accountNo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "account_no", r.accountNo, "form", "")
	}
	if r.excludeJitTransactions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_jit_transactions", r.excludeJitTransactions, "form", "")
	}
	if r.uuid != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "uuid", r.uuid, "form", "csv")
	}
	if r.pageToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_token", r.pageToken, "form", "")
	}
	if r.cardId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "card_id", r.cardId, "form", "")
	}
	if r.referenceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "reference_id", r.referenceId, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int32 = 100
		r.limit = &defaultValue
	}
	if r.subtype != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subtype", r.subtype, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListPostedTransactionsRequest struct {
	ctx                      context.Context
	ApiService               *TransactionsAPIService
	isBatched                *bool
	includeChildTransactions *bool
	accountId                *[]string
	batchIds                 *[]string
	fromDate                 *string
	toDate                   *string
	dcSign                   *string
	type_                    *string
	idempotencyKey           *[]string
	accountNo                *string
	excludeJitTransactions   *bool
	uuid                     *[]string
	pageToken                *string
	cardId                   *string
	referenceId              *string
	limit                    *int32
	subtype                  *string
}

// If true, only display transactions that are part of a batch payment. Cannot be used with batch_ids.
func (r ApiListPostedTransactionsRequest) IsBatched(isBatched bool) ApiListPostedTransactionsRequest {
	r.isBatched = &isBatched
	return r
}

// Include transactions from sub-accounts when listing transactions for a given account
func (r ApiListPostedTransactionsRequest) IncludeChildTransactions(includeChildTransactions bool) ApiListPostedTransactionsRequest {
	r.includeChildTransactions = &includeChildTransactions
	return r
}

// Account ID
func (r ApiListPostedTransactionsRequest) AccountId(accountId []string) ApiListPostedTransactionsRequest {
	r.accountId = &accountId
	return r
}

// Batch UUID(s). Multiple UUIDs can be provided as a comma-separated list. Cannot be used with is_batched.
func (r ApiListPostedTransactionsRequest) BatchIds(batchIds []string) ApiListPostedTransactionsRequest {
	r.batchIds = &batchIds
	return r
}

// Only display transactions with a posting date greater than from_date
func (r ApiListPostedTransactionsRequest) FromDate(fromDate string) ApiListPostedTransactionsRequest {
	r.fromDate = &fromDate
	return r
}

// Only display transactions with a posting date less than or equal to to_date
func (r ApiListPostedTransactionsRequest) ToDate(toDate string) ApiListPostedTransactionsRequest {
	r.toDate = &toDate
	return r
}

// Debit/Credit sign
func (r ApiListPostedTransactionsRequest) DcSign(dcSign string) ApiListPostedTransactionsRequest {
	r.dcSign = &dcSign
	return r
}

// Only display transactions matching the given type
func (r ApiListPostedTransactionsRequest) Type_(type_ string) ApiListPostedTransactionsRequest {
	r.type_ = &type_
	return r
}

// Transaction Idempotency Key(s). Multiple keys can be provided as a comma-separated list.
func (r ApiListPostedTransactionsRequest) IdempotencyKey(idempotencyKey []string) ApiListPostedTransactionsRequest {
	r.idempotencyKey = &idempotencyKey
	return r
}

// Account number
func (r ApiListPostedTransactionsRequest) AccountNo(accountNo string) ApiListPostedTransactionsRequest {
	r.accountNo = &accountNo
	return r
}

// Hide \&quot;JIT funding\&quot; transactions from results
func (r ApiListPostedTransactionsRequest) ExcludeJitTransactions(excludeJitTransactions bool) ApiListPostedTransactionsRequest {
	r.excludeJitTransactions = &excludeJitTransactions
	return r
}

// Transaction UUID(s). Multiple UUIDs can be provided as a comma-separated list.
func (r ApiListPostedTransactionsRequest) Uuid(uuid []string) ApiListPostedTransactionsRequest {
	r.uuid = &uuid
	return r
}

func (r ApiListPostedTransactionsRequest) PageToken(pageToken string) ApiListPostedTransactionsRequest {
	r.pageToken = &pageToken
	return r
}

// Card ID
func (r ApiListPostedTransactionsRequest) CardId(cardId string) ApiListPostedTransactionsRequest {
	r.cardId = &cardId
	return r
}

// Reference ID
func (r ApiListPostedTransactionsRequest) ReferenceId(referenceId string) ApiListPostedTransactionsRequest {
	r.referenceId = &referenceId
	return r
}

func (r ApiListPostedTransactionsRequest) Limit(limit int32) ApiListPostedTransactionsRequest {
	r.limit = &limit
	return r
}

// Only display transactions matching the given subtype
func (r ApiListPostedTransactionsRequest) Subtype(subtype string) ApiListPostedTransactionsRequest {
	r.subtype = &subtype
	return r
}

func (r ApiListPostedTransactionsRequest) Execute() (*PostedTransactions, *http.Response, error) {
	return r.ApiService.ListPostedTransactionsExecute(r)
}

/*
ListPostedTransactions List posted transactions

# Get paginated list of posted transactions matching the provided filters

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiListPostedTransactionsRequest
*/
func (a *TransactionsAPIService) ListPostedTransactions(ctx context.Context) ApiListPostedTransactionsRequest {
	return ApiListPostedTransactionsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PostedTransactions
func (a *TransactionsAPIService) ListPostedTransactionsExecute(r ApiListPostedTransactionsRequest) (*PostedTransactions, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PostedTransactions
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TransactionsAPIService.ListPostedTransactions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/transactions/posted"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.isBatched != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "is_batched", r.isBatched, "form", "")
	}
	if r.includeChildTransactions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include_child_transactions", r.includeChildTransactions, "form", "")
	}
	if r.accountId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "account_id", r.accountId, "form", "csv")
	}
	if r.batchIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "batch_ids", r.batchIds, "form", "csv")
	}
	if r.fromDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "from_date", r.fromDate, "form", "")
	}
	if r.toDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "to_date", r.toDate, "form", "")
	}
	if r.dcSign != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dc_sign", r.dcSign, "form", "")
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "form", "")
	}
	if r.idempotencyKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "idempotency_key", r.idempotencyKey, "form", "csv")
	}
	if r.accountNo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "account_no", r.accountNo, "form", "")
	}
	if r.excludeJitTransactions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_jit_transactions", r.excludeJitTransactions, "form", "")
	}
	if r.uuid != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "uuid", r.uuid, "form", "csv")
	}
	if r.pageToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_token", r.pageToken, "form", "")
	}
	if r.cardId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "card_id", r.cardId, "form", "")
	}
	if r.referenceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "reference_id", r.referenceId, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int32 = 100
		r.limit = &defaultValue
	}
	if r.subtype != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subtype", r.subtype, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
