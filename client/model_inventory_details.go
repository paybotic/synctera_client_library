/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.153.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"encoding/json"
)

// checks if the InventoryDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InventoryDetails{}

// InventoryDetails struct for InventoryDetails
type InventoryDetails struct {
	CommodityCode                *string           `json:"commodity_code,omitempty"`
	Description                  *string           `json:"description,omitempty"`
	DiscountAmount               *string           `json:"discount_amount,omitempty"`
	ItemDetailTaxes              []ItemDetailTaxes `json:"item_detail_taxes,omitempty"`
	ItemDiscountAmount           *int32            `json:"item_discount_amount,omitempty"`
	ItemDiscountAmountIndicator  *string           `json:"item_discount_amount_indicator,omitempty"`
	ItemDiscountAppliedIndicator *string           `json:"item_discount_applied_indicator,omitempty"`
	ItemDiscountRate             *int32            `json:"item_discount_rate,omitempty"`
	ItemExtendedAmount           *int32            `json:"item_extended_amount,omitempty"`
	ItemExtendedAmountIndicator  *string           `json:"item_extended_amount_indicator,omitempty"`
	ItemTotalAmount              *int32            `json:"item_total_amount,omitempty"`
	ItemTotalAmountIndicator     *string           `json:"item_total_amount_indicator,omitempty"`
	ItemVatAmount                *int32            `json:"item_vat_amount,omitempty"`
	ItemVatRate                  *int32            `json:"item_vat_rate,omitempty"`
	ProductCode                  *string           `json:"product_code,omitempty"`
	Quantity                     *float32          `json:"quantity,omitempty"`
	TotalAmount                  *string           `json:"total_amount,omitempty"`
	UnitOfMeasure                *string           `json:"unit_of_measure,omitempty"`
	UnitPrice                    *int32            `json:"unit_price,omitempty"`
	VatTaxAmount                 *string           `json:"vat_tax_amount,omitempty"`
	VatTaxRate                   *string           `json:"vat_tax_rate,omitempty"`
	AdditionalProperties         map[string]interface{}
}

type _InventoryDetails InventoryDetails

// NewInventoryDetails instantiates a new InventoryDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInventoryDetails() *InventoryDetails {
	this := InventoryDetails{}
	return &this
}

// NewInventoryDetailsWithDefaults instantiates a new InventoryDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInventoryDetailsWithDefaults() *InventoryDetails {
	this := InventoryDetails{}
	return &this
}

// GetCommodityCode returns the CommodityCode field value if set, zero value otherwise.
func (o *InventoryDetails) GetCommodityCode() string {
	if o == nil || IsNil(o.CommodityCode) {
		var ret string
		return ret
	}
	return *o.CommodityCode
}

// GetCommodityCodeOk returns a tuple with the CommodityCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryDetails) GetCommodityCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CommodityCode) {
		return nil, false
	}
	return o.CommodityCode, true
}

// HasCommodityCode returns a boolean if a field has been set.
func (o *InventoryDetails) HasCommodityCode() bool {
	if o != nil && !IsNil(o.CommodityCode) {
		return true
	}

	return false
}

// SetCommodityCode gets a reference to the given string and assigns it to the CommodityCode field.
func (o *InventoryDetails) SetCommodityCode(v string) {
	o.CommodityCode = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *InventoryDetails) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryDetails) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *InventoryDetails) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *InventoryDetails) SetDescription(v string) {
	o.Description = &v
}

// GetDiscountAmount returns the DiscountAmount field value if set, zero value otherwise.
func (o *InventoryDetails) GetDiscountAmount() string {
	if o == nil || IsNil(o.DiscountAmount) {
		var ret string
		return ret
	}
	return *o.DiscountAmount
}

// GetDiscountAmountOk returns a tuple with the DiscountAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryDetails) GetDiscountAmountOk() (*string, bool) {
	if o == nil || IsNil(o.DiscountAmount) {
		return nil, false
	}
	return o.DiscountAmount, true
}

// HasDiscountAmount returns a boolean if a field has been set.
func (o *InventoryDetails) HasDiscountAmount() bool {
	if o != nil && !IsNil(o.DiscountAmount) {
		return true
	}

	return false
}

// SetDiscountAmount gets a reference to the given string and assigns it to the DiscountAmount field.
func (o *InventoryDetails) SetDiscountAmount(v string) {
	o.DiscountAmount = &v
}

// GetItemDetailTaxes returns the ItemDetailTaxes field value if set, zero value otherwise.
func (o *InventoryDetails) GetItemDetailTaxes() []ItemDetailTaxes {
	if o == nil || IsNil(o.ItemDetailTaxes) {
		var ret []ItemDetailTaxes
		return ret
	}
	return o.ItemDetailTaxes
}

// GetItemDetailTaxesOk returns a tuple with the ItemDetailTaxes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryDetails) GetItemDetailTaxesOk() ([]ItemDetailTaxes, bool) {
	if o == nil || IsNil(o.ItemDetailTaxes) {
		return nil, false
	}
	return o.ItemDetailTaxes, true
}

// HasItemDetailTaxes returns a boolean if a field has been set.
func (o *InventoryDetails) HasItemDetailTaxes() bool {
	if o != nil && !IsNil(o.ItemDetailTaxes) {
		return true
	}

	return false
}

// SetItemDetailTaxes gets a reference to the given []ItemDetailTaxes and assigns it to the ItemDetailTaxes field.
func (o *InventoryDetails) SetItemDetailTaxes(v []ItemDetailTaxes) {
	o.ItemDetailTaxes = v
}

// GetItemDiscountAmount returns the ItemDiscountAmount field value if set, zero value otherwise.
func (o *InventoryDetails) GetItemDiscountAmount() int32 {
	if o == nil || IsNil(o.ItemDiscountAmount) {
		var ret int32
		return ret
	}
	return *o.ItemDiscountAmount
}

// GetItemDiscountAmountOk returns a tuple with the ItemDiscountAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryDetails) GetItemDiscountAmountOk() (*int32, bool) {
	if o == nil || IsNil(o.ItemDiscountAmount) {
		return nil, false
	}
	return o.ItemDiscountAmount, true
}

// HasItemDiscountAmount returns a boolean if a field has been set.
func (o *InventoryDetails) HasItemDiscountAmount() bool {
	if o != nil && !IsNil(o.ItemDiscountAmount) {
		return true
	}

	return false
}

// SetItemDiscountAmount gets a reference to the given int32 and assigns it to the ItemDiscountAmount field.
func (o *InventoryDetails) SetItemDiscountAmount(v int32) {
	o.ItemDiscountAmount = &v
}

// GetItemDiscountAmountIndicator returns the ItemDiscountAmountIndicator field value if set, zero value otherwise.
func (o *InventoryDetails) GetItemDiscountAmountIndicator() string {
	if o == nil || IsNil(o.ItemDiscountAmountIndicator) {
		var ret string
		return ret
	}
	return *o.ItemDiscountAmountIndicator
}

// GetItemDiscountAmountIndicatorOk returns a tuple with the ItemDiscountAmountIndicator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryDetails) GetItemDiscountAmountIndicatorOk() (*string, bool) {
	if o == nil || IsNil(o.ItemDiscountAmountIndicator) {
		return nil, false
	}
	return o.ItemDiscountAmountIndicator, true
}

// HasItemDiscountAmountIndicator returns a boolean if a field has been set.
func (o *InventoryDetails) HasItemDiscountAmountIndicator() bool {
	if o != nil && !IsNil(o.ItemDiscountAmountIndicator) {
		return true
	}

	return false
}

// SetItemDiscountAmountIndicator gets a reference to the given string and assigns it to the ItemDiscountAmountIndicator field.
func (o *InventoryDetails) SetItemDiscountAmountIndicator(v string) {
	o.ItemDiscountAmountIndicator = &v
}

// GetItemDiscountAppliedIndicator returns the ItemDiscountAppliedIndicator field value if set, zero value otherwise.
func (o *InventoryDetails) GetItemDiscountAppliedIndicator() string {
	if o == nil || IsNil(o.ItemDiscountAppliedIndicator) {
		var ret string
		return ret
	}
	return *o.ItemDiscountAppliedIndicator
}

// GetItemDiscountAppliedIndicatorOk returns a tuple with the ItemDiscountAppliedIndicator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryDetails) GetItemDiscountAppliedIndicatorOk() (*string, bool) {
	if o == nil || IsNil(o.ItemDiscountAppliedIndicator) {
		return nil, false
	}
	return o.ItemDiscountAppliedIndicator, true
}

// HasItemDiscountAppliedIndicator returns a boolean if a field has been set.
func (o *InventoryDetails) HasItemDiscountAppliedIndicator() bool {
	if o != nil && !IsNil(o.ItemDiscountAppliedIndicator) {
		return true
	}

	return false
}

// SetItemDiscountAppliedIndicator gets a reference to the given string and assigns it to the ItemDiscountAppliedIndicator field.
func (o *InventoryDetails) SetItemDiscountAppliedIndicator(v string) {
	o.ItemDiscountAppliedIndicator = &v
}

// GetItemDiscountRate returns the ItemDiscountRate field value if set, zero value otherwise.
func (o *InventoryDetails) GetItemDiscountRate() int32 {
	if o == nil || IsNil(o.ItemDiscountRate) {
		var ret int32
		return ret
	}
	return *o.ItemDiscountRate
}

// GetItemDiscountRateOk returns a tuple with the ItemDiscountRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryDetails) GetItemDiscountRateOk() (*int32, bool) {
	if o == nil || IsNil(o.ItemDiscountRate) {
		return nil, false
	}
	return o.ItemDiscountRate, true
}

// HasItemDiscountRate returns a boolean if a field has been set.
func (o *InventoryDetails) HasItemDiscountRate() bool {
	if o != nil && !IsNil(o.ItemDiscountRate) {
		return true
	}

	return false
}

// SetItemDiscountRate gets a reference to the given int32 and assigns it to the ItemDiscountRate field.
func (o *InventoryDetails) SetItemDiscountRate(v int32) {
	o.ItemDiscountRate = &v
}

// GetItemExtendedAmount returns the ItemExtendedAmount field value if set, zero value otherwise.
func (o *InventoryDetails) GetItemExtendedAmount() int32 {
	if o == nil || IsNil(o.ItemExtendedAmount) {
		var ret int32
		return ret
	}
	return *o.ItemExtendedAmount
}

// GetItemExtendedAmountOk returns a tuple with the ItemExtendedAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryDetails) GetItemExtendedAmountOk() (*int32, bool) {
	if o == nil || IsNil(o.ItemExtendedAmount) {
		return nil, false
	}
	return o.ItemExtendedAmount, true
}

// HasItemExtendedAmount returns a boolean if a field has been set.
func (o *InventoryDetails) HasItemExtendedAmount() bool {
	if o != nil && !IsNil(o.ItemExtendedAmount) {
		return true
	}

	return false
}

// SetItemExtendedAmount gets a reference to the given int32 and assigns it to the ItemExtendedAmount field.
func (o *InventoryDetails) SetItemExtendedAmount(v int32) {
	o.ItemExtendedAmount = &v
}

// GetItemExtendedAmountIndicator returns the ItemExtendedAmountIndicator field value if set, zero value otherwise.
func (o *InventoryDetails) GetItemExtendedAmountIndicator() string {
	if o == nil || IsNil(o.ItemExtendedAmountIndicator) {
		var ret string
		return ret
	}
	return *o.ItemExtendedAmountIndicator
}

// GetItemExtendedAmountIndicatorOk returns a tuple with the ItemExtendedAmountIndicator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryDetails) GetItemExtendedAmountIndicatorOk() (*string, bool) {
	if o == nil || IsNil(o.ItemExtendedAmountIndicator) {
		return nil, false
	}
	return o.ItemExtendedAmountIndicator, true
}

// HasItemExtendedAmountIndicator returns a boolean if a field has been set.
func (o *InventoryDetails) HasItemExtendedAmountIndicator() bool {
	if o != nil && !IsNil(o.ItemExtendedAmountIndicator) {
		return true
	}

	return false
}

// SetItemExtendedAmountIndicator gets a reference to the given string and assigns it to the ItemExtendedAmountIndicator field.
func (o *InventoryDetails) SetItemExtendedAmountIndicator(v string) {
	o.ItemExtendedAmountIndicator = &v
}

// GetItemTotalAmount returns the ItemTotalAmount field value if set, zero value otherwise.
func (o *InventoryDetails) GetItemTotalAmount() int32 {
	if o == nil || IsNil(o.ItemTotalAmount) {
		var ret int32
		return ret
	}
	return *o.ItemTotalAmount
}

// GetItemTotalAmountOk returns a tuple with the ItemTotalAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryDetails) GetItemTotalAmountOk() (*int32, bool) {
	if o == nil || IsNil(o.ItemTotalAmount) {
		return nil, false
	}
	return o.ItemTotalAmount, true
}

// HasItemTotalAmount returns a boolean if a field has been set.
func (o *InventoryDetails) HasItemTotalAmount() bool {
	if o != nil && !IsNil(o.ItemTotalAmount) {
		return true
	}

	return false
}

// SetItemTotalAmount gets a reference to the given int32 and assigns it to the ItemTotalAmount field.
func (o *InventoryDetails) SetItemTotalAmount(v int32) {
	o.ItemTotalAmount = &v
}

// GetItemTotalAmountIndicator returns the ItemTotalAmountIndicator field value if set, zero value otherwise.
func (o *InventoryDetails) GetItemTotalAmountIndicator() string {
	if o == nil || IsNil(o.ItemTotalAmountIndicator) {
		var ret string
		return ret
	}
	return *o.ItemTotalAmountIndicator
}

// GetItemTotalAmountIndicatorOk returns a tuple with the ItemTotalAmountIndicator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryDetails) GetItemTotalAmountIndicatorOk() (*string, bool) {
	if o == nil || IsNil(o.ItemTotalAmountIndicator) {
		return nil, false
	}
	return o.ItemTotalAmountIndicator, true
}

// HasItemTotalAmountIndicator returns a boolean if a field has been set.
func (o *InventoryDetails) HasItemTotalAmountIndicator() bool {
	if o != nil && !IsNil(o.ItemTotalAmountIndicator) {
		return true
	}

	return false
}

// SetItemTotalAmountIndicator gets a reference to the given string and assigns it to the ItemTotalAmountIndicator field.
func (o *InventoryDetails) SetItemTotalAmountIndicator(v string) {
	o.ItemTotalAmountIndicator = &v
}

// GetItemVatAmount returns the ItemVatAmount field value if set, zero value otherwise.
func (o *InventoryDetails) GetItemVatAmount() int32 {
	if o == nil || IsNil(o.ItemVatAmount) {
		var ret int32
		return ret
	}
	return *o.ItemVatAmount
}

// GetItemVatAmountOk returns a tuple with the ItemVatAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryDetails) GetItemVatAmountOk() (*int32, bool) {
	if o == nil || IsNil(o.ItemVatAmount) {
		return nil, false
	}
	return o.ItemVatAmount, true
}

// HasItemVatAmount returns a boolean if a field has been set.
func (o *InventoryDetails) HasItemVatAmount() bool {
	if o != nil && !IsNil(o.ItemVatAmount) {
		return true
	}

	return false
}

// SetItemVatAmount gets a reference to the given int32 and assigns it to the ItemVatAmount field.
func (o *InventoryDetails) SetItemVatAmount(v int32) {
	o.ItemVatAmount = &v
}

// GetItemVatRate returns the ItemVatRate field value if set, zero value otherwise.
func (o *InventoryDetails) GetItemVatRate() int32 {
	if o == nil || IsNil(o.ItemVatRate) {
		var ret int32
		return ret
	}
	return *o.ItemVatRate
}

// GetItemVatRateOk returns a tuple with the ItemVatRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryDetails) GetItemVatRateOk() (*int32, bool) {
	if o == nil || IsNil(o.ItemVatRate) {
		return nil, false
	}
	return o.ItemVatRate, true
}

// HasItemVatRate returns a boolean if a field has been set.
func (o *InventoryDetails) HasItemVatRate() bool {
	if o != nil && !IsNil(o.ItemVatRate) {
		return true
	}

	return false
}

// SetItemVatRate gets a reference to the given int32 and assigns it to the ItemVatRate field.
func (o *InventoryDetails) SetItemVatRate(v int32) {
	o.ItemVatRate = &v
}

// GetProductCode returns the ProductCode field value if set, zero value otherwise.
func (o *InventoryDetails) GetProductCode() string {
	if o == nil || IsNil(o.ProductCode) {
		var ret string
		return ret
	}
	return *o.ProductCode
}

// GetProductCodeOk returns a tuple with the ProductCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryDetails) GetProductCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ProductCode) {
		return nil, false
	}
	return o.ProductCode, true
}

// HasProductCode returns a boolean if a field has been set.
func (o *InventoryDetails) HasProductCode() bool {
	if o != nil && !IsNil(o.ProductCode) {
		return true
	}

	return false
}

// SetProductCode gets a reference to the given string and assigns it to the ProductCode field.
func (o *InventoryDetails) SetProductCode(v string) {
	o.ProductCode = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *InventoryDetails) GetQuantity() float32 {
	if o == nil || IsNil(o.Quantity) {
		var ret float32
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryDetails) GetQuantityOk() (*float32, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *InventoryDetails) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given float32 and assigns it to the Quantity field.
func (o *InventoryDetails) SetQuantity(v float32) {
	o.Quantity = &v
}

// GetTotalAmount returns the TotalAmount field value if set, zero value otherwise.
func (o *InventoryDetails) GetTotalAmount() string {
	if o == nil || IsNil(o.TotalAmount) {
		var ret string
		return ret
	}
	return *o.TotalAmount
}

// GetTotalAmountOk returns a tuple with the TotalAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryDetails) GetTotalAmountOk() (*string, bool) {
	if o == nil || IsNil(o.TotalAmount) {
		return nil, false
	}
	return o.TotalAmount, true
}

// HasTotalAmount returns a boolean if a field has been set.
func (o *InventoryDetails) HasTotalAmount() bool {
	if o != nil && !IsNil(o.TotalAmount) {
		return true
	}

	return false
}

// SetTotalAmount gets a reference to the given string and assigns it to the TotalAmount field.
func (o *InventoryDetails) SetTotalAmount(v string) {
	o.TotalAmount = &v
}

// GetUnitOfMeasure returns the UnitOfMeasure field value if set, zero value otherwise.
func (o *InventoryDetails) GetUnitOfMeasure() string {
	if o == nil || IsNil(o.UnitOfMeasure) {
		var ret string
		return ret
	}
	return *o.UnitOfMeasure
}

// GetUnitOfMeasureOk returns a tuple with the UnitOfMeasure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryDetails) GetUnitOfMeasureOk() (*string, bool) {
	if o == nil || IsNil(o.UnitOfMeasure) {
		return nil, false
	}
	return o.UnitOfMeasure, true
}

// HasUnitOfMeasure returns a boolean if a field has been set.
func (o *InventoryDetails) HasUnitOfMeasure() bool {
	if o != nil && !IsNil(o.UnitOfMeasure) {
		return true
	}

	return false
}

// SetUnitOfMeasure gets a reference to the given string and assigns it to the UnitOfMeasure field.
func (o *InventoryDetails) SetUnitOfMeasure(v string) {
	o.UnitOfMeasure = &v
}

// GetUnitPrice returns the UnitPrice field value if set, zero value otherwise.
func (o *InventoryDetails) GetUnitPrice() int32 {
	if o == nil || IsNil(o.UnitPrice) {
		var ret int32
		return ret
	}
	return *o.UnitPrice
}

// GetUnitPriceOk returns a tuple with the UnitPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryDetails) GetUnitPriceOk() (*int32, bool) {
	if o == nil || IsNil(o.UnitPrice) {
		return nil, false
	}
	return o.UnitPrice, true
}

// HasUnitPrice returns a boolean if a field has been set.
func (o *InventoryDetails) HasUnitPrice() bool {
	if o != nil && !IsNil(o.UnitPrice) {
		return true
	}

	return false
}

// SetUnitPrice gets a reference to the given int32 and assigns it to the UnitPrice field.
func (o *InventoryDetails) SetUnitPrice(v int32) {
	o.UnitPrice = &v
}

// GetVatTaxAmount returns the VatTaxAmount field value if set, zero value otherwise.
func (o *InventoryDetails) GetVatTaxAmount() string {
	if o == nil || IsNil(o.VatTaxAmount) {
		var ret string
		return ret
	}
	return *o.VatTaxAmount
}

// GetVatTaxAmountOk returns a tuple with the VatTaxAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryDetails) GetVatTaxAmountOk() (*string, bool) {
	if o == nil || IsNil(o.VatTaxAmount) {
		return nil, false
	}
	return o.VatTaxAmount, true
}

// HasVatTaxAmount returns a boolean if a field has been set.
func (o *InventoryDetails) HasVatTaxAmount() bool {
	if o != nil && !IsNil(o.VatTaxAmount) {
		return true
	}

	return false
}

// SetVatTaxAmount gets a reference to the given string and assigns it to the VatTaxAmount field.
func (o *InventoryDetails) SetVatTaxAmount(v string) {
	o.VatTaxAmount = &v
}

// GetVatTaxRate returns the VatTaxRate field value if set, zero value otherwise.
func (o *InventoryDetails) GetVatTaxRate() string {
	if o == nil || IsNil(o.VatTaxRate) {
		var ret string
		return ret
	}
	return *o.VatTaxRate
}

// GetVatTaxRateOk returns a tuple with the VatTaxRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryDetails) GetVatTaxRateOk() (*string, bool) {
	if o == nil || IsNil(o.VatTaxRate) {
		return nil, false
	}
	return o.VatTaxRate, true
}

// HasVatTaxRate returns a boolean if a field has been set.
func (o *InventoryDetails) HasVatTaxRate() bool {
	if o != nil && !IsNil(o.VatTaxRate) {
		return true
	}

	return false
}

// SetVatTaxRate gets a reference to the given string and assigns it to the VatTaxRate field.
func (o *InventoryDetails) SetVatTaxRate(v string) {
	o.VatTaxRate = &v
}

func (o InventoryDetails) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InventoryDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CommodityCode) {
		toSerialize["commodity_code"] = o.CommodityCode
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DiscountAmount) {
		toSerialize["discount_amount"] = o.DiscountAmount
	}
	if !IsNil(o.ItemDetailTaxes) {
		toSerialize["item_detail_taxes"] = o.ItemDetailTaxes
	}
	if !IsNil(o.ItemDiscountAmount) {
		toSerialize["item_discount_amount"] = o.ItemDiscountAmount
	}
	if !IsNil(o.ItemDiscountAmountIndicator) {
		toSerialize["item_discount_amount_indicator"] = o.ItemDiscountAmountIndicator
	}
	if !IsNil(o.ItemDiscountAppliedIndicator) {
		toSerialize["item_discount_applied_indicator"] = o.ItemDiscountAppliedIndicator
	}
	if !IsNil(o.ItemDiscountRate) {
		toSerialize["item_discount_rate"] = o.ItemDiscountRate
	}
	if !IsNil(o.ItemExtendedAmount) {
		toSerialize["item_extended_amount"] = o.ItemExtendedAmount
	}
	if !IsNil(o.ItemExtendedAmountIndicator) {
		toSerialize["item_extended_amount_indicator"] = o.ItemExtendedAmountIndicator
	}
	if !IsNil(o.ItemTotalAmount) {
		toSerialize["item_total_amount"] = o.ItemTotalAmount
	}
	if !IsNil(o.ItemTotalAmountIndicator) {
		toSerialize["item_total_amount_indicator"] = o.ItemTotalAmountIndicator
	}
	if !IsNil(o.ItemVatAmount) {
		toSerialize["item_vat_amount"] = o.ItemVatAmount
	}
	if !IsNil(o.ItemVatRate) {
		toSerialize["item_vat_rate"] = o.ItemVatRate
	}
	if !IsNil(o.ProductCode) {
		toSerialize["product_code"] = o.ProductCode
	}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	if !IsNil(o.TotalAmount) {
		toSerialize["total_amount"] = o.TotalAmount
	}
	if !IsNil(o.UnitOfMeasure) {
		toSerialize["unit_of_measure"] = o.UnitOfMeasure
	}
	if !IsNil(o.UnitPrice) {
		toSerialize["unit_price"] = o.UnitPrice
	}
	if !IsNil(o.VatTaxAmount) {
		toSerialize["vat_tax_amount"] = o.VatTaxAmount
	}
	if !IsNil(o.VatTaxRate) {
		toSerialize["vat_tax_rate"] = o.VatTaxRate
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InventoryDetails) UnmarshalJSON(data []byte) (err error) {
	varInventoryDetails := _InventoryDetails{}

	err = json.Unmarshal(data, &varInventoryDetails)

	if err != nil {
		return err
	}

	*o = InventoryDetails(varInventoryDetails)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "commodity_code")
		delete(additionalProperties, "description")
		delete(additionalProperties, "discount_amount")
		delete(additionalProperties, "item_detail_taxes")
		delete(additionalProperties, "item_discount_amount")
		delete(additionalProperties, "item_discount_amount_indicator")
		delete(additionalProperties, "item_discount_applied_indicator")
		delete(additionalProperties, "item_discount_rate")
		delete(additionalProperties, "item_extended_amount")
		delete(additionalProperties, "item_extended_amount_indicator")
		delete(additionalProperties, "item_total_amount")
		delete(additionalProperties, "item_total_amount_indicator")
		delete(additionalProperties, "item_vat_amount")
		delete(additionalProperties, "item_vat_rate")
		delete(additionalProperties, "product_code")
		delete(additionalProperties, "quantity")
		delete(additionalProperties, "total_amount")
		delete(additionalProperties, "unit_of_measure")
		delete(additionalProperties, "unit_price")
		delete(additionalProperties, "vat_tax_amount")
		delete(additionalProperties, "vat_tax_rate")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInventoryDetails struct {
	value *InventoryDetails
	isSet bool
}

func (v NullableInventoryDetails) Get() *InventoryDetails {
	return v.value
}

func (v *NullableInventoryDetails) Set(val *InventoryDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableInventoryDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableInventoryDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInventoryDetails(val *InventoryDetails) *NullableInventoryDetails {
	return &NullableInventoryDetails{value: val, isSet: true}
}

func (v NullableInventoryDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInventoryDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
