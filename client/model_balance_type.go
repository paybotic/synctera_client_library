/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.153.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"encoding/json"
	"fmt"
)

// BalanceType * `ACCOUNT_BALANCE`: The posted balance of the account. For a banking account, e.g.   `CHECKING` or `SAVING`, this is a measure of the sum of credits minus debits for all   posted transactions. For a lending account, e.g. `CHARGE_SECURED` or `LINE_OF_CREDIT`,   this is a measure of the sum of debits minus credits for all posted transactions. This   value can be negative.  * `AVAILABLE_BALANCE`: The available balance of the account, which is the amount available   to spend, or the spending power. For a banking account, e.g. `CHECKING` or `SAVING`, this   is a measure of the account balance minus any pending debits. For an unsecured lending   account, e.g. `CHARGE_UNSECURED` or `LINE_OF_CREDIT`, this is a measure of available   credit, which is its credit limit minus the account balance, minus any pending debits.   For a `CHARGE_SECURED` account, it equals the `AVAILABLE_BALANCE` of the linked   security account. This value will never be negative.  * `ACCRUED_INTEREST_MTD`: The amount of accrued but unposted interest. This value may   fluctuate, as new transactions can affect interest amounts. Treat accrued interest as   pending for the billing month until it is posted at the end of the billing period.  * `PAYMENTS_RECEIVED_MTD`: The amount of payment received to date for the billing month.
type BalanceType string

// List of balance_type
const (
	BALANCETYPE_ACCOUNT_BALANCE       BalanceType = "ACCOUNT_BALANCE"
	BALANCETYPE_ACCRUED_INTEREST_MTD  BalanceType = "ACCRUED_INTEREST_MTD"
	BALANCETYPE_AVAILABLE_BALANCE     BalanceType = "AVAILABLE_BALANCE"
	BALANCETYPE_PAYMENTS_RECEIVED_MTD BalanceType = "PAYMENTS_RECEIVED_MTD"
)

// All allowed values of BalanceType enum
var AllowedBalanceTypeEnumValues = []BalanceType{
	"ACCOUNT_BALANCE",
	"ACCRUED_INTEREST_MTD",
	"AVAILABLE_BALANCE",
	"PAYMENTS_RECEIVED_MTD",
}

func (v *BalanceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BalanceType(value)
	for _, existing := range AllowedBalanceTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BalanceType", value)
}

// NewBalanceTypeFromValue returns a pointer to a valid BalanceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBalanceTypeFromValue(v string) (*BalanceType, error) {
	ev := BalanceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BalanceType: valid values are %v", v, AllowedBalanceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BalanceType) IsValid() bool {
	for _, existing := range AllowedBalanceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to balance_type value
func (v BalanceType) Ptr() *BalanceType {
	return &v
}

type NullableBalanceType struct {
	value *BalanceType
	isSet bool
}

func (v NullableBalanceType) Get() *BalanceType {
	return v.value
}

func (v *NullableBalanceType) Set(val *BalanceType) {
	v.value = val
	v.isSet = true
}

func (v NullableBalanceType) IsSet() bool {
	return v.isSet
}

func (v *NullableBalanceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBalanceType(val *BalanceType) *NullableBalanceType {
	return &NullableBalanceType{value: val, isSet: true}
}

func (v NullableBalanceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBalanceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
