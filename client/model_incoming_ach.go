/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.153.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the IncomingAch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IncomingAch{}

// IncomingAch Represents an incoming ACH entry.
type IncomingAch struct {
	// The unique identifier for a receiving account. If the entry is in suspense (status = \"IN_SUSPENSE\"), this represents the intended customer account, i.e. the account that 'account_no' from the ACH entry refers to (if it exists in the Synctera system). If the entry has been posted (status = \"POSTED\"), it is the account the transaction was actually posted to. In that case it does not necessarily correspond to the account number in 'account_no'.
	AccountId *string `json:"account_id,omitempty"`
	// Receiving account number. This is the account number from the ACH entry, actual account the transaction gets posted to after processing may be different (e.g. suspense account).
	AccountNo string `json:"account_no"`
	// Transfer amount in cents ($100 would be 10000)
	Amount int32 `json:"amount"`
	// Company Entry Description field in ACH batch header.
	CompanyEntryDescription string `json:"company_entry_description"`
	// Company Name field in ACH batch header.
	CompanyName string `json:"company_name"`
	// The type of transaction (debit or credit). An incoming debit pulls money out of the receiving account, a credit is a transfer in.
	DcSign string `json:"dc_sign"`
	// Free-form text describing the reason why this entry did not post to the intended account when first processed.
	DeclineReason *string `json:"decline_reason,omitempty"`
	// Effective date of the transaction
	EffectiveDate string `json:"effective_date"`
	// Transaction ID in the ledger. The transaction may not exist yet in case the entry is a future-dated ACH.
	ExternalId *string  `json:"external_id,omitempty"`
	IatInfo    *IatData `json:"iat_info,omitempty"`
	Id         string   `json:"id"`
	// Value in this field varies depending on the SEC code. Can contain check serial number, identification number or a name of the originator.
	IdentificationNumber string `json:"identification_number"`
	// Was the effective date in the future when the entry was received?
	IsFutureDated        bool     `json:"is_future_dated"`
	NotificationOfChange *NocData `json:"notification_of_change,omitempty"`
	// The routing number of the DFI that originated the entry, with check digit included (9 digits in total).
	OriginatingRoutingNumber string `json:"originating_routing_number"`
	// ID of the linked outgoing ACH entry. This is filled only for incoming ACH entries that are returns and links to the original outgoing entry that is now being returned.
	OutgoingAchId *string `json:"outgoing_ach_id,omitempty"`
	// Contents of all attached records with addenda 05 (payment related information). Some SEC codes allow multiple instances of addenda 05.
	ReferenceInfo []string    `json:"reference_info,omitempty"`
	ReturnData    *ReturnData `json:"return_data,omitempty"`
	// SEC (Standard Entry Class) code of the ACH entry
	SecCode string `json:"sec_code"`
	// Settlement date of the transaction
	SettlementDate string `json:"settlement_date"`
	// Processing status of the incoming entry
	Status string `json:"status"`
	// The id of the tenant containing the resource. This is relevant for Fintechs that have multiple workspaces.
	Tenant string `json:"tenant"`
	// Trace number of the ACH entry
	TraceNo string `json:"trace_no"`
}

type _IncomingAch IncomingAch

// NewIncomingAch instantiates a new IncomingAch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIncomingAch(accountNo string, amount int32, companyEntryDescription string, companyName string, dcSign string, effectiveDate string, id string, identificationNumber string, isFutureDated bool, originatingRoutingNumber string, secCode string, settlementDate string, status string, tenant string, traceNo string) *IncomingAch {
	this := IncomingAch{}
	this.AccountNo = accountNo
	this.Amount = amount
	this.CompanyEntryDescription = companyEntryDescription
	this.CompanyName = companyName
	this.DcSign = dcSign
	this.EffectiveDate = effectiveDate
	this.Id = id
	this.IdentificationNumber = identificationNumber
	this.IsFutureDated = isFutureDated
	this.OriginatingRoutingNumber = originatingRoutingNumber
	this.SecCode = secCode
	this.SettlementDate = settlementDate
	this.Status = status
	this.Tenant = tenant
	this.TraceNo = traceNo
	return &this
}

// NewIncomingAchWithDefaults instantiates a new IncomingAch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIncomingAchWithDefaults() *IncomingAch {
	this := IncomingAch{}
	return &this
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *IncomingAch) GetAccountId() string {
	if o == nil || IsNil(o.AccountId) {
		var ret string
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomingAch) GetAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.AccountId) {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *IncomingAch) HasAccountId() bool {
	if o != nil && !IsNil(o.AccountId) {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given string and assigns it to the AccountId field.
func (o *IncomingAch) SetAccountId(v string) {
	o.AccountId = &v
}

// GetAccountNo returns the AccountNo field value
func (o *IncomingAch) GetAccountNo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountNo
}

// GetAccountNoOk returns a tuple with the AccountNo field value
// and a boolean to check if the value has been set.
func (o *IncomingAch) GetAccountNoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountNo, true
}

// SetAccountNo sets field value
func (o *IncomingAch) SetAccountNo(v string) {
	o.AccountNo = v
}

// GetAmount returns the Amount field value
func (o *IncomingAch) GetAmount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *IncomingAch) GetAmountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *IncomingAch) SetAmount(v int32) {
	o.Amount = v
}

// GetCompanyEntryDescription returns the CompanyEntryDescription field value
func (o *IncomingAch) GetCompanyEntryDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CompanyEntryDescription
}

// GetCompanyEntryDescriptionOk returns a tuple with the CompanyEntryDescription field value
// and a boolean to check if the value has been set.
func (o *IncomingAch) GetCompanyEntryDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CompanyEntryDescription, true
}

// SetCompanyEntryDescription sets field value
func (o *IncomingAch) SetCompanyEntryDescription(v string) {
	o.CompanyEntryDescription = v
}

// GetCompanyName returns the CompanyName field value
func (o *IncomingAch) GetCompanyName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CompanyName
}

// GetCompanyNameOk returns a tuple with the CompanyName field value
// and a boolean to check if the value has been set.
func (o *IncomingAch) GetCompanyNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CompanyName, true
}

// SetCompanyName sets field value
func (o *IncomingAch) SetCompanyName(v string) {
	o.CompanyName = v
}

// GetDcSign returns the DcSign field value
func (o *IncomingAch) GetDcSign() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DcSign
}

// GetDcSignOk returns a tuple with the DcSign field value
// and a boolean to check if the value has been set.
func (o *IncomingAch) GetDcSignOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DcSign, true
}

// SetDcSign sets field value
func (o *IncomingAch) SetDcSign(v string) {
	o.DcSign = v
}

// GetDeclineReason returns the DeclineReason field value if set, zero value otherwise.
func (o *IncomingAch) GetDeclineReason() string {
	if o == nil || IsNil(o.DeclineReason) {
		var ret string
		return ret
	}
	return *o.DeclineReason
}

// GetDeclineReasonOk returns a tuple with the DeclineReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomingAch) GetDeclineReasonOk() (*string, bool) {
	if o == nil || IsNil(o.DeclineReason) {
		return nil, false
	}
	return o.DeclineReason, true
}

// HasDeclineReason returns a boolean if a field has been set.
func (o *IncomingAch) HasDeclineReason() bool {
	if o != nil && !IsNil(o.DeclineReason) {
		return true
	}

	return false
}

// SetDeclineReason gets a reference to the given string and assigns it to the DeclineReason field.
func (o *IncomingAch) SetDeclineReason(v string) {
	o.DeclineReason = &v
}

// GetEffectiveDate returns the EffectiveDate field value
func (o *IncomingAch) GetEffectiveDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EffectiveDate
}

// GetEffectiveDateOk returns a tuple with the EffectiveDate field value
// and a boolean to check if the value has been set.
func (o *IncomingAch) GetEffectiveDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EffectiveDate, true
}

// SetEffectiveDate sets field value
func (o *IncomingAch) SetEffectiveDate(v string) {
	o.EffectiveDate = v
}

// GetExternalId returns the ExternalId field value if set, zero value otherwise.
func (o *IncomingAch) GetExternalId() string {
	if o == nil || IsNil(o.ExternalId) {
		var ret string
		return ret
	}
	return *o.ExternalId
}

// GetExternalIdOk returns a tuple with the ExternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomingAch) GetExternalIdOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalId) {
		return nil, false
	}
	return o.ExternalId, true
}

// HasExternalId returns a boolean if a field has been set.
func (o *IncomingAch) HasExternalId() bool {
	if o != nil && !IsNil(o.ExternalId) {
		return true
	}

	return false
}

// SetExternalId gets a reference to the given string and assigns it to the ExternalId field.
func (o *IncomingAch) SetExternalId(v string) {
	o.ExternalId = &v
}

// GetIatInfo returns the IatInfo field value if set, zero value otherwise.
func (o *IncomingAch) GetIatInfo() IatData {
	if o == nil || IsNil(o.IatInfo) {
		var ret IatData
		return ret
	}
	return *o.IatInfo
}

// GetIatInfoOk returns a tuple with the IatInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomingAch) GetIatInfoOk() (*IatData, bool) {
	if o == nil || IsNil(o.IatInfo) {
		return nil, false
	}
	return o.IatInfo, true
}

// HasIatInfo returns a boolean if a field has been set.
func (o *IncomingAch) HasIatInfo() bool {
	if o != nil && !IsNil(o.IatInfo) {
		return true
	}

	return false
}

// SetIatInfo gets a reference to the given IatData and assigns it to the IatInfo field.
func (o *IncomingAch) SetIatInfo(v IatData) {
	o.IatInfo = &v
}

// GetId returns the Id field value
func (o *IncomingAch) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *IncomingAch) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *IncomingAch) SetId(v string) {
	o.Id = v
}

// GetIdentificationNumber returns the IdentificationNumber field value
func (o *IncomingAch) GetIdentificationNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IdentificationNumber
}

// GetIdentificationNumberOk returns a tuple with the IdentificationNumber field value
// and a boolean to check if the value has been set.
func (o *IncomingAch) GetIdentificationNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IdentificationNumber, true
}

// SetIdentificationNumber sets field value
func (o *IncomingAch) SetIdentificationNumber(v string) {
	o.IdentificationNumber = v
}

// GetIsFutureDated returns the IsFutureDated field value
func (o *IncomingAch) GetIsFutureDated() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsFutureDated
}

// GetIsFutureDatedOk returns a tuple with the IsFutureDated field value
// and a boolean to check if the value has been set.
func (o *IncomingAch) GetIsFutureDatedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsFutureDated, true
}

// SetIsFutureDated sets field value
func (o *IncomingAch) SetIsFutureDated(v bool) {
	o.IsFutureDated = v
}

// GetNotificationOfChange returns the NotificationOfChange field value if set, zero value otherwise.
func (o *IncomingAch) GetNotificationOfChange() NocData {
	if o == nil || IsNil(o.NotificationOfChange) {
		var ret NocData
		return ret
	}
	return *o.NotificationOfChange
}

// GetNotificationOfChangeOk returns a tuple with the NotificationOfChange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomingAch) GetNotificationOfChangeOk() (*NocData, bool) {
	if o == nil || IsNil(o.NotificationOfChange) {
		return nil, false
	}
	return o.NotificationOfChange, true
}

// HasNotificationOfChange returns a boolean if a field has been set.
func (o *IncomingAch) HasNotificationOfChange() bool {
	if o != nil && !IsNil(o.NotificationOfChange) {
		return true
	}

	return false
}

// SetNotificationOfChange gets a reference to the given NocData and assigns it to the NotificationOfChange field.
func (o *IncomingAch) SetNotificationOfChange(v NocData) {
	o.NotificationOfChange = &v
}

// GetOriginatingRoutingNumber returns the OriginatingRoutingNumber field value
func (o *IncomingAch) GetOriginatingRoutingNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OriginatingRoutingNumber
}

// GetOriginatingRoutingNumberOk returns a tuple with the OriginatingRoutingNumber field value
// and a boolean to check if the value has been set.
func (o *IncomingAch) GetOriginatingRoutingNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OriginatingRoutingNumber, true
}

// SetOriginatingRoutingNumber sets field value
func (o *IncomingAch) SetOriginatingRoutingNumber(v string) {
	o.OriginatingRoutingNumber = v
}

// GetOutgoingAchId returns the OutgoingAchId field value if set, zero value otherwise.
func (o *IncomingAch) GetOutgoingAchId() string {
	if o == nil || IsNil(o.OutgoingAchId) {
		var ret string
		return ret
	}
	return *o.OutgoingAchId
}

// GetOutgoingAchIdOk returns a tuple with the OutgoingAchId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomingAch) GetOutgoingAchIdOk() (*string, bool) {
	if o == nil || IsNil(o.OutgoingAchId) {
		return nil, false
	}
	return o.OutgoingAchId, true
}

// HasOutgoingAchId returns a boolean if a field has been set.
func (o *IncomingAch) HasOutgoingAchId() bool {
	if o != nil && !IsNil(o.OutgoingAchId) {
		return true
	}

	return false
}

// SetOutgoingAchId gets a reference to the given string and assigns it to the OutgoingAchId field.
func (o *IncomingAch) SetOutgoingAchId(v string) {
	o.OutgoingAchId = &v
}

// GetReferenceInfo returns the ReferenceInfo field value if set, zero value otherwise.
func (o *IncomingAch) GetReferenceInfo() []string {
	if o == nil || IsNil(o.ReferenceInfo) {
		var ret []string
		return ret
	}
	return o.ReferenceInfo
}

// GetReferenceInfoOk returns a tuple with the ReferenceInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomingAch) GetReferenceInfoOk() ([]string, bool) {
	if o == nil || IsNil(o.ReferenceInfo) {
		return nil, false
	}
	return o.ReferenceInfo, true
}

// HasReferenceInfo returns a boolean if a field has been set.
func (o *IncomingAch) HasReferenceInfo() bool {
	if o != nil && !IsNil(o.ReferenceInfo) {
		return true
	}

	return false
}

// SetReferenceInfo gets a reference to the given []string and assigns it to the ReferenceInfo field.
func (o *IncomingAch) SetReferenceInfo(v []string) {
	o.ReferenceInfo = v
}

// GetReturnData returns the ReturnData field value if set, zero value otherwise.
func (o *IncomingAch) GetReturnData() ReturnData {
	if o == nil || IsNil(o.ReturnData) {
		var ret ReturnData
		return ret
	}
	return *o.ReturnData
}

// GetReturnDataOk returns a tuple with the ReturnData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomingAch) GetReturnDataOk() (*ReturnData, bool) {
	if o == nil || IsNil(o.ReturnData) {
		return nil, false
	}
	return o.ReturnData, true
}

// HasReturnData returns a boolean if a field has been set.
func (o *IncomingAch) HasReturnData() bool {
	if o != nil && !IsNil(o.ReturnData) {
		return true
	}

	return false
}

// SetReturnData gets a reference to the given ReturnData and assigns it to the ReturnData field.
func (o *IncomingAch) SetReturnData(v ReturnData) {
	o.ReturnData = &v
}

// GetSecCode returns the SecCode field value
func (o *IncomingAch) GetSecCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SecCode
}

// GetSecCodeOk returns a tuple with the SecCode field value
// and a boolean to check if the value has been set.
func (o *IncomingAch) GetSecCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SecCode, true
}

// SetSecCode sets field value
func (o *IncomingAch) SetSecCode(v string) {
	o.SecCode = v
}

// GetSettlementDate returns the SettlementDate field value
func (o *IncomingAch) GetSettlementDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SettlementDate
}

// GetSettlementDateOk returns a tuple with the SettlementDate field value
// and a boolean to check if the value has been set.
func (o *IncomingAch) GetSettlementDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SettlementDate, true
}

// SetSettlementDate sets field value
func (o *IncomingAch) SetSettlementDate(v string) {
	o.SettlementDate = v
}

// GetStatus returns the Status field value
func (o *IncomingAch) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *IncomingAch) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *IncomingAch) SetStatus(v string) {
	o.Status = v
}

// GetTenant returns the Tenant field value
func (o *IncomingAch) GetTenant() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Tenant
}

// GetTenantOk returns a tuple with the Tenant field value
// and a boolean to check if the value has been set.
func (o *IncomingAch) GetTenantOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tenant, true
}

// SetTenant sets field value
func (o *IncomingAch) SetTenant(v string) {
	o.Tenant = v
}

// GetTraceNo returns the TraceNo field value
func (o *IncomingAch) GetTraceNo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TraceNo
}

// GetTraceNoOk returns a tuple with the TraceNo field value
// and a boolean to check if the value has been set.
func (o *IncomingAch) GetTraceNoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TraceNo, true
}

// SetTraceNo sets field value
func (o *IncomingAch) SetTraceNo(v string) {
	o.TraceNo = v
}

func (o IncomingAch) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IncomingAch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccountId) {
		toSerialize["account_id"] = o.AccountId
	}
	toSerialize["account_no"] = o.AccountNo
	toSerialize["amount"] = o.Amount
	toSerialize["company_entry_description"] = o.CompanyEntryDescription
	toSerialize["company_name"] = o.CompanyName
	toSerialize["dc_sign"] = o.DcSign
	if !IsNil(o.DeclineReason) {
		toSerialize["decline_reason"] = o.DeclineReason
	}
	toSerialize["effective_date"] = o.EffectiveDate
	if !IsNil(o.ExternalId) {
		toSerialize["external_id"] = o.ExternalId
	}
	if !IsNil(o.IatInfo) {
		toSerialize["iat_info"] = o.IatInfo
	}
	toSerialize["id"] = o.Id
	toSerialize["identification_number"] = o.IdentificationNumber
	toSerialize["is_future_dated"] = o.IsFutureDated
	if !IsNil(o.NotificationOfChange) {
		toSerialize["notification_of_change"] = o.NotificationOfChange
	}
	toSerialize["originating_routing_number"] = o.OriginatingRoutingNumber
	if !IsNil(o.OutgoingAchId) {
		toSerialize["outgoing_ach_id"] = o.OutgoingAchId
	}
	if !IsNil(o.ReferenceInfo) {
		toSerialize["reference_info"] = o.ReferenceInfo
	}
	if !IsNil(o.ReturnData) {
		toSerialize["return_data"] = o.ReturnData
	}
	toSerialize["sec_code"] = o.SecCode
	toSerialize["settlement_date"] = o.SettlementDate
	toSerialize["status"] = o.Status
	toSerialize["tenant"] = o.Tenant
	toSerialize["trace_no"] = o.TraceNo
	return toSerialize, nil
}

func (o *IncomingAch) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"account_no",
		"amount",
		"company_entry_description",
		"company_name",
		"dc_sign",
		"effective_date",
		"id",
		"identification_number",
		"is_future_dated",
		"originating_routing_number",
		"sec_code",
		"settlement_date",
		"status",
		"tenant",
		"trace_no",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIncomingAch := _IncomingAch{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIncomingAch)

	if err != nil {
		return err
	}

	*o = IncomingAch(varIncomingAch)

	return err
}

type NullableIncomingAch struct {
	value *IncomingAch
	isSet bool
}

func (v NullableIncomingAch) Get() *IncomingAch {
	return v.value
}

func (v *NullableIncomingAch) Set(val *IncomingAch) {
	v.value = val
	v.isSet = true
}

func (v NullableIncomingAch) IsSet() bool {
	return v.isSet
}

func (v *NullableIncomingAch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIncomingAch(val *IncomingAch) *NullableIncomingAch {
	return &NullableIncomingAch{value: val, isSet: true}
}

func (v NullableIncomingAch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIncomingAch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
