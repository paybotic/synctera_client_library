/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.150.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"encoding/json"
	"fmt"
)

// AccountStatus The status of the account.  | Status | Description | Transactable | |------|-----------|-----| | ACCOUNT_NEVER_ACTIVE | Account was never activated by the customer | N | | ACCOUNT_NOT_DESIRED | A credit account was created for a customer, but the customer did not accept the account | N | | ACTIVATED_NOT_DISBURSED | A credit account was created for the customer, but the funds have not been paid out or used | N | | ACTIVE_OR_DISBURSED | The account is active and transactable | Y | | APPLICATION_SUBMITTED | Deprecated status | N | | AWAITING_FIXING | Account is awaiting fixing | N | | CHARGED_OFF | The account has been charged off and is closed | N | | CLOSED | Accounts must be zeroed out before being closed.  Closed accounts cannot transact | N | | DELINQUENT | Synctera will update a credit account to delinquent if the customer has not paid within their expected billing cycle | N | | FAILED_KYC | We were unable to verify the identity of the account holder: they have not passed know-your-customer (KYC) checks | N | | IN_CLOSING | The account is in the process of being closed. An account with the IN_CLOSING status may only be updated to CLOSED. Updates to other statuses are prohibited. | N | | RESTRICTED | Synctera will update accounts to restricted of the account holder has not successfully passed KYC | N | | SUSPENDED | Account has been suspected of fraudulent activity and is blocked from further transactions | N |
type AccountStatus string

// List of account_status
const (
	ACCOUNTSTATUS_ACCOUNT_NEVER_ACTIVE    AccountStatus = "ACCOUNT_NEVER_ACTIVE"
	ACCOUNTSTATUS_ACCOUNT_NOT_DESIRED     AccountStatus = "ACCOUNT_NOT_DESIRED"
	ACCOUNTSTATUS_ACTIVATED_NOT_DISBURSED AccountStatus = "ACTIVATED_NOT_DISBURSED"
	ACCOUNTSTATUS_ACTIVE_OR_DISBURSED     AccountStatus = "ACTIVE_OR_DISBURSED"
	ACCOUNTSTATUS_APPLICATION_SUBMITTED   AccountStatus = "APPLICATION_SUBMITTED"
	ACCOUNTSTATUS_AWAITING_FIXING         AccountStatus = "AWAITING_FIXING"
	ACCOUNTSTATUS_CHARGED_OFF             AccountStatus = "CHARGED_OFF"
	ACCOUNTSTATUS_CLOSED                  AccountStatus = "CLOSED"
	ACCOUNTSTATUS_DELINQUENT              AccountStatus = "DELINQUENT"
	ACCOUNTSTATUS_FAILED_KYC              AccountStatus = "FAILED_KYC"
	ACCOUNTSTATUS_IN_CLOSING              AccountStatus = "IN_CLOSING"
	ACCOUNTSTATUS_RESTRICTED              AccountStatus = "RESTRICTED"
	ACCOUNTSTATUS_SUSPENDED               AccountStatus = "SUSPENDED"
)

// All allowed values of AccountStatus enum
var AllowedAccountStatusEnumValues = []AccountStatus{
	"ACCOUNT_NEVER_ACTIVE",
	"ACCOUNT_NOT_DESIRED",
	"ACTIVATED_NOT_DISBURSED",
	"ACTIVE_OR_DISBURSED",
	"APPLICATION_SUBMITTED",
	"AWAITING_FIXING",
	"CHARGED_OFF",
	"CLOSED",
	"DELINQUENT",
	"FAILED_KYC",
	"IN_CLOSING",
	"RESTRICTED",
	"SUSPENDED",
}

func (v *AccountStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AccountStatus(value)
	for _, existing := range AllowedAccountStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AccountStatus", value)
}

// NewAccountStatusFromValue returns a pointer to a valid AccountStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAccountStatusFromValue(v string) (*AccountStatus, error) {
	ev := AccountStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AccountStatus: valid values are %v", v, AllowedAccountStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AccountStatus) IsValid() bool {
	for _, existing := range AllowedAccountStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to account_status value
func (v AccountStatus) Ptr() *AccountStatus {
	return &v
}

type NullableAccountStatus struct {
	value *AccountStatus
	isSet bool
}

func (v NullableAccountStatus) Get() *AccountStatus {
	return v.value
}

func (v *NullableAccountStatus) Set(val *AccountStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountStatus(val *AccountStatus) *NullableAccountStatus {
	return &NullableAccountStatus{value: val, isSet: true}
}

func (v NullableAccountStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
