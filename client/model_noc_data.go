/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.153.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"encoding/json"
	"fmt"
)

// checks if the NocData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NocData{}

// NocData Filled if the entry is a notification of change.
type NocData struct {
	// Change code, indicating which part of the original entry is to be corrected.
	ChangeCode string `json:"change_code"`
	// Corrected information from the original entry (e.g. correct account number).
	CorrectedData string `json:"corrected_data"`
	// Receiving financial institution of the original entry.
	OriginalDfiNo string `json:"original_dfi_no"`
	// Trace number of the original entry that is being corrected.
	OriginalTrace        string `json:"original_trace"`
	AdditionalProperties map[string]interface{}
}

type _NocData NocData

// NewNocData instantiates a new NocData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNocData(changeCode string, correctedData string, originalDfiNo string, originalTrace string) *NocData {
	this := NocData{}
	this.ChangeCode = changeCode
	this.CorrectedData = correctedData
	this.OriginalDfiNo = originalDfiNo
	this.OriginalTrace = originalTrace
	return &this
}

// NewNocDataWithDefaults instantiates a new NocData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNocDataWithDefaults() *NocData {
	this := NocData{}
	return &this
}

// GetChangeCode returns the ChangeCode field value
func (o *NocData) GetChangeCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ChangeCode
}

// GetChangeCodeOk returns a tuple with the ChangeCode field value
// and a boolean to check if the value has been set.
func (o *NocData) GetChangeCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChangeCode, true
}

// SetChangeCode sets field value
func (o *NocData) SetChangeCode(v string) {
	o.ChangeCode = v
}

// GetCorrectedData returns the CorrectedData field value
func (o *NocData) GetCorrectedData() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CorrectedData
}

// GetCorrectedDataOk returns a tuple with the CorrectedData field value
// and a boolean to check if the value has been set.
func (o *NocData) GetCorrectedDataOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CorrectedData, true
}

// SetCorrectedData sets field value
func (o *NocData) SetCorrectedData(v string) {
	o.CorrectedData = v
}

// GetOriginalDfiNo returns the OriginalDfiNo field value
func (o *NocData) GetOriginalDfiNo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OriginalDfiNo
}

// GetOriginalDfiNoOk returns a tuple with the OriginalDfiNo field value
// and a boolean to check if the value has been set.
func (o *NocData) GetOriginalDfiNoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OriginalDfiNo, true
}

// SetOriginalDfiNo sets field value
func (o *NocData) SetOriginalDfiNo(v string) {
	o.OriginalDfiNo = v
}

// GetOriginalTrace returns the OriginalTrace field value
func (o *NocData) GetOriginalTrace() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OriginalTrace
}

// GetOriginalTraceOk returns a tuple with the OriginalTrace field value
// and a boolean to check if the value has been set.
func (o *NocData) GetOriginalTraceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OriginalTrace, true
}

// SetOriginalTrace sets field value
func (o *NocData) SetOriginalTrace(v string) {
	o.OriginalTrace = v
}

func (o NocData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NocData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["change_code"] = o.ChangeCode
	toSerialize["corrected_data"] = o.CorrectedData
	toSerialize["original_dfi_no"] = o.OriginalDfiNo
	toSerialize["original_trace"] = o.OriginalTrace

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NocData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"change_code",
		"corrected_data",
		"original_dfi_no",
		"original_trace",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNocData := _NocData{}

	err = json.Unmarshal(data, &varNocData)

	if err != nil {
		return err
	}

	*o = NocData(varNocData)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "change_code")
		delete(additionalProperties, "corrected_data")
		delete(additionalProperties, "original_dfi_no")
		delete(additionalProperties, "original_trace")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNocData struct {
	value *NocData
	isSet bool
}

func (v NullableNocData) Get() *NocData {
	return v.value
}

func (v *NullableNocData) Set(val *NocData) {
	v.value = val
	v.isSet = true
}

func (v NullableNocData) IsSet() bool {
	return v.isSet
}

func (v *NullableNocData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNocData(val *NocData) *NullableNocData {
	return &NullableNocData{value: val, isSet: true}
}

func (v NullableNocData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNocData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
