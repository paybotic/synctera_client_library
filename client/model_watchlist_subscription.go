/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.150.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synctera_client

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the WatchlistSubscription type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WatchlistSubscription{}

// WatchlistSubscription struct for WatchlistSubscription
type WatchlistSubscription struct {
	// Whether this subscription should automatically renew when the subscription period is over (default: vendor-dependent).
	AutoRenew *bool `json:"auto_renew,omitempty"`
	// When this subscription was created
	Created *time.Time `json:"created,omitempty"`
	// Whether this customer has consented to being enrolled for watchlist monitoring
	CustomerConsent bool `json:"customer_consent"`
	// Unique identifier for this subscription
	Id *string `json:"id,omitempty"`
	// The date when monitoring of this individual should end.
	PeriodEnd *string `json:"period_end,omitempty"`
	// The date when monitoring of this individual should begin (default: today).
	PeriodStart *string `json:"period_start,omitempty"`
	// External provider subscription id
	ProviderSubscriptionId *string `json:"provider_subscription_id,omitempty"`
	Status                 *string `json:"status,omitempty"`
}

type _WatchlistSubscription WatchlistSubscription

// NewWatchlistSubscription instantiates a new WatchlistSubscription object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWatchlistSubscription(customerConsent bool) *WatchlistSubscription {
	this := WatchlistSubscription{}
	this.CustomerConsent = customerConsent
	return &this
}

// NewWatchlistSubscriptionWithDefaults instantiates a new WatchlistSubscription object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWatchlistSubscriptionWithDefaults() *WatchlistSubscription {
	this := WatchlistSubscription{}
	return &this
}

// GetAutoRenew returns the AutoRenew field value if set, zero value otherwise.
func (o *WatchlistSubscription) GetAutoRenew() bool {
	if o == nil || IsNil(o.AutoRenew) {
		var ret bool
		return ret
	}
	return *o.AutoRenew
}

// GetAutoRenewOk returns a tuple with the AutoRenew field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WatchlistSubscription) GetAutoRenewOk() (*bool, bool) {
	if o == nil || IsNil(o.AutoRenew) {
		return nil, false
	}
	return o.AutoRenew, true
}

// HasAutoRenew returns a boolean if a field has been set.
func (o *WatchlistSubscription) HasAutoRenew() bool {
	if o != nil && !IsNil(o.AutoRenew) {
		return true
	}

	return false
}

// SetAutoRenew gets a reference to the given bool and assigns it to the AutoRenew field.
func (o *WatchlistSubscription) SetAutoRenew(v bool) {
	o.AutoRenew = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *WatchlistSubscription) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WatchlistSubscription) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *WatchlistSubscription) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *WatchlistSubscription) SetCreated(v time.Time) {
	o.Created = &v
}

// GetCustomerConsent returns the CustomerConsent field value
func (o *WatchlistSubscription) GetCustomerConsent() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.CustomerConsent
}

// GetCustomerConsentOk returns a tuple with the CustomerConsent field value
// and a boolean to check if the value has been set.
func (o *WatchlistSubscription) GetCustomerConsentOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CustomerConsent, true
}

// SetCustomerConsent sets field value
func (o *WatchlistSubscription) SetCustomerConsent(v bool) {
	o.CustomerConsent = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *WatchlistSubscription) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WatchlistSubscription) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *WatchlistSubscription) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *WatchlistSubscription) SetId(v string) {
	o.Id = &v
}

// GetPeriodEnd returns the PeriodEnd field value if set, zero value otherwise.
func (o *WatchlistSubscription) GetPeriodEnd() string {
	if o == nil || IsNil(o.PeriodEnd) {
		var ret string
		return ret
	}
	return *o.PeriodEnd
}

// GetPeriodEndOk returns a tuple with the PeriodEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WatchlistSubscription) GetPeriodEndOk() (*string, bool) {
	if o == nil || IsNil(o.PeriodEnd) {
		return nil, false
	}
	return o.PeriodEnd, true
}

// HasPeriodEnd returns a boolean if a field has been set.
func (o *WatchlistSubscription) HasPeriodEnd() bool {
	if o != nil && !IsNil(o.PeriodEnd) {
		return true
	}

	return false
}

// SetPeriodEnd gets a reference to the given string and assigns it to the PeriodEnd field.
func (o *WatchlistSubscription) SetPeriodEnd(v string) {
	o.PeriodEnd = &v
}

// GetPeriodStart returns the PeriodStart field value if set, zero value otherwise.
func (o *WatchlistSubscription) GetPeriodStart() string {
	if o == nil || IsNil(o.PeriodStart) {
		var ret string
		return ret
	}
	return *o.PeriodStart
}

// GetPeriodStartOk returns a tuple with the PeriodStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WatchlistSubscription) GetPeriodStartOk() (*string, bool) {
	if o == nil || IsNil(o.PeriodStart) {
		return nil, false
	}
	return o.PeriodStart, true
}

// HasPeriodStart returns a boolean if a field has been set.
func (o *WatchlistSubscription) HasPeriodStart() bool {
	if o != nil && !IsNil(o.PeriodStart) {
		return true
	}

	return false
}

// SetPeriodStart gets a reference to the given string and assigns it to the PeriodStart field.
func (o *WatchlistSubscription) SetPeriodStart(v string) {
	o.PeriodStart = &v
}

// GetProviderSubscriptionId returns the ProviderSubscriptionId field value if set, zero value otherwise.
func (o *WatchlistSubscription) GetProviderSubscriptionId() string {
	if o == nil || IsNil(o.ProviderSubscriptionId) {
		var ret string
		return ret
	}
	return *o.ProviderSubscriptionId
}

// GetProviderSubscriptionIdOk returns a tuple with the ProviderSubscriptionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WatchlistSubscription) GetProviderSubscriptionIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProviderSubscriptionId) {
		return nil, false
	}
	return o.ProviderSubscriptionId, true
}

// HasProviderSubscriptionId returns a boolean if a field has been set.
func (o *WatchlistSubscription) HasProviderSubscriptionId() bool {
	if o != nil && !IsNil(o.ProviderSubscriptionId) {
		return true
	}

	return false
}

// SetProviderSubscriptionId gets a reference to the given string and assigns it to the ProviderSubscriptionId field.
func (o *WatchlistSubscription) SetProviderSubscriptionId(v string) {
	o.ProviderSubscriptionId = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *WatchlistSubscription) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WatchlistSubscription) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *WatchlistSubscription) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *WatchlistSubscription) SetStatus(v string) {
	o.Status = &v
}

func (o WatchlistSubscription) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WatchlistSubscription) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AutoRenew) {
		toSerialize["auto_renew"] = o.AutoRenew
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	toSerialize["customer_consent"] = o.CustomerConsent
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.PeriodEnd) {
		toSerialize["period_end"] = o.PeriodEnd
	}
	if !IsNil(o.PeriodStart) {
		toSerialize["period_start"] = o.PeriodStart
	}
	if !IsNil(o.ProviderSubscriptionId) {
		toSerialize["provider_subscription_id"] = o.ProviderSubscriptionId
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

func (o *WatchlistSubscription) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"customer_consent",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWatchlistSubscription := _WatchlistSubscription{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varWatchlistSubscription)

	if err != nil {
		return err
	}

	*o = WatchlistSubscription(varWatchlistSubscription)

	return err
}

type NullableWatchlistSubscription struct {
	value *WatchlistSubscription
	isSet bool
}

func (v NullableWatchlistSubscription) Get() *WatchlistSubscription {
	return v.value
}

func (v *NullableWatchlistSubscription) Set(val *WatchlistSubscription) {
	v.value = val
	v.isSet = true
}

func (v NullableWatchlistSubscription) IsSet() bool {
	return v.isSet
}

func (v *NullableWatchlistSubscription) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWatchlistSubscription(val *WatchlistSubscription) *NullableWatchlistSubscription {
	return &NullableWatchlistSubscription{value: val, isSet: true}
}

func (v NullableWatchlistSubscription) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWatchlistSubscription) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
