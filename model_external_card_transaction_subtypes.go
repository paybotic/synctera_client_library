/*
Synctera API

<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p> 

API version: 0.32.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ExternalCardTransactionSubtypes The set of valid EXTERNAL_CARD transaction subtypes
type ExternalCardTransactionSubtypes string

// List of external_card_transaction_subtypes
const (
	EXTERNALCARDTRANSACTIONSUBTYPES_FUNDING ExternalCardTransactionSubtypes = "CARD_FUNDING"
	EXTERNALCARDTRANSACTIONSUBTYPES_FUNDING_REVERSAL ExternalCardTransactionSubtypes = "CARD_FUNDING_REVERSAL"
	EXTERNALCARDTRANSACTIONSUBTYPES_SEND ExternalCardTransactionSubtypes = "CARD_SEND"
	EXTERNALCARDTRANSACTIONSUBTYPES_SEND_REVERSAL ExternalCardTransactionSubtypes = "CARD_SEND_REVERSAL"
)

// All allowed values of ExternalCardTransactionSubtypes enum
var AllowedExternalCardTransactionSubtypesEnumValues = []ExternalCardTransactionSubtypes{
	"CARD_FUNDING",
	"CARD_FUNDING_REVERSAL",
	"CARD_SEND",
	"CARD_SEND_REVERSAL",
}

func (v *ExternalCardTransactionSubtypes) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ExternalCardTransactionSubtypes(value)
	for _, existing := range AllowedExternalCardTransactionSubtypesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ExternalCardTransactionSubtypes", value)
}

// NewExternalCardTransactionSubtypesFromValue returns a pointer to a valid ExternalCardTransactionSubtypes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewExternalCardTransactionSubtypesFromValue(v string) (*ExternalCardTransactionSubtypes, error) {
	ev := ExternalCardTransactionSubtypes(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ExternalCardTransactionSubtypes: valid values are %v", v, AllowedExternalCardTransactionSubtypesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ExternalCardTransactionSubtypes) IsValid() bool {
	for _, existing := range AllowedExternalCardTransactionSubtypesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to external_card_transaction_subtypes value
func (v ExternalCardTransactionSubtypes) Ptr() *ExternalCardTransactionSubtypes {
	return &v
}

type NullableExternalCardTransactionSubtypes struct {
	value *ExternalCardTransactionSubtypes
	isSet bool
}

func (v NullableExternalCardTransactionSubtypes) Get() *ExternalCardTransactionSubtypes {
	return v.value
}

func (v *NullableExternalCardTransactionSubtypes) Set(val *ExternalCardTransactionSubtypes) {
	v.value = val
	v.isSet = true
}

func (v NullableExternalCardTransactionSubtypes) IsSet() bool {
	return v.isSet
}

func (v *NullableExternalCardTransactionSubtypes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExternalCardTransactionSubtypes(val *ExternalCardTransactionSubtypes) *NullableExternalCardTransactionSubtypes {
	return &NullableExternalCardTransactionSubtypes{value: val, isSet: true}
}

func (v NullableExternalCardTransactionSubtypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExternalCardTransactionSubtypes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

