/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.140.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CashPatch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CashPatch{}

// CashPatch Properties for updating a transfer
type CashPatch struct {
	// The UUID of the Synctera account resource that is the destination of the transfer for incoming transfers. This can only be updated if the transfer is suspended.
	DestinationAccountId *string `json:"destination_account_id,omitempty"`
	// Additional information to be added to the transfer
	SourceData map[string]interface{} `json:"source_data,omitempty"`
	Status     *string                `json:"status,omitempty"`
}

// NewCashPatch instantiates a new CashPatch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCashPatch() *CashPatch {
	this := CashPatch{}
	return &this
}

// NewCashPatchWithDefaults instantiates a new CashPatch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCashPatchWithDefaults() *CashPatch {
	this := CashPatch{}
	return &this
}

// GetDestinationAccountId returns the DestinationAccountId field value if set, zero value otherwise.
func (o *CashPatch) GetDestinationAccountId() string {
	if o == nil || IsNil(o.DestinationAccountId) {
		var ret string
		return ret
	}
	return *o.DestinationAccountId
}

// GetDestinationAccountIdOk returns a tuple with the DestinationAccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashPatch) GetDestinationAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.DestinationAccountId) {
		return nil, false
	}
	return o.DestinationAccountId, true
}

// HasDestinationAccountId returns a boolean if a field has been set.
func (o *CashPatch) HasDestinationAccountId() bool {
	if o != nil && !IsNil(o.DestinationAccountId) {
		return true
	}

	return false
}

// SetDestinationAccountId gets a reference to the given string and assigns it to the DestinationAccountId field.
func (o *CashPatch) SetDestinationAccountId(v string) {
	o.DestinationAccountId = &v
}

// GetSourceData returns the SourceData field value if set, zero value otherwise.
func (o *CashPatch) GetSourceData() map[string]interface{} {
	if o == nil || IsNil(o.SourceData) {
		var ret map[string]interface{}
		return ret
	}
	return o.SourceData
}

// GetSourceDataOk returns a tuple with the SourceData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashPatch) GetSourceDataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.SourceData) {
		return map[string]interface{}{}, false
	}
	return o.SourceData, true
}

// HasSourceData returns a boolean if a field has been set.
func (o *CashPatch) HasSourceData() bool {
	if o != nil && !IsNil(o.SourceData) {
		return true
	}

	return false
}

// SetSourceData gets a reference to the given map[string]interface{} and assigns it to the SourceData field.
func (o *CashPatch) SetSourceData(v map[string]interface{}) {
	o.SourceData = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *CashPatch) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashPatch) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *CashPatch) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *CashPatch) SetStatus(v string) {
	o.Status = &v
}

func (o CashPatch) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CashPatch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DestinationAccountId) {
		toSerialize["destination_account_id"] = o.DestinationAccountId
	}
	if !IsNil(o.SourceData) {
		toSerialize["source_data"] = o.SourceData
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableCashPatch struct {
	value *CashPatch
	isSet bool
}

func (v NullableCashPatch) Get() *CashPatch {
	return v.value
}

func (v *NullableCashPatch) Set(val *CashPatch) {
	v.value = val
	v.isSet = true
}

func (v NullableCashPatch) IsSet() bool {
	return v.isSet
}

func (v *NullableCashPatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCashPatch(val *CashPatch) *NullableCashPatch {
	return &NullableCashPatch{value: val, isSet: true}
}

func (v NullableCashPatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCashPatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
