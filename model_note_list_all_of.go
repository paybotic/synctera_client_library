/*
Synctera API

<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p> 

API version: 0.5.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// NoteListAllOf struct for NoteListAllOf
type NoteListAllOf struct {
	// Array of notes
	Notes []NoteResponse `json:"notes"`
}

// NewNoteListAllOf instantiates a new NoteListAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNoteListAllOf(notes []NoteResponse) *NoteListAllOf {
	this := NoteListAllOf{}
	this.Notes = notes
	return &this
}

// NewNoteListAllOfWithDefaults instantiates a new NoteListAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNoteListAllOfWithDefaults() *NoteListAllOf {
	this := NoteListAllOf{}
	return &this
}

// GetNotes returns the Notes field value
func (o *NoteListAllOf) GetNotes() []NoteResponse {
	if o == nil {
		var ret []NoteResponse
		return ret
	}

	return o.Notes
}

// GetNotesOk returns a tuple with the Notes field value
// and a boolean to check if the value has been set.
func (o *NoteListAllOf) GetNotesOk() ([]NoteResponse, bool) {
	if o == nil {
		return nil, false
	}
	return o.Notes, true
}

// SetNotes sets field value
func (o *NoteListAllOf) SetNotes(v []NoteResponse) {
	o.Notes = v
}

func (o NoteListAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["notes"] = o.Notes
	}
	return json.Marshal(toSerialize)
}

type NullableNoteListAllOf struct {
	value *NoteListAllOf
	isSet bool
}

func (v NullableNoteListAllOf) Get() *NoteListAllOf {
	return v.value
}

func (v *NullableNoteListAllOf) Set(val *NoteListAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableNoteListAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableNoteListAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNoteListAllOf(val *NoteListAllOf) *NullableNoteListAllOf {
	return &NullableNoteListAllOf{value: val, isSet: true}
}

func (v NullableNoteListAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNoteListAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


