/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.140.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VerificationType The verification run on the customer. One the following:   * `IDENTITY` – verify that the information provided is associated with the identity of a real person or business.   * `WATCHLIST` – checks watchlists for known fraud, money laundering, and other suspicious activity.   * `DOCUMENT_VERIFICATION` – verifies the authenticity of a document, such as a driver's license, or other government-issued identification document.   * `RELATED_ENTITIES` – represents dependent verification checks for related parties (e.g. all beneficial owners must pass KYC for a business to pass KYB).   * `MANUAL_REVIEW` – represents the outcome of a manual review of the verification done on a party (note: overrides the outcome of other verification types).   * `LICENSE` – represents the outcome of a license verification.
type VerificationType string

// List of verification_type
const (
	VERIFICATIONTYPE_DOCUMENT_VERIFICATION VerificationType = "DOCUMENT_VERIFICATION"
	VERIFICATIONTYPE_IDENTITY              VerificationType = "IDENTITY"
	VERIFICATIONTYPE_LICENSE               VerificationType = "LICENSE"
	VERIFICATIONTYPE_MANUAL_REVIEW         VerificationType = "MANUAL_REVIEW"
	VERIFICATIONTYPE_RELATED_ENTITIES      VerificationType = "RELATED_ENTITIES"
	VERIFICATIONTYPE_WATCHLIST             VerificationType = "WATCHLIST"
)

// All allowed values of VerificationType enum
var AllowedVerificationTypeEnumValues = []VerificationType{
	"DOCUMENT_VERIFICATION",
	"IDENTITY",
	"LICENSE",
	"MANUAL_REVIEW",
	"RELATED_ENTITIES",
	"WATCHLIST",
}

func (v *VerificationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VerificationType(value)
	for _, existing := range AllowedVerificationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VerificationType", value)
}

// NewVerificationTypeFromValue returns a pointer to a valid VerificationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVerificationTypeFromValue(v string) (*VerificationType, error) {
	ev := VerificationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VerificationType: valid values are %v", v, AllowedVerificationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VerificationType) IsValid() bool {
	for _, existing := range AllowedVerificationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to verification_type value
func (v VerificationType) Ptr() *VerificationType {
	return &v
}

type NullableVerificationType struct {
	value *VerificationType
	isSet bool
}

func (v NullableVerificationType) Get() *VerificationType {
	return v.value
}

func (v *NullableVerificationType) Set(val *VerificationType) {
	v.value = val
	v.isSet = true
}

func (v NullableVerificationType) IsSet() bool {
	return v.isSet
}

func (v *NullableVerificationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVerificationType(val *VerificationType) *NullableVerificationType {
	return &NullableVerificationType{value: val, isSet: true}
}

func (v NullableVerificationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVerificationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
