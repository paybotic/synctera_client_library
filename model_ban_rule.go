/*
Synctera API

<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p> 

API version: 0.5.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// BanRule struct for BanRule
type BanRule struct {
	// What action this rule performs
	Action *string `json:"action,omitempty"`
	CreationTime *time.Time `json:"creation_time,omitempty"`
	// This rule will match requests for customers with this email address. May contain a \"*\" as a wildcard. 
	Email *string `json:"email,omitempty"`
	// ban rule ID
	Id *string `json:"id,omitempty"`
	LastUpdatedTime *time.Time `json:"last_updated_time,omitempty"`
	// This rule will match requests for customers with this phone number. Use E.164 format, with a leading \"+\" and a country code. 
	PhoneNumber *string `json:"phone_number,omitempty"`
	// The reason why the rule was added
	Reason *string `json:"reason,omitempty"`
	ResourceType *ResourceType `json:"resource_type,omitempty"`
	// The source of the rule
	Source *string `json:"source,omitempty"`
	// This rule will match requests for customers with an SSN that matches this value when hashed. 
	SsnHash *string `json:"ssn_hash,omitempty"`
	Status *BanRuleStatus `json:"status,omitempty"`
	// The tenant the rule applies to, with a format of \"b_p\" where \"b\" is the bank_id and \"p\" is the fintech partner_id. Bank requesters can specify a the fintech partner id as \"*\" to indicate the rule applies to all their fintechs. Synctera requesters can specify \"*_*\" to indicate the rule applies globally. The requester must have access to the specified tenant. If not supplied, the tenant defaults to the requester's tenant. 
	Tenant *string `json:"tenant,omitempty"`
}

// NewBanRule instantiates a new BanRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBanRule() *BanRule {
	this := BanRule{}
	return &this
}

// NewBanRuleWithDefaults instantiates a new BanRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBanRuleWithDefaults() *BanRule {
	this := BanRule{}
	return &this
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *BanRule) GetAction() string {
	if o == nil || o.Action == nil {
		var ret string
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BanRule) GetActionOk() (*string, bool) {
	if o == nil || o.Action == nil {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *BanRule) HasAction() bool {
	if o != nil && o.Action != nil {
		return true
	}

	return false
}

// SetAction gets a reference to the given string and assigns it to the Action field.
func (o *BanRule) SetAction(v string) {
	o.Action = &v
}

// GetCreationTime returns the CreationTime field value if set, zero value otherwise.
func (o *BanRule) GetCreationTime() time.Time {
	if o == nil || o.CreationTime == nil {
		var ret time.Time
		return ret
	}
	return *o.CreationTime
}

// GetCreationTimeOk returns a tuple with the CreationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BanRule) GetCreationTimeOk() (*time.Time, bool) {
	if o == nil || o.CreationTime == nil {
		return nil, false
	}
	return o.CreationTime, true
}

// HasCreationTime returns a boolean if a field has been set.
func (o *BanRule) HasCreationTime() bool {
	if o != nil && o.CreationTime != nil {
		return true
	}

	return false
}

// SetCreationTime gets a reference to the given time.Time and assigns it to the CreationTime field.
func (o *BanRule) SetCreationTime(v time.Time) {
	o.CreationTime = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *BanRule) GetEmail() string {
	if o == nil || o.Email == nil {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BanRule) GetEmailOk() (*string, bool) {
	if o == nil || o.Email == nil {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *BanRule) HasEmail() bool {
	if o != nil && o.Email != nil {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *BanRule) SetEmail(v string) {
	o.Email = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *BanRule) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BanRule) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *BanRule) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *BanRule) SetId(v string) {
	o.Id = &v
}

// GetLastUpdatedTime returns the LastUpdatedTime field value if set, zero value otherwise.
func (o *BanRule) GetLastUpdatedTime() time.Time {
	if o == nil || o.LastUpdatedTime == nil {
		var ret time.Time
		return ret
	}
	return *o.LastUpdatedTime
}

// GetLastUpdatedTimeOk returns a tuple with the LastUpdatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BanRule) GetLastUpdatedTimeOk() (*time.Time, bool) {
	if o == nil || o.LastUpdatedTime == nil {
		return nil, false
	}
	return o.LastUpdatedTime, true
}

// HasLastUpdatedTime returns a boolean if a field has been set.
func (o *BanRule) HasLastUpdatedTime() bool {
	if o != nil && o.LastUpdatedTime != nil {
		return true
	}

	return false
}

// SetLastUpdatedTime gets a reference to the given time.Time and assigns it to the LastUpdatedTime field.
func (o *BanRule) SetLastUpdatedTime(v time.Time) {
	o.LastUpdatedTime = &v
}

// GetPhoneNumber returns the PhoneNumber field value if set, zero value otherwise.
func (o *BanRule) GetPhoneNumber() string {
	if o == nil || o.PhoneNumber == nil {
		var ret string
		return ret
	}
	return *o.PhoneNumber
}

// GetPhoneNumberOk returns a tuple with the PhoneNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BanRule) GetPhoneNumberOk() (*string, bool) {
	if o == nil || o.PhoneNumber == nil {
		return nil, false
	}
	return o.PhoneNumber, true
}

// HasPhoneNumber returns a boolean if a field has been set.
func (o *BanRule) HasPhoneNumber() bool {
	if o != nil && o.PhoneNumber != nil {
		return true
	}

	return false
}

// SetPhoneNumber gets a reference to the given string and assigns it to the PhoneNumber field.
func (o *BanRule) SetPhoneNumber(v string) {
	o.PhoneNumber = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *BanRule) GetReason() string {
	if o == nil || o.Reason == nil {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BanRule) GetReasonOk() (*string, bool) {
	if o == nil || o.Reason == nil {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *BanRule) HasReason() bool {
	if o != nil && o.Reason != nil {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *BanRule) SetReason(v string) {
	o.Reason = &v
}

// GetResourceType returns the ResourceType field value if set, zero value otherwise.
func (o *BanRule) GetResourceType() ResourceType {
	if o == nil || o.ResourceType == nil {
		var ret ResourceType
		return ret
	}
	return *o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BanRule) GetResourceTypeOk() (*ResourceType, bool) {
	if o == nil || o.ResourceType == nil {
		return nil, false
	}
	return o.ResourceType, true
}

// HasResourceType returns a boolean if a field has been set.
func (o *BanRule) HasResourceType() bool {
	if o != nil && o.ResourceType != nil {
		return true
	}

	return false
}

// SetResourceType gets a reference to the given ResourceType and assigns it to the ResourceType field.
func (o *BanRule) SetResourceType(v ResourceType) {
	o.ResourceType = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *BanRule) GetSource() string {
	if o == nil || o.Source == nil {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BanRule) GetSourceOk() (*string, bool) {
	if o == nil || o.Source == nil {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *BanRule) HasSource() bool {
	if o != nil && o.Source != nil {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *BanRule) SetSource(v string) {
	o.Source = &v
}

// GetSsnHash returns the SsnHash field value if set, zero value otherwise.
func (o *BanRule) GetSsnHash() string {
	if o == nil || o.SsnHash == nil {
		var ret string
		return ret
	}
	return *o.SsnHash
}

// GetSsnHashOk returns a tuple with the SsnHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BanRule) GetSsnHashOk() (*string, bool) {
	if o == nil || o.SsnHash == nil {
		return nil, false
	}
	return o.SsnHash, true
}

// HasSsnHash returns a boolean if a field has been set.
func (o *BanRule) HasSsnHash() bool {
	if o != nil && o.SsnHash != nil {
		return true
	}

	return false
}

// SetSsnHash gets a reference to the given string and assigns it to the SsnHash field.
func (o *BanRule) SetSsnHash(v string) {
	o.SsnHash = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *BanRule) GetStatus() BanRuleStatus {
	if o == nil || o.Status == nil {
		var ret BanRuleStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BanRule) GetStatusOk() (*BanRuleStatus, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *BanRule) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given BanRuleStatus and assigns it to the Status field.
func (o *BanRule) SetStatus(v BanRuleStatus) {
	o.Status = &v
}

// GetTenant returns the Tenant field value if set, zero value otherwise.
func (o *BanRule) GetTenant() string {
	if o == nil || o.Tenant == nil {
		var ret string
		return ret
	}
	return *o.Tenant
}

// GetTenantOk returns a tuple with the Tenant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BanRule) GetTenantOk() (*string, bool) {
	if o == nil || o.Tenant == nil {
		return nil, false
	}
	return o.Tenant, true
}

// HasTenant returns a boolean if a field has been set.
func (o *BanRule) HasTenant() bool {
	if o != nil && o.Tenant != nil {
		return true
	}

	return false
}

// SetTenant gets a reference to the given string and assigns it to the Tenant field.
func (o *BanRule) SetTenant(v string) {
	o.Tenant = &v
}

func (o BanRule) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Action != nil {
		toSerialize["action"] = o.Action
	}
	if o.CreationTime != nil {
		toSerialize["creation_time"] = o.CreationTime
	}
	if o.Email != nil {
		toSerialize["email"] = o.Email
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.LastUpdatedTime != nil {
		toSerialize["last_updated_time"] = o.LastUpdatedTime
	}
	if o.PhoneNumber != nil {
		toSerialize["phone_number"] = o.PhoneNumber
	}
	if o.Reason != nil {
		toSerialize["reason"] = o.Reason
	}
	if o.ResourceType != nil {
		toSerialize["resource_type"] = o.ResourceType
	}
	if o.Source != nil {
		toSerialize["source"] = o.Source
	}
	if o.SsnHash != nil {
		toSerialize["ssn_hash"] = o.SsnHash
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.Tenant != nil {
		toSerialize["tenant"] = o.Tenant
	}
	return json.Marshal(toSerialize)
}

type NullableBanRule struct {
	value *BanRule
	isSet bool
}

func (v NullableBanRule) Get() *BanRule {
	return v.value
}

func (v *NullableBanRule) Set(val *BanRule) {
	v.value = val
	v.isSet = true
}

func (v NullableBanRule) IsSet() bool {
	return v.isSet
}

func (v *NullableBanRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBanRule(val *BanRule) *NullableBanRule {
	return &NullableBanRule{value: val, isSet: true}
}

func (v NullableBanRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBanRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


