/*
Synctera API

<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.69.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Authenticate3dsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Authenticate3dsResponse{}

// Authenticate3dsResponse Details for an External Card Transfer 3-D Secure Authentication response
type Authenticate3dsResponse struct {
	// The unique identifier of the 3DS authentication
	Id string `json:"id"`
	// Status of the 3DS authentication
	Status string `json:"status"`
}

// NewAuthenticate3dsResponse instantiates a new Authenticate3dsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthenticate3dsResponse(id string, status string) *Authenticate3dsResponse {
	this := Authenticate3dsResponse{}
	this.Id = id
	this.Status = status
	return &this
}

// NewAuthenticate3dsResponseWithDefaults instantiates a new Authenticate3dsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthenticate3dsResponseWithDefaults() *Authenticate3dsResponse {
	this := Authenticate3dsResponse{}
	return &this
}

// GetId returns the Id field value
func (o *Authenticate3dsResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Authenticate3dsResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Authenticate3dsResponse) SetId(v string) {
	o.Id = v
}

// GetStatus returns the Status field value
func (o *Authenticate3dsResponse) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Authenticate3dsResponse) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *Authenticate3dsResponse) SetStatus(v string) {
	o.Status = v
}

func (o Authenticate3dsResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Authenticate3dsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["status"] = o.Status
	return toSerialize, nil
}

type NullableAuthenticate3dsResponse struct {
	value *Authenticate3dsResponse
	isSet bool
}

func (v NullableAuthenticate3dsResponse) Get() *Authenticate3dsResponse {
	return v.value
}

func (v *NullableAuthenticate3dsResponse) Set(val *Authenticate3dsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthenticate3dsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthenticate3dsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthenticate3dsResponse(val *Authenticate3dsResponse) *NullableAuthenticate3dsResponse {
	return &NullableAuthenticate3dsResponse{value: val, isSet: true}
}

func (v NullableAuthenticate3dsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthenticate3dsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


