/*
Synctera API

<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.69.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the ExternalAccountBalance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExternalAccountBalance{}

// ExternalAccountBalance struct for ExternalAccountBalance
type ExternalAccountBalance struct {
	// The amount of funds available to be withdrawn from the account, as determined by the financial institution.  This is an integer in the minor currency unit (e.g. cents): 1025 means $10.25. 
	Available NullableInt64 `json:"available,omitempty"`
	CreationTime *time.Time `json:"creation_time,omitempty"`
	// ISO 4217 alphabetic currency code
	Currency string `json:"currency"`
	// For a `DEPOSITORY` account, this is the total amount of funds in the account.  For a `CREDIT` account, this is the amount owing. If negative, the lender owes the account holder.  This is an integer in the minor currency unit (e.g. cents): -2500 means $25.00 owed to the account holder. 
	Current NullableInt64 `json:"current,omitempty"`
	// The last time Synctera has fetched this balance from a vendor
	LastUpdatedTime *time.Time `json:"last_updated_time,omitempty"`
	// Vendor timestamp of when the balance was last updated on the vendor side
	LastUpdatedTimeVendor *time.Time `json:"last_updated_time_vendor,omitempty"`
	// For `DEPOSITORY` accounts, this is the pre-arranged overdraft limit, commonly used in Europe. In North America this is typically not set for depository accounts.  For `CREDIT` accounts, this is the credit limit on the account.  This is an integer in the minor currency unit (e.g. cents): 10000 means $100.00 
	Limit NullableInt64 `json:"limit,omitempty"`
	// The last time Synctera has fetched transactions from a vendor
	TransactionsLastUpdatedTime *time.Time `json:"transactions_last_updated_time,omitempty"`
}

// NewExternalAccountBalance instantiates a new ExternalAccountBalance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExternalAccountBalance(currency string) *ExternalAccountBalance {
	this := ExternalAccountBalance{}
	this.Currency = currency
	return &this
}

// NewExternalAccountBalanceWithDefaults instantiates a new ExternalAccountBalance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExternalAccountBalanceWithDefaults() *ExternalAccountBalance {
	this := ExternalAccountBalance{}
	return &this
}

// GetAvailable returns the Available field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExternalAccountBalance) GetAvailable() int64 {
	if o == nil || IsNil(o.Available.Get()) {
		var ret int64
		return ret
	}
	return *o.Available.Get()
}

// GetAvailableOk returns a tuple with the Available field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExternalAccountBalance) GetAvailableOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Available.Get(), o.Available.IsSet()
}

// HasAvailable returns a boolean if a field has been set.
func (o *ExternalAccountBalance) HasAvailable() bool {
	if o != nil && o.Available.IsSet() {
		return true
	}

	return false
}

// SetAvailable gets a reference to the given NullableInt64 and assigns it to the Available field.
func (o *ExternalAccountBalance) SetAvailable(v int64) {
	o.Available.Set(&v)
}
// SetAvailableNil sets the value for Available to be an explicit nil
func (o *ExternalAccountBalance) SetAvailableNil() {
	o.Available.Set(nil)
}

// UnsetAvailable ensures that no value is present for Available, not even an explicit nil
func (o *ExternalAccountBalance) UnsetAvailable() {
	o.Available.Unset()
}

// GetCreationTime returns the CreationTime field value if set, zero value otherwise.
func (o *ExternalAccountBalance) GetCreationTime() time.Time {
	if o == nil || IsNil(o.CreationTime) {
		var ret time.Time
		return ret
	}
	return *o.CreationTime
}

// GetCreationTimeOk returns a tuple with the CreationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalAccountBalance) GetCreationTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreationTime) {
		return nil, false
	}
	return o.CreationTime, true
}

// HasCreationTime returns a boolean if a field has been set.
func (o *ExternalAccountBalance) HasCreationTime() bool {
	if o != nil && !IsNil(o.CreationTime) {
		return true
	}

	return false
}

// SetCreationTime gets a reference to the given time.Time and assigns it to the CreationTime field.
func (o *ExternalAccountBalance) SetCreationTime(v time.Time) {
	o.CreationTime = &v
}

// GetCurrency returns the Currency field value
func (o *ExternalAccountBalance) GetCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *ExternalAccountBalance) GetCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *ExternalAccountBalance) SetCurrency(v string) {
	o.Currency = v
}

// GetCurrent returns the Current field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExternalAccountBalance) GetCurrent() int64 {
	if o == nil || IsNil(o.Current.Get()) {
		var ret int64
		return ret
	}
	return *o.Current.Get()
}

// GetCurrentOk returns a tuple with the Current field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExternalAccountBalance) GetCurrentOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Current.Get(), o.Current.IsSet()
}

// HasCurrent returns a boolean if a field has been set.
func (o *ExternalAccountBalance) HasCurrent() bool {
	if o != nil && o.Current.IsSet() {
		return true
	}

	return false
}

// SetCurrent gets a reference to the given NullableInt64 and assigns it to the Current field.
func (o *ExternalAccountBalance) SetCurrent(v int64) {
	o.Current.Set(&v)
}
// SetCurrentNil sets the value for Current to be an explicit nil
func (o *ExternalAccountBalance) SetCurrentNil() {
	o.Current.Set(nil)
}

// UnsetCurrent ensures that no value is present for Current, not even an explicit nil
func (o *ExternalAccountBalance) UnsetCurrent() {
	o.Current.Unset()
}

// GetLastUpdatedTime returns the LastUpdatedTime field value if set, zero value otherwise.
func (o *ExternalAccountBalance) GetLastUpdatedTime() time.Time {
	if o == nil || IsNil(o.LastUpdatedTime) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdatedTime
}

// GetLastUpdatedTimeOk returns a tuple with the LastUpdatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalAccountBalance) GetLastUpdatedTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdatedTime) {
		return nil, false
	}
	return o.LastUpdatedTime, true
}

// HasLastUpdatedTime returns a boolean if a field has been set.
func (o *ExternalAccountBalance) HasLastUpdatedTime() bool {
	if o != nil && !IsNil(o.LastUpdatedTime) {
		return true
	}

	return false
}

// SetLastUpdatedTime gets a reference to the given time.Time and assigns it to the LastUpdatedTime field.
func (o *ExternalAccountBalance) SetLastUpdatedTime(v time.Time) {
	o.LastUpdatedTime = &v
}

// GetLastUpdatedTimeVendor returns the LastUpdatedTimeVendor field value if set, zero value otherwise.
func (o *ExternalAccountBalance) GetLastUpdatedTimeVendor() time.Time {
	if o == nil || IsNil(o.LastUpdatedTimeVendor) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdatedTimeVendor
}

// GetLastUpdatedTimeVendorOk returns a tuple with the LastUpdatedTimeVendor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalAccountBalance) GetLastUpdatedTimeVendorOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdatedTimeVendor) {
		return nil, false
	}
	return o.LastUpdatedTimeVendor, true
}

// HasLastUpdatedTimeVendor returns a boolean if a field has been set.
func (o *ExternalAccountBalance) HasLastUpdatedTimeVendor() bool {
	if o != nil && !IsNil(o.LastUpdatedTimeVendor) {
		return true
	}

	return false
}

// SetLastUpdatedTimeVendor gets a reference to the given time.Time and assigns it to the LastUpdatedTimeVendor field.
func (o *ExternalAccountBalance) SetLastUpdatedTimeVendor(v time.Time) {
	o.LastUpdatedTimeVendor = &v
}

// GetLimit returns the Limit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExternalAccountBalance) GetLimit() int64 {
	if o == nil || IsNil(o.Limit.Get()) {
		var ret int64
		return ret
	}
	return *o.Limit.Get()
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExternalAccountBalance) GetLimitOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Limit.Get(), o.Limit.IsSet()
}

// HasLimit returns a boolean if a field has been set.
func (o *ExternalAccountBalance) HasLimit() bool {
	if o != nil && o.Limit.IsSet() {
		return true
	}

	return false
}

// SetLimit gets a reference to the given NullableInt64 and assigns it to the Limit field.
func (o *ExternalAccountBalance) SetLimit(v int64) {
	o.Limit.Set(&v)
}
// SetLimitNil sets the value for Limit to be an explicit nil
func (o *ExternalAccountBalance) SetLimitNil() {
	o.Limit.Set(nil)
}

// UnsetLimit ensures that no value is present for Limit, not even an explicit nil
func (o *ExternalAccountBalance) UnsetLimit() {
	o.Limit.Unset()
}

// GetTransactionsLastUpdatedTime returns the TransactionsLastUpdatedTime field value if set, zero value otherwise.
func (o *ExternalAccountBalance) GetTransactionsLastUpdatedTime() time.Time {
	if o == nil || IsNil(o.TransactionsLastUpdatedTime) {
		var ret time.Time
		return ret
	}
	return *o.TransactionsLastUpdatedTime
}

// GetTransactionsLastUpdatedTimeOk returns a tuple with the TransactionsLastUpdatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalAccountBalance) GetTransactionsLastUpdatedTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.TransactionsLastUpdatedTime) {
		return nil, false
	}
	return o.TransactionsLastUpdatedTime, true
}

// HasTransactionsLastUpdatedTime returns a boolean if a field has been set.
func (o *ExternalAccountBalance) HasTransactionsLastUpdatedTime() bool {
	if o != nil && !IsNil(o.TransactionsLastUpdatedTime) {
		return true
	}

	return false
}

// SetTransactionsLastUpdatedTime gets a reference to the given time.Time and assigns it to the TransactionsLastUpdatedTime field.
func (o *ExternalAccountBalance) SetTransactionsLastUpdatedTime(v time.Time) {
	o.TransactionsLastUpdatedTime = &v
}

func (o ExternalAccountBalance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExternalAccountBalance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Available.IsSet() {
		toSerialize["available"] = o.Available.Get()
	}
	if !IsNil(o.CreationTime) {
		toSerialize["creation_time"] = o.CreationTime
	}
	toSerialize["currency"] = o.Currency
	if o.Current.IsSet() {
		toSerialize["current"] = o.Current.Get()
	}
	if !IsNil(o.LastUpdatedTime) {
		toSerialize["last_updated_time"] = o.LastUpdatedTime
	}
	if !IsNil(o.LastUpdatedTimeVendor) {
		toSerialize["last_updated_time_vendor"] = o.LastUpdatedTimeVendor
	}
	if o.Limit.IsSet() {
		toSerialize["limit"] = o.Limit.Get()
	}
	if !IsNil(o.TransactionsLastUpdatedTime) {
		toSerialize["transactions_last_updated_time"] = o.TransactionsLastUpdatedTime
	}
	return toSerialize, nil
}

type NullableExternalAccountBalance struct {
	value *ExternalAccountBalance
	isSet bool
}

func (v NullableExternalAccountBalance) Get() *ExternalAccountBalance {
	return v.value
}

func (v *NullableExternalAccountBalance) Set(val *ExternalAccountBalance) {
	v.value = val
	v.isSet = true
}

func (v NullableExternalAccountBalance) IsSet() bool {
	return v.isSet
}

func (v *NullableExternalAccountBalance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExternalAccountBalance(val *ExternalAccountBalance) *NullableExternalAccountBalance {
	return &NullableExternalAccountBalance{value: val, isSet: true}
}

func (v NullableExternalAccountBalance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExternalAccountBalance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


