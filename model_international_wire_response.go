/*
Synctera API

<h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.69.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the InternationalWireResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InternationalWireResponse{}

// InternationalWireResponse struct for InternationalWireResponse
type InternationalWireResponse struct {
	// Transfer amount in cents ($100 would be 10000) in the currency of the beneficiary.
	AmountInBeneficiaryCurrency int64 `json:"amount_in_beneficiary_currency"`
	// The currency of the beneficiary's account in ISO4217 format.
	BeneficiaryCurrency string `json:"beneficiary_currency"`
	// The ID of the associated case.
	CaseId *int32 `json:"case_id,omitempty"`
	CreationTime time.Time `json:"creation_time"`
	// The customer UUID representing the person initiating the Wire transfer.
	CustomerId string `json:"customer_id"`
	// If the wire is declined after being successfully submitted, this field will contain a message explaining the reason for the decline.
	DeclineReason *string `json:"decline_reason,omitempty"`
	// The effective date of the transaction once it gets posted.
	EffectiveDate *string `json:"effective_date,omitempty"`
	// The exchange rate used for the wire transfer.
	FxExchangeRate *float32 `json:"fx_exchange_rate,omitempty"`
	// The ID of the international wire transfer.
	Id string `json:"id"`
	LastUpdatedTime time.Time `json:"last_updated_time"`
	// The maximum amount the sender is willing to pay for the wire transfer in case FX fluctuates, required if the quote type is 'estimate'.
	MaxAcceptedSenderCost *int32 `json:"max_accepted_sender_cost,omitempty"`
	// Additional transfer metadata structured as key-value pairs.
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// The network reference ID of the wire transfer.
	NetworkReferenceId *string `json:"network_reference_id,omitempty"`
	// The account uuid representing the sender of the wire.
	OriginatingAccountId string `json:"originating_account_id"`
	// The quote id returned from the /international_wire/quote endpoint, contains FX rate information. Required if the international wire is cross currency.
	QuoteId *string `json:"quote_id,omitempty"`
	// The external account uuid representing the recipient of the wire. Needs to be configured with international bank routing details (e.g. SWIFT code, refer to external accounts documentation).
	ReceivingAccountId string `json:"receiving_account_id"`
	// Debit amount to the wire sender, in cents ($100 would be 10000).
	SenderAmount int64 `json:"sender_amount"`
	// The currency of the sender's account in ISO4217 format.
	SenderCurrency string `json:"sender_currency"`
	Status InternationalWireStatus `json:"status"`
	// ID of the resulting transaction resource.
	TransactionId *string `json:"transaction_id,omitempty"`
	// Optional transaction instructions for the recipient bank if required by the recipient bank.
	WireInstruction *string `json:"wire_instruction,omitempty"`
	// Reason for the wire transfer.
	WirePurpose string `json:"wire_purpose"`
}

// NewInternationalWireResponse instantiates a new InternationalWireResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInternationalWireResponse(amountInBeneficiaryCurrency int64, beneficiaryCurrency string, creationTime time.Time, customerId string, id string, lastUpdatedTime time.Time, originatingAccountId string, receivingAccountId string, senderAmount int64, senderCurrency string, status InternationalWireStatus, wirePurpose string) *InternationalWireResponse {
	this := InternationalWireResponse{}
	this.AmountInBeneficiaryCurrency = amountInBeneficiaryCurrency
	this.BeneficiaryCurrency = beneficiaryCurrency
	this.CreationTime = creationTime
	this.CustomerId = customerId
	this.Id = id
	this.LastUpdatedTime = lastUpdatedTime
	this.OriginatingAccountId = originatingAccountId
	this.ReceivingAccountId = receivingAccountId
	this.SenderAmount = senderAmount
	this.SenderCurrency = senderCurrency
	this.Status = status
	this.WirePurpose = wirePurpose
	return &this
}

// NewInternationalWireResponseWithDefaults instantiates a new InternationalWireResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInternationalWireResponseWithDefaults() *InternationalWireResponse {
	this := InternationalWireResponse{}
	return &this
}

// GetAmountInBeneficiaryCurrency returns the AmountInBeneficiaryCurrency field value
func (o *InternationalWireResponse) GetAmountInBeneficiaryCurrency() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.AmountInBeneficiaryCurrency
}

// GetAmountInBeneficiaryCurrencyOk returns a tuple with the AmountInBeneficiaryCurrency field value
// and a boolean to check if the value has been set.
func (o *InternationalWireResponse) GetAmountInBeneficiaryCurrencyOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AmountInBeneficiaryCurrency, true
}

// SetAmountInBeneficiaryCurrency sets field value
func (o *InternationalWireResponse) SetAmountInBeneficiaryCurrency(v int64) {
	o.AmountInBeneficiaryCurrency = v
}

// GetBeneficiaryCurrency returns the BeneficiaryCurrency field value
func (o *InternationalWireResponse) GetBeneficiaryCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BeneficiaryCurrency
}

// GetBeneficiaryCurrencyOk returns a tuple with the BeneficiaryCurrency field value
// and a boolean to check if the value has been set.
func (o *InternationalWireResponse) GetBeneficiaryCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BeneficiaryCurrency, true
}

// SetBeneficiaryCurrency sets field value
func (o *InternationalWireResponse) SetBeneficiaryCurrency(v string) {
	o.BeneficiaryCurrency = v
}

// GetCaseId returns the CaseId field value if set, zero value otherwise.
func (o *InternationalWireResponse) GetCaseId() int32 {
	if o == nil || IsNil(o.CaseId) {
		var ret int32
		return ret
	}
	return *o.CaseId
}

// GetCaseIdOk returns a tuple with the CaseId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InternationalWireResponse) GetCaseIdOk() (*int32, bool) {
	if o == nil || IsNil(o.CaseId) {
		return nil, false
	}
	return o.CaseId, true
}

// HasCaseId returns a boolean if a field has been set.
func (o *InternationalWireResponse) HasCaseId() bool {
	if o != nil && !IsNil(o.CaseId) {
		return true
	}

	return false
}

// SetCaseId gets a reference to the given int32 and assigns it to the CaseId field.
func (o *InternationalWireResponse) SetCaseId(v int32) {
	o.CaseId = &v
}

// GetCreationTime returns the CreationTime field value
func (o *InternationalWireResponse) GetCreationTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreationTime
}

// GetCreationTimeOk returns a tuple with the CreationTime field value
// and a boolean to check if the value has been set.
func (o *InternationalWireResponse) GetCreationTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreationTime, true
}

// SetCreationTime sets field value
func (o *InternationalWireResponse) SetCreationTime(v time.Time) {
	o.CreationTime = v
}

// GetCustomerId returns the CustomerId field value
func (o *InternationalWireResponse) GetCustomerId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CustomerId
}

// GetCustomerIdOk returns a tuple with the CustomerId field value
// and a boolean to check if the value has been set.
func (o *InternationalWireResponse) GetCustomerIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CustomerId, true
}

// SetCustomerId sets field value
func (o *InternationalWireResponse) SetCustomerId(v string) {
	o.CustomerId = v
}

// GetDeclineReason returns the DeclineReason field value if set, zero value otherwise.
func (o *InternationalWireResponse) GetDeclineReason() string {
	if o == nil || IsNil(o.DeclineReason) {
		var ret string
		return ret
	}
	return *o.DeclineReason
}

// GetDeclineReasonOk returns a tuple with the DeclineReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InternationalWireResponse) GetDeclineReasonOk() (*string, bool) {
	if o == nil || IsNil(o.DeclineReason) {
		return nil, false
	}
	return o.DeclineReason, true
}

// HasDeclineReason returns a boolean if a field has been set.
func (o *InternationalWireResponse) HasDeclineReason() bool {
	if o != nil && !IsNil(o.DeclineReason) {
		return true
	}

	return false
}

// SetDeclineReason gets a reference to the given string and assigns it to the DeclineReason field.
func (o *InternationalWireResponse) SetDeclineReason(v string) {
	o.DeclineReason = &v
}

// GetEffectiveDate returns the EffectiveDate field value if set, zero value otherwise.
func (o *InternationalWireResponse) GetEffectiveDate() string {
	if o == nil || IsNil(o.EffectiveDate) {
		var ret string
		return ret
	}
	return *o.EffectiveDate
}

// GetEffectiveDateOk returns a tuple with the EffectiveDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InternationalWireResponse) GetEffectiveDateOk() (*string, bool) {
	if o == nil || IsNil(o.EffectiveDate) {
		return nil, false
	}
	return o.EffectiveDate, true
}

// HasEffectiveDate returns a boolean if a field has been set.
func (o *InternationalWireResponse) HasEffectiveDate() bool {
	if o != nil && !IsNil(o.EffectiveDate) {
		return true
	}

	return false
}

// SetEffectiveDate gets a reference to the given string and assigns it to the EffectiveDate field.
func (o *InternationalWireResponse) SetEffectiveDate(v string) {
	o.EffectiveDate = &v
}

// GetFxExchangeRate returns the FxExchangeRate field value if set, zero value otherwise.
func (o *InternationalWireResponse) GetFxExchangeRate() float32 {
	if o == nil || IsNil(o.FxExchangeRate) {
		var ret float32
		return ret
	}
	return *o.FxExchangeRate
}

// GetFxExchangeRateOk returns a tuple with the FxExchangeRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InternationalWireResponse) GetFxExchangeRateOk() (*float32, bool) {
	if o == nil || IsNil(o.FxExchangeRate) {
		return nil, false
	}
	return o.FxExchangeRate, true
}

// HasFxExchangeRate returns a boolean if a field has been set.
func (o *InternationalWireResponse) HasFxExchangeRate() bool {
	if o != nil && !IsNil(o.FxExchangeRate) {
		return true
	}

	return false
}

// SetFxExchangeRate gets a reference to the given float32 and assigns it to the FxExchangeRate field.
func (o *InternationalWireResponse) SetFxExchangeRate(v float32) {
	o.FxExchangeRate = &v
}

// GetId returns the Id field value
func (o *InternationalWireResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *InternationalWireResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *InternationalWireResponse) SetId(v string) {
	o.Id = v
}

// GetLastUpdatedTime returns the LastUpdatedTime field value
func (o *InternationalWireResponse) GetLastUpdatedTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.LastUpdatedTime
}

// GetLastUpdatedTimeOk returns a tuple with the LastUpdatedTime field value
// and a boolean to check if the value has been set.
func (o *InternationalWireResponse) GetLastUpdatedTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastUpdatedTime, true
}

// SetLastUpdatedTime sets field value
func (o *InternationalWireResponse) SetLastUpdatedTime(v time.Time) {
	o.LastUpdatedTime = v
}

// GetMaxAcceptedSenderCost returns the MaxAcceptedSenderCost field value if set, zero value otherwise.
func (o *InternationalWireResponse) GetMaxAcceptedSenderCost() int32 {
	if o == nil || IsNil(o.MaxAcceptedSenderCost) {
		var ret int32
		return ret
	}
	return *o.MaxAcceptedSenderCost
}

// GetMaxAcceptedSenderCostOk returns a tuple with the MaxAcceptedSenderCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InternationalWireResponse) GetMaxAcceptedSenderCostOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxAcceptedSenderCost) {
		return nil, false
	}
	return o.MaxAcceptedSenderCost, true
}

// HasMaxAcceptedSenderCost returns a boolean if a field has been set.
func (o *InternationalWireResponse) HasMaxAcceptedSenderCost() bool {
	if o != nil && !IsNil(o.MaxAcceptedSenderCost) {
		return true
	}

	return false
}

// SetMaxAcceptedSenderCost gets a reference to the given int32 and assigns it to the MaxAcceptedSenderCost field.
func (o *InternationalWireResponse) SetMaxAcceptedSenderCost(v int32) {
	o.MaxAcceptedSenderCost = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *InternationalWireResponse) GetMetadata() map[string]interface{} {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InternationalWireResponse) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Metadata) {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *InternationalWireResponse) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *InternationalWireResponse) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

// GetNetworkReferenceId returns the NetworkReferenceId field value if set, zero value otherwise.
func (o *InternationalWireResponse) GetNetworkReferenceId() string {
	if o == nil || IsNil(o.NetworkReferenceId) {
		var ret string
		return ret
	}
	return *o.NetworkReferenceId
}

// GetNetworkReferenceIdOk returns a tuple with the NetworkReferenceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InternationalWireResponse) GetNetworkReferenceIdOk() (*string, bool) {
	if o == nil || IsNil(o.NetworkReferenceId) {
		return nil, false
	}
	return o.NetworkReferenceId, true
}

// HasNetworkReferenceId returns a boolean if a field has been set.
func (o *InternationalWireResponse) HasNetworkReferenceId() bool {
	if o != nil && !IsNil(o.NetworkReferenceId) {
		return true
	}

	return false
}

// SetNetworkReferenceId gets a reference to the given string and assigns it to the NetworkReferenceId field.
func (o *InternationalWireResponse) SetNetworkReferenceId(v string) {
	o.NetworkReferenceId = &v
}

// GetOriginatingAccountId returns the OriginatingAccountId field value
func (o *InternationalWireResponse) GetOriginatingAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OriginatingAccountId
}

// GetOriginatingAccountIdOk returns a tuple with the OriginatingAccountId field value
// and a boolean to check if the value has been set.
func (o *InternationalWireResponse) GetOriginatingAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OriginatingAccountId, true
}

// SetOriginatingAccountId sets field value
func (o *InternationalWireResponse) SetOriginatingAccountId(v string) {
	o.OriginatingAccountId = v
}

// GetQuoteId returns the QuoteId field value if set, zero value otherwise.
func (o *InternationalWireResponse) GetQuoteId() string {
	if o == nil || IsNil(o.QuoteId) {
		var ret string
		return ret
	}
	return *o.QuoteId
}

// GetQuoteIdOk returns a tuple with the QuoteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InternationalWireResponse) GetQuoteIdOk() (*string, bool) {
	if o == nil || IsNil(o.QuoteId) {
		return nil, false
	}
	return o.QuoteId, true
}

// HasQuoteId returns a boolean if a field has been set.
func (o *InternationalWireResponse) HasQuoteId() bool {
	if o != nil && !IsNil(o.QuoteId) {
		return true
	}

	return false
}

// SetQuoteId gets a reference to the given string and assigns it to the QuoteId field.
func (o *InternationalWireResponse) SetQuoteId(v string) {
	o.QuoteId = &v
}

// GetReceivingAccountId returns the ReceivingAccountId field value
func (o *InternationalWireResponse) GetReceivingAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReceivingAccountId
}

// GetReceivingAccountIdOk returns a tuple with the ReceivingAccountId field value
// and a boolean to check if the value has been set.
func (o *InternationalWireResponse) GetReceivingAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReceivingAccountId, true
}

// SetReceivingAccountId sets field value
func (o *InternationalWireResponse) SetReceivingAccountId(v string) {
	o.ReceivingAccountId = v
}

// GetSenderAmount returns the SenderAmount field value
func (o *InternationalWireResponse) GetSenderAmount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.SenderAmount
}

// GetSenderAmountOk returns a tuple with the SenderAmount field value
// and a boolean to check if the value has been set.
func (o *InternationalWireResponse) GetSenderAmountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SenderAmount, true
}

// SetSenderAmount sets field value
func (o *InternationalWireResponse) SetSenderAmount(v int64) {
	o.SenderAmount = v
}

// GetSenderCurrency returns the SenderCurrency field value
func (o *InternationalWireResponse) GetSenderCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SenderCurrency
}

// GetSenderCurrencyOk returns a tuple with the SenderCurrency field value
// and a boolean to check if the value has been set.
func (o *InternationalWireResponse) GetSenderCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SenderCurrency, true
}

// SetSenderCurrency sets field value
func (o *InternationalWireResponse) SetSenderCurrency(v string) {
	o.SenderCurrency = v
}

// GetStatus returns the Status field value
func (o *InternationalWireResponse) GetStatus() InternationalWireStatus {
	if o == nil {
		var ret InternationalWireStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *InternationalWireResponse) GetStatusOk() (*InternationalWireStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *InternationalWireResponse) SetStatus(v InternationalWireStatus) {
	o.Status = v
}

// GetTransactionId returns the TransactionId field value if set, zero value otherwise.
func (o *InternationalWireResponse) GetTransactionId() string {
	if o == nil || IsNil(o.TransactionId) {
		var ret string
		return ret
	}
	return *o.TransactionId
}

// GetTransactionIdOk returns a tuple with the TransactionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InternationalWireResponse) GetTransactionIdOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionId) {
		return nil, false
	}
	return o.TransactionId, true
}

// HasTransactionId returns a boolean if a field has been set.
func (o *InternationalWireResponse) HasTransactionId() bool {
	if o != nil && !IsNil(o.TransactionId) {
		return true
	}

	return false
}

// SetTransactionId gets a reference to the given string and assigns it to the TransactionId field.
func (o *InternationalWireResponse) SetTransactionId(v string) {
	o.TransactionId = &v
}

// GetWireInstruction returns the WireInstruction field value if set, zero value otherwise.
func (o *InternationalWireResponse) GetWireInstruction() string {
	if o == nil || IsNil(o.WireInstruction) {
		var ret string
		return ret
	}
	return *o.WireInstruction
}

// GetWireInstructionOk returns a tuple with the WireInstruction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InternationalWireResponse) GetWireInstructionOk() (*string, bool) {
	if o == nil || IsNil(o.WireInstruction) {
		return nil, false
	}
	return o.WireInstruction, true
}

// HasWireInstruction returns a boolean if a field has been set.
func (o *InternationalWireResponse) HasWireInstruction() bool {
	if o != nil && !IsNil(o.WireInstruction) {
		return true
	}

	return false
}

// SetWireInstruction gets a reference to the given string and assigns it to the WireInstruction field.
func (o *InternationalWireResponse) SetWireInstruction(v string) {
	o.WireInstruction = &v
}

// GetWirePurpose returns the WirePurpose field value
func (o *InternationalWireResponse) GetWirePurpose() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WirePurpose
}

// GetWirePurposeOk returns a tuple with the WirePurpose field value
// and a boolean to check if the value has been set.
func (o *InternationalWireResponse) GetWirePurposeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WirePurpose, true
}

// SetWirePurpose sets field value
func (o *InternationalWireResponse) SetWirePurpose(v string) {
	o.WirePurpose = v
}

func (o InternationalWireResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InternationalWireResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["amount_in_beneficiary_currency"] = o.AmountInBeneficiaryCurrency
	toSerialize["beneficiary_currency"] = o.BeneficiaryCurrency
	if !IsNil(o.CaseId) {
		toSerialize["case_id"] = o.CaseId
	}
	toSerialize["creation_time"] = o.CreationTime
	toSerialize["customer_id"] = o.CustomerId
	if !IsNil(o.DeclineReason) {
		toSerialize["decline_reason"] = o.DeclineReason
	}
	if !IsNil(o.EffectiveDate) {
		toSerialize["effective_date"] = o.EffectiveDate
	}
	if !IsNil(o.FxExchangeRate) {
		toSerialize["fx_exchange_rate"] = o.FxExchangeRate
	}
	toSerialize["id"] = o.Id
	toSerialize["last_updated_time"] = o.LastUpdatedTime
	if !IsNil(o.MaxAcceptedSenderCost) {
		toSerialize["max_accepted_sender_cost"] = o.MaxAcceptedSenderCost
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.NetworkReferenceId) {
		toSerialize["network_reference_id"] = o.NetworkReferenceId
	}
	toSerialize["originating_account_id"] = o.OriginatingAccountId
	if !IsNil(o.QuoteId) {
		toSerialize["quote_id"] = o.QuoteId
	}
	toSerialize["receiving_account_id"] = o.ReceivingAccountId
	toSerialize["sender_amount"] = o.SenderAmount
	toSerialize["sender_currency"] = o.SenderCurrency
	toSerialize["status"] = o.Status
	if !IsNil(o.TransactionId) {
		toSerialize["transaction_id"] = o.TransactionId
	}
	if !IsNil(o.WireInstruction) {
		toSerialize["wire_instruction"] = o.WireInstruction
	}
	toSerialize["wire_purpose"] = o.WirePurpose
	return toSerialize, nil
}

type NullableInternationalWireResponse struct {
	value *InternationalWireResponse
	isSet bool
}

func (v NullableInternationalWireResponse) Get() *InternationalWireResponse {
	return v.value
}

func (v *NullableInternationalWireResponse) Set(val *InternationalWireResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableInternationalWireResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableInternationalWireResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInternationalWireResponse(val *InternationalWireResponse) *NullableInternationalWireResponse {
	return &NullableInternationalWireResponse{value: val, isSet: true}
}

func (v NullableInternationalWireResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInternationalWireResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


