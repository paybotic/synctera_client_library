/*
Synctera API

This is the official reference documentation for Synctera APIs. If you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact-us' target='_blank' rel='noreferrer'>contact us</a>.</p>

API version: 0.140.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// DocumentType The type of the document. The type can be changed after the document is created, except that a non-encrypted document cannot be changed to a type that requires encryption.
type DocumentType string

// List of document_type
const (
	DOCUMENTTYPE_ADDRESS_VERIFICATION       DocumentType = "ADDRESS_VERIFICATION"
	DOCUMENTTYPE_APPLICATION_DOCUMENTATION  DocumentType = "APPLICATION_DOCUMENTATION"
	DOCUMENTTYPE_BILLING_DOCUMENT           DocumentType = "BILLING_DOCUMENT"
	DOCUMENTTYPE_CHECK_IMAGE                DocumentType = "CHECK_IMAGE"
	DOCUMENTTYPE_COMPANY_PROFILE_DOCUMENT   DocumentType = "COMPANY_PROFILE_DOCUMENT"
	DOCUMENTTYPE_COMPLIANCE_REPORT          DocumentType = "COMPLIANCE_REPORT"
	DOCUMENTTYPE_DATE_OF_BIRTH_VERIFICATION DocumentType = "DATE_OF_BIRTH_VERIFICATION"
	DOCUMENTTYPE_FINANCIAL_FILE             DocumentType = "FINANCIAL_FILE"
	DOCUMENTTYPE_IDENTITY_DOCUMENTATION     DocumentType = "IDENTITY_DOCUMENTATION"
	DOCUMENTTYPE_INCOME_DOCUMENTATION       DocumentType = "INCOME_DOCUMENTATION"
	DOCUMENTTYPE_STATEMENT                  DocumentType = "STATEMENT"
	DOCUMENTTYPE_STATEMENT_DISCLOSURE       DocumentType = "STATEMENT_DISCLOSURE"
	DOCUMENTTYPE_TAX_FORM                   DocumentType = "TAX_FORM"
	DOCUMENTTYPE_TERMS_OF_SERVICE           DocumentType = "TERMS_OF_SERVICE"
)

// All allowed values of DocumentType enum
var AllowedDocumentTypeEnumValues = []DocumentType{
	"ADDRESS_VERIFICATION",
	"APPLICATION_DOCUMENTATION",
	"BILLING_DOCUMENT",
	"CHECK_IMAGE",
	"COMPANY_PROFILE_DOCUMENT",
	"COMPLIANCE_REPORT",
	"DATE_OF_BIRTH_VERIFICATION",
	"FINANCIAL_FILE",
	"IDENTITY_DOCUMENTATION",
	"INCOME_DOCUMENTATION",
	"STATEMENT",
	"STATEMENT_DISCLOSURE",
	"TAX_FORM",
	"TERMS_OF_SERVICE",
}

func (v *DocumentType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DocumentType(value)
	for _, existing := range AllowedDocumentTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DocumentType", value)
}

// NewDocumentTypeFromValue returns a pointer to a valid DocumentType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDocumentTypeFromValue(v string) (*DocumentType, error) {
	ev := DocumentType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DocumentType: valid values are %v", v, AllowedDocumentTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DocumentType) IsValid() bool {
	for _, existing := range AllowedDocumentTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to document_type value
func (v DocumentType) Ptr() *DocumentType {
	return &v
}

type NullableDocumentType struct {
	value *DocumentType
	isSet bool
}

func (v NullableDocumentType) Get() *DocumentType {
	return v.value
}

func (v *NullableDocumentType) Set(val *DocumentType) {
	v.value = val
	v.isSet = true
}

func (v NullableDocumentType) IsSet() bool {
	return v.isSet
}

func (v *NullableDocumentType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocumentType(val *DocumentType) *NullableDocumentType {
	return &NullableDocumentType{value: val, isSet: true}
}

func (v NullableDocumentType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocumentType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
